/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef gateway_soul_protocol_TYPES_H
#define gateway_soul_protocol_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "gateway_protocol_types.h"
#include "soul_types.h"
#include "vocation_types.h"


namespace gateway { namespace protocol {

struct SoulAltarCardOperateType {
  enum type {
    ADD = 0,
    UPDATE = 1,
    CLEAR = 2
  };
};

extern const std::map<int, const char*> _SoulAltarCardOperateType_VALUES_TO_NAMES;


class MessageSoulInitialize {
 public:

  static const char* ascii_fingerprint; // = "7CE30C457A4843A67A1B576A4FA60235";
  static const uint8_t binary_fingerprint[16]; // = {0x7C,0xE3,0x0C,0x45,0x7A,0x48,0x43,0xA6,0x7A,0x1B,0x57,0x6A,0x4F,0xA6,0x02,0x35};

  MessageSoulInitialize() : axe_group_(0), shoot_group_(0), magic_group_(0) {
  }

  virtual ~MessageSoulInitialize() throw() {}

  std::vector< ::entity::SoulField>  souls_;
  std::vector< ::entity::SoulSettingField>  settings_;
  int32_t axe_group_;
  int32_t shoot_group_;
  int32_t magic_group_;

  void __set_souls_(const std::vector< ::entity::SoulField> & val) {
    souls_ = val;
  }

  void __set_settings_(const std::vector< ::entity::SoulSettingField> & val) {
    settings_ = val;
  }

  void __set_axe_group_(const int32_t val) {
    axe_group_ = val;
  }

  void __set_shoot_group_(const int32_t val) {
    shoot_group_ = val;
  }

  void __set_magic_group_(const int32_t val) {
    magic_group_ = val;
  }

  bool operator == (const MessageSoulInitialize & rhs) const
  {
    if (!(souls_ == rhs.souls_))
      return false;
    if (!(settings_ == rhs.settings_))
      return false;
    if (!(axe_group_ == rhs.axe_group_))
      return false;
    if (!(shoot_group_ == rhs.shoot_group_))
      return false;
    if (!(magic_group_ == rhs.magic_group_))
      return false;
    return true;
  }
  bool operator != (const MessageSoulInitialize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSoulInitialize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSoulInitialize &a, MessageSoulInitialize &b);


class MessageSoulSynchronize {
 public:

  static const char* ascii_fingerprint; // = "47FCC482242A9FAF03ED744C761305CB";
  static const uint8_t binary_fingerprint[16]; // = {0x47,0xFC,0xC4,0x82,0x24,0x2A,0x9F,0xAF,0x03,0xED,0x74,0x4C,0x76,0x13,0x05,0xCB};

  MessageSoulSynchronize() {
  }

  virtual ~MessageSoulSynchronize() throw() {}

   ::entity::SoulField soul_;

  void __set_soul_(const  ::entity::SoulField& val) {
    soul_ = val;
  }

  bool operator == (const MessageSoulSynchronize & rhs) const
  {
    if (!(soul_ == rhs.soul_))
      return false;
    return true;
  }
  bool operator != (const MessageSoulSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSoulSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSoulSynchronize &a, MessageSoulSynchronize &b);


class MessageSoulUnlockRequest {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MessageSoulUnlockRequest() : soul_id_(0) {
  }

  virtual ~MessageSoulUnlockRequest() throw() {}

  int32_t soul_id_;

  void __set_soul_id_(const int32_t val) {
    soul_id_ = val;
  }

  bool operator == (const MessageSoulUnlockRequest & rhs) const
  {
    if (!(soul_id_ == rhs.soul_id_))
      return false;
    return true;
  }
  bool operator != (const MessageSoulUnlockRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSoulUnlockRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSoulUnlockRequest &a, MessageSoulUnlockRequest &b);

typedef struct _MessageSoulUnlockResponse__isset {
  _MessageSoulUnlockResponse__isset() : soul_id_(false) {}
  bool soul_id_;
} _MessageSoulUnlockResponse__isset;

class MessageSoulUnlockResponse {
 public:

  static const char* ascii_fingerprint; // = "3409A6BAF48299E7727EECFEBEC3BDA9";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0x09,0xA6,0xBA,0xF4,0x82,0x99,0xE7,0x72,0x7E,0xEC,0xFE,0xBE,0xC3,0xBD,0xA9};

  MessageSoulUnlockResponse() : result_(0), soul_id_(0) {
  }

  virtual ~MessageSoulUnlockResponse() throw() {}

  bool result_;
  int32_t soul_id_;

  _MessageSoulUnlockResponse__isset __isset;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_soul_id_(const int32_t val) {
    soul_id_ = val;
    __isset.soul_id_ = true;
  }

  bool operator == (const MessageSoulUnlockResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.soul_id_ != rhs.__isset.soul_id_)
      return false;
    else if (__isset.soul_id_ && !(soul_id_ == rhs.soul_id_))
      return false;
    return true;
  }
  bool operator != (const MessageSoulUnlockResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSoulUnlockResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSoulUnlockResponse &a, MessageSoulUnlockResponse &b);


class MessageSoulUpgradeStepRequest {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MessageSoulUpgradeStepRequest() : soul_id_(0) {
  }

  virtual ~MessageSoulUpgradeStepRequest() throw() {}

  int32_t soul_id_;

  void __set_soul_id_(const int32_t val) {
    soul_id_ = val;
  }

  bool operator == (const MessageSoulUpgradeStepRequest & rhs) const
  {
    if (!(soul_id_ == rhs.soul_id_))
      return false;
    return true;
  }
  bool operator != (const MessageSoulUpgradeStepRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSoulUpgradeStepRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSoulUpgradeStepRequest &a, MessageSoulUpgradeStepRequest &b);

typedef struct _MessageSoulUpgradeStepResponse__isset {
  _MessageSoulUpgradeStepResponse__isset() : soul_id_(false) {}
  bool soul_id_;
} _MessageSoulUpgradeStepResponse__isset;

class MessageSoulUpgradeStepResponse {
 public:

  static const char* ascii_fingerprint; // = "3409A6BAF48299E7727EECFEBEC3BDA9";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0x09,0xA6,0xBA,0xF4,0x82,0x99,0xE7,0x72,0x7E,0xEC,0xFE,0xBE,0xC3,0xBD,0xA9};

  MessageSoulUpgradeStepResponse() : result_(0), soul_id_(0) {
  }

  virtual ~MessageSoulUpgradeStepResponse() throw() {}

  bool result_;
  int32_t soul_id_;

  _MessageSoulUpgradeStepResponse__isset __isset;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_soul_id_(const int32_t val) {
    soul_id_ = val;
    __isset.soul_id_ = true;
  }

  bool operator == (const MessageSoulUpgradeStepResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.soul_id_ != rhs.__isset.soul_id_)
      return false;
    else if (__isset.soul_id_ && !(soul_id_ == rhs.soul_id_))
      return false;
    return true;
  }
  bool operator != (const MessageSoulUpgradeStepResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSoulUpgradeStepResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSoulUpgradeStepResponse &a, MessageSoulUpgradeStepResponse &b);


class MessageSoulUpgradeLevelRequest {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MessageSoulUpgradeLevelRequest() : soul_id_(0) {
  }

  virtual ~MessageSoulUpgradeLevelRequest() throw() {}

  int32_t soul_id_;

  void __set_soul_id_(const int32_t val) {
    soul_id_ = val;
  }

  bool operator == (const MessageSoulUpgradeLevelRequest & rhs) const
  {
    if (!(soul_id_ == rhs.soul_id_))
      return false;
    return true;
  }
  bool operator != (const MessageSoulUpgradeLevelRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSoulUpgradeLevelRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSoulUpgradeLevelRequest &a, MessageSoulUpgradeLevelRequest &b);


class MessageSoulUpgradeLevelResponse {
 public:

  static const char* ascii_fingerprint; // = "88440F45A63E63607868B983E4E50558";
  static const uint8_t binary_fingerprint[16]; // = {0x88,0x44,0x0F,0x45,0xA6,0x3E,0x63,0x60,0x78,0x68,0xB9,0x83,0xE4,0xE5,0x05,0x58};

  MessageSoulUpgradeLevelResponse() : result_(0), soul_id_(0) {
  }

  virtual ~MessageSoulUpgradeLevelResponse() throw() {}

  bool result_;
  int32_t soul_id_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_soul_id_(const int32_t val) {
    soul_id_ = val;
  }

  bool operator == (const MessageSoulUpgradeLevelResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (!(soul_id_ == rhs.soul_id_))
      return false;
    return true;
  }
  bool operator != (const MessageSoulUpgradeLevelResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSoulUpgradeLevelResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSoulUpgradeLevelResponse &a, MessageSoulUpgradeLevelResponse &b);


class MessageSoulSetRequest {
 public:

  static const char* ascii_fingerprint; // = "8BE89990D59E890F6D17E8BDDA4137FB";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xE8,0x99,0x90,0xD5,0x9E,0x89,0x0F,0x6D,0x17,0xE8,0xBD,0xDA,0x41,0x37,0xFB};

  MessageSoulSetRequest() : vocation_(( ::entity::VocationType::type)0), group_(0), soul_id_(0), position_(0) {
  }

  virtual ~MessageSoulSetRequest() throw() {}

   ::entity::VocationType::type vocation_;
  int32_t group_;
  int32_t soul_id_;
  int32_t position_;

  void __set_vocation_(const  ::entity::VocationType::type val) {
    vocation_ = val;
  }

  void __set_group_(const int32_t val) {
    group_ = val;
  }

  void __set_soul_id_(const int32_t val) {
    soul_id_ = val;
  }

  void __set_position_(const int32_t val) {
    position_ = val;
  }

  bool operator == (const MessageSoulSetRequest & rhs) const
  {
    if (!(vocation_ == rhs.vocation_))
      return false;
    if (!(group_ == rhs.group_))
      return false;
    if (!(soul_id_ == rhs.soul_id_))
      return false;
    if (!(position_ == rhs.position_))
      return false;
    return true;
  }
  bool operator != (const MessageSoulSetRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSoulSetRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSoulSetRequest &a, MessageSoulSetRequest &b);

typedef struct _MessageSoulSetResponse__isset {
  _MessageSoulSetResponse__isset() : vocation_(false), group_(false), soul_id_(false) {}
  bool vocation_;
  bool group_;
  bool soul_id_;
} _MessageSoulSetResponse__isset;

class MessageSoulSetResponse {
 public:

  static const char* ascii_fingerprint; // = "723BF79B1177820923F1BF22E1F3F0CC";
  static const uint8_t binary_fingerprint[16]; // = {0x72,0x3B,0xF7,0x9B,0x11,0x77,0x82,0x09,0x23,0xF1,0xBF,0x22,0xE1,0xF3,0xF0,0xCC};

  MessageSoulSetResponse() : result_(0), vocation_(( ::entity::VocationType::type)0), group_(0), soul_id_(0), position_(0) {
  }

  virtual ~MessageSoulSetResponse() throw() {}

  bool result_;
   ::entity::VocationType::type vocation_;
  int32_t group_;
  int32_t soul_id_;
  int32_t position_;

  _MessageSoulSetResponse__isset __isset;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_vocation_(const  ::entity::VocationType::type val) {
    vocation_ = val;
    __isset.vocation_ = true;
  }

  void __set_group_(const int32_t val) {
    group_ = val;
    __isset.group_ = true;
  }

  void __set_soul_id_(const int32_t val) {
    soul_id_ = val;
    __isset.soul_id_ = true;
  }

  void __set_position_(const int32_t val) {
    position_ = val;
  }

  bool operator == (const MessageSoulSetResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.vocation_ != rhs.__isset.vocation_)
      return false;
    else if (__isset.vocation_ && !(vocation_ == rhs.vocation_))
      return false;
    if (__isset.group_ != rhs.__isset.group_)
      return false;
    else if (__isset.group_ && !(group_ == rhs.group_))
      return false;
    if (__isset.soul_id_ != rhs.__isset.soul_id_)
      return false;
    else if (__isset.soul_id_ && !(soul_id_ == rhs.soul_id_))
      return false;
    if (!(position_ == rhs.position_))
      return false;
    return true;
  }
  bool operator != (const MessageSoulSetResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSoulSetResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSoulSetResponse &a, MessageSoulSetResponse &b);


class MessageSoulResetRequest {
 public:

  static const char* ascii_fingerprint; // = "9177E894815163D920ECC1A1CE512CD8";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x77,0xE8,0x94,0x81,0x51,0x63,0xD9,0x20,0xEC,0xC1,0xA1,0xCE,0x51,0x2C,0xD8};

  MessageSoulResetRequest() : vocation_(( ::entity::VocationType::type)0), group_(0), position_(0) {
  }

  virtual ~MessageSoulResetRequest() throw() {}

   ::entity::VocationType::type vocation_;
  int32_t group_;
  int32_t position_;

  void __set_vocation_(const  ::entity::VocationType::type val) {
    vocation_ = val;
  }

  void __set_group_(const int32_t val) {
    group_ = val;
  }

  void __set_position_(const int32_t val) {
    position_ = val;
  }

  bool operator == (const MessageSoulResetRequest & rhs) const
  {
    if (!(vocation_ == rhs.vocation_))
      return false;
    if (!(group_ == rhs.group_))
      return false;
    if (!(position_ == rhs.position_))
      return false;
    return true;
  }
  bool operator != (const MessageSoulResetRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSoulResetRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSoulResetRequest &a, MessageSoulResetRequest &b);

typedef struct _MessageSoulResetResponse__isset {
  _MessageSoulResetResponse__isset() : vocation_(false), group_(false), position_(false) {}
  bool vocation_;
  bool group_;
  bool position_;
} _MessageSoulResetResponse__isset;

class MessageSoulResetResponse {
 public:

  static const char* ascii_fingerprint; // = "15547C1A83A2A2FD446D04EE92697362";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0x54,0x7C,0x1A,0x83,0xA2,0xA2,0xFD,0x44,0x6D,0x04,0xEE,0x92,0x69,0x73,0x62};

  MessageSoulResetResponse() : result_(0), vocation_(( ::entity::VocationType::type)0), group_(0), position_(0) {
  }

  virtual ~MessageSoulResetResponse() throw() {}

  bool result_;
   ::entity::VocationType::type vocation_;
  int32_t group_;
  int32_t position_;

  _MessageSoulResetResponse__isset __isset;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_vocation_(const  ::entity::VocationType::type val) {
    vocation_ = val;
    __isset.vocation_ = true;
  }

  void __set_group_(const int32_t val) {
    group_ = val;
    __isset.group_ = true;
  }

  void __set_position_(const int32_t val) {
    position_ = val;
    __isset.position_ = true;
  }

  bool operator == (const MessageSoulResetResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.vocation_ != rhs.__isset.vocation_)
      return false;
    else if (__isset.vocation_ && !(vocation_ == rhs.vocation_))
      return false;
    if (__isset.group_ != rhs.__isset.group_)
      return false;
    else if (__isset.group_ && !(group_ == rhs.group_))
      return false;
    if (__isset.position_ != rhs.__isset.position_)
      return false;
    else if (__isset.position_ && !(position_ == rhs.position_))
      return false;
    return true;
  }
  bool operator != (const MessageSoulResetResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSoulResetResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSoulResetResponse &a, MessageSoulResetResponse &b);


class MessageSoulSettingStandRequest {
 public:

  static const char* ascii_fingerprint; // = "46A703A33337BED2F62F386FC66B2A5F";
  static const uint8_t binary_fingerprint[16]; // = {0x46,0xA7,0x03,0xA3,0x33,0x37,0xBE,0xD2,0xF6,0x2F,0x38,0x6F,0xC6,0x6B,0x2A,0x5F};

  MessageSoulSettingStandRequest() : vocation_(( ::entity::VocationType::type)0), group_(0) {
  }

  virtual ~MessageSoulSettingStandRequest() throw() {}

   ::entity::VocationType::type vocation_;
  int32_t group_;

  void __set_vocation_(const  ::entity::VocationType::type val) {
    vocation_ = val;
  }

  void __set_group_(const int32_t val) {
    group_ = val;
  }

  bool operator == (const MessageSoulSettingStandRequest & rhs) const
  {
    if (!(vocation_ == rhs.vocation_))
      return false;
    if (!(group_ == rhs.group_))
      return false;
    return true;
  }
  bool operator != (const MessageSoulSettingStandRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSoulSettingStandRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSoulSettingStandRequest &a, MessageSoulSettingStandRequest &b);

typedef struct _MessageSoulSettingStandResponse__isset {
  _MessageSoulSettingStandResponse__isset() : vocation_(false), group_(false) {}
  bool vocation_;
  bool group_;
} _MessageSoulSettingStandResponse__isset;

class MessageSoulSettingStandResponse {
 public:

  static const char* ascii_fingerprint; // = "D6A0F418C1E51DA0BD4026CA4D82A339";
  static const uint8_t binary_fingerprint[16]; // = {0xD6,0xA0,0xF4,0x18,0xC1,0xE5,0x1D,0xA0,0xBD,0x40,0x26,0xCA,0x4D,0x82,0xA3,0x39};

  MessageSoulSettingStandResponse() : result_(0), vocation_(( ::entity::VocationType::type)0), group_(0) {
  }

  virtual ~MessageSoulSettingStandResponse() throw() {}

  bool result_;
   ::entity::VocationType::type vocation_;
  int32_t group_;

  _MessageSoulSettingStandResponse__isset __isset;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_vocation_(const  ::entity::VocationType::type val) {
    vocation_ = val;
    __isset.vocation_ = true;
  }

  void __set_group_(const int32_t val) {
    group_ = val;
    __isset.group_ = true;
  }

  bool operator == (const MessageSoulSettingStandResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.vocation_ != rhs.__isset.vocation_)
      return false;
    else if (__isset.vocation_ && !(vocation_ == rhs.vocation_))
      return false;
    if (__isset.group_ != rhs.__isset.group_)
      return false;
    else if (__isset.group_ && !(group_ == rhs.group_))
      return false;
    return true;
  }
  bool operator != (const MessageSoulSettingStandResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSoulSettingStandResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSoulSettingStandResponse &a, MessageSoulSettingStandResponse &b);

typedef struct _SoulAltarCardData__isset {
  _SoulAltarCardData__isset() : card_id_(false), exist_(false) {}
  bool card_id_;
  bool exist_;
} _SoulAltarCardData__isset;

class SoulAltarCardData {
 public:

  static const char* ascii_fingerprint; // = "5F23756BD6446EDCA8AB6C0EF1027AD3";
  static const uint8_t binary_fingerprint[16]; // = {0x5F,0x23,0x75,0x6B,0xD6,0x44,0x6E,0xDC,0xA8,0xAB,0x6C,0x0E,0xF1,0x02,0x7A,0xD3};

  SoulAltarCardData() : card_pos_(0), card_id_(0), exist_(0) {
  }

  virtual ~SoulAltarCardData() throw() {}

  int32_t card_pos_;
  int32_t card_id_;
  bool exist_;

  _SoulAltarCardData__isset __isset;

  void __set_card_pos_(const int32_t val) {
    card_pos_ = val;
  }

  void __set_card_id_(const int32_t val) {
    card_id_ = val;
    __isset.card_id_ = true;
  }

  void __set_exist_(const bool val) {
    exist_ = val;
    __isset.exist_ = true;
  }

  bool operator == (const SoulAltarCardData & rhs) const
  {
    if (!(card_pos_ == rhs.card_pos_))
      return false;
    if (__isset.card_id_ != rhs.__isset.card_id_)
      return false;
    else if (__isset.card_id_ && !(card_id_ == rhs.card_id_))
      return false;
    if (__isset.exist_ != rhs.__isset.exist_)
      return false;
    else if (__isset.exist_ && !(exist_ == rhs.exist_))
      return false;
    return true;
  }
  bool operator != (const SoulAltarCardData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SoulAltarCardData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SoulAltarCardData &a, SoulAltarCardData &b);


class MessageSoulAltarInitialize {
 public:

  static const char* ascii_fingerprint; // = "ABD188F9D2960E37F304433B00B95BB8";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0xD1,0x88,0xF9,0xD2,0x96,0x0E,0x37,0xF3,0x04,0x43,0x3B,0x00,0xB9,0x5B,0xB8};

  MessageSoulAltarInitialize() : summon_paid_(0), free_summon_times_(0) {
  }

  virtual ~MessageSoulAltarInitialize() throw() {}

  bool summon_paid_;
  int32_t free_summon_times_;
  std::vector<SoulAltarCardData>  cards_;

  void __set_summon_paid_(const bool val) {
    summon_paid_ = val;
  }

  void __set_free_summon_times_(const int32_t val) {
    free_summon_times_ = val;
  }

  void __set_cards_(const std::vector<SoulAltarCardData> & val) {
    cards_ = val;
  }

  bool operator == (const MessageSoulAltarInitialize & rhs) const
  {
    if (!(summon_paid_ == rhs.summon_paid_))
      return false;
    if (!(free_summon_times_ == rhs.free_summon_times_))
      return false;
    if (!(cards_ == rhs.cards_))
      return false;
    return true;
  }
  bool operator != (const MessageSoulAltarInitialize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSoulAltarInitialize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSoulAltarInitialize &a, MessageSoulAltarInitialize &b);

typedef struct _MessageSoulAltarSynchronize__isset {
  _MessageSoulAltarSynchronize__isset() : summon_paid_(false), free_summon_times_(false) {}
  bool summon_paid_;
  bool free_summon_times_;
} _MessageSoulAltarSynchronize__isset;

class MessageSoulAltarSynchronize {
 public:

  static const char* ascii_fingerprint; // = "65BE1B8735A75E17E15456B545C91C46";
  static const uint8_t binary_fingerprint[16]; // = {0x65,0xBE,0x1B,0x87,0x35,0xA7,0x5E,0x17,0xE1,0x54,0x56,0xB5,0x45,0xC9,0x1C,0x46};

  MessageSoulAltarSynchronize() : summon_paid_(0), free_summon_times_(0) {
  }

  virtual ~MessageSoulAltarSynchronize() throw() {}

  bool summon_paid_;
  int32_t free_summon_times_;

  _MessageSoulAltarSynchronize__isset __isset;

  void __set_summon_paid_(const bool val) {
    summon_paid_ = val;
    __isset.summon_paid_ = true;
  }

  void __set_free_summon_times_(const int32_t val) {
    free_summon_times_ = val;
    __isset.free_summon_times_ = true;
  }

  bool operator == (const MessageSoulAltarSynchronize & rhs) const
  {
    if (__isset.summon_paid_ != rhs.__isset.summon_paid_)
      return false;
    else if (__isset.summon_paid_ && !(summon_paid_ == rhs.summon_paid_))
      return false;
    if (__isset.free_summon_times_ != rhs.__isset.free_summon_times_)
      return false;
    else if (__isset.free_summon_times_ && !(free_summon_times_ == rhs.free_summon_times_))
      return false;
    return true;
  }
  bool operator != (const MessageSoulAltarSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSoulAltarSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSoulAltarSynchronize &a, MessageSoulAltarSynchronize &b);


class MessageSoulAltarCardSynchronize {
 public:

  static const char* ascii_fingerprint; // = "26C482985A3334E4AACF43C5D13C77C1";
  static const uint8_t binary_fingerprint[16]; // = {0x26,0xC4,0x82,0x98,0x5A,0x33,0x34,0xE4,0xAA,0xCF,0x43,0xC5,0xD1,0x3C,0x77,0xC1};

  MessageSoulAltarCardSynchronize() : type_((SoulAltarCardOperateType::type)0) {
  }

  virtual ~MessageSoulAltarCardSynchronize() throw() {}

  SoulAltarCardOperateType::type type_;
  SoulAltarCardData data_;

  void __set_type_(const SoulAltarCardOperateType::type val) {
    type_ = val;
  }

  void __set_data_(const SoulAltarCardData& val) {
    data_ = val;
  }

  bool operator == (const MessageSoulAltarCardSynchronize & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(data_ == rhs.data_))
      return false;
    return true;
  }
  bool operator != (const MessageSoulAltarCardSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSoulAltarCardSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSoulAltarCardSynchronize &a, MessageSoulAltarCardSynchronize &b);

typedef struct _MessageSoulAltarSummonRequest__isset {
  _MessageSoulAltarSummonRequest__isset() : bind_(false) {}
  bool bind_;
} _MessageSoulAltarSummonRequest__isset;

class MessageSoulAltarSummonRequest {
 public:

  static const char* ascii_fingerprint; // = "BF054652DEF86253C2BEE7D947F167DD";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0x05,0x46,0x52,0xDE,0xF8,0x62,0x53,0xC2,0xBE,0xE7,0xD9,0x47,0xF1,0x67,0xDD};

  MessageSoulAltarSummonRequest() : bind_(0) {
  }

  virtual ~MessageSoulAltarSummonRequest() throw() {}

  bool bind_;

  _MessageSoulAltarSummonRequest__isset __isset;

  void __set_bind_(const bool val) {
    bind_ = val;
    __isset.bind_ = true;
  }

  bool operator == (const MessageSoulAltarSummonRequest & rhs) const
  {
    if (__isset.bind_ != rhs.__isset.bind_)
      return false;
    else if (__isset.bind_ && !(bind_ == rhs.bind_))
      return false;
    return true;
  }
  bool operator != (const MessageSoulAltarSummonRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSoulAltarSummonRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSoulAltarSummonRequest &a, MessageSoulAltarSummonRequest &b);


class MessageSoulAltarSummonResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageSoulAltarSummonResponse() : result_(0) {
  }

  virtual ~MessageSoulAltarSummonResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageSoulAltarSummonResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageSoulAltarSummonResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSoulAltarSummonResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSoulAltarSummonResponse &a, MessageSoulAltarSummonResponse &b);


class MessageSoulAltarTakeRequest {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MessageSoulAltarTakeRequest() : card_pos_(0) {
  }

  virtual ~MessageSoulAltarTakeRequest() throw() {}

  int32_t card_pos_;

  void __set_card_pos_(const int32_t val) {
    card_pos_ = val;
  }

  bool operator == (const MessageSoulAltarTakeRequest & rhs) const
  {
    if (!(card_pos_ == rhs.card_pos_))
      return false;
    return true;
  }
  bool operator != (const MessageSoulAltarTakeRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSoulAltarTakeRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSoulAltarTakeRequest &a, MessageSoulAltarTakeRequest &b);

typedef struct _MessageSoulAltarTakeResponse__isset {
  _MessageSoulAltarTakeResponse__isset() : card_id_(false) {}
  bool card_id_;
} _MessageSoulAltarTakeResponse__isset;

class MessageSoulAltarTakeResponse {
 public:

  static const char* ascii_fingerprint; // = "3409A6BAF48299E7727EECFEBEC3BDA9";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0x09,0xA6,0xBA,0xF4,0x82,0x99,0xE7,0x72,0x7E,0xEC,0xFE,0xBE,0xC3,0xBD,0xA9};

  MessageSoulAltarTakeResponse() : result_(0), card_id_(0) {
  }

  virtual ~MessageSoulAltarTakeResponse() throw() {}

  bool result_;
  int32_t card_id_;

  _MessageSoulAltarTakeResponse__isset __isset;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_card_id_(const int32_t val) {
    card_id_ = val;
    __isset.card_id_ = true;
  }

  bool operator == (const MessageSoulAltarTakeResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.card_id_ != rhs.__isset.card_id_)
      return false;
    else if (__isset.card_id_ && !(card_id_ == rhs.card_id_))
      return false;
    return true;
  }
  bool operator != (const MessageSoulAltarTakeResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSoulAltarTakeResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSoulAltarTakeResponse &a, MessageSoulAltarTakeResponse &b);


class MessageSoulAltarResetRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageSoulAltarResetRequest() {
  }

  virtual ~MessageSoulAltarResetRequest() throw() {}


  bool operator == (const MessageSoulAltarResetRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageSoulAltarResetRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSoulAltarResetRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSoulAltarResetRequest &a, MessageSoulAltarResetRequest &b);


class MessageSoulAltarResetResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageSoulAltarResetResponse() : result_(0) {
  }

  virtual ~MessageSoulAltarResetResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageSoulAltarResetResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageSoulAltarResetResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSoulAltarResetResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSoulAltarResetResponse &a, MessageSoulAltarResetResponse &b);


class MessageSoulSkillUpgradeRequest {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  MessageSoulSkillUpgradeRequest() : soul_id_(0), skill_id_(0) {
  }

  virtual ~MessageSoulSkillUpgradeRequest() throw() {}

  int32_t soul_id_;
  int32_t skill_id_;

  void __set_soul_id_(const int32_t val) {
    soul_id_ = val;
  }

  void __set_skill_id_(const int32_t val) {
    skill_id_ = val;
  }

  bool operator == (const MessageSoulSkillUpgradeRequest & rhs) const
  {
    if (!(soul_id_ == rhs.soul_id_))
      return false;
    if (!(skill_id_ == rhs.skill_id_))
      return false;
    return true;
  }
  bool operator != (const MessageSoulSkillUpgradeRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSoulSkillUpgradeRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSoulSkillUpgradeRequest &a, MessageSoulSkillUpgradeRequest &b);


class MessageSoulSkillUpgradeResponse {
 public:

  static const char* ascii_fingerprint; // = "5C4D84321B3CBB236930D75F16BF3C14";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x4D,0x84,0x32,0x1B,0x3C,0xBB,0x23,0x69,0x30,0xD7,0x5F,0x16,0xBF,0x3C,0x14};

  MessageSoulSkillUpgradeResponse() : result_(0), soul_id_(0), skill_id_(0) {
  }

  virtual ~MessageSoulSkillUpgradeResponse() throw() {}

  bool result_;
  int32_t soul_id_;
  int32_t skill_id_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_soul_id_(const int32_t val) {
    soul_id_ = val;
  }

  void __set_skill_id_(const int32_t val) {
    skill_id_ = val;
  }

  bool operator == (const MessageSoulSkillUpgradeResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (!(soul_id_ == rhs.soul_id_))
      return false;
    if (!(skill_id_ == rhs.skill_id_))
      return false;
    return true;
  }
  bool operator != (const MessageSoulSkillUpgradeResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSoulSkillUpgradeResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSoulSkillUpgradeResponse &a, MessageSoulSkillUpgradeResponse &b);

}} // namespace

#endif
