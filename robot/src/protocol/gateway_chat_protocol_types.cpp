/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "gateway_chat_protocol_types.h"

#include <algorithm>

namespace gateway { namespace protocol {

int _kChatErrorCodeValues[] = {
  ChatErrorCode::SUCCESS,
  ChatErrorCode::TARGET_OFFLINE,
  ChatErrorCode::IN_TARGET_BLACKLIST,
  ChatErrorCode::ERROR_UNKNOWN
};
const char* _kChatErrorCodeNames[] = {
  "SUCCESS",
  "TARGET_OFFLINE",
  "IN_TARGET_BLACKLIST",
  "ERROR_UNKNOWN"
};
const std::map<int, const char*> _ChatErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kChatErrorCodeValues, _kChatErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* MessageChatRequest::ascii_fingerprint = "8A168E64138582CD39890B77E0F15FF4";
const uint8_t MessageChatRequest::binary_fingerprint[16] = {0x8A,0x16,0x8E,0x64,0x13,0x85,0x82,0xCD,0x39,0x89,0x0B,0x77,0xE0,0xF1,0x5F,0xF4};

uint32_t MessageChatRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_channel_ = false;
  bool isset_message_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->channel_ = ( ::entity::ChatChannelType::type)ecast0;
          isset_channel_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message_);
          isset_message_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->target_name_);
          this->__isset.target_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_channel_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_message_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageChatRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageChatRequest");

  xfer += oprot->writeFieldBegin("channel_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->channel_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.target_name_) {
    xfer += oprot->writeFieldBegin("target_name_", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->target_name_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageChatRequest &a, MessageChatRequest &b) {
  using ::std::swap;
  swap(a.channel_, b.channel_);
  swap(a.message_, b.message_);
  swap(a.target_name_, b.target_name_);
  swap(a.__isset, b.__isset);
}

const char* MessageChatResponse::ascii_fingerprint = "8095EC249A4927E7C686E5BB9D757A08";
const uint8_t MessageChatResponse::binary_fingerprint[16] = {0x80,0x95,0xEC,0x24,0x9A,0x49,0x27,0xE7,0xC6,0x86,0xE5,0xBB,0x9D,0x75,0x7A,0x08};

uint32_t MessageChatResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->result_ = (ChatErrorCode::type)ecast1;
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->target_id_);
          this->__isset.target_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->target_name_);
          this->__isset.target_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message_);
          this->__isset.message_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageChatResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageChatResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.target_id_) {
    xfer += oprot->writeFieldBegin("target_id_", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->target_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.target_name_) {
    xfer += oprot->writeFieldBegin("target_name_", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->target_name_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.message_) {
    xfer += oprot->writeFieldBegin("message_", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->message_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageChatResponse &a, MessageChatResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.target_id_, b.target_id_);
  swap(a.target_name_, b.target_name_);
  swap(a.message_, b.message_);
  swap(a.__isset, b.__isset);
}

const char* MessageChatSynchronize::ascii_fingerprint = "EC8C8E8D6042A67E4AF0F04DA3F39A73";
const uint8_t MessageChatSynchronize::binary_fingerprint[16] = {0xEC,0x8C,0x8E,0x8D,0x60,0x42,0xA6,0x7E,0x4A,0xF0,0xF0,0x4D,0xA3,0xF3,0x9A,0x73};

uint32_t MessageChatSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_channel_ = false;
  bool isset_message_ = false;
  bool isset_actor_id_ = false;
  bool isset_actor_name_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->channel_ = ( ::entity::ChatChannelType::type)ecast2;
          isset_channel_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message_);
          isset_message_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_name_);
          isset_actor_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_channel_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_message_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_actor_name_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageChatSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageChatSynchronize");

  xfer += oprot->writeFieldBegin("channel_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->channel_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("actor_name_", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->actor_name_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageChatSynchronize &a, MessageChatSynchronize &b) {
  using ::std::swap;
  swap(a.channel_, b.channel_);
  swap(a.message_, b.message_);
  swap(a.actor_id_, b.actor_id_);
  swap(a.actor_name_, b.actor_name_);
}

}} // namespace
