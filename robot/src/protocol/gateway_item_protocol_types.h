/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef gateway_item_protocol_TYPES_H
#define gateway_item_protocol_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "gateway_protocol_types.h"
#include "item_types.h"
#include "equipment_types.h"
#include "gem_types.h"
#include "vocation_types.h"


namespace gateway { namespace protocol {

struct ContainerOperateType {
  enum type {
    ADD = 0,
    REMOVE = 1,
    MAX = 2
  };
};

extern const std::map<int, const char*> _ContainerOperateType_VALUES_TO_NAMES;

struct GemOperateType {
  enum type {
    ADD = 0,
    REMOVE = 1,
    UPDATE = 2
  };
};

extern const std::map<int, const char*> _GemOperateType_VALUES_TO_NAMES;

struct TreasureSpendType {
  enum type {
    DIAMOND = 1,
    GOLD = 2
  };
};

extern const std::map<int, const char*> _TreasureSpendType_VALUES_TO_NAMES;

typedef struct _MessageItemContainerInitialize__isset {
  _MessageItemContainerInitialize__isset() : vocation_(false) {}
  bool vocation_;
} _MessageItemContainerInitialize__isset;

class MessageItemContainerInitialize {
 public:

  static const char* ascii_fingerprint; // = "5BEFF128FBD1DF8A76C1601AACBF9686";
  static const uint8_t binary_fingerprint[16]; // = {0x5B,0xEF,0xF1,0x28,0xFB,0xD1,0xDF,0x8A,0x76,0xC1,0x60,0x1A,0xAC,0xBF,0x96,0x86};

  MessageItemContainerInitialize() : container_type_(( ::entity::ItemContainerType::type)0), vocation_(( ::entity::VocationType::type)0) {
  }

  virtual ~MessageItemContainerInitialize() throw() {}

   ::entity::ItemContainerType::type container_type_;
   ::entity::VocationType::type vocation_;
  std::vector< ::entity::ItemFields>  items_;

  _MessageItemContainerInitialize__isset __isset;

  void __set_container_type_(const  ::entity::ItemContainerType::type val) {
    container_type_ = val;
  }

  void __set_vocation_(const  ::entity::VocationType::type val) {
    vocation_ = val;
    __isset.vocation_ = true;
  }

  void __set_items_(const std::vector< ::entity::ItemFields> & val) {
    items_ = val;
  }

  bool operator == (const MessageItemContainerInitialize & rhs) const
  {
    if (!(container_type_ == rhs.container_type_))
      return false;
    if (__isset.vocation_ != rhs.__isset.vocation_)
      return false;
    else if (__isset.vocation_ && !(vocation_ == rhs.vocation_))
      return false;
    if (!(items_ == rhs.items_))
      return false;
    return true;
  }
  bool operator != (const MessageItemContainerInitialize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageItemContainerInitialize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageItemContainerInitialize &a, MessageItemContainerInitialize &b);

typedef struct _MessageItemCreateSynchronize__isset {
  _MessageItemCreateSynchronize__isset() : equipment_client_fields_(false), first_equip_time_(false) {}
  bool equipment_client_fields_;
  bool first_equip_time_;
} _MessageItemCreateSynchronize__isset;

class MessageItemCreateSynchronize {
 public:

  static const char* ascii_fingerprint; // = "6BE8F077800A85FB35A5B3EA794FFF39";
  static const uint8_t binary_fingerprint[16]; // = {0x6B,0xE8,0xF0,0x77,0x80,0x0A,0x85,0xFB,0x35,0xA5,0xB3,0xEA,0x79,0x4F,0xFF,0x39};

  MessageItemCreateSynchronize() : id_(), template_id_(0), type_(( ::entity::ItemType::type)0), first_equip_time_() {
  }

  virtual ~MessageItemCreateSynchronize() throw() {}

  std::string id_;
  int32_t template_id_;
   ::entity::ItemType::type type_;
  std::vector<int32_t>  item_client_fields_;
  std::vector<int32_t>  equipment_client_fields_;
  std::string first_equip_time_;

  _MessageItemCreateSynchronize__isset __isset;

  void __set_id_(const std::string& val) {
    id_ = val;
  }

  void __set_template_id_(const int32_t val) {
    template_id_ = val;
  }

  void __set_type_(const  ::entity::ItemType::type val) {
    type_ = val;
  }

  void __set_item_client_fields_(const std::vector<int32_t> & val) {
    item_client_fields_ = val;
  }

  void __set_equipment_client_fields_(const std::vector<int32_t> & val) {
    equipment_client_fields_ = val;
    __isset.equipment_client_fields_ = true;
  }

  void __set_first_equip_time_(const std::string& val) {
    first_equip_time_ = val;
    __isset.first_equip_time_ = true;
  }

  bool operator == (const MessageItemCreateSynchronize & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(template_id_ == rhs.template_id_))
      return false;
    if (!(type_ == rhs.type_))
      return false;
    if (!(item_client_fields_ == rhs.item_client_fields_))
      return false;
    if (__isset.equipment_client_fields_ != rhs.__isset.equipment_client_fields_)
      return false;
    else if (__isset.equipment_client_fields_ && !(equipment_client_fields_ == rhs.equipment_client_fields_))
      return false;
    if (__isset.first_equip_time_ != rhs.__isset.first_equip_time_)
      return false;
    else if (__isset.first_equip_time_ && !(first_equip_time_ == rhs.first_equip_time_))
      return false;
    return true;
  }
  bool operator != (const MessageItemCreateSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageItemCreateSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageItemCreateSynchronize &a, MessageItemCreateSynchronize &b);

typedef struct _MessageSynchronizeItem__isset {
  _MessageSynchronizeItem__isset() : item_client_fields_(false), equip_client_fields_(false) {}
  bool item_client_fields_;
  bool equip_client_fields_;
} _MessageSynchronizeItem__isset;

class MessageSynchronizeItem {
 public:

  static const char* ascii_fingerprint; // = "46313D61BA406A784CB114072C488249";
  static const uint8_t binary_fingerprint[16]; // = {0x46,0x31,0x3D,0x61,0xBA,0x40,0x6A,0x78,0x4C,0xB1,0x14,0x07,0x2C,0x48,0x82,0x49};

  MessageSynchronizeItem() : item_id_() {
  }

  virtual ~MessageSynchronizeItem() throw() {}

  std::string item_id_;
  std::vector< ::entity::ItemClientField>  item_client_fields_;
  std::vector< ::entity::EquipClientField>  equip_client_fields_;

  _MessageSynchronizeItem__isset __isset;

  void __set_item_id_(const std::string& val) {
    item_id_ = val;
  }

  void __set_item_client_fields_(const std::vector< ::entity::ItemClientField> & val) {
    item_client_fields_ = val;
    __isset.item_client_fields_ = true;
  }

  void __set_equip_client_fields_(const std::vector< ::entity::EquipClientField> & val) {
    equip_client_fields_ = val;
    __isset.equip_client_fields_ = true;
  }

  bool operator == (const MessageSynchronizeItem & rhs) const
  {
    if (!(item_id_ == rhs.item_id_))
      return false;
    if (__isset.item_client_fields_ != rhs.__isset.item_client_fields_)
      return false;
    else if (__isset.item_client_fields_ && !(item_client_fields_ == rhs.item_client_fields_))
      return false;
    if (__isset.equip_client_fields_ != rhs.__isset.equip_client_fields_)
      return false;
    else if (__isset.equip_client_fields_ && !(equip_client_fields_ == rhs.equip_client_fields_))
      return false;
    return true;
  }
  bool operator != (const MessageSynchronizeItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSynchronizeItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSynchronizeItem &a, MessageSynchronizeItem &b);

typedef struct _MessageItemContainerOperate__isset {
  _MessageItemContainerOperate__isset() : vocation_(false) {}
  bool vocation_;
} _MessageItemContainerOperate__isset;

class MessageItemContainerOperate {
 public:

  static const char* ascii_fingerprint; // = "CDBB94917307EACC6A667B9F351FCF4D";
  static const uint8_t binary_fingerprint[16]; // = {0xCD,0xBB,0x94,0x91,0x73,0x07,0xEA,0xCC,0x6A,0x66,0x7B,0x9F,0x35,0x1F,0xCF,0x4D};

  MessageItemContainerOperate() : container_type_(( ::entity::ItemContainerType::type)0), location_(0), vocation_(( ::entity::VocationType::type)0), operate_((ContainerOperateType::type)0), item_id_() {
  }

  virtual ~MessageItemContainerOperate() throw() {}

   ::entity::ItemContainerType::type container_type_;
  int16_t location_;
   ::entity::VocationType::type vocation_;
  ContainerOperateType::type operate_;
  std::string item_id_;

  _MessageItemContainerOperate__isset __isset;

  void __set_container_type_(const  ::entity::ItemContainerType::type val) {
    container_type_ = val;
  }

  void __set_location_(const int16_t val) {
    location_ = val;
  }

  void __set_vocation_(const  ::entity::VocationType::type val) {
    vocation_ = val;
    __isset.vocation_ = true;
  }

  void __set_operate_(const ContainerOperateType::type val) {
    operate_ = val;
  }

  void __set_item_id_(const std::string& val) {
    item_id_ = val;
  }

  bool operator == (const MessageItemContainerOperate & rhs) const
  {
    if (!(container_type_ == rhs.container_type_))
      return false;
    if (!(location_ == rhs.location_))
      return false;
    if (__isset.vocation_ != rhs.__isset.vocation_)
      return false;
    else if (__isset.vocation_ && !(vocation_ == rhs.vocation_))
      return false;
    if (!(operate_ == rhs.operate_))
      return false;
    if (!(item_id_ == rhs.item_id_))
      return false;
    return true;
  }
  bool operator != (const MessageItemContainerOperate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageItemContainerOperate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageItemContainerOperate &a, MessageItemContainerOperate &b);

typedef struct _MessageItemMove__isset {
  _MessageItemMove__isset() : src_vocation_(false), dest_vocation_(false) {}
  bool src_vocation_;
  bool dest_vocation_;
} _MessageItemMove__isset;

class MessageItemMove {
 public:

  static const char* ascii_fingerprint; // = "C1434287F32F949710ADCAB0F9C5095A";
  static const uint8_t binary_fingerprint[16]; // = {0xC1,0x43,0x42,0x87,0xF3,0x2F,0x94,0x97,0x10,0xAD,0xCA,0xB0,0xF9,0xC5,0x09,0x5A};

  MessageItemMove() : item_id_(), src_container_(( ::entity::ItemContainerType::type)0), src_location_(0), src_vocation_(( ::entity::VocationType::type)0), dest_container_(( ::entity::ItemContainerType::type)0), dest_location_(0), dest_vocation_(( ::entity::VocationType::type)0) {
  }

  virtual ~MessageItemMove() throw() {}

  std::string item_id_;
   ::entity::ItemContainerType::type src_container_;
  int16_t src_location_;
   ::entity::VocationType::type src_vocation_;
   ::entity::ItemContainerType::type dest_container_;
  int16_t dest_location_;
   ::entity::VocationType::type dest_vocation_;

  _MessageItemMove__isset __isset;

  void __set_item_id_(const std::string& val) {
    item_id_ = val;
  }

  void __set_src_container_(const  ::entity::ItemContainerType::type val) {
    src_container_ = val;
  }

  void __set_src_location_(const int16_t val) {
    src_location_ = val;
  }

  void __set_src_vocation_(const  ::entity::VocationType::type val) {
    src_vocation_ = val;
    __isset.src_vocation_ = true;
  }

  void __set_dest_container_(const  ::entity::ItemContainerType::type val) {
    dest_container_ = val;
  }

  void __set_dest_location_(const int16_t val) {
    dest_location_ = val;
  }

  void __set_dest_vocation_(const  ::entity::VocationType::type val) {
    dest_vocation_ = val;
    __isset.dest_vocation_ = true;
  }

  bool operator == (const MessageItemMove & rhs) const
  {
    if (!(item_id_ == rhs.item_id_))
      return false;
    if (!(src_container_ == rhs.src_container_))
      return false;
    if (!(src_location_ == rhs.src_location_))
      return false;
    if (__isset.src_vocation_ != rhs.__isset.src_vocation_)
      return false;
    else if (__isset.src_vocation_ && !(src_vocation_ == rhs.src_vocation_))
      return false;
    if (!(dest_container_ == rhs.dest_container_))
      return false;
    if (!(dest_location_ == rhs.dest_location_))
      return false;
    if (__isset.dest_vocation_ != rhs.__isset.dest_vocation_)
      return false;
    else if (__isset.dest_vocation_ && !(dest_vocation_ == rhs.dest_vocation_))
      return false;
    return true;
  }
  bool operator != (const MessageItemMove &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageItemMove & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageItemMove &a, MessageItemMove &b);

typedef struct _MessageItemRemove__isset {
  _MessageItemRemove__isset() : vocation_(false) {}
  bool vocation_;
} _MessageItemRemove__isset;

class MessageItemRemove {
 public:

  static const char* ascii_fingerprint; // = "7B052C60DA14835A51FB6D3DDE3BF548";
  static const uint8_t binary_fingerprint[16]; // = {0x7B,0x05,0x2C,0x60,0xDA,0x14,0x83,0x5A,0x51,0xFB,0x6D,0x3D,0xDE,0x3B,0xF5,0x48};

  MessageItemRemove() : item_id_(), container_(( ::entity::ItemContainerType::type)0), location_(0), vocation_(( ::entity::VocationType::type)0) {
  }

  virtual ~MessageItemRemove() throw() {}

  std::string item_id_;
   ::entity::ItemContainerType::type container_;
  int16_t location_;
   ::entity::VocationType::type vocation_;

  _MessageItemRemove__isset __isset;

  void __set_item_id_(const std::string& val) {
    item_id_ = val;
  }

  void __set_container_(const  ::entity::ItemContainerType::type val) {
    container_ = val;
  }

  void __set_location_(const int16_t val) {
    location_ = val;
  }

  void __set_vocation_(const  ::entity::VocationType::type val) {
    vocation_ = val;
    __isset.vocation_ = true;
  }

  bool operator == (const MessageItemRemove & rhs) const
  {
    if (!(item_id_ == rhs.item_id_))
      return false;
    if (!(container_ == rhs.container_))
      return false;
    if (!(location_ == rhs.location_))
      return false;
    if (__isset.vocation_ != rhs.__isset.vocation_)
      return false;
    else if (__isset.vocation_ && !(vocation_ == rhs.vocation_))
      return false;
    return true;
  }
  bool operator != (const MessageItemRemove &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageItemRemove & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageItemRemove &a, MessageItemRemove &b);


class MessageItemUse {
 public:

  static const char* ascii_fingerprint; // = "55B5FD3EFAA118689720F36AFE6445D9";
  static const uint8_t binary_fingerprint[16]; // = {0x55,0xB5,0xFD,0x3E,0xFA,0xA1,0x18,0x68,0x97,0x20,0xF3,0x6A,0xFE,0x64,0x45,0xD9};

  MessageItemUse() : item_id_(), container_(( ::entity::ItemContainerType::type)0), location_(0), number_(0) {
  }

  virtual ~MessageItemUse() throw() {}

  std::string item_id_;
   ::entity::ItemContainerType::type container_;
  int16_t location_;
  int32_t number_;

  void __set_item_id_(const std::string& val) {
    item_id_ = val;
  }

  void __set_container_(const  ::entity::ItemContainerType::type val) {
    container_ = val;
  }

  void __set_location_(const int16_t val) {
    location_ = val;
  }

  void __set_number_(const int32_t val) {
    number_ = val;
  }

  bool operator == (const MessageItemUse & rhs) const
  {
    if (!(item_id_ == rhs.item_id_))
      return false;
    if (!(container_ == rhs.container_))
      return false;
    if (!(location_ == rhs.location_))
      return false;
    if (!(number_ == rhs.number_))
      return false;
    return true;
  }
  bool operator != (const MessageItemUse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageItemUse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageItemUse &a, MessageItemUse &b);


class MessageItemSplit {
 public:

  static const char* ascii_fingerprint; // = "AFF7C60B3B95A51058EF1383F5A75154";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xF7,0xC6,0x0B,0x3B,0x95,0xA5,0x10,0x58,0xEF,0x13,0x83,0xF5,0xA7,0x51,0x54};

  MessageItemSplit() : item_id_(), src_location_(0), dest_location_(0), number_(0) {
  }

  virtual ~MessageItemSplit() throw() {}

  std::string item_id_;
  int16_t src_location_;
  int16_t dest_location_;
  int32_t number_;

  void __set_item_id_(const std::string& val) {
    item_id_ = val;
  }

  void __set_src_location_(const int16_t val) {
    src_location_ = val;
  }

  void __set_dest_location_(const int16_t val) {
    dest_location_ = val;
  }

  void __set_number_(const int32_t val) {
    number_ = val;
  }

  bool operator == (const MessageItemSplit & rhs) const
  {
    if (!(item_id_ == rhs.item_id_))
      return false;
    if (!(src_location_ == rhs.src_location_))
      return false;
    if (!(dest_location_ == rhs.dest_location_))
      return false;
    if (!(number_ == rhs.number_))
      return false;
    return true;
  }
  bool operator != (const MessageItemSplit &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageItemSplit & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageItemSplit &a, MessageItemSplit &b);


class MessageItemArrange {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

  MessageItemArrange() : container_(( ::entity::ItemContainerType::type)0) {
  }

  virtual ~MessageItemArrange() throw() {}

   ::entity::ItemContainerType::type container_;

  void __set_container_(const  ::entity::ItemContainerType::type val) {
    container_ = val;
  }

  bool operator == (const MessageItemArrange & rhs) const
  {
    if (!(container_ == rhs.container_))
      return false;
    return true;
  }
  bool operator != (const MessageItemArrange &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageItemArrange & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageItemArrange &a, MessageItemArrange &b);


class MessageItemArrageResult {
 public:

  static const char* ascii_fingerprint; // = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};

  MessageItemArrageResult() {
  }

  virtual ~MessageItemArrageResult() throw() {}

  std::vector<std::string>  items_;

  void __set_items_(const std::vector<std::string> & val) {
    items_ = val;
  }

  bool operator == (const MessageItemArrageResult & rhs) const
  {
    if (!(items_ == rhs.items_))
      return false;
    return true;
  }
  bool operator != (const MessageItemArrageResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageItemArrageResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageItemArrageResult &a, MessageItemArrageResult &b);


class MessageExtendContainer {
 public:

  static const char* ascii_fingerprint; // = "7E45131B6619DD5D7A5FB9DC011E869F";
  static const uint8_t binary_fingerprint[16]; // = {0x7E,0x45,0x13,0x1B,0x66,0x19,0xDD,0x5D,0x7A,0x5F,0xB9,0xDC,0x01,0x1E,0x86,0x9F};

  MessageExtendContainer() : container_(( ::entity::ItemContainerType::type)0), extend_number_(0), cost_type_(0) {
  }

  virtual ~MessageExtendContainer() throw() {}

   ::entity::ItemContainerType::type container_;
  int32_t extend_number_;
  int8_t cost_type_;

  void __set_container_(const  ::entity::ItemContainerType::type val) {
    container_ = val;
  }

  void __set_extend_number_(const int32_t val) {
    extend_number_ = val;
  }

  void __set_cost_type_(const int8_t val) {
    cost_type_ = val;
  }

  bool operator == (const MessageExtendContainer & rhs) const
  {
    if (!(container_ == rhs.container_))
      return false;
    if (!(extend_number_ == rhs.extend_number_))
      return false;
    if (!(cost_type_ == rhs.cost_type_))
      return false;
    return true;
  }
  bool operator != (const MessageExtendContainer &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageExtendContainer & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageExtendContainer &a, MessageExtendContainer &b);

typedef struct _MessageItemComposeRequest__isset {
  _MessageItemComposeRequest__isset() : item_ids_(false), number_(false), bind_(false) {}
  bool item_ids_;
  bool number_;
  bool bind_;
} _MessageItemComposeRequest__isset;

class MessageItemComposeRequest {
 public:

  static const char* ascii_fingerprint; // = "EA677F0CF85BB87AC959E6C8734FC9A4";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x67,0x7F,0x0C,0xF8,0x5B,0xB8,0x7A,0xC9,0x59,0xE6,0xC8,0x73,0x4F,0xC9,0xA4};

  MessageItemComposeRequest() : recipe_id_(0), number_(0), bind_(0) {
  }

  virtual ~MessageItemComposeRequest() throw() {}

  int32_t recipe_id_;
  std::vector<std::string>  item_ids_;
  int32_t number_;
  bool bind_;

  _MessageItemComposeRequest__isset __isset;

  void __set_recipe_id_(const int32_t val) {
    recipe_id_ = val;
  }

  void __set_item_ids_(const std::vector<std::string> & val) {
    item_ids_ = val;
    __isset.item_ids_ = true;
  }

  void __set_number_(const int32_t val) {
    number_ = val;
    __isset.number_ = true;
  }

  void __set_bind_(const bool val) {
    bind_ = val;
    __isset.bind_ = true;
  }

  bool operator == (const MessageItemComposeRequest & rhs) const
  {
    if (!(recipe_id_ == rhs.recipe_id_))
      return false;
    if (__isset.item_ids_ != rhs.__isset.item_ids_)
      return false;
    else if (__isset.item_ids_ && !(item_ids_ == rhs.item_ids_))
      return false;
    if (__isset.number_ != rhs.__isset.number_)
      return false;
    else if (__isset.number_ && !(number_ == rhs.number_))
      return false;
    if (__isset.bind_ != rhs.__isset.bind_)
      return false;
    else if (__isset.bind_ && !(bind_ == rhs.bind_))
      return false;
    return true;
  }
  bool operator != (const MessageItemComposeRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageItemComposeRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageItemComposeRequest &a, MessageItemComposeRequest &b);


class MessageItemComposeResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageItemComposeResponse() : result_(0) {
  }

  virtual ~MessageItemComposeResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageItemComposeResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageItemComposeResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageItemComposeResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageItemComposeResponse &a, MessageItemComposeResponse &b);


class EquipInformation {
 public:

  static const char* ascii_fingerprint; // = "7E45131B6619DD5D7A5FB9DC011E869F";
  static const uint8_t binary_fingerprint[16]; // = {0x7E,0x45,0x13,0x1B,0x66,0x19,0xDD,0x5D,0x7A,0x5F,0xB9,0xDC,0x01,0x1E,0x86,0x9F};

  EquipInformation() : location_(( ::entity::EquipmentType::type)0), template_id_(0), intensify_(0) {
  }

  virtual ~EquipInformation() throw() {}

   ::entity::EquipmentType::type location_;
  int32_t template_id_;
  int8_t intensify_;

  void __set_location_(const  ::entity::EquipmentType::type val) {
    location_ = val;
  }

  void __set_template_id_(const int32_t val) {
    template_id_ = val;
  }

  void __set_intensify_(const int8_t val) {
    intensify_ = val;
  }

  bool operator == (const EquipInformation & rhs) const
  {
    if (!(location_ == rhs.location_))
      return false;
    if (!(template_id_ == rhs.template_id_))
      return false;
    if (!(intensify_ == rhs.intensify_))
      return false;
    return true;
  }
  bool operator != (const EquipInformation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EquipInformation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EquipInformation &a, EquipInformation &b);


class ActorEquipInformation {
 public:

  static const char* ascii_fingerprint; // = "7E8361146817C56720FF6899E90271FE";
  static const uint8_t binary_fingerprint[16]; // = {0x7E,0x83,0x61,0x14,0x68,0x17,0xC5,0x67,0x20,0xFF,0x68,0x99,0xE9,0x02,0x71,0xFE};

  ActorEquipInformation() : actor_id_() {
  }

  virtual ~ActorEquipInformation() throw() {}

  std::string actor_id_;
  std::vector<EquipInformation>  equips_;

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
  }

  void __set_equips_(const std::vector<EquipInformation> & val) {
    equips_ = val;
  }

  bool operator == (const ActorEquipInformation & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(equips_ == rhs.equips_))
      return false;
    return true;
  }
  bool operator != (const ActorEquipInformation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ActorEquipInformation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ActorEquipInformation &a, ActorEquipInformation &b);


class MessageCreateActorEquipBroadcast {
 public:

  static const char* ascii_fingerprint; // = "B779FA8760BB3C09A48FCBC41DE49935";
  static const uint8_t binary_fingerprint[16]; // = {0xB7,0x79,0xFA,0x87,0x60,0xBB,0x3C,0x09,0xA4,0x8F,0xCB,0xC4,0x1D,0xE4,0x99,0x35};

  MessageCreateActorEquipBroadcast() {
  }

  virtual ~MessageCreateActorEquipBroadcast() throw() {}

  std::vector<ActorEquipInformation>  actors_;

  void __set_actors_(const std::vector<ActorEquipInformation> & val) {
    actors_ = val;
  }

  bool operator == (const MessageCreateActorEquipBroadcast & rhs) const
  {
    if (!(actors_ == rhs.actors_))
      return false;
    return true;
  }
  bool operator != (const MessageCreateActorEquipBroadcast &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageCreateActorEquipBroadcast & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageCreateActorEquipBroadcast &a, MessageCreateActorEquipBroadcast &b);


class MessageUpdateActorEquipBroadcast {
 public:

  static const char* ascii_fingerprint; // = "63C748D0E943B6AAF59CC52663E682B0";
  static const uint8_t binary_fingerprint[16]; // = {0x63,0xC7,0x48,0xD0,0xE9,0x43,0xB6,0xAA,0xF5,0x9C,0xC5,0x26,0x63,0xE6,0x82,0xB0};

  MessageUpdateActorEquipBroadcast() : actor_id_() {
  }

  virtual ~MessageUpdateActorEquipBroadcast() throw() {}

  std::string actor_id_;
  EquipInformation equip_;

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
  }

  void __set_equip_(const EquipInformation& val) {
    equip_ = val;
  }

  bool operator == (const MessageUpdateActorEquipBroadcast & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(equip_ == rhs.equip_))
      return false;
    return true;
  }
  bool operator != (const MessageUpdateActorEquipBroadcast &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageUpdateActorEquipBroadcast & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageUpdateActorEquipBroadcast &a, MessageUpdateActorEquipBroadcast &b);


class MessageEquipCompareRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MessageEquipCompareRequest() : actor_id_() {
  }

  virtual ~MessageEquipCompareRequest() throw() {}

  std::string actor_id_;

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
  }

  bool operator == (const MessageEquipCompareRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    return true;
  }
  bool operator != (const MessageEquipCompareRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageEquipCompareRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageEquipCompareRequest &a, MessageEquipCompareRequest &b);


class CompareEquip {
 public:

  static const char* ascii_fingerprint; // = "ACBC8ECF4940BD768FA35CCD08154770";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xBC,0x8E,0xCF,0x49,0x40,0xBD,0x76,0x8F,0xA3,0x5C,0xCD,0x08,0x15,0x47,0x70};

  CompareEquip() : template_id_(0) {
  }

  virtual ~CompareEquip() throw() {}

  int32_t template_id_;
  std::vector<int32_t>  fields_;

  void __set_template_id_(const int32_t val) {
    template_id_ = val;
  }

  void __set_fields_(const std::vector<int32_t> & val) {
    fields_ = val;
  }

  bool operator == (const CompareEquip & rhs) const
  {
    if (!(template_id_ == rhs.template_id_))
      return false;
    if (!(fields_ == rhs.fields_))
      return false;
    return true;
  }
  bool operator != (const CompareEquip &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CompareEquip & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CompareEquip &a, CompareEquip &b);


class MessageEquipCompareResponse {
 public:

  static const char* ascii_fingerprint; // = "CD41F1C3515F8A150FA87284EACF4C41";
  static const uint8_t binary_fingerprint[16]; // = {0xCD,0x41,0xF1,0xC3,0x51,0x5F,0x8A,0x15,0x0F,0xA8,0x72,0x84,0xEA,0xCF,0x4C,0x41};

  MessageEquipCompareResponse() : actor_id_(), name_(), guild_name_(), level_(0), vocation_(0), gender_(0), appearance_(0), current_hp_(0), max_hp_(0), current_mp_(0), max_mp_(0), physique_(0), strength_(0), intelligence_(0), agile_(0), spirit_(0), physics_attack_(0), physics_defence_(0), magic_attack_(0), magic_defence_(0), dodge_(0), crit_(0), ignore_defence_(0), speed_(0), current_exp_(0), nimbus_(0), task_layer_(0), spirit_facade_(0), functionality_state_(), title_(0) {
  }

  virtual ~MessageEquipCompareResponse() throw() {}

  std::string actor_id_;
  std::string name_;
  std::string guild_name_;
  int32_t level_;
  int32_t vocation_;
  int32_t gender_;
  int32_t appearance_;
  int32_t current_hp_;
  int32_t max_hp_;
  int32_t current_mp_;
  int32_t max_mp_;
  int32_t physique_;
  int32_t strength_;
  int32_t intelligence_;
  int32_t agile_;
  int32_t spirit_;
  int32_t physics_attack_;
  int32_t physics_defence_;
  int32_t magic_attack_;
  int32_t magic_defence_;
  int32_t dodge_;
  int32_t crit_;
  int32_t ignore_defence_;
  int32_t speed_;
  int32_t current_exp_;
  int32_t nimbus_;
  int32_t task_layer_;
  int32_t spirit_facade_;
  std::vector<int32_t>  sub_fight_scores_;
  std::string functionality_state_;
  std::vector<CompareEquip>  equipments_;
  int32_t title_;

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
  }

  void __set_name_(const std::string& val) {
    name_ = val;
  }

  void __set_guild_name_(const std::string& val) {
    guild_name_ = val;
  }

  void __set_level_(const int32_t val) {
    level_ = val;
  }

  void __set_vocation_(const int32_t val) {
    vocation_ = val;
  }

  void __set_gender_(const int32_t val) {
    gender_ = val;
  }

  void __set_appearance_(const int32_t val) {
    appearance_ = val;
  }

  void __set_current_hp_(const int32_t val) {
    current_hp_ = val;
  }

  void __set_max_hp_(const int32_t val) {
    max_hp_ = val;
  }

  void __set_current_mp_(const int32_t val) {
    current_mp_ = val;
  }

  void __set_max_mp_(const int32_t val) {
    max_mp_ = val;
  }

  void __set_physique_(const int32_t val) {
    physique_ = val;
  }

  void __set_strength_(const int32_t val) {
    strength_ = val;
  }

  void __set_intelligence_(const int32_t val) {
    intelligence_ = val;
  }

  void __set_agile_(const int32_t val) {
    agile_ = val;
  }

  void __set_spirit_(const int32_t val) {
    spirit_ = val;
  }

  void __set_physics_attack_(const int32_t val) {
    physics_attack_ = val;
  }

  void __set_physics_defence_(const int32_t val) {
    physics_defence_ = val;
  }

  void __set_magic_attack_(const int32_t val) {
    magic_attack_ = val;
  }

  void __set_magic_defence_(const int32_t val) {
    magic_defence_ = val;
  }

  void __set_dodge_(const int32_t val) {
    dodge_ = val;
  }

  void __set_crit_(const int32_t val) {
    crit_ = val;
  }

  void __set_ignore_defence_(const int32_t val) {
    ignore_defence_ = val;
  }

  void __set_speed_(const int32_t val) {
    speed_ = val;
  }

  void __set_current_exp_(const int32_t val) {
    current_exp_ = val;
  }

  void __set_nimbus_(const int32_t val) {
    nimbus_ = val;
  }

  void __set_task_layer_(const int32_t val) {
    task_layer_ = val;
  }

  void __set_spirit_facade_(const int32_t val) {
    spirit_facade_ = val;
  }

  void __set_sub_fight_scores_(const std::vector<int32_t> & val) {
    sub_fight_scores_ = val;
  }

  void __set_functionality_state_(const std::string& val) {
    functionality_state_ = val;
  }

  void __set_equipments_(const std::vector<CompareEquip> & val) {
    equipments_ = val;
  }

  void __set_title_(const int32_t val) {
    title_ = val;
  }

  bool operator == (const MessageEquipCompareResponse & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(name_ == rhs.name_))
      return false;
    if (!(guild_name_ == rhs.guild_name_))
      return false;
    if (!(level_ == rhs.level_))
      return false;
    if (!(vocation_ == rhs.vocation_))
      return false;
    if (!(gender_ == rhs.gender_))
      return false;
    if (!(appearance_ == rhs.appearance_))
      return false;
    if (!(current_hp_ == rhs.current_hp_))
      return false;
    if (!(max_hp_ == rhs.max_hp_))
      return false;
    if (!(current_mp_ == rhs.current_mp_))
      return false;
    if (!(max_mp_ == rhs.max_mp_))
      return false;
    if (!(physique_ == rhs.physique_))
      return false;
    if (!(strength_ == rhs.strength_))
      return false;
    if (!(intelligence_ == rhs.intelligence_))
      return false;
    if (!(agile_ == rhs.agile_))
      return false;
    if (!(spirit_ == rhs.spirit_))
      return false;
    if (!(physics_attack_ == rhs.physics_attack_))
      return false;
    if (!(physics_defence_ == rhs.physics_defence_))
      return false;
    if (!(magic_attack_ == rhs.magic_attack_))
      return false;
    if (!(magic_defence_ == rhs.magic_defence_))
      return false;
    if (!(dodge_ == rhs.dodge_))
      return false;
    if (!(crit_ == rhs.crit_))
      return false;
    if (!(ignore_defence_ == rhs.ignore_defence_))
      return false;
    if (!(speed_ == rhs.speed_))
      return false;
    if (!(current_exp_ == rhs.current_exp_))
      return false;
    if (!(nimbus_ == rhs.nimbus_))
      return false;
    if (!(task_layer_ == rhs.task_layer_))
      return false;
    if (!(spirit_facade_ == rhs.spirit_facade_))
      return false;
    if (!(sub_fight_scores_ == rhs.sub_fight_scores_))
      return false;
    if (!(functionality_state_ == rhs.functionality_state_))
      return false;
    if (!(equipments_ == rhs.equipments_))
      return false;
    if (!(title_ == rhs.title_))
      return false;
    return true;
  }
  bool operator != (const MessageEquipCompareResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageEquipCompareResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageEquipCompareResponse &a, MessageEquipCompareResponse &b);

typedef struct _MessageEquipIntensifyRequest__isset {
  _MessageEquipIntensifyRequest__isset() : vocation_(false) {}
  bool vocation_;
} _MessageEquipIntensifyRequest__isset;

class MessageEquipIntensifyRequest {
 public:

  static const char* ascii_fingerprint; // = "24A3C4C74512596F121D13CAA45DDA02";
  static const uint8_t binary_fingerprint[16]; // = {0x24,0xA3,0xC4,0xC7,0x45,0x12,0x59,0x6F,0x12,0x1D,0x13,0xCA,0xA4,0x5D,0xDA,0x02};

  MessageEquipIntensifyRequest() : id_(), container_(( ::entity::ItemContainerType::type)0), location_(0), vocation_(( ::entity::VocationType::type)0), spend_freedom_item_(0) {
  }

  virtual ~MessageEquipIntensifyRequest() throw() {}

  std::string id_;
   ::entity::ItemContainerType::type container_;
  int16_t location_;
   ::entity::VocationType::type vocation_;
  bool spend_freedom_item_;

  _MessageEquipIntensifyRequest__isset __isset;

  void __set_id_(const std::string& val) {
    id_ = val;
  }

  void __set_container_(const  ::entity::ItemContainerType::type val) {
    container_ = val;
  }

  void __set_location_(const int16_t val) {
    location_ = val;
  }

  void __set_vocation_(const  ::entity::VocationType::type val) {
    vocation_ = val;
    __isset.vocation_ = true;
  }

  void __set_spend_freedom_item_(const bool val) {
    spend_freedom_item_ = val;
  }

  bool operator == (const MessageEquipIntensifyRequest & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(container_ == rhs.container_))
      return false;
    if (!(location_ == rhs.location_))
      return false;
    if (__isset.vocation_ != rhs.__isset.vocation_)
      return false;
    else if (__isset.vocation_ && !(vocation_ == rhs.vocation_))
      return false;
    if (!(spend_freedom_item_ == rhs.spend_freedom_item_))
      return false;
    return true;
  }
  bool operator != (const MessageEquipIntensifyRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageEquipIntensifyRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageEquipIntensifyRequest &a, MessageEquipIntensifyRequest &b);


class MessageEquipIntensifyResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageEquipIntensifyResponse() : result_(0) {
  }

  virtual ~MessageEquipIntensifyResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageEquipIntensifyResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageEquipIntensifyResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageEquipIntensifyResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageEquipIntensifyResponse &a, MessageEquipIntensifyResponse &b);

typedef struct _MessageEquipRefineRequest__isset {
  _MessageEquipRefineRequest__isset() : vocation_(false) {}
  bool vocation_;
} _MessageEquipRefineRequest__isset;

class MessageEquipRefineRequest {
 public:

  static const char* ascii_fingerprint; // = "B085B1AF77EDCC59BEF60B9D934120EC";
  static const uint8_t binary_fingerprint[16]; // = {0xB0,0x85,0xB1,0xAF,0x77,0xED,0xCC,0x59,0xBE,0xF6,0x0B,0x9D,0x93,0x41,0x20,0xEC};

  MessageEquipRefineRequest() : container_(( ::entity::ItemContainerType::type)0), location_(0), vocation_(( ::entity::VocationType::type)0), lock1_(0), lock2_(0), lock3_(0), lock4_(0), lock5_(0), lock6_(0), spend_freedom_item_(0) {
  }

  virtual ~MessageEquipRefineRequest() throw() {}

   ::entity::ItemContainerType::type container_;
  int16_t location_;
   ::entity::VocationType::type vocation_;
  bool lock1_;
  bool lock2_;
  bool lock3_;
  bool lock4_;
  bool lock5_;
  bool lock6_;
  bool spend_freedom_item_;

  _MessageEquipRefineRequest__isset __isset;

  void __set_container_(const  ::entity::ItemContainerType::type val) {
    container_ = val;
  }

  void __set_location_(const int16_t val) {
    location_ = val;
  }

  void __set_vocation_(const  ::entity::VocationType::type val) {
    vocation_ = val;
    __isset.vocation_ = true;
  }

  void __set_lock1_(const bool val) {
    lock1_ = val;
  }

  void __set_lock2_(const bool val) {
    lock2_ = val;
  }

  void __set_lock3_(const bool val) {
    lock3_ = val;
  }

  void __set_lock4_(const bool val) {
    lock4_ = val;
  }

  void __set_lock5_(const bool val) {
    lock5_ = val;
  }

  void __set_lock6_(const bool val) {
    lock6_ = val;
  }

  void __set_spend_freedom_item_(const bool val) {
    spend_freedom_item_ = val;
  }

  bool operator == (const MessageEquipRefineRequest & rhs) const
  {
    if (!(container_ == rhs.container_))
      return false;
    if (!(location_ == rhs.location_))
      return false;
    if (__isset.vocation_ != rhs.__isset.vocation_)
      return false;
    else if (__isset.vocation_ && !(vocation_ == rhs.vocation_))
      return false;
    if (!(lock1_ == rhs.lock1_))
      return false;
    if (!(lock2_ == rhs.lock2_))
      return false;
    if (!(lock3_ == rhs.lock3_))
      return false;
    if (!(lock4_ == rhs.lock4_))
      return false;
    if (!(lock5_ == rhs.lock5_))
      return false;
    if (!(lock6_ == rhs.lock6_))
      return false;
    if (!(spend_freedom_item_ == rhs.spend_freedom_item_))
      return false;
    return true;
  }
  bool operator != (const MessageEquipRefineRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageEquipRefineRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageEquipRefineRequest &a, MessageEquipRefineRequest &b);


class MessageEquipRefineResponse {
 public:

  static const char* ascii_fingerprint; // = "FD06DADDA5F04D0793B97EFED06F5FDB";
  static const uint8_t binary_fingerprint[16]; // = {0xFD,0x06,0xDA,0xDD,0xA5,0xF0,0x4D,0x07,0x93,0xB9,0x7E,0xFE,0xD0,0x6F,0x5F,0xDB};

  MessageEquipRefineResponse() : ret_ok_(0), id_(), new_random_type1_(0), new_random_value1_(0), new_random_type2_(0), new_random_value2_(0), new_random_type3_(0), new_random_value3_(0), new_random_type4_(0), new_random_value4_(0), new_random_type5_(0), new_random_value5_(0), new_random_type6_(0), new_random_value6_(0) {
  }

  virtual ~MessageEquipRefineResponse() throw() {}

  bool ret_ok_;
  std::string id_;
  int8_t new_random_type1_;
  int32_t new_random_value1_;
  int8_t new_random_type2_;
  int32_t new_random_value2_;
  int8_t new_random_type3_;
  int32_t new_random_value3_;
  int8_t new_random_type4_;
  int32_t new_random_value4_;
  int8_t new_random_type5_;
  int32_t new_random_value5_;
  int8_t new_random_type6_;
  int32_t new_random_value6_;

  void __set_ret_ok_(const bool val) {
    ret_ok_ = val;
  }

  void __set_id_(const std::string& val) {
    id_ = val;
  }

  void __set_new_random_type1_(const int8_t val) {
    new_random_type1_ = val;
  }

  void __set_new_random_value1_(const int32_t val) {
    new_random_value1_ = val;
  }

  void __set_new_random_type2_(const int8_t val) {
    new_random_type2_ = val;
  }

  void __set_new_random_value2_(const int32_t val) {
    new_random_value2_ = val;
  }

  void __set_new_random_type3_(const int8_t val) {
    new_random_type3_ = val;
  }

  void __set_new_random_value3_(const int32_t val) {
    new_random_value3_ = val;
  }

  void __set_new_random_type4_(const int8_t val) {
    new_random_type4_ = val;
  }

  void __set_new_random_value4_(const int32_t val) {
    new_random_value4_ = val;
  }

  void __set_new_random_type5_(const int8_t val) {
    new_random_type5_ = val;
  }

  void __set_new_random_value5_(const int32_t val) {
    new_random_value5_ = val;
  }

  void __set_new_random_type6_(const int8_t val) {
    new_random_type6_ = val;
  }

  void __set_new_random_value6_(const int32_t val) {
    new_random_value6_ = val;
  }

  bool operator == (const MessageEquipRefineResponse & rhs) const
  {
    if (!(ret_ok_ == rhs.ret_ok_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(new_random_type1_ == rhs.new_random_type1_))
      return false;
    if (!(new_random_value1_ == rhs.new_random_value1_))
      return false;
    if (!(new_random_type2_ == rhs.new_random_type2_))
      return false;
    if (!(new_random_value2_ == rhs.new_random_value2_))
      return false;
    if (!(new_random_type3_ == rhs.new_random_type3_))
      return false;
    if (!(new_random_value3_ == rhs.new_random_value3_))
      return false;
    if (!(new_random_type4_ == rhs.new_random_type4_))
      return false;
    if (!(new_random_value4_ == rhs.new_random_value4_))
      return false;
    if (!(new_random_type5_ == rhs.new_random_type5_))
      return false;
    if (!(new_random_value5_ == rhs.new_random_value5_))
      return false;
    if (!(new_random_type6_ == rhs.new_random_type6_))
      return false;
    if (!(new_random_value6_ == rhs.new_random_value6_))
      return false;
    return true;
  }
  bool operator != (const MessageEquipRefineResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageEquipRefineResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageEquipRefineResponse &a, MessageEquipRefineResponse &b);

typedef struct _MessageEquipRefineConfirmRequest__isset {
  _MessageEquipRefineConfirmRequest__isset() : vocation_(false) {}
  bool vocation_;
} _MessageEquipRefineConfirmRequest__isset;

class MessageEquipRefineConfirmRequest {
 public:

  static const char* ascii_fingerprint; // = "580DD29FB3E80F337156221D935DE27C";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x0D,0xD2,0x9F,0xB3,0xE8,0x0F,0x33,0x71,0x56,0x22,0x1D,0x93,0x5D,0xE2,0x7C};

  MessageEquipRefineConfirmRequest() : ok_(0), container_(( ::entity::ItemContainerType::type)0), location_(0), vocation_(( ::entity::VocationType::type)0) {
  }

  virtual ~MessageEquipRefineConfirmRequest() throw() {}

  bool ok_;
   ::entity::ItemContainerType::type container_;
  int16_t location_;
   ::entity::VocationType::type vocation_;

  _MessageEquipRefineConfirmRequest__isset __isset;

  void __set_ok_(const bool val) {
    ok_ = val;
  }

  void __set_container_(const  ::entity::ItemContainerType::type val) {
    container_ = val;
  }

  void __set_location_(const int16_t val) {
    location_ = val;
  }

  void __set_vocation_(const  ::entity::VocationType::type val) {
    vocation_ = val;
    __isset.vocation_ = true;
  }

  bool operator == (const MessageEquipRefineConfirmRequest & rhs) const
  {
    if (!(ok_ == rhs.ok_))
      return false;
    if (!(container_ == rhs.container_))
      return false;
    if (!(location_ == rhs.location_))
      return false;
    if (__isset.vocation_ != rhs.__isset.vocation_)
      return false;
    else if (__isset.vocation_ && !(vocation_ == rhs.vocation_))
      return false;
    return true;
  }
  bool operator != (const MessageEquipRefineConfirmRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageEquipRefineConfirmRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageEquipRefineConfirmRequest &a, MessageEquipRefineConfirmRequest &b);


class MessageEquipRefineConfirmResponse {
 public:

  static const char* ascii_fingerprint; // = "1767FFB0CB3D9275BC64B198AB3B8A8B";
  static const uint8_t binary_fingerprint[16]; // = {0x17,0x67,0xFF,0xB0,0xCB,0x3D,0x92,0x75,0xBC,0x64,0xB1,0x98,0xAB,0x3B,0x8A,0x8B};

  MessageEquipRefineConfirmResponse() : ok_(0), id_() {
  }

  virtual ~MessageEquipRefineConfirmResponse() throw() {}

  bool ok_;
  std::string id_;

  void __set_ok_(const bool val) {
    ok_ = val;
  }

  void __set_id_(const std::string& val) {
    id_ = val;
  }

  bool operator == (const MessageEquipRefineConfirmResponse & rhs) const
  {
    if (!(ok_ == rhs.ok_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const MessageEquipRefineConfirmResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageEquipRefineConfirmResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageEquipRefineConfirmResponse &a, MessageEquipRefineConfirmResponse &b);

typedef struct _MessageEquipUpgradeRequest__isset {
  _MessageEquipUpgradeRequest__isset() : vocation_(false) {}
  bool vocation_;
} _MessageEquipUpgradeRequest__isset;

class MessageEquipUpgradeRequest {
 public:

  static const char* ascii_fingerprint; // = "24A3C4C74512596F121D13CAA45DDA02";
  static const uint8_t binary_fingerprint[16]; // = {0x24,0xA3,0xC4,0xC7,0x45,0x12,0x59,0x6F,0x12,0x1D,0x13,0xCA,0xA4,0x5D,0xDA,0x02};

  MessageEquipUpgradeRequest() : id_(), type_(( ::entity::ItemContainerType::type)0), location_(0), vocation_(( ::entity::VocationType::type)0), spend_freedom_item_(0) {
  }

  virtual ~MessageEquipUpgradeRequest() throw() {}

  std::string id_;
   ::entity::ItemContainerType::type type_;
  int16_t location_;
   ::entity::VocationType::type vocation_;
  bool spend_freedom_item_;

  _MessageEquipUpgradeRequest__isset __isset;

  void __set_id_(const std::string& val) {
    id_ = val;
  }

  void __set_type_(const  ::entity::ItemContainerType::type val) {
    type_ = val;
  }

  void __set_location_(const int16_t val) {
    location_ = val;
  }

  void __set_vocation_(const  ::entity::VocationType::type val) {
    vocation_ = val;
    __isset.vocation_ = true;
  }

  void __set_spend_freedom_item_(const bool val) {
    spend_freedom_item_ = val;
  }

  bool operator == (const MessageEquipUpgradeRequest & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(type_ == rhs.type_))
      return false;
    if (!(location_ == rhs.location_))
      return false;
    if (__isset.vocation_ != rhs.__isset.vocation_)
      return false;
    else if (__isset.vocation_ && !(vocation_ == rhs.vocation_))
      return false;
    if (!(spend_freedom_item_ == rhs.spend_freedom_item_))
      return false;
    return true;
  }
  bool operator != (const MessageEquipUpgradeRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageEquipUpgradeRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageEquipUpgradeRequest &a, MessageEquipUpgradeRequest &b);

typedef struct _MessageEquipUpgradeResponse__isset {
  _MessageEquipUpgradeResponse__isset() : id_(false) {}
  bool id_;
} _MessageEquipUpgradeResponse__isset;

class MessageEquipUpgradeResponse {
 public:

  static const char* ascii_fingerprint; // = "EB04A806CFFC9025AEE48CFFDC378A86";
  static const uint8_t binary_fingerprint[16]; // = {0xEB,0x04,0xA8,0x06,0xCF,0xFC,0x90,0x25,0xAE,0xE4,0x8C,0xFF,0xDC,0x37,0x8A,0x86};

  MessageEquipUpgradeResponse() : result_(0), id_() {
  }

  virtual ~MessageEquipUpgradeResponse() throw() {}

  bool result_;
  std::string id_;

  _MessageEquipUpgradeResponse__isset __isset;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_id_(const std::string& val) {
    id_ = val;
    __isset.id_ = true;
  }

  bool operator == (const MessageEquipUpgradeResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.id_ != rhs.__isset.id_)
      return false;
    else if (__isset.id_ && !(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const MessageEquipUpgradeResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageEquipUpgradeResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageEquipUpgradeResponse &a, MessageEquipUpgradeResponse &b);

typedef struct _MessageEquipInheritRequest__isset {
  _MessageEquipInheritRequest__isset() : src_vocation_(false), dest_vocation_(false) {}
  bool src_vocation_;
  bool dest_vocation_;
} _MessageEquipInheritRequest__isset;

class MessageEquipInheritRequest {
 public:

  static const char* ascii_fingerprint; // = "9B2E28418A255E9B28D1C7FC04F7EDE2";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0x2E,0x28,0x41,0x8A,0x25,0x5E,0x9B,0x28,0xD1,0xC7,0xFC,0x04,0xF7,0xED,0xE2};

  MessageEquipInheritRequest() : src_type_(( ::entity::ItemContainerType::type)0), src_location_(0), src_vocation_(( ::entity::VocationType::type)0), dest_type_(( ::entity::ItemContainerType::type)0), dest_location_(0), dest_vocation_(( ::entity::VocationType::type)0) {
  }

  virtual ~MessageEquipInheritRequest() throw() {}

   ::entity::ItemContainerType::type src_type_;
  int16_t src_location_;
   ::entity::VocationType::type src_vocation_;
   ::entity::ItemContainerType::type dest_type_;
  int16_t dest_location_;
   ::entity::VocationType::type dest_vocation_;

  _MessageEquipInheritRequest__isset __isset;

  void __set_src_type_(const  ::entity::ItemContainerType::type val) {
    src_type_ = val;
  }

  void __set_src_location_(const int16_t val) {
    src_location_ = val;
  }

  void __set_src_vocation_(const  ::entity::VocationType::type val) {
    src_vocation_ = val;
    __isset.src_vocation_ = true;
  }

  void __set_dest_type_(const  ::entity::ItemContainerType::type val) {
    dest_type_ = val;
  }

  void __set_dest_location_(const int16_t val) {
    dest_location_ = val;
  }

  void __set_dest_vocation_(const  ::entity::VocationType::type val) {
    dest_vocation_ = val;
    __isset.dest_vocation_ = true;
  }

  bool operator == (const MessageEquipInheritRequest & rhs) const
  {
    if (!(src_type_ == rhs.src_type_))
      return false;
    if (!(src_location_ == rhs.src_location_))
      return false;
    if (__isset.src_vocation_ != rhs.__isset.src_vocation_)
      return false;
    else if (__isset.src_vocation_ && !(src_vocation_ == rhs.src_vocation_))
      return false;
    if (!(dest_type_ == rhs.dest_type_))
      return false;
    if (!(dest_location_ == rhs.dest_location_))
      return false;
    if (__isset.dest_vocation_ != rhs.__isset.dest_vocation_)
      return false;
    else if (__isset.dest_vocation_ && !(dest_vocation_ == rhs.dest_vocation_))
      return false;
    return true;
  }
  bool operator != (const MessageEquipInheritRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageEquipInheritRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageEquipInheritRequest &a, MessageEquipInheritRequest &b);


class MessageEquipInheritResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageEquipInheritResponse() : result_(0) {
  }

  virtual ~MessageEquipInheritResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageEquipInheritResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageEquipInheritResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageEquipInheritResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageEquipInheritResponse &a, MessageEquipInheritResponse &b);


class GemData {
 public:

  static const char* ascii_fingerprint; // = "A21CD6FC680B6F6B78EF815C48AA551B";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0x1C,0xD6,0xFC,0x68,0x0B,0x6F,0x6B,0x78,0xEF,0x81,0x5C,0x48,0xAA,0x55,0x1B};

  GemData() : location_type_(( ::entity::GemLocationType::type)0), location_index_(0), id_(0), level_(0), exp_(0), locked_(0) {
  }

  virtual ~GemData() throw() {}

   ::entity::GemLocationType::type location_type_;
  int16_t location_index_;
  int32_t id_;
  int32_t level_;
  int32_t exp_;
  bool locked_;

  void __set_location_type_(const  ::entity::GemLocationType::type val) {
    location_type_ = val;
  }

  void __set_location_index_(const int16_t val) {
    location_index_ = val;
  }

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  void __set_level_(const int32_t val) {
    level_ = val;
  }

  void __set_exp_(const int32_t val) {
    exp_ = val;
  }

  void __set_locked_(const bool val) {
    locked_ = val;
  }

  bool operator == (const GemData & rhs) const
  {
    if (!(location_type_ == rhs.location_type_))
      return false;
    if (!(location_index_ == rhs.location_index_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(level_ == rhs.level_))
      return false;
    if (!(exp_ == rhs.exp_))
      return false;
    if (!(locked_ == rhs.locked_))
      return false;
    return true;
  }
  bool operator != (const GemData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GemData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GemData &a, GemData &b);


class MessageGemInitialize {
 public:

  static const char* ascii_fingerprint; // = "8BF1D8208C1E60ED6E8B86495D0C2B08";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xF1,0xD8,0x20,0x8C,0x1E,0x60,0xED,0x6E,0x8B,0x86,0x49,0x5D,0x0C,0x2B,0x08};

  MessageGemInitialize() : gathering_point_(0) {
  }

  virtual ~MessageGemInitialize() throw() {}

  std::vector<GemData>  gems_;
  int32_t gathering_point_;

  void __set_gems_(const std::vector<GemData> & val) {
    gems_ = val;
  }

  void __set_gathering_point_(const int32_t val) {
    gathering_point_ = val;
  }

  bool operator == (const MessageGemInitialize & rhs) const
  {
    if (!(gems_ == rhs.gems_))
      return false;
    if (!(gathering_point_ == rhs.gathering_point_))
      return false;
    return true;
  }
  bool operator != (const MessageGemInitialize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageGemInitialize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageGemInitialize &a, MessageGemInitialize &b);


class MessageGemSynchronize {
 public:

  static const char* ascii_fingerprint; // = "CA4E1E08C7F35EF26768078865C72EEA";
  static const uint8_t binary_fingerprint[16]; // = {0xCA,0x4E,0x1E,0x08,0xC7,0xF3,0x5E,0xF2,0x67,0x68,0x07,0x88,0x65,0xC7,0x2E,0xEA};

  MessageGemSynchronize() : type_((GemOperateType::type)0) {
  }

  virtual ~MessageGemSynchronize() throw() {}

  GemOperateType::type type_;
  GemData gem_;

  void __set_type_(const GemOperateType::type val) {
    type_ = val;
  }

  void __set_gem_(const GemData& val) {
    gem_ = val;
  }

  bool operator == (const MessageGemSynchronize & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(gem_ == rhs.gem_))
      return false;
    return true;
  }
  bool operator != (const MessageGemSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageGemSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageGemSynchronize &a, MessageGemSynchronize &b);


class MessageGemGatherRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageGemGatherRequest() {
  }

  virtual ~MessageGemGatherRequest() throw() {}


  bool operator == (const MessageGemGatherRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageGemGatherRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageGemGatherRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageGemGatherRequest &a, MessageGemGatherRequest &b);

typedef struct _MessageGemGatherResponse__isset {
  _MessageGemGatherResponse__isset() : gathering_point_(false), bonus_id_(false), bonus_count_(false) {}
  bool gathering_point_;
  bool bonus_id_;
  bool bonus_count_;
} _MessageGemGatherResponse__isset;

class MessageGemGatherResponse {
 public:

  static const char* ascii_fingerprint; // = "0221E6F365401E5EF98D7210120C5D0A";
  static const uint8_t binary_fingerprint[16]; // = {0x02,0x21,0xE6,0xF3,0x65,0x40,0x1E,0x5E,0xF9,0x8D,0x72,0x10,0x12,0x0C,0x5D,0x0A};

  MessageGemGatherResponse() : result_(0), gathering_point_(0), bonus_id_(0), bonus_count_(0) {
  }

  virtual ~MessageGemGatherResponse() throw() {}

  bool result_;
  int32_t gathering_point_;
  int32_t bonus_id_;
  int32_t bonus_count_;

  _MessageGemGatherResponse__isset __isset;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_gathering_point_(const int32_t val) {
    gathering_point_ = val;
    __isset.gathering_point_ = true;
  }

  void __set_bonus_id_(const int32_t val) {
    bonus_id_ = val;
    __isset.bonus_id_ = true;
  }

  void __set_bonus_count_(const int32_t val) {
    bonus_count_ = val;
    __isset.bonus_count_ = true;
  }

  bool operator == (const MessageGemGatherResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.gathering_point_ != rhs.__isset.gathering_point_)
      return false;
    else if (__isset.gathering_point_ && !(gathering_point_ == rhs.gathering_point_))
      return false;
    if (__isset.bonus_id_ != rhs.__isset.bonus_id_)
      return false;
    else if (__isset.bonus_id_ && !(bonus_id_ == rhs.bonus_id_))
      return false;
    if (__isset.bonus_count_ != rhs.__isset.bonus_count_)
      return false;
    else if (__isset.bonus_count_ && !(bonus_count_ == rhs.bonus_count_))
      return false;
    return true;
  }
  bool operator != (const MessageGemGatherResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageGemGatherResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageGemGatherResponse &a, MessageGemGatherResponse &b);


class MessageGemSkipGatheringPointRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageGemSkipGatheringPointRequest() {
  }

  virtual ~MessageGemSkipGatheringPointRequest() throw() {}


  bool operator == (const MessageGemSkipGatheringPointRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageGemSkipGatheringPointRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageGemSkipGatheringPointRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageGemSkipGatheringPointRequest &a, MessageGemSkipGatheringPointRequest &b);

typedef struct _MessageGemSkipGatheringPointResponse__isset {
  _MessageGemSkipGatheringPointResponse__isset() : gathering_point_(false) {}
  bool gathering_point_;
} _MessageGemSkipGatheringPointResponse__isset;

class MessageGemSkipGatheringPointResponse {
 public:

  static const char* ascii_fingerprint; // = "3409A6BAF48299E7727EECFEBEC3BDA9";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0x09,0xA6,0xBA,0xF4,0x82,0x99,0xE7,0x72,0x7E,0xEC,0xFE,0xBE,0xC3,0xBD,0xA9};

  MessageGemSkipGatheringPointResponse() : result_(0), gathering_point_(0) {
  }

  virtual ~MessageGemSkipGatheringPointResponse() throw() {}

  bool result_;
  int32_t gathering_point_;

  _MessageGemSkipGatheringPointResponse__isset __isset;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_gathering_point_(const int32_t val) {
    gathering_point_ = val;
    __isset.gathering_point_ = true;
  }

  bool operator == (const MessageGemSkipGatheringPointResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.gathering_point_ != rhs.__isset.gathering_point_)
      return false;
    else if (__isset.gathering_point_ && !(gathering_point_ == rhs.gathering_point_))
      return false;
    return true;
  }
  bool operator != (const MessageGemSkipGatheringPointResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageGemSkipGatheringPointResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageGemSkipGatheringPointResponse &a, MessageGemSkipGatheringPointResponse &b);


class MessageGemMoveRequest {
 public:

  static const char* ascii_fingerprint; // = "48F36A250CE99F96A1E1CA020E6BDC8B";
  static const uint8_t binary_fingerprint[16]; // = {0x48,0xF3,0x6A,0x25,0x0C,0xE9,0x9F,0x96,0xA1,0xE1,0xCA,0x02,0x0E,0x6B,0xDC,0x8B};

  MessageGemMoveRequest() : src_location_type_(( ::entity::GemLocationType::type)0), src_location_index_(0), dest_location_type_(( ::entity::GemLocationType::type)0), dest_location_index_(0) {
  }

  virtual ~MessageGemMoveRequest() throw() {}

   ::entity::GemLocationType::type src_location_type_;
  int16_t src_location_index_;
   ::entity::GemLocationType::type dest_location_type_;
  int16_t dest_location_index_;

  void __set_src_location_type_(const  ::entity::GemLocationType::type val) {
    src_location_type_ = val;
  }

  void __set_src_location_index_(const int16_t val) {
    src_location_index_ = val;
  }

  void __set_dest_location_type_(const  ::entity::GemLocationType::type val) {
    dest_location_type_ = val;
  }

  void __set_dest_location_index_(const int16_t val) {
    dest_location_index_ = val;
  }

  bool operator == (const MessageGemMoveRequest & rhs) const
  {
    if (!(src_location_type_ == rhs.src_location_type_))
      return false;
    if (!(src_location_index_ == rhs.src_location_index_))
      return false;
    if (!(dest_location_type_ == rhs.dest_location_type_))
      return false;
    if (!(dest_location_index_ == rhs.dest_location_index_))
      return false;
    return true;
  }
  bool operator != (const MessageGemMoveRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageGemMoveRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageGemMoveRequest &a, MessageGemMoveRequest &b);


class MessageGemMoveResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageGemMoveResponse() : result_(0) {
  }

  virtual ~MessageGemMoveResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageGemMoveResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageGemMoveResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageGemMoveResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageGemMoveResponse &a, MessageGemMoveResponse &b);


class MessageGemPromoteRequest {
 public:

  static const char* ascii_fingerprint; // = "95AE3CF840D157028DD90017CC1063BD";
  static const uint8_t binary_fingerprint[16]; // = {0x95,0xAE,0x3C,0xF8,0x40,0xD1,0x57,0x02,0x8D,0xD9,0x00,0x17,0xCC,0x10,0x63,0xBD};

  MessageGemPromoteRequest() : location_type_(( ::entity::GemLocationType::type)0), location_index_(0) {
  }

  virtual ~MessageGemPromoteRequest() throw() {}

   ::entity::GemLocationType::type location_type_;
  int16_t location_index_;

  void __set_location_type_(const  ::entity::GemLocationType::type val) {
    location_type_ = val;
  }

  void __set_location_index_(const int16_t val) {
    location_index_ = val;
  }

  bool operator == (const MessageGemPromoteRequest & rhs) const
  {
    if (!(location_type_ == rhs.location_type_))
      return false;
    if (!(location_index_ == rhs.location_index_))
      return false;
    return true;
  }
  bool operator != (const MessageGemPromoteRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageGemPromoteRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageGemPromoteRequest &a, MessageGemPromoteRequest &b);


class MessageGemPromoteResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageGemPromoteResponse() : result_(0) {
  }

  virtual ~MessageGemPromoteResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageGemPromoteResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageGemPromoteResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageGemPromoteResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageGemPromoteResponse &a, MessageGemPromoteResponse &b);


class MessageGemDecomposeRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageGemDecomposeRequest() {
  }

  virtual ~MessageGemDecomposeRequest() throw() {}


  bool operator == (const MessageGemDecomposeRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageGemDecomposeRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageGemDecomposeRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageGemDecomposeRequest &a, MessageGemDecomposeRequest &b);

typedef struct _MessageGemDecomposeResponse__isset {
  _MessageGemDecomposeResponse__isset() : shard_count_(false) {}
  bool shard_count_;
} _MessageGemDecomposeResponse__isset;

class MessageGemDecomposeResponse {
 public:

  static const char* ascii_fingerprint; // = "3409A6BAF48299E7727EECFEBEC3BDA9";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0x09,0xA6,0xBA,0xF4,0x82,0x99,0xE7,0x72,0x7E,0xEC,0xFE,0xBE,0xC3,0xBD,0xA9};

  MessageGemDecomposeResponse() : result_(0), shard_count_(0) {
  }

  virtual ~MessageGemDecomposeResponse() throw() {}

  bool result_;
  int32_t shard_count_;

  _MessageGemDecomposeResponse__isset __isset;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_shard_count_(const int32_t val) {
    shard_count_ = val;
    __isset.shard_count_ = true;
  }

  bool operator == (const MessageGemDecomposeResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.shard_count_ != rhs.__isset.shard_count_)
      return false;
    else if (__isset.shard_count_ && !(shard_count_ == rhs.shard_count_))
      return false;
    return true;
  }
  bool operator != (const MessageGemDecomposeResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageGemDecomposeResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageGemDecomposeResponse &a, MessageGemDecomposeResponse &b);


class MessageGemLockRequest {
 public:

  static const char* ascii_fingerprint; // = "D3B54AFC9AF8373704180068CDCC6876";
  static const uint8_t binary_fingerprint[16]; // = {0xD3,0xB5,0x4A,0xFC,0x9A,0xF8,0x37,0x37,0x04,0x18,0x00,0x68,0xCD,0xCC,0x68,0x76};

  MessageGemLockRequest() : location_type_(( ::entity::GemLocationType::type)0), location_index_(0), locked_(0) {
  }

  virtual ~MessageGemLockRequest() throw() {}

   ::entity::GemLocationType::type location_type_;
  int16_t location_index_;
  bool locked_;

  void __set_location_type_(const  ::entity::GemLocationType::type val) {
    location_type_ = val;
  }

  void __set_location_index_(const int16_t val) {
    location_index_ = val;
  }

  void __set_locked_(const bool val) {
    locked_ = val;
  }

  bool operator == (const MessageGemLockRequest & rhs) const
  {
    if (!(location_type_ == rhs.location_type_))
      return false;
    if (!(location_index_ == rhs.location_index_))
      return false;
    if (!(locked_ == rhs.locked_))
      return false;
    return true;
  }
  bool operator != (const MessageGemLockRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageGemLockRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageGemLockRequest &a, MessageGemLockRequest &b);


class MessageGemLockResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageGemLockResponse() : result_(0) {
  }

  virtual ~MessageGemLockResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageGemLockResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageGemLockResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageGemLockResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageGemLockResponse &a, MessageGemLockResponse &b);


class MessageGemLockAllRequest {
 public:

  static const char* ascii_fingerprint; // = "30794F3DFF142367286651DDA884035D";
  static const uint8_t binary_fingerprint[16]; // = {0x30,0x79,0x4F,0x3D,0xFF,0x14,0x23,0x67,0x28,0x66,0x51,0xDD,0xA8,0x84,0x03,0x5D};

  MessageGemLockAllRequest() : locked_(0) {
  }

  virtual ~MessageGemLockAllRequest() throw() {}

  bool locked_;

  void __set_locked_(const bool val) {
    locked_ = val;
  }

  bool operator == (const MessageGemLockAllRequest & rhs) const
  {
    if (!(locked_ == rhs.locked_))
      return false;
    return true;
  }
  bool operator != (const MessageGemLockAllRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageGemLockAllRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageGemLockAllRequest &a, MessageGemLockAllRequest &b);


class MessageGemLockAllResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageGemLockAllResponse() : result_(0) {
  }

  virtual ~MessageGemLockAllResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageGemLockAllResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageGemLockAllResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageGemLockAllResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageGemLockAllResponse &a, MessageGemLockAllResponse &b);


class MessageShortcutInitialize {
 public:

  static const char* ascii_fingerprint; // = "A803C54EAD95E24D90C5E66FB98EA72B";
  static const uint8_t binary_fingerprint[16]; // = {0xA8,0x03,0xC5,0x4E,0xAD,0x95,0xE2,0x4D,0x90,0xC5,0xE6,0x6F,0xB9,0x8E,0xA7,0x2B};

  MessageShortcutInitialize() {
  }

  virtual ~MessageShortcutInitialize() throw() {}

  std::vector<int32_t>  shortcuts_;

  void __set_shortcuts_(const std::vector<int32_t> & val) {
    shortcuts_ = val;
  }

  bool operator == (const MessageShortcutInitialize & rhs) const
  {
    if (!(shortcuts_ == rhs.shortcuts_))
      return false;
    return true;
  }
  bool operator != (const MessageShortcutInitialize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageShortcutInitialize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageShortcutInitialize &a, MessageShortcutInitialize &b);


class MessageShortcutSetRequest {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  MessageShortcutSetRequest() : index_(0), item_template_(0) {
  }

  virtual ~MessageShortcutSetRequest() throw() {}

  int32_t index_;
  int32_t item_template_;

  void __set_index_(const int32_t val) {
    index_ = val;
  }

  void __set_item_template_(const int32_t val) {
    item_template_ = val;
  }

  bool operator == (const MessageShortcutSetRequest & rhs) const
  {
    if (!(index_ == rhs.index_))
      return false;
    if (!(item_template_ == rhs.item_template_))
      return false;
    return true;
  }
  bool operator != (const MessageShortcutSetRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageShortcutSetRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageShortcutSetRequest &a, MessageShortcutSetRequest &b);


class MessageShortcutSetResponse {
 public:

  static const char* ascii_fingerprint; // = "5C4D84321B3CBB236930D75F16BF3C14";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x4D,0x84,0x32,0x1B,0x3C,0xBB,0x23,0x69,0x30,0xD7,0x5F,0x16,0xBF,0x3C,0x14};

  MessageShortcutSetResponse() : result_(0), index_(0), item_template_(0) {
  }

  virtual ~MessageShortcutSetResponse() throw() {}

  bool result_;
  int32_t index_;
  int32_t item_template_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_index_(const int32_t val) {
    index_ = val;
  }

  void __set_item_template_(const int32_t val) {
    item_template_ = val;
  }

  bool operator == (const MessageShortcutSetResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (!(index_ == rhs.index_))
      return false;
    if (!(item_template_ == rhs.item_template_))
      return false;
    return true;
  }
  bool operator != (const MessageShortcutSetResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageShortcutSetResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageShortcutSetResponse &a, MessageShortcutSetResponse &b);


class MessageVipGiftsPickRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageVipGiftsPickRequest() {
  }

  virtual ~MessageVipGiftsPickRequest() throw() {}


  bool operator == (const MessageVipGiftsPickRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageVipGiftsPickRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageVipGiftsPickRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageVipGiftsPickRequest &a, MessageVipGiftsPickRequest &b);


class MessageVipGiftsPickResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageVipGiftsPickResponse() : result_(0) {
  }

  virtual ~MessageVipGiftsPickResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageVipGiftsPickResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageVipGiftsPickResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageVipGiftsPickResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageVipGiftsPickResponse &a, MessageVipGiftsPickResponse &b);


class MessageVipGiftsSynchronize {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageVipGiftsSynchronize() : status_(0) {
  }

  virtual ~MessageVipGiftsSynchronize() throw() {}

  bool status_;

  void __set_status_(const bool val) {
    status_ = val;
  }

  bool operator == (const MessageVipGiftsSynchronize & rhs) const
  {
    if (!(status_ == rhs.status_))
      return false;
    return true;
  }
  bool operator != (const MessageVipGiftsSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageVipGiftsSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageVipGiftsSynchronize &a, MessageVipGiftsSynchronize &b);


class MessageItemTreasureHuntRequest {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  MessageItemTreasureHuntRequest() : num_(0), tab_id_(0) {
  }

  virtual ~MessageItemTreasureHuntRequest() throw() {}

  int32_t num_;
  int32_t tab_id_;

  void __set_num_(const int32_t val) {
    num_ = val;
  }

  void __set_tab_id_(const int32_t val) {
    tab_id_ = val;
  }

  bool operator == (const MessageItemTreasureHuntRequest & rhs) const
  {
    if (!(num_ == rhs.num_))
      return false;
    if (!(tab_id_ == rhs.tab_id_))
      return false;
    return true;
  }
  bool operator != (const MessageItemTreasureHuntRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageItemTreasureHuntRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageItemTreasureHuntRequest &a, MessageItemTreasureHuntRequest &b);


class MessageItemTreasureHuntResponse {
 public:

  static const char* ascii_fingerprint; // = "544E78FB61F11E1E70D5970BE82A4F2D";
  static const uint8_t binary_fingerprint[16]; // = {0x54,0x4E,0x78,0xFB,0x61,0xF1,0x1E,0x1E,0x70,0xD5,0x97,0x0B,0xE8,0x2A,0x4F,0x2D};

  MessageItemTreasureHuntResponse() : tab_id_(0) {
  }

  virtual ~MessageItemTreasureHuntResponse() throw() {}

  int32_t tab_id_;
  std::vector<int32_t>  template_id_list_;
  std::vector<int32_t>  rand_pos_;

  void __set_tab_id_(const int32_t val) {
    tab_id_ = val;
  }

  void __set_template_id_list_(const std::vector<int32_t> & val) {
    template_id_list_ = val;
  }

  void __set_rand_pos_(const std::vector<int32_t> & val) {
    rand_pos_ = val;
  }

  bool operator == (const MessageItemTreasureHuntResponse & rhs) const
  {
    if (!(tab_id_ == rhs.tab_id_))
      return false;
    if (!(template_id_list_ == rhs.template_id_list_))
      return false;
    if (!(rand_pos_ == rhs.rand_pos_))
      return false;
    return true;
  }
  bool operator != (const MessageItemTreasureHuntResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageItemTreasureHuntResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageItemTreasureHuntResponse &a, MessageItemTreasureHuntResponse &b);


class MessageItemTreasureHuntNotice {
 public:

  static const char* ascii_fingerprint; // = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};

  MessageItemTreasureHuntNotice() {
  }

  virtual ~MessageItemTreasureHuntNotice() throw() {}

  std::vector<std::string>  notices_;

  void __set_notices_(const std::vector<std::string> & val) {
    notices_ = val;
  }

  bool operator == (const MessageItemTreasureHuntNotice & rhs) const
  {
    if (!(notices_ == rhs.notices_))
      return false;
    return true;
  }
  bool operator != (const MessageItemTreasureHuntNotice &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageItemTreasureHuntNotice & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageItemTreasureHuntNotice &a, MessageItemTreasureHuntNotice &b);

}} // namespace

#endif
