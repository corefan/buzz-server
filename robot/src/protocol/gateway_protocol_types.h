/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef gateway_protocol_TYPES_H
#define gateway_protocol_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "kickout_actor_type_types.h"


namespace gateway { namespace protocol {

struct MessageType {
  enum type {
    MESSAGE_MIN = 0,
    MESSAGE_SYSTEM = 0,
    MESSAGE_VERIFY_QUESTION = 1,
    MESSAGE_VERIFY_QUESTION_REQUEST = 2,
    MESSAGE_VERIFY_QUESTION_RESPONSE = 3,
    MESSAGE_TEST = 4,
    MESSAGE_LOGIN_REQUEST = 5,
    MESSAGE_LOGIN_RESPONSE = 6,
    MESSAGE_LOGOUT_REQUEST = 7,
    MESSAGE_LOGOUT_RESPONSE = 8,
    MESSAGE_KICKOUT_ACTOR = 9,
    MESSAGE_CREATE_ACTOR = 10,
    MESSAGE_SYNCHRONIZE_ACTOR = 11,
    MESSAGE_SYNCHRONIZE_ACTOR_FUNCTIONALITY_STATE = 12,
    MESSAGE_SYNCHRONIZE_ACTOR_SUB_FIGHT_SCORE = 13,
    MESSAGE_SYNCHRONIZE_NPC = 14,
    MESSAGE_SYNCHRONIZE_SCENE_ITEM = 15,
    MESSAGE_ACTOR_ENTER_MAP = 16,
    MESSAGE_ACTOR_MOVE = 17,
    MESSAGE_ACTOR_RELOCATION = 18,
    MESSAGE_ROLE_MOVE_SYNCHRONIZE = 19,
    MESSAGE_CREATE_ACTOR_SYNCHRONIZE = 20,
    MESSAGE_CREATE_NPC_SYNCHRONIZE = 21,
    MESSAGE_CREATE_SCENE_ITEM_SYNCHRONIZE = 22,
    MESSAGE_DESTORY_ROLE_SYNCHRONIZE = 23,
    MESSAGE_ADD_EXP_SYNCHRONIZE = 24,
    MESSAGE_ACTOR_VIP_SYNCHRONIZE = 25,
    MESSAGE_WORLD_JUMP_VIP_NUM_SYNCHRONIZE = 26,
    MESSAGE_CREATE_AOI_ROLES = 27,
    MESSAGE_DESTORY_AOI_ROLES = 28,
    MESSAGE_ACTOR_FACADE_REQUEST = 29,
    MESSAGE_ACTOR_FACADE_RESPONSE = 30,
    MESSAGE_ACTOR_FUNCTIONALITY_OPEN_REQUEST = 31,
    MESSAGE_ACTOR_FUNCTIONALITY_OPEN_RESPONSE = 32,
    MESSAGE_ACTOR_USE_TASLIMAN_REQUEST = 33,
    MESSAGE_ACTOR_USE_TASLIMAN_RESPONSE = 34,
    MESSAGE_ACTOR_TASLIMAN_SYNCHRONIZE = 35,
    MESSAGE_ERROR_CODE = 36,
    MESSAGE_INFORM_NOTIFY = 37,
    MESSAGE_SKILL_OPERATE = 38,
    MESSAGE_SKILL_HIT = 39,
    MESSAGE_ACTOR_CHOOSE_PK_MODE = 40,
    MESSAGE_ENTER_FIGHTING_STATUS = 41,
    MESSAGE_LEAVE_FIGHTING_STATUS = 42,
    MESSAGE_ENTER_PVP_STATUS = 43,
    MESSAGE_LEAVE_PVP_STATUS = 44,
    MESSAGE_PVP_STATUS_BROADCAST = 45,
    MEESAGE_SKILL_BREAK_SYNCHRONIZE = 46,
    MESSAGE_SKILL_ATTRIBUTE_SYNCHRONIZE = 47,
    MESSAGE_BUFF_INITIALIZE = 48,
    MESSAGE_ADD_BUFF = 49,
    MESSAGE_REMOVE_BUFF = 50,
    MESSAGE_ITEM_CONTAINER_INITIALIZE = 51,
    MESSAGE_ITEM_CREATE_SYNCHRONIZE = 52,
    MESSAGE_SYNCHRONIZE_ITEM = 53,
    MESSAGE_ITEM_CONTAINER_OPERATE = 54,
    MESSAGE_ITEM_MOVE = 55,
    MESSAGE_ITEM_REMOVE = 56,
    MESSAGE_ITEM_USE = 57,
    MESSAGE_ITEM_SPLIT = 58,
    MESSAGE_ITEM_ARRANGE = 59,
    MESSAGE_ITEM_ARRANGE_RESULT = 60,
    MESSAGE_EXTEND_CONTAINER = 61,
    MESSAGE_ITEM_COMPOSE_REQUEST = 62,
    MESSAGE_ITEM_COMPOSE_RESPONSE = 63,
    MESSAGE_CREATE_ACTOR_EQUIP_BROADCAST = 64,
    MESSAGE_UPDATE_ACTOR_EQUIP_BROADCAST = 65,
    MESSAGE_EQUIP_COMPARE_REQUEST = 66,
    MESSAGE_EQUIP_COMPARE_RESPONSE = 67,
    MESSAGE_EQUIP_INTENSIFY_REQUEST = 68,
    MESSAGE_EQUIP_INTENSIFY_RESPONSE = 69,
    MESSAGE_EQUIP_REFINE_REQUEST = 70,
    MESSAGE_EQUIP_REFINE_RESPONSE = 71,
    MESSAGE_EQUIP_REFINE_CONFIRM_REQUEST = 72,
    MESSAGE_EQUIP_REFINE_CONFIRM_RESPONSE = 73,
    MESSAGE_EQUIP_UPGRADE_REQUEST = 74,
    MESSAGE_EQUIP_UPGRADE_RESPONSE = 75,
    MESSAGE_EQUIP_INHERIT_REQUEST = 76,
    MESSAGE_EQUIP_INHERIT_RESPONSE = 77,
    MESSAGE_GEM_INITIALIZE = 78,
    MESSAGE_GEM_SYNCHRONIZE = 79,
    MESSAGE_GEM_GATHER_REQUEST = 80,
    MESSAGE_GEM_GATHER_RESPONSE = 81,
    MESSAGE_GEM_SKIP_GATHERING_POINT_REQUEST = 82,
    MESSAGE_GEM_SKIP_GATHERING_POINT_RESPONSE = 83,
    MESSAGE_GEM_MOVE_REQUEST = 84,
    MESSAGE_GEM_MOVE_RESPONSE = 85,
    MESSAGE_GEM_PROMOTE_REQUEST = 86,
    MESSAGE_GEM_PROMOTE_RESPONSE = 87,
    MESSAGE_GEM_DECOMPOSE_REQUEST = 88,
    MESSAGE_GEM_DECOMPOSE_RESPONSE = 89,
    MESSAGE_GEM_LOCK_REQUEST = 90,
    MESSAGE_GEM_LOCK_RESPONSE = 91,
    MESSAGE_GEM_LOCK_ALL_REQUEST = 92,
    MESSAGE_GEM_LOCK_ALL_RESPONSE = 93,
    MESSAGE_SHORTCUT_INITIALIZE = 94,
    MESSAGE_SHORTCUT_SET_REQUEST = 95,
    MESSAGE_SHORTCUT_SET_RESPONSE = 96,
    MESSAGE_VIP_GIFTS_PICK_REQUEST = 97,
    MESSAGE_VIP_GIFTS_PICK_RESPONSE = 98,
    MESSAGE_VIP_GIFTS_SYNCHRONIZE = 99,
    MESSAGE_ITEM_TREASURE_HUNT_REQUEST = 100,
    MESSAGE_ITEM_TREASURE_HUNT_RESPONSE = 101,
    MESSAGE_ITEM_TREASURE_HUNT_NOTICE = 102,
    MESSAGE_GM_ADD_ITEM = 103,
    MESSAGE_GM_SCENE_JUMP = 104,
    MESSAGE_GM_OPEN_SWORD = 105,
    MESSAGE_GM_COMMAND = 106,
    MESSAGE_SCENE_REQUEST_JUMP = 107,
    MESSAGE_SCENE_ACTOR_JUMP = 108,
    MESSAGE_SCENE_DAYNIGHT_CHANGE = 109,
    MESSAGE_SCENE_ROLE_KILLED = 110,
    MESSAGE_SCENE_GATHER = 111,
    MESSAGE_SCENE_GATHER_RESPONSE = 112,
    MESSAGE_SCENE_PICK_UP_REQUEST = 113,
    MESSAGE_SCENE_PICK_UP_RESPONSE = 114,
    MESSAGE_SCENE_JUMP_REQUEST = 115,
    MESSAGE_SCENE_JUMP_RESPONSE = 116,
    MESSAGE_SCENE_WORLD_BOSS_INITIALIZE = 117,
    MESSAGE_SCENE_BOSS_KILLED = 118,
    MESSAGE_SCENE_SUMMON_WORLD_BOSS = 119,
    MESSAGE_SCENE_ACTOR_CHOOSE_REVIVE_MODE_REQUEST = 120,
    MESSAGE_SCENE_ACTOR_CHOOSE_REVIVE_MODE_RESPONSE = 121,
    MESSAGE_SCENE_ZAZEN_REQUEST = 122,
    MESSAGE_SCENE_ZAZEN_RESPONSE = 123,
    MESSAGE_SCENE_CANCEL_ZAZEN_REQUEST = 124,
    MESSAGE_SCENE_CANCEL_ZAZEN_RESPONSE = 125,
    MESSAGE_SCENE_ZAZEN_INCOME_NOTICE = 126,
    MESSAGE_SCENE_CONSECUTIVE_KILL_NOTICE = 127,
    MESSAGE_SOUL_INITIALIZE = 128,
    MESSAGE_SOUL_SYNCHRONIZE = 129,
    MESSAGE_SOUL_UNLOCK_REQUEST = 130,
    MESSAGE_SOUL_UNLOCK_RESPONSE = 131,
    MESSAGE_SOUL_UPGRADE_STEP_REQUEST = 132,
    MESSAGE_SOUL_UPGRADE_STEP_RESPONSE = 133,
    MESSAGE_SOUL_UPGRADE_LEVEL_REQUEST = 134,
    MESSAGE_SOUL_UPGRADE_LEVEL_RESPONSE = 135,
    MESSAGE_SOUL_SET_REQUEST = 136,
    MESSAGE_SOUL_SET_RESPONSE = 137,
    MESSAGE_SOUL_RESET_REQUEST = 138,
    MESSAGE_SOUL_RESET_RESPONSE = 139,
    MESSAGE_SOUL_SETTING_STAND_REQUEST = 140,
    MESSAGE_SOUL_SETTING_STAND_RESPONSE = 141,
    MESSAGE_SOUL_SKILL_UPGRADE_REQUEST = 142,
    MESSAGE_SOUL_SKILL_UPGRADE_RESPONSE = 143,
    MESSAGE_SOUL_ALTAR_INITIALIZE = 144,
    MESSAGE_SOUL_ALTAR_SYNCHRONIZE = 145,
    MESSAGE_SOUL_ALTAR_CARD_SYNCHRONIZE = 146,
    MESSAGE_SOUL_ALTAR_SUMMON_REQUEST = 147,
    MESSAGE_SOUL_ALTAR_SUMMON_RESPONSE = 148,
    MESSAGE_SOUL_ALTAR_TAKE_REQUEST = 149,
    MESSAGE_SOUL_ALTAR_TAKE_RESPONSE = 150,
    MESSAGE_SOUL_ALTAR_RESET_REQUEST = 151,
    MESSAGE_SOUL_ALTAR_RESET_RESPONSE = 152,
    MESSAGE_TASK_INITIALIZE = 153,
    MESSAGE_TASK_SYNCHRONIZE = 154,
    MESSAGE_TASK_ACCEPT = 155,
    MESSAGE_TASK_FINISH = 156,
    MESSAGE_TASK_ABANDON = 157,
    MESSAGE_TASK_TALK_NPC = 158,
    MESSAGE_TASK_CIRCLE_INITIALIZE = 159,
    MESSAGE_TASK_CIRCLE_OPT_REQUEST = 160,
    MESSAGE_TASK_CIRCLE_OPT_RESPONSE = 161,
    MESSAGE_TASK_TRIP_INITIALIZE = 162,
    MESSAGE_TASK_TRIP_OPT_REQUEST = 163,
    MESSAGE_TASK_TRIP_OPT_RESPONSE = 164,
    MESSAGE_TASK_SUMMON_NPC_REQUEST = 165,
    MESSAGE_TASK_SUMMON_NPC_RESPONSE = 166,
    MESSAGE_TASK_DAILY_INITIALIZE = 167,
    MESSAGE_TASK_DAILY_REQUEST = 168,
    MESSAGE_TASK_DAILY_RESPONSE = 169,
    MESSAGE_TASK_DAILY_AWARD_REQUEST = 170,
    MESSAGE_TASK_DAILY_AWARD_RESPONSE = 171,
    MESSAGE_TASK_TRANSPORT_INITIALIZE = 172,
    MESSAGE_TASK_TRANSPORT_SYNCHRONIZE = 173,
    MESSAGE_TASK_TRANSPORT_REFRESH_QUALITY_REQUEST = 174,
    MESSAGE_TASK_TRANSPORT_REFRESH_QUALITY_RESPONSE = 175,
    MESSAGE_TASK_TRANSPORT_ACCEPT_REQUEST = 176,
    MESSAGE_TASK_TRANSPORT_ACCEPT_RESPONSE = 177,
    MESSAGE_TASK_TRANSPORT_FINISH_REQUEST = 178,
    MESSAGE_TASK_TRANSPORT_FINISH_RESPONSE = 179,
    MESSAGE_ATTR_AOI_SYNCHRONIZE = 180,
    MESSAGE_ATTR_SWORD_INITIALIZE = 181,
    MESSAGE_ATTR_SWORD_UPGRADE_REQUEST = 182,
    MESSAGE_ATTR_SWORD_UPGRADE_RESPONSE = 183,
    MESSAGE_ATTR_SWORD_SYNCHRONIZE = 184,
    MESSAGE_ATTR_SWORD_EQUIP = 185,
    MESSAGE_ATTR_SWORD_UNEQUIP = 186,
    MESSAGE_ATTR_SWORD_COMPARE_REQUEST = 187,
    MESSAGE_ATTR_SWORD_COMPARE_RESPONSE = 188,
    MESSAGE_ATTR_NOBLE_INITIALIZE = 189,
    MESSAGE_ATTR_NOBLE_PROMOTE_REQUEST = 190,
    MESSAGE_ATTR_NOBLE_PROMOTE_RESPONSE = 191,
    MESSAGE_ATTR_NOBLE_BREAKTHROUGH_REQUEST = 192,
    MESSAGE_ATTR_NOBLE_BREAKTHROUGH_RESPONSE = 193,
    MESSAGE_ATTR_NOBLE_COMPARE_REQUEST = 194,
    MESSAGE_ATTR_NOBLE_COMPARE_RESPONSE = 195,
    MESSAGE_ATTR_ELEMENT_INITIALIZE = 196,
    MESSAGE_ATTR_ELEMENT_UPGRADE_REQUEST = 197,
    MESSAGE_ATTR_ELEMENT_UPGRADE_RESPONSE = 198,
    MESSAGE_ATTR_ELEMENT_COMPARE_REQUEST = 199,
    MESSAGE_ATTR_ELEMENT_COMPARE_RESPONSE = 200,
    MESSAGE_ATTR_SPIRIT_INITIALIZE = 201,
    MESSAGE_ATTR_SPIRIT_SYNCHRONIZE = 202,
    MESSAGE_ATTR_SPIRIT_FACADE_SYNCHRONIZE = 203,
    MESSAGE_ATTR_SPIRIT_UPGRADE_REQUEST = 204,
    MESSAGE_ATTR_SPIRIT_UPGRADE_RESPONSE = 205,
    MESSAGE_ATTR_SPIRIT_TRANSFORM_FACADE_REQUEST = 206,
    MESSAGE_ATTR_SPIRIT_TRANSFORM_FACADE_RESPONSE = 207,
    MESSAGE_ATTR_SPIRIT_COMPARE_REQUEST = 208,
    MESSAGE_ATTR_SPIRIT_COMPARE_RESPONSE = 209,
    MESSAGE_ATTR_RUNE_SYNCHRONIZE = 210,
    MESSAGE_ATTR_RUNE_COMPOSE_REQUEST = 211,
    MESSAGE_ATTR_RUNE_COMPOSE_RESPONSE = 212,
    MESSAGE_ATTR_RUNE_MOVE_REQUEST = 213,
    MESSAGE_ATTR_RUNE_MOVE_RESPONSE = 214,
    MESSAGE_ATTR_LEGENDARY_WEAPON_INITIALIZE = 215,
    MESSAGE_ATTR_LEGENDARY_WEAPON_PIECE_SYNCHRONIZE = 216,
    MESSAGE_ATTR_LEGENDARY_WEAPON_REPAIR_REQUEST = 217,
    MESSAGE_ATTR_LEGENDARY_WEAPON_REPAIR_RESPONSE = 218,
    MESSAGE_CHAT_REQUEST = 219,
    MESSAGE_CHAT_RESPONSE = 220,
    MESSAGE_CHAT_SYNCHRONIZE = 221,
    MESSAGE_MAIL_INITIALIZE = 222,
    MESSAGE_MAIL_ADD = 223,
    MESSAGE_MAIL_SEND_REQUEST = 224,
    MESSAGE_MAIL_SEND_RESPONSE = 225,
    MESSAGE_MAIL_DEL_REQUEST = 226,
    MESSAGE_MAIL_DEL_RESPONSE = 227,
    MESSAGE_MAIL_READ_REQUEST = 228,
    MESSAGE_MAIL_READ_RESPONSE = 229,
    MESSAGE_MAIL_PICK_AFFIX_REQUEST = 230,
    MESSAGE_MAIL_PICK_AFFIX_RESPONSE = 231,
    MESSAGE_MAIL_DEL = 232,
    MESSAGE_SHOP_BUYBACK_INITIALIZE = 233,
    MESSAGE_SHOP_BUY_REQUEST = 234,
    MESSAGE_SHOP_BUY_RESPONSE = 235,
    MESSAGE_SHOP_BUYBACK_REQUEST = 236,
    MESSAGE_SHOP_BUYBACK_RESPONSE = 237,
    MESSAGE_SHOP_SELL_REQUEST = 238,
    MESSAGE_SHOP_SELL_RESPONSE = 239,
    MESSAGE_SOCIAL_CONTACTS_INITIALIZE = 240,
    MESSAGE_SOCIAL_CONTACTS_SYNCHRONIZE = 241,
    MESSAGE_SOCIAL_CONTACTS_EDIT_SIGNATURE_REQUEST = 242,
    MESSAGE_SOCIAL_CONTACTS_EDIT_SIGNATURE_RESPONSE = 243,
    MESSAGE_SOCIAL_CONTACTS_ADD_REQUEST = 244,
    MESSAGE_SOCIAL_CONTACTS_ADD_RESPONSE = 245,
    MESSAGE_SOCIAL_CONTACTS_ADD_NOTIFY = 246,
    MESSAGE_SOCIAL_CONTACTS_REMOVE_REQUEST = 247,
    MESSAGE_SOCIAL_CONTACTS_REMOVE_RESPONSE = 248,
    MESSAGE_SOCIAL_CONTACTS_MOVE_REQUEST = 249,
    MESSAGE_SOCIAL_CONTACTS_MOVE_RESPONSE = 250,
    MESSAGE_SOCIAL_CONTACTS_RECOMMEND_REQUEST = 251,
    MESSAGE_SOCIAL_CONTACTS_RECOMMEND_RESPONSE = 252,
    MESSAGE_SOCIAL_ENEMY_INITIALIZE = 253,
    MESSAGE_SOCIAL_ENEMY_SYNCHRONIZE = 254,
    MESSAGE_SOCIAL_ENEMY_ADD_REQUEST = 255,
    MESSAGE_SOCIAL_ENEMY_ADD_RESPONSE = 256,
    MESSAGE_SOCIAL_ENEMY_REMOVE_REQUEST = 257,
    MESSAGE_SOCIAL_ENEMY_REMOVE_RESPONSE = 258,
    MESSAGE_HOMELAND_INITIALIZE = 259,
    MESSAGE_HOMELAND_SYNCHRONIZE = 260,
    MESSAGE_HOMELAND_FRIEND_SYNCHRONIZE = 261,
    MESSAGE_HOMELAND_INVADER_SYNCHRONIZE = 262,
    MESSAGE_HOMELAND_SUPPORTED_SOUL_SYNCHRONIZE = 263,
    MESSAGE_HOMELAND_SUPPORT_SOUL_SYNCHRONIZE = 264,
    MESSAGE_HOMELAND_EVENT_SYNCHRONIZE = 265,
    MESSAGE_HOMELAND_VISIT_REQUEST = 266,
    MESSAGE_HOMELAND_VISIT_RESPONSE = 267,
    MESSAGE_HOMELAND_CLEAR_UPGRADE_COOLING_REQUEST = 268,
    MESSAGE_HOMELAND_CLEAR_UPGRADE_COOLING_RESPONSE = 269,
    MESSAGE_HOMELAND_TEMPLE_UPGRADE_REQUEST = 270,
    MESSAGE_HOMELAND_TEMPLE_UPGRADE_RESPONSE = 271,
    MESSAGE_HOMELAND_TEMPLE_HARVEST_REQUEST = 272,
    MESSAGE_HOMELAND_TEMPLE_HARVEST_RESPONSE = 273,
    MESSAGE_HOMELAND_TEMPLE_CLEAR_HARVEST_COOLING_REQUEST = 274,
    MESSAGE_HOMELAND_TEMPLE_CLEAR_HARVEST_COOLING_RESPONSE = 275,
    MESSAGE_HOMELAND_TEMPLE_FORCE_HARVEST_REQUEST = 276,
    MESSAGE_HOMELAND_TEMPLE_FORCE_HARVEST_RESPONSE = 277,
    MESSAGE_HOMELAND_GOLDMINE_UPGRADE_REQUEST = 278,
    MESSAGE_HOMELAND_GOLDMINE_UPGRADE_RESPONSE = 279,
    MESSAGE_HOMELAND_GOLDMINE_HARVEST_REQUEST = 280,
    MESSAGE_HOMELAND_GOLDMINE_HARVEST_RESPONSE = 281,
    MESSAGE_HOMELAND_POOL_UPGRADE_REQUEST = 282,
    MESSAGE_HOMELAND_POOL_UPGRADE_RESPONSE = 283,
    MESSAGE_HOMELAND_POOL_HARVEST_REQUEST = 284,
    MESSAGE_HOMELAND_POOL_HARVEST_RESPONSE = 285,
    MESSAGE_HOMELAND_POOL_DOUBLE_HARVEST_REQUEST = 286,
    MESSAGE_HOMELAND_POOL_DOUBLE_HARVEST_RESPONSE = 287,
    MESSAGE_HOMELAND_CHURCH_PRAY_REQUEST = 288,
    MESSAGE_HOMELAND_CHURCH_PRAY_RESPONSE = 289,
    MESSAGE_HOMELAND_CHURCH_REFRESH_REQUEST = 290,
    MESSAGE_HOMELAND_CHURCH_REFRESH_RESPONSE = 291,
    MESSAGE_HOMELAND_CHURCH_VIP_REFRESH_REQUEST = 292,
    MESSAGE_HOMELAND_CHURCH_VIP_REFRESH_RESPONSE = 293,
    MESSAGE_HOMELAND_CHURCH_HARVEST_REQUEST = 294,
    MESSAGE_HOMELAND_CHURCH_HARVEST_RESPONSE = 295,
    MESSAGE_HOMELAND_TREE_WATER_REQUEST = 296,
    MESSAGE_HOMELAND_TREE_WATER_RESPONSE = 297,
    MESSAGE_HOMELAND_TREE_ASSIST_WATER_REQUEST = 298,
    MESSAGE_HOMELAND_TREE_ASSIST_WATER_RESPONSE = 299,
    MESSAGE_HOMELAND_TREE_STEAL_REQUEST = 300,
    MESSAGE_HOMELAND_TREE_STEAL_RESPONSE = 301,
    MESSAGE_HOMELAND_TREE_HARVEST_REQUEST = 302,
    MESSAGE_HOMELAND_TREE_HARVEST_RESPONSE = 303,
    MESSAGE_HOMELAND_TOWER_UPGRADE_REQUEST = 304,
    MESSAGE_HOMELAND_TOWER_UPGRADE_RESPONSE = 305,
    MESSAGE_HOMELAND_STRONGHOLD_UPGRADE_REQUEST = 306,
    MESSAGE_HOMELAND_STRONGHOLD_UPGRADE_RESPONSE = 307,
    MESSAGE_HOMELAND_STRONGHOLD_CALL_SUPPORT_REQUEST = 308,
    MESSAGE_HOMELAND_STRONGHOLD_CALL_SUPPORT_RESPONSE = 309,
    MESSAGE_HOMELAND_STRONGHOLD_CALL_SUPPORT_NOTIFY = 310,
    MESSAGE_HOMELAND_STRONGHOLD_SUPPORT_REQUEST = 311,
    MESSAGE_HOMELAND_STRONGHOLD_SUPPORT_RESPONSE = 312,
    MESSAGE_HOMELAND_BATTLE_MATCH_REQUEST = 313,
    MESSAGE_HOMELAND_BATTLE_MATCH_RESPONSE = 314,
    MESSAGE_HOMELAND_BATTLE_STRIKE_BACK_REQUEST = 315,
    MESSAGE_HOMELAND_BATTLE_STRIKE_BACK_RESPONSE = 316,
    MESSAGE_HOMELAND_BATTLE_FIGHT_DATA_NOTIFY = 317,
    MESSAGE_MALL_BUY_REQUEST = 318,
    MESSAGE_MALL_BUY_RESPONSE = 319,
    MESSAGE_MALL_SYNCHRONIZE = 320,
    MESSAGE_MALL_ITEM_BUY_NUM_INITIALIZE = 321,
    MESSAGE_TEAM_CREATE_REQUEST = 322,
    MESSAGE_TEAM_CREATE_RESPONSE = 323,
    MESSAGE_TEAM_JOIN_REQUEST = 324,
    MESSAGE_TEAM_JOIN_RESPONSE = 325,
    MESSAGE_TEAM_JOIN_NOTIFY = 326,
    MESSAGE_TEAM_JOIN_DISPOSE_REQUEST = 327,
    MESSAGE_TEAM_JOIN_DISPOSE_RESPONSE = 328,
    MESSAGE_TEAM_INVITE_REQUEST = 329,
    MESSAGE_TEAM_INVITE_RESPONSE = 330,
    MESSAGE_TEAM_INVITE_NOTIFY = 331,
    MESSAGE_TEAM_INVITE_DISPOSE_REQUEST = 332,
    MESSAGE_TEAM_INVITE_DISPOSE_RESPONSE = 333,
    MESSAGE_TEAM_MEMBER_ADD_SYNCHRONIZE = 334,
    MESSAGE_TEAM_MEMBER_REMOVE_SYNCHRONIZE = 335,
    MESSAGE_TEAM_SYNCHRONIZE = 336,
    MESSAGE_TEAM_MEMBER_SYNCHRONIZE = 337,
    MESSAGE_TEAM_DISMISS_REQUEST = 338,
    MESSAGE_TEAM_DISMISS_RESPONSE = 339,
    MESSAGE_TEAM_DISMISS_NOTIFY = 340,
    MESSAGE_TEAM_QUIT_REQUEST = 341,
    MESSAGE_TEAM_QUIT_RESPONSE = 342,
    MESSAGE_TEAM_KICKOUT_REQUEST = 343,
    MESSAGE_TEAM_KICKOUT_RESPONSE = 344,
    MESSAGE_TEAM_SET_CAPTAIN_REQUEST = 345,
    MESSAGE_TEAM_SET_CAPTAIN_RESPONSE = 346,
    MESSAGE_TEAM_MAP_TEAMS_REQUEST = 347,
    MESSAGE_TEAM_MAP_TEAMS_RESPONSE = 348,
    MESSAGE_TEAM_MAP_ACTORS_REQUEST = 349,
    MESSAGE_TEAM_MAP_ACTORS_RESPONSE = 350,
    MESSAGE_TEAM_MEMBER_REQUEST = 351,
    MESSAGE_TEAM_MEMBER_RESPONSE = 352,
    MESSAGE_TEAM_ACTORS_BROADCAST = 353,
    MESSAGE_GUILD_AOI_SYNCHRONIZE = 354,
    MESSAGE_GUILD_INITIALIZE = 355,
    MESSAGE_GUILD_SYNCHRONIZE = 356,
    MESSAGE_GUILD_PENDING_MEMBER_SYNCHRONIZE = 357,
    MESSAGE_GUILD_MEMBER_SYNCHRONIZE = 358,
    MESSAGE_GUILD_EVENT_SYNCHRONIZE = 359,
    MESSAGE_GUILD_SKILL_SYNCHRONIZE = 360,
    MESSAGE_GUILD_BUFF_SYNCHRONIZE = 361,
    MESSAGE_GUILD_LIST_REQUEST = 362,
    MESSAGE_GUILD_LIST_RESPONSE = 363,
    MESSAGE_GUILD_LIST_SYNCHRONIZE = 364,
    MESSAGE_GUILD_CREATE_REQUEST = 365,
    MESSAGE_GUILD_CREATE_RESPONSE = 366,
    MESSAGE_GUILD_DISMISS_NOTIFY = 367,
    MESSAGE_GUILD_SUPPRESS_JOIN_REQUEST = 368,
    MESSAGE_GUILD_SUPPRESS_JOIN_RESPONSE = 369,
    MESSAGE_GUILD_JOIN_REQUEST = 370,
    MESSAGE_GUILD_JOIN_RESPONSE = 371,
    MESSAGE_GUILD_CANCEL_JOIN_REQUEST = 372,
    MESSAGE_GUILD_CANCEL_JOIN_RESPONSE = 373,
    MESSAGE_GUILD_AUDIT_PENDING_MEMBER_REQUEST = 374,
    MESSAGE_GUILD_AUDIT_PENDING_MEMBER_RESPONSE = 375,
    MESSAGE_GUILD_INVITE_REQUEST = 376,
    MESSAGE_GUILD_INVITE_RESPONSE = 377,
    MESSAGE_GUILD_INVITE_NOTIFY = 378,
    MESSAGE_GUILD_INVITE_DISPOSE_REQUEST = 379,
    MESSAGE_GUILD_INVITE_DISPOSE_RESPONSE = 380,
    MESSAGE_GUILD_LEAVE_REQUEST = 381,
    MESSAGE_GUILD_LEAVE_RESPONSE = 382,
    MESSAGE_GUILD_KICK_MEMBER_REQUEST = 383,
    MESSAGE_GUILD_KICK_MEMBER_RESPONSE = 384,
    MESSAGE_GUILD_KICK_MEMBER_NOTIFY = 385,
    MESSAGE_GUILD_GIVE_UP_LEADER_POSITION_REQUEST = 386,
    MESSAGE_GUILD_GIVE_UP_LEADER_POSITION_RESPONSE = 387,
    MESSAGE_GUILD_GIVE_UP_POSITION_REQUEST = 388,
    MESSAGE_GUILD_GIVE_UP_POSITION_RESPONSE = 389,
    MESSAGE_GUILD_SET_MEMBER_POSITION_REQUEST = 390,
    MESSAGE_GUILD_SET_MEMBER_POSITION_RESPONSE = 391,
    MESSAGE_GUILD_EDIT_ANNOUNCEMENT_REQUEST = 392,
    MESSAGE_GUILD_EDIT_ANNOUNCEMENT_RESPONSE = 393,
    MESSAGE_GUILD_UPGRADE_REQUEST = 394,
    MESSAGE_GUILD_UPGRADE_RESPONSE = 395,
    MESSAGE_GUILD_DONATE_REQUEST = 396,
    MESSAGE_GUILD_DONATE_RESPONSE = 397,
    MESSAGE_GUILD_SHOP_UPGRADE_REQUEST = 398,
    MESSAGE_GUILD_SHOP_UPGRADE_RESPONSE = 399,
    MESSAGE_GUILD_SHOP_BUY_ITEM_REQUEST = 400,
    MESSAGE_GUILD_SHOP_BUY_ITEM_RESPONSE = 401,
    MESSAGE_GUILD_COLLEGE_UPGRADE_REQUEST = 402,
    MESSAGE_GUILD_COLLEGE_UPGRADE_RESPONSE = 403,
    MESSAGE_GUILD_COLLEGE_LEARN_SKILL_REQUEST = 404,
    MESSAGE_GUILD_COLLEGE_LEARN_SKILL_RESPONSE = 405,
    MESSAGE_GUILD_IDOL_PRAY_REQUEST = 406,
    MESSAGE_GUILD_IDOL_PRAY_RESPONSE = 407,
    MESSAGE_GUILD_BARRACK_UPGRADE_REQUEST = 408,
    MESSAGE_GUILD_BARRACK_UPGRADE_RESPONSE = 409,
    MESSAGE_GUILD_PLAYING_GROUP_OPEN_REQUEST = 410,
    MESSAGE_GUILD_PLAYING_GROUP_OPEN_RESPONSE = 411,
    MESSAGE_GUILD_PLAYING_GROUP_OPEN_NOTIFY = 412,
    MESSAGE_GUILD_PLAYING_FINISHED_NOTIFY = 413,
    MESSAGE_GUILD_PLAYING_AWARD_REQUEST = 414,
    MESSAGE_GUILD_PLAYING_AWARD_RESPONSE = 415,
    MESSAGE_GUILD_PLAYING_RESET_NOTIFY = 416,
    MESSAGE_PLAYING_INITIALIZE = 417,
    MESSAGE_PLAYING_CREATE_REQUEST = 418,
    MESSAGE_PLAYING_CREATE_RESPONSE = 419,
    MESSAGE_PLAYING_CREATE_FINISH_NOTICE = 420,
    MESSAGE_PLAYING_ENTER_REQUEST = 421,
    MESSAGE_PLAYING_ENTER_RESPONSE = 422,
    MESSAGE_PLAYING_ENTER_INITIALIZE = 423,
    MESSAGE_PLAYING_SCORE_SYNCHRONIZE = 424,
    MESSAGE_PLAYING_RANKING_SYNCHRONIZE = 425,
    MESSAGE_PLAYING_COMPLETE_REQUEST = 426,
    MESSAGE_PLAYING_COMPLETE_RESPONSE = 427,
    MESSAGE_PLAYING_COMPLETE_SYNCHRONIZE = 428,
    MESSAGE_PLAYING_LEAVE_REQUEST = 429,
    MESSAGE_PLAYING_LEAVE_RESPONSE = 430,
    MESSAGE_PLAYING_LEAVE_SYNCHRONIZE = 431,
    MESSAGE_PLAYING_AWARD_REQUEST = 432,
    MESSAGE_PLAYING_AWARD_RESPONSE = 433,
    MESSAGE_PLAYING_RECORD_SYNCHRONIZE = 434,
    MESSAGE_PLAYING_AUTO_REQUEST = 435,
    MESSAGE_PLAYING_AUTO_RESPONSE = 436,
    MESSAGE_PLAYING_AUTO_STOP_SYNCHRONIZE = 437,
    MESSAGE_PLAYING_AUTO_FINISH_REQUEST = 438,
    MESSAGE_PLAYING_AUTO_FINISH_RESPONSE = 439,
    MESSAGE_PLAYING_PAID_AWARD_REQUEST = 440,
    MESSAGE_PLAYING_PAID_AWARD_RESPONSE = 441,
    MESSAGE_PLAYING_TEAM_LIST_REQUEST = 442,
    MESSAGE_PLAYING_TEAM_LIST_RESPONSE = 443,
    MESSAGE_PLAYING_TEAM_CREATE_REQUEST = 444,
    MESSAGE_PLAYING_TEAM_CREATE_RESPONSE = 445,
    MESSAGE_PLAYING_TEAM_SYNCHRONIZE = 446,
    MESSAGE_PLAYING_TEAM_MEMBER_SYNCHRONIZE = 447,
    MESSAGE_PLAYING_TEAM_JOIN_REQUEST = 448,
    MESSAGE_PLAYING_TEAM_JOIN_RESPONSE = 449,
    MESSAGE_PLAYING_TEAM_JOIN_SYNCHRONIZE = 450,
    MESSAGE_PLAYING_TEAM_QUIT_REQUEST = 451,
    MESSAGE_PLAYING_TEAM_QUIT_RESPONSE = 452,
    MESSAGE_PLAYING_TEAM_QUIT_SYNCHRONIZE = 453,
    MESSAGE_PLAYING_TEAM_READY_REQUEST = 454,
    MESSAGE_PLAYING_TEAM_READY_RESPONSE = 455,
    MESSAGE_PLAYING_TEAM_KICKOUT_REQUEST = 456,
    MESSAGE_PLAYING_TEAM_KICKOUT_RESPONSE = 457,
    MESSAGE_PLAYING_TEAM_CAPACITY_SET_REQUEST = 458,
    MESSAGE_PLAYING_TEAM_CAPACITY_SET_RESPONSE = 459,
    MESSAGE_MAZE_INITIALIZE = 460,
    MESSAGE_MAZE_SYNCHRONIZE = 461,
    MESSAGE_MAZE_ENTER_NEXT_FLOOR_NOTIFY = 462,
    MESSAGE_MAZE_MOVE_REQUEST = 463,
    MESSAGE_MAZE_MOVE_RESPONSE = 464,
    MESSAGE_MAZE_CONFIRM_MOVE_REQUEST = 465,
    MESSAGE_MAZE_CONFIRM_MOVE_RESPONSE = 466,
    MESSAGE_MAZE_AWARD_REQUEST = 467,
    MESSAGE_MAZE_AWARD_RESPONSE = 468,
    MESSAGE_BAR_INTERRUPT = 469,
    MESSAGE_BAR_FINISH_REQUEST = 470,
    MESSAGE_BAR_FINISH_RESPONSE = 471,
    MESSAGE_BAR_START_SYNCHRONIZE = 472,
    MESSAGE_COOLING_INITIALIZE = 473,
    MESSAGE_AUCTION_INITIALIZE = 474,
    MESSAGE_AUCTION_SELL_ITEM_SYNCHRONIZE = 475,
    MESSAGE_AUCTION_BUY_ITEM_SYNCHRONIZE = 476,
    MESSAGE_AUCTION_HISTORY_SYNCHRONIZE = 477,
    MESSAGE_AUCTION_QUERY_TRANSACTION_REQUEST = 478,
    MESSAGE_AUCTION_QUERY_TRANSACTION_RESPONSE = 479,
    MESSAGE_AUCTION_SEARCH_REQUEST = 480,
    MESSAGE_AUCTION_SEARCH_RESPONSE = 481,
    MESSAGE_AUCTION_SELL_REQUEST = 482,
    MESSAGE_AUCTION_SELL_RESPONSE = 483,
    MESSAGE_AUCTION_CANCEL_SELL_REQUEST = 484,
    MESSAGE_AUCTION_CANCEL_SELL_RESPONSE = 485,
    MESSAGE_AUCTION_BID_REQUEST = 486,
    MESSAGE_AUCTION_BID_RESPONSE = 487,
    MESSAGE_AUCTION_BUYOUT_REQUEST = 488,
    MESSAGE_AUCTION_BUYOUT_RESPONSE = 489,
    MESSAGE_AUCTION_WITHDRAW_REQUEST = 490,
    MESSAGE_AUCTION_WITHDRAW_RESPONSE = 491,
    MESSAGE_WELFARE_INITILIZE = 492,
    MESSAGE_ACHIEVE_INITILIZE = 493,
    MESSAGE_ACHIEVE_CONDITION_SYSNCHRONIZATION = 494,
    MESSAGE_CHECKINS_SYNCHRONIZATION = 495,
    MESSAGE_WELFARE_TITLE_BROADCAST = 496,
    MESSAGE_ACHIEVE_AWARD_REQUEST = 497,
    MESSAGE_ACHIEVE_AWARD_RESPONSE = 498,
    MESSAGE_ACHIEVE_CHANGE_TITLE_REQUEST = 499,
    MESSAGE_ACHIEVE_CHANGE_TITLE_RESPONSE = 500,
    MESSAGE_CHECKINS_OPT_REQUEST = 501,
    MESSAGE_CHECKINS_OPT_RESPONSE = 502,
    MESSAGE_ONLINE_AWARD_ITEM_REQUEST = 503,
    MESSAGE_ONLINE_AWARD_ITEM_RESPONSE = 504,
    MESSAGE_ONLINE_AWARD_RESOURCE_REQUEST = 505,
    MESSAGE_ONLINE_AWARD_ITEM_RESOURCE_RESPONSE = 506,
    MESSAGE_TRANSPORT_AOI_SYNCHRONIZE = 507,
    MESSAGE_TRANSPORT_INITIALIZE = 508,
    MESSAGE_TRANSPORT_SYNCHRONIZE = 509,
    MESSAGE_MAX = 510
  };
};

extern const std::map<int, const char*> _MessageType_VALUES_TO_NAMES;

struct MessageSystemType {
  enum type {
    UNKNOWN_ERROR = 0,
    USER_UPPER_LIMITED = 1,
    MAX = 2
  };
};

extern const std::map<int, const char*> _MessageSystemType_VALUES_TO_NAMES;


class Message {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  Message() : type_((MessageType::type)0), message_() {
  }

  virtual ~Message() throw() {}

  MessageType::type type_;
  std::string message_;

  void __set_type_(const MessageType::type val) {
    type_ = val;
  }

  void __set_message_(const std::string& val) {
    message_ = val;
  }

  bool operator == (const Message & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(message_ == rhs.message_))
      return false;
    return true;
  }
  bool operator != (const Message &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Message & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Message &a, Message &b);


class MessageTest {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MessageTest() : serialize_(0) {
  }

  virtual ~MessageTest() throw() {}

  int32_t serialize_;

  void __set_serialize_(const int32_t val) {
    serialize_ = val;
  }

  bool operator == (const MessageTest & rhs) const
  {
    if (!(serialize_ == rhs.serialize_))
      return false;
    return true;
  }
  bool operator != (const MessageTest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTest &a, MessageTest &b);

typedef struct _MessageSystem__isset {
  _MessageSystem__isset() : details_(false) {}
  bool details_;
} _MessageSystem__isset;

class MessageSystem {
 public:

  static const char* ascii_fingerprint; // = "24652790C81ECE22B629CB60A19F1E93";
  static const uint8_t binary_fingerprint[16]; // = {0x24,0x65,0x27,0x90,0xC8,0x1E,0xCE,0x22,0xB6,0x29,0xCB,0x60,0xA1,0x9F,0x1E,0x93};

  MessageSystem() : type_((MessageSystemType::type)0), details_() {
  }

  virtual ~MessageSystem() throw() {}

  MessageSystemType::type type_;
  std::string details_;

  _MessageSystem__isset __isset;

  void __set_type_(const MessageSystemType::type val) {
    type_ = val;
  }

  void __set_details_(const std::string& val) {
    details_ = val;
    __isset.details_ = true;
  }

  bool operator == (const MessageSystem & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (__isset.details_ != rhs.__isset.details_)
      return false;
    else if (__isset.details_ && !(details_ == rhs.details_))
      return false;
    return true;
  }
  bool operator != (const MessageSystem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSystem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSystem &a, MessageSystem &b);


class MessageVerifyQuestion {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  MessageVerifyQuestion() : code_(0), key_() {
  }

  virtual ~MessageVerifyQuestion() throw() {}

  int32_t code_;
  std::string key_;

  void __set_code_(const int32_t val) {
    code_ = val;
  }

  void __set_key_(const std::string& val) {
    key_ = val;
  }

  bool operator == (const MessageVerifyQuestion & rhs) const
  {
    if (!(code_ == rhs.code_))
      return false;
    if (!(key_ == rhs.key_))
      return false;
    return true;
  }
  bool operator != (const MessageVerifyQuestion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageVerifyQuestion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageVerifyQuestion &a, MessageVerifyQuestion &b);


class MessageVerifyQuestionRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MessageVerifyQuestionRequest() : value_() {
  }

  virtual ~MessageVerifyQuestionRequest() throw() {}

  std::string value_;

  void __set_value_(const std::string& val) {
    value_ = val;
  }

  bool operator == (const MessageVerifyQuestionRequest & rhs) const
  {
    if (!(value_ == rhs.value_))
      return false;
    return true;
  }
  bool operator != (const MessageVerifyQuestionRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageVerifyQuestionRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageVerifyQuestionRequest &a, MessageVerifyQuestionRequest &b);


class MessageVerifyQuestionResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageVerifyQuestionResponse() : pass_(0) {
  }

  virtual ~MessageVerifyQuestionResponse() throw() {}

  bool pass_;

  void __set_pass_(const bool val) {
    pass_ = val;
  }

  bool operator == (const MessageVerifyQuestionResponse & rhs) const
  {
    if (!(pass_ == rhs.pass_))
      return false;
    return true;
  }
  bool operator != (const MessageVerifyQuestionResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageVerifyQuestionResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageVerifyQuestionResponse &a, MessageVerifyQuestionResponse &b);


class MessageLoginRequest {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  MessageLoginRequest() : actor_id_(), session_key_() {
  }

  virtual ~MessageLoginRequest() throw() {}

  std::string actor_id_;
  std::string session_key_;

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
  }

  void __set_session_key_(const std::string& val) {
    session_key_ = val;
  }

  bool operator == (const MessageLoginRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(session_key_ == rhs.session_key_))
      return false;
    return true;
  }
  bool operator != (const MessageLoginRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageLoginRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageLoginRequest &a, MessageLoginRequest &b);


class MessageLoginResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageLoginResponse() : logined_(0) {
  }

  virtual ~MessageLoginResponse() throw() {}

  bool logined_;

  void __set_logined_(const bool val) {
    logined_ = val;
  }

  bool operator == (const MessageLoginResponse & rhs) const
  {
    if (!(logined_ == rhs.logined_))
      return false;
    return true;
  }
  bool operator != (const MessageLoginResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageLoginResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageLoginResponse &a, MessageLoginResponse &b);


class MessageLogoutRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageLogoutRequest() {
  }

  virtual ~MessageLogoutRequest() throw() {}


  bool operator == (const MessageLogoutRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageLogoutRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageLogoutRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageLogoutRequest &a, MessageLogoutRequest &b);


class MessageLogoutResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageLogoutResponse() : logouted_(0) {
  }

  virtual ~MessageLogoutResponse() throw() {}

  bool logouted_;

  void __set_logouted_(const bool val) {
    logouted_ = val;
  }

  bool operator == (const MessageLogoutResponse & rhs) const
  {
    if (!(logouted_ == rhs.logouted_))
      return false;
    return true;
  }
  bool operator != (const MessageLogoutResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageLogoutResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageLogoutResponse &a, MessageLogoutResponse &b);


class MessageKickoutActor {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

  MessageKickoutActor() : type_(( ::global::protocol::KickoutActorType::type)0) {
  }

  virtual ~MessageKickoutActor() throw() {}

   ::global::protocol::KickoutActorType::type type_;

  void __set_type_(const  ::global::protocol::KickoutActorType::type val) {
    type_ = val;
  }

  bool operator == (const MessageKickoutActor & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    return true;
  }
  bool operator != (const MessageKickoutActor &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageKickoutActor & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageKickoutActor &a, MessageKickoutActor &b);

}} // namespace

#endif
