/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "task_types.h"

#include <algorithm>

namespace entity {

int _kTaskConditionValues[] = {
  TaskCondition::MIN,
  TaskCondition::KILL_MOB,
  TaskCondition::kill_COLLECT,
  TaskCondition::PICK,
  TaskCondition::TALK,
  TaskCondition::USE_ITEM,
  TaskCondition::COLLECT_ITEM,
  TaskCondition::WAITE_TIME,
  TaskCondition::EQUIP_STRENGHT,
  TaskCondition::EQUIP_REFINE,
  TaskCondition::DIVINE_GEM,
  TaskCondition::SPIRIT_FEED,
  TaskCondition::EQUIP_INLAY,
  TaskCondition::SOUL_FEED,
  TaskCondition::EQUIP_SOUL,
  TaskCondition::ROLE_LV,
  TaskCondition::PASS_PLAYING,
  TaskCondition::PROTECT_TASK,
  TaskCondition::ANSWER_TASK,
  TaskCondition::SPORTS_TASK_1,
  TaskCondition::SPORTS_TASK_2,
  TaskCondition::SOUL_APPEAR,
  TaskCondition::EQUIPMENT,
  TaskCondition::CONSTELLATION_UP,
  TaskCondition::SUMMON_NPC,
  TaskCondition::GET_RESOURCE,
  TaskCondition::SPEND_RESOURCE,
  TaskCondition::ROB,
  TaskCondition::WATERING,
  TaskCondition::KILL_ACTOR,
  TaskCondition::KILL_MOB_LEVEL,
  TaskCondition::KILL_MOB_TYPE,
  TaskCondition::FINISH_TASK_TYPE,
  TaskCondition::GET_VIP_PRIVILEGE,
  TaskCondition::TRANSPORT,
  TaskCondition::MAX
};
const char* _kTaskConditionNames[] = {
  "MIN",
  "KILL_MOB",
  "kill_COLLECT",
  "PICK",
  "TALK",
  "USE_ITEM",
  "COLLECT_ITEM",
  "WAITE_TIME",
  "EQUIP_STRENGHT",
  "EQUIP_REFINE",
  "DIVINE_GEM",
  "SPIRIT_FEED",
  "EQUIP_INLAY",
  "SOUL_FEED",
  "EQUIP_SOUL",
  "ROLE_LV",
  "PASS_PLAYING",
  "PROTECT_TASK",
  "ANSWER_TASK",
  "SPORTS_TASK_1",
  "SPORTS_TASK_2",
  "SOUL_APPEAR",
  "EQUIPMENT",
  "CONSTELLATION_UP",
  "SUMMON_NPC",
  "GET_RESOURCE",
  "SPEND_RESOURCE",
  "ROB",
  "WATERING",
  "KILL_ACTOR",
  "KILL_MOB_LEVEL",
  "KILL_MOB_TYPE",
  "FINISH_TASK_TYPE",
  "GET_VIP_PRIVILEGE",
  "TRANSPORT",
  "MAX"
};
const std::map<int, const char*> _TaskCondition_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(36, _kTaskConditionValues, _kTaskConditionNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTaskCircleRefulshTypeValues[] = {
  TaskCircleRefulshType::INVALID,
  TaskCircleRefulshType::REFULSH_ROUND,
  TaskCircleRefulshType::REFULSH_TASK_CONDITION,
  TaskCircleRefulshType::REFULSH_CIRCLE,
  TaskCircleRefulshType::REQUEST_FINISH_ROUND,
  TaskCircleRefulshType::REQUEST_FINISH_CIRCLE,
  TaskCircleRefulshType::REQUEST_OPEN_ROUND
};
const char* _kTaskCircleRefulshTypeNames[] = {
  "INVALID",
  "REFULSH_ROUND",
  "REFULSH_TASK_CONDITION",
  "REFULSH_CIRCLE",
  "REQUEST_FINISH_ROUND",
  "REQUEST_FINISH_CIRCLE",
  "REQUEST_OPEN_ROUND"
};
const std::map<int, const char*> _TaskCircleRefulshType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kTaskCircleRefulshTypeValues, _kTaskCircleRefulshTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTaskTypeValues[] = {
  TaskType::INVALID,
  TaskType::TASK_MAIN,
  TaskType::TASK_CIRCLE,
  TaskType::TASK_RISK,
  TaskType::TASK_TRIP,
  TaskType::TASK_DAILY,
  TaskType::TASK_TRANSPORT
};
const char* _kTaskTypeNames[] = {
  "INVALID",
  "TASK_MAIN",
  "TASK_CIRCLE",
  "TASK_RISK",
  "TASK_TRIP",
  "TASK_DAILY",
  "TASK_TRANSPORT"
};
const std::map<int, const char*> _TaskType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kTaskTypeValues, _kTaskTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTaskCircleRoundStateValues[] = {
  TaskCircleRoundState::INVALID,
  TaskCircleRoundState::ACTIVE,
  TaskCircleRoundState::FINISH,
  TaskCircleRoundState::PICKED_AWARD
};
const char* _kTaskCircleRoundStateNames[] = {
  "INVALID",
  "ACTIVE",
  "FINISH",
  "PICKED_AWARD"
};
const std::map<int, const char*> _TaskCircleRoundState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTaskCircleRoundStateValues, _kTaskCircleRoundStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTaskTripOptTypeValues[] = {
  TaskTripOptType::INVALID,
  TaskTripOptType::REQUEST_FINISH,
  TaskTripOptType::REQUEST_GIVE_UP,
  TaskTripOptType::SPENT_FINISH
};
const char* _kTaskTripOptTypeNames[] = {
  "INVALID",
  "REQUEST_FINISH",
  "REQUEST_GIVE_UP",
  "SPENT_FINISH"
};
const std::map<int, const char*> _TaskTripOptType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTaskTripOptTypeValues, _kTaskTripOptTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRobTaskTypeValues[] = {
  RobTaskType::SUCCESS,
  RobTaskType::SUCCESS_AND_FAILED
};
const char* _kRobTaskTypeNames[] = {
  "SUCCESS",
  "SUCCESS_AND_FAILED"
};
const std::map<int, const char*> _RobTaskType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kRobTaskTypeValues, _kRobTaskTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kWateringTaskTypeValues[] = {
  WateringTaskType::SELF,
  WateringTaskType::OTHER,
  WateringTaskType::SELF_AND_OTHER
};
const char* _kWateringTaskTypeNames[] = {
  "SELF",
  "OTHER",
  "SELF_AND_OTHER"
};
const std::map<int, const char*> _WateringTaskType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kWateringTaskTypeValues, _kWateringTaskTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTaskTransportStatusValues[] = {
  TaskTransportStatus::MIN,
  TaskTransportStatus::IDOL,
  TaskTransportStatus::TRANSPORT,
  TaskTransportStatus::FAILURE,
  TaskTransportStatus::MAX
};
const char* _kTaskTransportStatusNames[] = {
  "MIN",
  "IDOL",
  "TRANSPORT",
  "FAILURE",
  "MAX"
};
const std::map<int, const char*> _TaskTransportStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kTaskTransportStatusValues, _kTaskTransportStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

} // namespace
