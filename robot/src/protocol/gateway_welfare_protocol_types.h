/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef gateway_welfare_protocol_TYPES_H
#define gateway_welfare_protocol_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "gateway_protocol_types.h"


namespace gateway { namespace protocol {

struct CheckinsOptType {
  enum type {
    DAILY_CHECKINS = 0,
    GENERAL_CHECKINS = 1,
    VIP_CHECKINS = 2,
    DAILY_CHECKINS_AWARD = 3
  };
};

extern const std::map<int, const char*> _CheckinsOptType_VALUES_TO_NAMES;


class AchieveCondition {
 public:

  static const char* ascii_fingerprint; // = "62439E2E69DA335B1A6EC9A867A5171A";
  static const uint8_t binary_fingerprint[16]; // = {0x62,0x43,0x9E,0x2E,0x69,0xDA,0x33,0x5B,0x1A,0x6E,0xC9,0xA8,0x67,0xA5,0x17,0x1A};

  AchieveCondition() : id_(0), finish_time_() {
  }

  virtual ~AchieveCondition() throw() {}

  int32_t id_;
  std::vector<int32_t>  values_;
  std::string finish_time_;

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  void __set_values_(const std::vector<int32_t> & val) {
    values_ = val;
  }

  void __set_finish_time_(const std::string& val) {
    finish_time_ = val;
  }

  bool operator == (const AchieveCondition & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(values_ == rhs.values_))
      return false;
    if (!(finish_time_ == rhs.finish_time_))
      return false;
    return true;
  }
  bool operator != (const AchieveCondition &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AchieveCondition & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AchieveCondition &a, AchieveCondition &b);


class AchieveFinish {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  AchieveFinish() : id_(0), finish_time_() {
  }

  virtual ~AchieveFinish() throw() {}

  int32_t id_;
  std::string finish_time_;

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  void __set_finish_time_(const std::string& val) {
    finish_time_ = val;
  }

  bool operator == (const AchieveFinish & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(finish_time_ == rhs.finish_time_))
      return false;
    return true;
  }
  bool operator != (const AchieveFinish &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AchieveFinish & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AchieveFinish &a, AchieveFinish &b);


class MessageWelfareInitilize {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  MessageWelfareInitilize() : title_id_(0), service_time_() {
  }

  virtual ~MessageWelfareInitilize() throw() {}

  int32_t title_id_;
  std::string service_time_;

  void __set_title_id_(const int32_t val) {
    title_id_ = val;
  }

  void __set_service_time_(const std::string& val) {
    service_time_ = val;
  }

  bool operator == (const MessageWelfareInitilize & rhs) const
  {
    if (!(title_id_ == rhs.title_id_))
      return false;
    if (!(service_time_ == rhs.service_time_))
      return false;
    return true;
  }
  bool operator != (const MessageWelfareInitilize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageWelfareInitilize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageWelfareInitilize &a, MessageWelfareInitilize &b);


class MessageCheckinsSynchronization {
 public:

  static const char* ascii_fingerprint; // = "2F78A1B4BC17D288C925688CDE78259B";
  static const uint8_t binary_fingerprint[16]; // = {0x2F,0x78,0xA1,0xB4,0xBC,0x17,0xD2,0x88,0xC9,0x25,0x68,0x8C,0xDE,0x78,0x25,0x9B};

  MessageCheckinsSynchronization() : day_award_(0), resource_awards_(0), daily_online_time_(0), total_time_(0), replenish_checkins_num_(0), month_resource_(0), last_month_resource_(0) {
  }

  virtual ~MessageCheckinsSynchronization() throw() {}

  std::vector<bool>  checkins_;
  bool day_award_;
  std::vector<bool>  general_awards_;
  std::vector<bool>  vip_awards_;
  std::vector<int32_t>  online_awrads_;
  bool resource_awards_;
  int32_t daily_online_time_;
  int32_t total_time_;
  int32_t replenish_checkins_num_;
  int32_t month_resource_;
  int32_t last_month_resource_;
  std::vector<int32_t>  respenish_checkins_days_;

  void __set_checkins_(const std::vector<bool> & val) {
    checkins_ = val;
  }

  void __set_day_award_(const bool val) {
    day_award_ = val;
  }

  void __set_general_awards_(const std::vector<bool> & val) {
    general_awards_ = val;
  }

  void __set_vip_awards_(const std::vector<bool> & val) {
    vip_awards_ = val;
  }

  void __set_online_awrads_(const std::vector<int32_t> & val) {
    online_awrads_ = val;
  }

  void __set_resource_awards_(const bool val) {
    resource_awards_ = val;
  }

  void __set_daily_online_time_(const int32_t val) {
    daily_online_time_ = val;
  }

  void __set_total_time_(const int32_t val) {
    total_time_ = val;
  }

  void __set_replenish_checkins_num_(const int32_t val) {
    replenish_checkins_num_ = val;
  }

  void __set_month_resource_(const int32_t val) {
    month_resource_ = val;
  }

  void __set_last_month_resource_(const int32_t val) {
    last_month_resource_ = val;
  }

  void __set_respenish_checkins_days_(const std::vector<int32_t> & val) {
    respenish_checkins_days_ = val;
  }

  bool operator == (const MessageCheckinsSynchronization & rhs) const
  {
    if (!(checkins_ == rhs.checkins_))
      return false;
    if (!(day_award_ == rhs.day_award_))
      return false;
    if (!(general_awards_ == rhs.general_awards_))
      return false;
    if (!(vip_awards_ == rhs.vip_awards_))
      return false;
    if (!(online_awrads_ == rhs.online_awrads_))
      return false;
    if (!(resource_awards_ == rhs.resource_awards_))
      return false;
    if (!(daily_online_time_ == rhs.daily_online_time_))
      return false;
    if (!(total_time_ == rhs.total_time_))
      return false;
    if (!(replenish_checkins_num_ == rhs.replenish_checkins_num_))
      return false;
    if (!(month_resource_ == rhs.month_resource_))
      return false;
    if (!(last_month_resource_ == rhs.last_month_resource_))
      return false;
    if (!(respenish_checkins_days_ == rhs.respenish_checkins_days_))
      return false;
    return true;
  }
  bool operator != (const MessageCheckinsSynchronization &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageCheckinsSynchronization & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageCheckinsSynchronization &a, MessageCheckinsSynchronization &b);


class MessageAchieveInitilize {
 public:

  static const char* ascii_fingerprint; // = "8790009BB808CF1D9794979E50EA7908";
  static const uint8_t binary_fingerprint[16]; // = {0x87,0x90,0x00,0x9B,0xB8,0x08,0xCF,0x1D,0x97,0x94,0x97,0x9E,0x50,0xEA,0x79,0x08};

  MessageAchieveInitilize() {
  }

  virtual ~MessageAchieveInitilize() throw() {}

  std::vector<AchieveFinish>  finishs_;
  std::vector<AchieveCondition>  conditions_;

  void __set_finishs_(const std::vector<AchieveFinish> & val) {
    finishs_ = val;
  }

  void __set_conditions_(const std::vector<AchieveCondition> & val) {
    conditions_ = val;
  }

  bool operator == (const MessageAchieveInitilize & rhs) const
  {
    if (!(finishs_ == rhs.finishs_))
      return false;
    if (!(conditions_ == rhs.conditions_))
      return false;
    return true;
  }
  bool operator != (const MessageAchieveInitilize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAchieveInitilize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAchieveInitilize &a, MessageAchieveInitilize &b);


class MessageAchieveConditionSysnchronization {
 public:

  static const char* ascii_fingerprint; // = "DBA208E6D31BB914B5CB67E5A81F0D19";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xA2,0x08,0xE6,0xD3,0x1B,0xB9,0x14,0xB5,0xCB,0x67,0xE5,0xA8,0x1F,0x0D,0x19};

  MessageAchieveConditionSysnchronization() {
  }

  virtual ~MessageAchieveConditionSysnchronization() throw() {}

  AchieveCondition condition_;

  void __set_condition_(const AchieveCondition& val) {
    condition_ = val;
  }

  bool operator == (const MessageAchieveConditionSysnchronization & rhs) const
  {
    if (!(condition_ == rhs.condition_))
      return false;
    return true;
  }
  bool operator != (const MessageAchieveConditionSysnchronization &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAchieveConditionSysnchronization & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAchieveConditionSysnchronization &a, MessageAchieveConditionSysnchronization &b);


class MessageAchieveAwardRequest {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MessageAchieveAwardRequest() : id_(0) {
  }

  virtual ~MessageAchieveAwardRequest() throw() {}

  int32_t id_;

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  bool operator == (const MessageAchieveAwardRequest & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const MessageAchieveAwardRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAchieveAwardRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAchieveAwardRequest &a, MessageAchieveAwardRequest &b);


class MessageAchieveAwardResponse {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MessageAchieveAwardResponse() : id_(0) {
  }

  virtual ~MessageAchieveAwardResponse() throw() {}

  int32_t id_;

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  bool operator == (const MessageAchieveAwardResponse & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const MessageAchieveAwardResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAchieveAwardResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAchieveAwardResponse &a, MessageAchieveAwardResponse &b);


class MessageAchieveChangeTitleRequest {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MessageAchieveChangeTitleRequest() : id_(0) {
  }

  virtual ~MessageAchieveChangeTitleRequest() throw() {}

  int32_t id_;

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  bool operator == (const MessageAchieveChangeTitleRequest & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const MessageAchieveChangeTitleRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAchieveChangeTitleRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAchieveChangeTitleRequest &a, MessageAchieveChangeTitleRequest &b);


class MessageAchieveChangeTitleResponse {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MessageAchieveChangeTitleResponse() : id_(0) {
  }

  virtual ~MessageAchieveChangeTitleResponse() throw() {}

  int32_t id_;

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  bool operator == (const MessageAchieveChangeTitleResponse & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const MessageAchieveChangeTitleResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAchieveChangeTitleResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAchieveChangeTitleResponse &a, MessageAchieveChangeTitleResponse &b);


class MessageCheckinsOptRequest {
 public:

  static const char* ascii_fingerprint; // = "20FDD15CF009C5B6C703B6F2C65DFE88";
  static const uint8_t binary_fingerprint[16]; // = {0x20,0xFD,0xD1,0x5C,0xF0,0x09,0xC5,0xB6,0xC7,0x03,0xB6,0xF2,0xC6,0x5D,0xFE,0x88};

  MessageCheckinsOptRequest() : days_(0), type_((CheckinsOptType::type)0) {
  }

  virtual ~MessageCheckinsOptRequest() throw() {}

  int32_t days_;
  CheckinsOptType::type type_;

  void __set_days_(const int32_t val) {
    days_ = val;
  }

  void __set_type_(const CheckinsOptType::type val) {
    type_ = val;
  }

  bool operator == (const MessageCheckinsOptRequest & rhs) const
  {
    if (!(days_ == rhs.days_))
      return false;
    if (!(type_ == rhs.type_))
      return false;
    return true;
  }
  bool operator != (const MessageCheckinsOptRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageCheckinsOptRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageCheckinsOptRequest &a, MessageCheckinsOptRequest &b);


class MessageCheckinsOptResponse {
 public:

  static const char* ascii_fingerprint; // = "20FDD15CF009C5B6C703B6F2C65DFE88";
  static const uint8_t binary_fingerprint[16]; // = {0x20,0xFD,0xD1,0x5C,0xF0,0x09,0xC5,0xB6,0xC7,0x03,0xB6,0xF2,0xC6,0x5D,0xFE,0x88};

  MessageCheckinsOptResponse() : days_(0), type_((CheckinsOptType::type)0) {
  }

  virtual ~MessageCheckinsOptResponse() throw() {}

  int32_t days_;
  CheckinsOptType::type type_;

  void __set_days_(const int32_t val) {
    days_ = val;
  }

  void __set_type_(const CheckinsOptType::type val) {
    type_ = val;
  }

  bool operator == (const MessageCheckinsOptResponse & rhs) const
  {
    if (!(days_ == rhs.days_))
      return false;
    if (!(type_ == rhs.type_))
      return false;
    return true;
  }
  bool operator != (const MessageCheckinsOptResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageCheckinsOptResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageCheckinsOptResponse &a, MessageCheckinsOptResponse &b);


class MessageOnlineAwardItemRequest {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MessageOnlineAwardItemRequest() : time_(0) {
  }

  virtual ~MessageOnlineAwardItemRequest() throw() {}

  int32_t time_;

  void __set_time_(const int32_t val) {
    time_ = val;
  }

  bool operator == (const MessageOnlineAwardItemRequest & rhs) const
  {
    if (!(time_ == rhs.time_))
      return false;
    return true;
  }
  bool operator != (const MessageOnlineAwardItemRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageOnlineAwardItemRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageOnlineAwardItemRequest &a, MessageOnlineAwardItemRequest &b);


class MessageOnlineAwardItemResponse {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  MessageOnlineAwardItemResponse() : time_(0), pos_(0) {
  }

  virtual ~MessageOnlineAwardItemResponse() throw() {}

  int32_t time_;
  int32_t pos_;

  void __set_time_(const int32_t val) {
    time_ = val;
  }

  void __set_pos_(const int32_t val) {
    pos_ = val;
  }

  bool operator == (const MessageOnlineAwardItemResponse & rhs) const
  {
    if (!(time_ == rhs.time_))
      return false;
    if (!(pos_ == rhs.pos_))
      return false;
    return true;
  }
  bool operator != (const MessageOnlineAwardItemResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageOnlineAwardItemResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageOnlineAwardItemResponse &a, MessageOnlineAwardItemResponse &b);


class MessageOnlineAwardResourceRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageOnlineAwardResourceRequest() {
  }

  virtual ~MessageOnlineAwardResourceRequest() throw() {}


  bool operator == (const MessageOnlineAwardResourceRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageOnlineAwardResourceRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageOnlineAwardResourceRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageOnlineAwardResourceRequest &a, MessageOnlineAwardResourceRequest &b);


class MessageOnlineAwardResourceResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageOnlineAwardResourceResponse() : result_(0) {
  }

  virtual ~MessageOnlineAwardResourceResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageOnlineAwardResourceResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageOnlineAwardResourceResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageOnlineAwardResourceResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageOnlineAwardResourceResponse &a, MessageOnlineAwardResourceResponse &b);


class MessageTitleFiled {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  MessageTitleFiled() : actor_id_(), title_id_(0) {
  }

  virtual ~MessageTitleFiled() throw() {}

  std::string actor_id_;
  int32_t title_id_;

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
  }

  void __set_title_id_(const int32_t val) {
    title_id_ = val;
  }

  bool operator == (const MessageTitleFiled & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(title_id_ == rhs.title_id_))
      return false;
    return true;
  }
  bool operator != (const MessageTitleFiled &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTitleFiled & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTitleFiled &a, MessageTitleFiled &b);


class MessageWelfareTitleBroadCast {
 public:

  static const char* ascii_fingerprint; // = "3967FCB1D2A588AFFB6B3D0713F6F380";
  static const uint8_t binary_fingerprint[16]; // = {0x39,0x67,0xFC,0xB1,0xD2,0xA5,0x88,0xAF,0xFB,0x6B,0x3D,0x07,0x13,0xF6,0xF3,0x80};

  MessageWelfareTitleBroadCast() {
  }

  virtual ~MessageWelfareTitleBroadCast() throw() {}

  std::vector<MessageTitleFiled>  fields_;

  void __set_fields_(const std::vector<MessageTitleFiled> & val) {
    fields_ = val;
  }

  bool operator == (const MessageWelfareTitleBroadCast & rhs) const
  {
    if (!(fields_ == rhs.fields_))
      return false;
    return true;
  }
  bool operator != (const MessageWelfareTitleBroadCast &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageWelfareTitleBroadCast & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageWelfareTitleBroadCast &a, MessageWelfareTitleBroadCast &b);

}} // namespace

#endif
