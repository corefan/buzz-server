/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef gateway_skill_protocol_TYPES_H
#define gateway_skill_protocol_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "entity_types.h"
#include "skill_types.h"
#include "gateway_protocol_types.h"


namespace gateway { namespace protocol {

struct SkillOperateType {
  enum type {
    USE = 0,
    BOOT = 1,
    LAUNCH = 2,
    MAX = 3
  };
};

extern const std::map<int, const char*> _SkillOperateType_VALUES_TO_NAMES;

typedef struct _SkillContext__isset {
  _SkillContext__isset() : src_type_(false), src_id_(false), target_type_(false), target_id_(false), x_(false), y_(false), direction_(false) {}
  bool src_type_;
  bool src_id_;
  bool target_type_;
  bool target_id_;
  bool x_;
  bool y_;
  bool direction_;
} _SkillContext__isset;

class SkillContext {
 public:

  static const char* ascii_fingerprint; // = "B97534B7EBC38ED76D780E41DA48A6CF";
  static const uint8_t binary_fingerprint[16]; // = {0xB9,0x75,0x34,0xB7,0xEB,0xC3,0x8E,0xD7,0x6D,0x78,0x0E,0x41,0xDA,0x48,0xA6,0xCF};

  SkillContext() : src_type_(( ::entity::EntityType::type)0), src_id_(), target_type_(( ::entity::EntityType::type)0), target_id_(), x_(0), y_(0), direction_(0) {
  }

  virtual ~SkillContext() throw() {}

   ::entity::EntityType::type src_type_;
  std::string src_id_;
   ::entity::EntityType::type target_type_;
  std::string target_id_;
  int32_t x_;
  int32_t y_;
  int16_t direction_;

  _SkillContext__isset __isset;

  void __set_src_type_(const  ::entity::EntityType::type val) {
    src_type_ = val;
    __isset.src_type_ = true;
  }

  void __set_src_id_(const std::string& val) {
    src_id_ = val;
    __isset.src_id_ = true;
  }

  void __set_target_type_(const  ::entity::EntityType::type val) {
    target_type_ = val;
    __isset.target_type_ = true;
  }

  void __set_target_id_(const std::string& val) {
    target_id_ = val;
    __isset.target_id_ = true;
  }

  void __set_x_(const int32_t val) {
    x_ = val;
    __isset.x_ = true;
  }

  void __set_y_(const int32_t val) {
    y_ = val;
    __isset.y_ = true;
  }

  void __set_direction_(const int16_t val) {
    direction_ = val;
    __isset.direction_ = true;
  }

  bool operator == (const SkillContext & rhs) const
  {
    if (__isset.src_type_ != rhs.__isset.src_type_)
      return false;
    else if (__isset.src_type_ && !(src_type_ == rhs.src_type_))
      return false;
    if (__isset.src_id_ != rhs.__isset.src_id_)
      return false;
    else if (__isset.src_id_ && !(src_id_ == rhs.src_id_))
      return false;
    if (__isset.target_type_ != rhs.__isset.target_type_)
      return false;
    else if (__isset.target_type_ && !(target_type_ == rhs.target_type_))
      return false;
    if (__isset.target_id_ != rhs.__isset.target_id_)
      return false;
    else if (__isset.target_id_ && !(target_id_ == rhs.target_id_))
      return false;
    if (__isset.x_ != rhs.__isset.x_)
      return false;
    else if (__isset.x_ && !(x_ == rhs.x_))
      return false;
    if (__isset.y_ != rhs.__isset.y_)
      return false;
    else if (__isset.y_ && !(y_ == rhs.y_))
      return false;
    if (__isset.direction_ != rhs.__isset.direction_)
      return false;
    else if (__isset.direction_ && !(direction_ == rhs.direction_))
      return false;
    return true;
  }
  bool operator != (const SkillContext &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SkillContext & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SkillContext &a, SkillContext &b);


class MessageSkillOperate {
 public:

  static const char* ascii_fingerprint; // = "492BF2005D2FAA9FAB32DF0204AB358D";
  static const uint8_t binary_fingerprint[16]; // = {0x49,0x2B,0xF2,0x00,0x5D,0x2F,0xAA,0x9F,0xAB,0x32,0xDF,0x02,0x04,0xAB,0x35,0x8D};

  MessageSkillOperate() : skill_id_(0), type_((SkillOperateType::type)0) {
  }

  virtual ~MessageSkillOperate() throw() {}

  int32_t skill_id_;
  SkillOperateType::type type_;
  SkillContext context_;

  void __set_skill_id_(const int32_t val) {
    skill_id_ = val;
  }

  void __set_type_(const SkillOperateType::type val) {
    type_ = val;
  }

  void __set_context_(const SkillContext& val) {
    context_ = val;
  }

  bool operator == (const MessageSkillOperate & rhs) const
  {
    if (!(skill_id_ == rhs.skill_id_))
      return false;
    if (!(type_ == rhs.type_))
      return false;
    if (!(context_ == rhs.context_))
      return false;
    return true;
  }
  bool operator != (const MessageSkillOperate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSkillOperate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSkillOperate &a, MessageSkillOperate &b);

typedef struct _MessageSkillHit__isset {
  _MessageSkillHit__isset() : value_(false) {}
  bool value_;
} _MessageSkillHit__isset;

class MessageSkillHit {
 public:

  static const char* ascii_fingerprint; // = "036D4BEB6D64F959869A973AF3F73AA7";
  static const uint8_t binary_fingerprint[16]; // = {0x03,0x6D,0x4B,0xEB,0x6D,0x64,0xF9,0x59,0x86,0x9A,0x97,0x3A,0xF3,0xF7,0x3A,0xA7};

  MessageSkillHit() : skill_id_(0), src_type_(( ::entity::EntityType::type)0), src_id_(), target_type_(( ::entity::EntityType::type)0), target_id_(), hit_type_(( ::entity::SkillHitType::type)0), value_(0) {
  }

  virtual ~MessageSkillHit() throw() {}

  int32_t skill_id_;
   ::entity::EntityType::type src_type_;
  std::string src_id_;
   ::entity::EntityType::type target_type_;
  std::string target_id_;
   ::entity::SkillHitType::type hit_type_;
  int32_t value_;

  _MessageSkillHit__isset __isset;

  void __set_skill_id_(const int32_t val) {
    skill_id_ = val;
  }

  void __set_src_type_(const  ::entity::EntityType::type val) {
    src_type_ = val;
  }

  void __set_src_id_(const std::string& val) {
    src_id_ = val;
  }

  void __set_target_type_(const  ::entity::EntityType::type val) {
    target_type_ = val;
  }

  void __set_target_id_(const std::string& val) {
    target_id_ = val;
  }

  void __set_hit_type_(const  ::entity::SkillHitType::type val) {
    hit_type_ = val;
  }

  void __set_value_(const int32_t val) {
    value_ = val;
    __isset.value_ = true;
  }

  bool operator == (const MessageSkillHit & rhs) const
  {
    if (!(skill_id_ == rhs.skill_id_))
      return false;
    if (!(src_type_ == rhs.src_type_))
      return false;
    if (!(src_id_ == rhs.src_id_))
      return false;
    if (!(target_type_ == rhs.target_type_))
      return false;
    if (!(target_id_ == rhs.target_id_))
      return false;
    if (!(hit_type_ == rhs.hit_type_))
      return false;
    if (__isset.value_ != rhs.__isset.value_)
      return false;
    else if (__isset.value_ && !(value_ == rhs.value_))
      return false;
    return true;
  }
  bool operator != (const MessageSkillHit &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSkillHit & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSkillHit &a, MessageSkillHit &b);


class MessageActorChoosePKMode {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MessageActorChoosePKMode() : pk_mode_(0) {
  }

  virtual ~MessageActorChoosePKMode() throw() {}

  int32_t pk_mode_;

  void __set_pk_mode_(const int32_t val) {
    pk_mode_ = val;
  }

  bool operator == (const MessageActorChoosePKMode & rhs) const
  {
    if (!(pk_mode_ == rhs.pk_mode_))
      return false;
    return true;
  }
  bool operator != (const MessageActorChoosePKMode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageActorChoosePKMode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageActorChoosePKMode &a, MessageActorChoosePKMode &b);


class MessageEnterFightingStatus {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageEnterFightingStatus() {
  }

  virtual ~MessageEnterFightingStatus() throw() {}


  bool operator == (const MessageEnterFightingStatus & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageEnterFightingStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageEnterFightingStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageEnterFightingStatus &a, MessageEnterFightingStatus &b);


class MessageLeaveFightingStatus {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageLeaveFightingStatus() {
  }

  virtual ~MessageLeaveFightingStatus() throw() {}


  bool operator == (const MessageLeaveFightingStatus & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageLeaveFightingStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageLeaveFightingStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageLeaveFightingStatus &a, MessageLeaveFightingStatus &b);


class MessageEnterPvpStatus {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MessageEnterPvpStatus() : id_() {
  }

  virtual ~MessageEnterPvpStatus() throw() {}

  std::string id_;

  void __set_id_(const std::string& val) {
    id_ = val;
  }

  bool operator == (const MessageEnterPvpStatus & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const MessageEnterPvpStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageEnterPvpStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageEnterPvpStatus &a, MessageEnterPvpStatus &b);


class MessageLeavePvpStatus {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MessageLeavePvpStatus() : id_() {
  }

  virtual ~MessageLeavePvpStatus() throw() {}

  std::string id_;

  void __set_id_(const std::string& val) {
    id_ = val;
  }

  bool operator == (const MessageLeavePvpStatus & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const MessageLeavePvpStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageLeavePvpStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageLeavePvpStatus &a, MessageLeavePvpStatus &b);


class MessagePvpStatusBroadcast {
 public:

  static const char* ascii_fingerprint; // = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};

  MessagePvpStatusBroadcast() {
  }

  virtual ~MessagePvpStatusBroadcast() throw() {}

  std::vector<std::string>  actors_;

  void __set_actors_(const std::vector<std::string> & val) {
    actors_ = val;
  }

  bool operator == (const MessagePvpStatusBroadcast & rhs) const
  {
    if (!(actors_ == rhs.actors_))
      return false;
    return true;
  }
  bool operator != (const MessagePvpStatusBroadcast &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePvpStatusBroadcast & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePvpStatusBroadcast &a, MessagePvpStatusBroadcast &b);


class MessageSkillBreakSynchronize {
 public:

  static const char* ascii_fingerprint; // = "A0A4DD7B8243FB842E64EAC6E5DA6C7B";
  static const uint8_t binary_fingerprint[16]; // = {0xA0,0xA4,0xDD,0x7B,0x82,0x43,0xFB,0x84,0x2E,0x64,0xEA,0xC6,0xE5,0xDA,0x6C,0x7B};

  MessageSkillBreakSynchronize() : role_id_(), role_type_(( ::entity::EntityType::type)0), skill_id_(0) {
  }

  virtual ~MessageSkillBreakSynchronize() throw() {}

  std::string role_id_;
   ::entity::EntityType::type role_type_;
  int32_t skill_id_;

  void __set_role_id_(const std::string& val) {
    role_id_ = val;
  }

  void __set_role_type_(const  ::entity::EntityType::type val) {
    role_type_ = val;
  }

  void __set_skill_id_(const int32_t val) {
    skill_id_ = val;
  }

  bool operator == (const MessageSkillBreakSynchronize & rhs) const
  {
    if (!(role_id_ == rhs.role_id_))
      return false;
    if (!(role_type_ == rhs.role_type_))
      return false;
    if (!(skill_id_ == rhs.skill_id_))
      return false;
    return true;
  }
  bool operator != (const MessageSkillBreakSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSkillBreakSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSkillBreakSynchronize &a, MessageSkillBreakSynchronize &b);


class MessageSkillAttributeSynchronize {
 public:

  static const char* ascii_fingerprint; // = "4C1A22BE2C0C03AAC7555241DD64B76E";
  static const uint8_t binary_fingerprint[16]; // = {0x4C,0x1A,0x22,0xBE,0x2C,0x0C,0x03,0xAA,0xC7,0x55,0x52,0x41,0xDD,0x64,0xB7,0x6E};

  MessageSkillAttributeSynchronize() : skill_id_(0) {
  }

  virtual ~MessageSkillAttributeSynchronize() throw() {}

  int32_t skill_id_;
  std::vector< ::entity::SkillVarField>  attributes_;

  void __set_skill_id_(const int32_t val) {
    skill_id_ = val;
  }

  void __set_attributes_(const std::vector< ::entity::SkillVarField> & val) {
    attributes_ = val;
  }

  bool operator == (const MessageSkillAttributeSynchronize & rhs) const
  {
    if (!(skill_id_ == rhs.skill_id_))
      return false;
    if (!(attributes_ == rhs.attributes_))
      return false;
    return true;
  }
  bool operator != (const MessageSkillAttributeSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSkillAttributeSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSkillAttributeSynchronize &a, MessageSkillAttributeSynchronize &b);

}} // namespace

#endif
