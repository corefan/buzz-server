/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef playing_TYPES_H
#define playing_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "resource_types.h"


namespace entity {

struct PlayingType {
  enum type {
    MIN = 0,
    COMMON = 1,
    DAILY_PASS = 2,
    MAX = 3
  };
};

extern const std::map<int, const char*> _PlayingType_VALUES_TO_NAMES;

struct PlayingCampType {
  enum type {
    MIN = 0,
    PLAYER = 1,
    TEAM = 2,
    GUILD = 3,
    ROOM = 4,
    ACTIVITY = 5,
    MAX = 6
  };
};

extern const std::map<int, const char*> _PlayingCampType_VALUES_TO_NAMES;

struct DailyPassGroup {
  enum type {
    MIN = 0,
    PLOT = 1,
    IDOL = 2,
    MAX = 3
  };
};

extern const std::map<int, const char*> _DailyPassGroup_VALUES_TO_NAMES;

struct PlayingScoreType {
  enum type {
    MIN = 0,
    KILL_NPC = 1,
    KILL_ACTOR = 2,
    EXP = 3,
    DEAD_COUNT = 4,
    POWER = 5,
    DAMAGE = 6,
    STAGE = 7,
    MAX = 8
  };
};

extern const std::map<int, const char*> _PlayingScoreType_VALUES_TO_NAMES;

struct PlayingResultType {
  enum type {
    MIN = 0,
    SIMPLE_SOCRE = 1,
    SIMPLE_PASS = 2,
    MAX = 3
  };
};

extern const std::map<int, const char*> _PlayingResultType_VALUES_TO_NAMES;

struct PlayingAutoType {
  enum type {
    MIN = 0,
    RECORD = 1,
    IMMEDIATE = 2,
    MAX = 3
  };
};

extern const std::map<int, const char*> _PlayingAutoType_VALUES_TO_NAMES;

struct PlayingPeriodType {
  enum type {
    MIN = 0,
    DAILY = 1,
    WEEKLY = 2,
    MAX = 3
  };
};

extern const std::map<int, const char*> _PlayingPeriodType_VALUES_TO_NAMES;

struct PlayingTeamStatus {
  enum type {
    MIN = 0,
    WAITING = 1,
    READY = 2,
    MAX = 3
  };
};

extern const std::map<int, const char*> _PlayingTeamStatus_VALUES_TO_NAMES;


class PlayingItemField {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  PlayingItemField() : template_(0), number_(0) {
  }

  virtual ~PlayingItemField() throw() {}

  int32_t template_;
  int32_t number_;

  void __set_template_(const int32_t val) {
    template_ = val;
  }

  void __set_number_(const int32_t val) {
    number_ = val;
  }

  bool operator == (const PlayingItemField & rhs) const
  {
    if (!(template_ == rhs.template_))
      return false;
    if (!(number_ == rhs.number_))
      return false;
    return true;
  }
  bool operator != (const PlayingItemField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlayingItemField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PlayingItemField &a, PlayingItemField &b);


class PlayingAwardField {
 public:

  static const char* ascii_fingerprint; // = "9177E894815163D920ECC1A1CE512CD8";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x77,0xE8,0x94,0x81,0x51,0x63,0xD9,0x20,0xEC,0xC1,0xA1,0xCE,0x51,0x2C,0xD8};

  PlayingAwardField() : type_(( ::entity::ResourceType::type)0), id_(0), number_(0) {
  }

  virtual ~PlayingAwardField() throw() {}

   ::entity::ResourceType::type type_;
  int32_t id_;
  int32_t number_;

  void __set_type_(const  ::entity::ResourceType::type val) {
    type_ = val;
  }

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  void __set_number_(const int32_t val) {
    number_ = val;
  }

  bool operator == (const PlayingAwardField & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(number_ == rhs.number_))
      return false;
    return true;
  }
  bool operator != (const PlayingAwardField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlayingAwardField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PlayingAwardField &a, PlayingAwardField &b);


class PlayingAwardFields {
 public:

  static const char* ascii_fingerprint; // = "7FEA17F9F2B4FB50FF33F7320BB8C48F";
  static const uint8_t binary_fingerprint[16]; // = {0x7F,0xEA,0x17,0xF9,0xF2,0xB4,0xFB,0x50,0xFF,0x33,0xF7,0x32,0x0B,0xB8,0xC4,0x8F};

  PlayingAwardFields() : playing_template_(0) {
  }

  virtual ~PlayingAwardFields() throw() {}

  int32_t playing_template_;
  std::vector<PlayingAwardField>  awards_;

  void __set_playing_template_(const int32_t val) {
    playing_template_ = val;
  }

  void __set_awards_(const std::vector<PlayingAwardField> & val) {
    awards_ = val;
  }

  bool operator == (const PlayingAwardFields & rhs) const
  {
    if (!(playing_template_ == rhs.playing_template_))
      return false;
    if (!(awards_ == rhs.awards_))
      return false;
    return true;
  }
  bool operator != (const PlayingAwardFields &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlayingAwardFields & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PlayingAwardFields &a, PlayingAwardFields &b);


class PlayingScoreField {
 public:

  static const char* ascii_fingerprint; // = "9177E894815163D920ECC1A1CE512CD8";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x77,0xE8,0x94,0x81,0x51,0x63,0xD9,0x20,0xEC,0xC1,0xA1,0xCE,0x51,0x2C,0xD8};

  PlayingScoreField() : type_((PlayingScoreType::type)0), key_(0), value_(0) {
  }

  virtual ~PlayingScoreField() throw() {}

  PlayingScoreType::type type_;
  int32_t key_;
  int32_t value_;

  void __set_type_(const PlayingScoreType::type val) {
    type_ = val;
  }

  void __set_key_(const int32_t val) {
    key_ = val;
  }

  void __set_value_(const int32_t val) {
    value_ = val;
  }

  bool operator == (const PlayingScoreField & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(key_ == rhs.key_))
      return false;
    if (!(value_ == rhs.value_))
      return false;
    return true;
  }
  bool operator != (const PlayingScoreField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlayingScoreField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PlayingScoreField &a, PlayingScoreField &b);


class PlayingRankingField {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  PlayingRankingField() : name_(), value_(0) {
  }

  virtual ~PlayingRankingField() throw() {}

  std::string name_;
  int32_t value_;

  void __set_name_(const std::string& val) {
    name_ = val;
  }

  void __set_value_(const int32_t val) {
    value_ = val;
  }

  bool operator == (const PlayingRankingField & rhs) const
  {
    if (!(name_ == rhs.name_))
      return false;
    if (!(value_ == rhs.value_))
      return false;
    return true;
  }
  bool operator != (const PlayingRankingField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlayingRankingField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PlayingRankingField &a, PlayingRankingField &b);


class PlayingRecordField {
 public:

  static const char* ascii_fingerprint; // = "BAC735954E29AD7C622C02DC007A46AB";
  static const uint8_t binary_fingerprint[16]; // = {0xBA,0xC7,0x35,0x95,0x4E,0x29,0xAD,0x7C,0x62,0x2C,0x02,0xDC,0x00,0x7A,0x46,0xAB};

  PlayingRecordField() : period_count_(0), spend_secs_(0), first_pass_awarded_(0) {
  }

  virtual ~PlayingRecordField() throw() {}

  int32_t period_count_;
  int32_t spend_secs_;
  bool first_pass_awarded_;
  std::vector<int32_t>  values_;

  void __set_period_count_(const int32_t val) {
    period_count_ = val;
  }

  void __set_spend_secs_(const int32_t val) {
    spend_secs_ = val;
  }

  void __set_first_pass_awarded_(const bool val) {
    first_pass_awarded_ = val;
  }

  void __set_values_(const std::vector<int32_t> & val) {
    values_ = val;
  }

  bool operator == (const PlayingRecordField & rhs) const
  {
    if (!(period_count_ == rhs.period_count_))
      return false;
    if (!(spend_secs_ == rhs.spend_secs_))
      return false;
    if (!(first_pass_awarded_ == rhs.first_pass_awarded_))
      return false;
    if (!(values_ == rhs.values_))
      return false;
    return true;
  }
  bool operator != (const PlayingRecordField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlayingRecordField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PlayingRecordField &a, PlayingRecordField &b);


class PlayingResultField {
 public:

  static const char* ascii_fingerprint; // = "93C3AA88F26314341CE82F7918D8BF77";
  static const uint8_t binary_fingerprint[16]; // = {0x93,0xC3,0xAA,0x88,0xF2,0x63,0x14,0x34,0x1C,0xE8,0x2F,0x79,0x18,0xD8,0xBF,0x77};

  PlayingResultField() : awarded_(0), award_count_(0), paid_award_count_(0) {
  }

  virtual ~PlayingResultField() throw() {}

  bool awarded_;
  int32_t award_count_;
  int32_t paid_award_count_;
  std::vector<int32_t>  values_;

  void __set_awarded_(const bool val) {
    awarded_ = val;
  }

  void __set_award_count_(const int32_t val) {
    award_count_ = val;
  }

  void __set_paid_award_count_(const int32_t val) {
    paid_award_count_ = val;
  }

  void __set_values_(const std::vector<int32_t> & val) {
    values_ = val;
  }

  bool operator == (const PlayingResultField & rhs) const
  {
    if (!(awarded_ == rhs.awarded_))
      return false;
    if (!(award_count_ == rhs.award_count_))
      return false;
    if (!(paid_award_count_ == rhs.paid_award_count_))
      return false;
    if (!(values_ == rhs.values_))
      return false;
    return true;
  }
  bool operator != (const PlayingResultField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlayingResultField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PlayingResultField &a, PlayingResultField &b);


class PlayingTeamField {
 public:

  static const char* ascii_fingerprint; // = "776618BF917B240D143C3C7E58214557";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x66,0x18,0xBF,0x91,0x7B,0x24,0x0D,0x14,0x3C,0x3C,0x7E,0x58,0x21,0x45,0x57};

  PlayingTeamField() : id_(), name_(), min_fight_score_(0), member_number_(0), status_((PlayingTeamStatus::type)0), capacity_(0), auto_open_(0) {
  }

  virtual ~PlayingTeamField() throw() {}

  std::string id_;
  std::string name_;
  int32_t min_fight_score_;
  int32_t member_number_;
  PlayingTeamStatus::type status_;
  int32_t capacity_;
  bool auto_open_;

  void __set_id_(const std::string& val) {
    id_ = val;
  }

  void __set_name_(const std::string& val) {
    name_ = val;
  }

  void __set_min_fight_score_(const int32_t val) {
    min_fight_score_ = val;
  }

  void __set_member_number_(const int32_t val) {
    member_number_ = val;
  }

  void __set_status_(const PlayingTeamStatus::type val) {
    status_ = val;
  }

  void __set_capacity_(const int32_t val) {
    capacity_ = val;
  }

  void __set_auto_open_(const bool val) {
    auto_open_ = val;
  }

  bool operator == (const PlayingTeamField & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(name_ == rhs.name_))
      return false;
    if (!(min_fight_score_ == rhs.min_fight_score_))
      return false;
    if (!(member_number_ == rhs.member_number_))
      return false;
    if (!(status_ == rhs.status_))
      return false;
    if (!(capacity_ == rhs.capacity_))
      return false;
    if (!(auto_open_ == rhs.auto_open_))
      return false;
    return true;
  }
  bool operator != (const PlayingTeamField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlayingTeamField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PlayingTeamField &a, PlayingTeamField &b);


class PlayingTeamMemberField {
 public:

  static const char* ascii_fingerprint; // = "0FAA12BA4C0DEB2499895230F6057237";
  static const uint8_t binary_fingerprint[16]; // = {0x0F,0xAA,0x12,0xBA,0x4C,0x0D,0xEB,0x24,0x99,0x89,0x52,0x30,0xF6,0x05,0x72,0x37};

  PlayingTeamMemberField() : actor_(), name_(), fight_score_(0), level_(0), ready_(0) {
  }

  virtual ~PlayingTeamMemberField() throw() {}

  std::string actor_;
  std::string name_;
  int32_t fight_score_;
  int32_t level_;
  bool ready_;

  void __set_actor_(const std::string& val) {
    actor_ = val;
  }

  void __set_name_(const std::string& val) {
    name_ = val;
  }

  void __set_fight_score_(const int32_t val) {
    fight_score_ = val;
  }

  void __set_level_(const int32_t val) {
    level_ = val;
  }

  void __set_ready_(const bool val) {
    ready_ = val;
  }

  bool operator == (const PlayingTeamMemberField & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(name_ == rhs.name_))
      return false;
    if (!(fight_score_ == rhs.fight_score_))
      return false;
    if (!(level_ == rhs.level_))
      return false;
    if (!(ready_ == rhs.ready_))
      return false;
    return true;
  }
  bool operator != (const PlayingTeamMemberField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlayingTeamMemberField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PlayingTeamMemberField &a, PlayingTeamMemberField &b);

} // namespace

#endif
