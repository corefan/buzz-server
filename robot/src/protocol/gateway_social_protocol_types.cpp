/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "gateway_social_protocol_types.h"

#include <algorithm>

namespace gateway { namespace protocol {

int _kContactsOperateTypeValues[] = {
  ContactsOperateType::ADD,
  ContactsOperateType::REMOVE,
  ContactsOperateType::UPDATE
};
const char* _kContactsOperateTypeNames[] = {
  "ADD",
  "REMOVE",
  "UPDATE"
};
const std::map<int, const char*> _ContactsOperateType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kContactsOperateTypeValues, _kContactsOperateTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSocialEnemyOperateTypeValues[] = {
  SocialEnemyOperateType::ADD,
  SocialEnemyOperateType::REMOVE,
  SocialEnemyOperateType::UPDATE
};
const char* _kSocialEnemyOperateTypeNames[] = {
  "ADD",
  "REMOVE",
  "UPDATE"
};
const std::map<int, const char*> _SocialEnemyOperateType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kSocialEnemyOperateTypeValues, _kSocialEnemyOperateTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kHomelandFriendOperateTypeValues[] = {
  HomelandFriendOperateType::ADD,
  HomelandFriendOperateType::REMOVE,
  HomelandFriendOperateType::UPDATE
};
const char* _kHomelandFriendOperateTypeNames[] = {
  "ADD",
  "REMOVE",
  "UPDATE"
};
const std::map<int, const char*> _HomelandFriendOperateType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kHomelandFriendOperateTypeValues, _kHomelandFriendOperateTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kHomelandInvaderOperateTypeValues[] = {
  HomelandInvaderOperateType::ADD,
  HomelandInvaderOperateType::REMOVE,
  HomelandInvaderOperateType::UPDATE
};
const char* _kHomelandInvaderOperateTypeNames[] = {
  "ADD",
  "REMOVE",
  "UPDATE"
};
const std::map<int, const char*> _HomelandInvaderOperateType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kHomelandInvaderOperateTypeValues, _kHomelandInvaderOperateTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kHomelandSupportedSoulOperateTypeValues[] = {
  HomelandSupportedSoulOperateType::ADD,
  HomelandSupportedSoulOperateType::REMOVE
};
const char* _kHomelandSupportedSoulOperateTypeNames[] = {
  "ADD",
  "REMOVE"
};
const std::map<int, const char*> _HomelandSupportedSoulOperateType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kHomelandSupportedSoulOperateTypeValues, _kHomelandSupportedSoulOperateTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kHomelandSupportSoulOperateTypeValues[] = {
  HomelandSupportSoulOperateType::ADD
};
const char* _kHomelandSupportSoulOperateTypeNames[] = {
  "ADD"
};
const std::map<int, const char*> _HomelandSupportSoulOperateType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kHomelandSupportSoulOperateTypeValues, _kHomelandSupportSoulOperateTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kHomelandEventOperateTypeValues[] = {
  HomelandEventOperateType::ADD
};
const char* _kHomelandEventOperateTypeNames[] = {
  "ADD"
};
const std::map<int, const char*> _HomelandEventOperateType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kHomelandEventOperateTypeValues, _kHomelandEventOperateTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* ContactsData::ascii_fingerprint = "2C69455719838124E713A996F5A40019";
const uint8_t ContactsData::binary_fingerprint[16] = {0x2C,0x69,0x45,0x57,0x19,0x83,0x81,0x24,0xE7,0x13,0xA9,0x96,0xF5,0xA4,0x00,0x19};

uint32_t ContactsData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_contacts_type_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->contacts_type_ = ( ::entity::ContactsType::type)ecast0;
          isset_contacts_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->online_);
          this->__isset.online_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_name_);
          this->__isset.actor_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level_);
          this->__isset.level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->gender_ = ( ::entity::GenderType::type)ecast1;
          this->__isset.gender_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->vocation_ = ( ::entity::VocationType::type)ecast2;
          this->__isset.vocation_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->map_);
          this->__isset.map_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->last_logout_time_);
          this->__isset.last_logout_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->signature_);
          this->__isset.signature_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_contacts_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ContactsData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ContactsData");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contacts_type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->contacts_type_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.online_) {
    xfer += oprot->writeFieldBegin("online_", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->online_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.actor_name_) {
    xfer += oprot->writeFieldBegin("actor_name_", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->actor_name_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.level_) {
    xfer += oprot->writeFieldBegin("level_", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gender_) {
    xfer += oprot->writeFieldBegin("gender_", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32((int32_t)this->gender_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vocation_) {
    xfer += oprot->writeFieldBegin("vocation_", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32((int32_t)this->vocation_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.map_) {
    xfer += oprot->writeFieldBegin("map_", ::apache::thrift::protocol::T_I16, 8);
    xfer += oprot->writeI16(this->map_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.last_logout_time_) {
    xfer += oprot->writeFieldBegin("last_logout_time_", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->last_logout_time_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.signature_) {
    xfer += oprot->writeFieldBegin("signature_", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->signature_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ContactsData &a, ContactsData &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.contacts_type_, b.contacts_type_);
  swap(a.online_, b.online_);
  swap(a.actor_name_, b.actor_name_);
  swap(a.level_, b.level_);
  swap(a.gender_, b.gender_);
  swap(a.vocation_, b.vocation_);
  swap(a.map_, b.map_);
  swap(a.last_logout_time_, b.last_logout_time_);
  swap(a.signature_, b.signature_);
  swap(a.__isset, b.__isset);
}

const char* MessageSocialContactsInitialize::ascii_fingerprint = "2A83E2051E794B20924B3278DD5DEC56";
const uint8_t MessageSocialContactsInitialize::binary_fingerprint[16] = {0x2A,0x83,0xE2,0x05,0x1E,0x79,0x4B,0x20,0x92,0x4B,0x32,0x78,0xDD,0x5D,0xEC,0x56};

uint32_t MessageSocialContactsInitialize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_contacts_ = false;
  bool isset_signature_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->contacts_.clear();
            uint32_t _size3;
            ::apache::thrift::protocol::TType _etype6;
            xfer += iprot->readListBegin(_etype6, _size3);
            this->contacts_.resize(_size3);
            uint32_t _i7;
            for (_i7 = 0; _i7 < _size3; ++_i7)
            {
              xfer += this->contacts_[_i7].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_contacts_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->signature_);
          isset_signature_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_contacts_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_signature_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSocialContactsInitialize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSocialContactsInitialize");

  xfer += oprot->writeFieldBegin("contacts_", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->contacts_.size()));
    std::vector<ContactsData> ::const_iterator _iter8;
    for (_iter8 = this->contacts_.begin(); _iter8 != this->contacts_.end(); ++_iter8)
    {
      xfer += (*_iter8).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("signature_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->signature_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSocialContactsInitialize &a, MessageSocialContactsInitialize &b) {
  using ::std::swap;
  swap(a.contacts_, b.contacts_);
  swap(a.signature_, b.signature_);
}

const char* MessageSocialContactsSynchronize::ascii_fingerprint = "6929CBA987F957995E7641EE15EAE2E4";
const uint8_t MessageSocialContactsSynchronize::binary_fingerprint[16] = {0x69,0x29,0xCB,0xA9,0x87,0xF9,0x57,0x99,0x5E,0x76,0x41,0xEE,0x15,0xEA,0xE2,0xE4};

uint32_t MessageSocialContactsSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_contacts_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast9;
          xfer += iprot->readI32(ecast9);
          this->type_ = (ContactsOperateType::type)ecast9;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->contacts_.read(iprot);
          isset_contacts_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_contacts_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSocialContactsSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSocialContactsSynchronize");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contacts_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->contacts_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSocialContactsSynchronize &a, MessageSocialContactsSynchronize &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.contacts_, b.contacts_);
}

const char* MessageSocialContactsEditSignatureRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MessageSocialContactsEditSignatureRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MessageSocialContactsEditSignatureRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_signature_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->signature_);
          isset_signature_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_signature_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSocialContactsEditSignatureRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSocialContactsEditSignatureRequest");

  xfer += oprot->writeFieldBegin("signature_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->signature_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSocialContactsEditSignatureRequest &a, MessageSocialContactsEditSignatureRequest &b) {
  using ::std::swap;
  swap(a.signature_, b.signature_);
}

const char* MessageSocialContactsEditSignatureResponse::ascii_fingerprint = "EB04A806CFFC9025AEE48CFFDC378A86";
const uint8_t MessageSocialContactsEditSignatureResponse::binary_fingerprint[16] = {0xEB,0x04,0xA8,0x06,0xCF,0xFC,0x90,0x25,0xAE,0xE4,0x8C,0xFF,0xDC,0x37,0x8A,0x86};

uint32_t MessageSocialContactsEditSignatureResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->signature_);
          this->__isset.signature_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSocialContactsEditSignatureResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSocialContactsEditSignatureResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.signature_) {
    xfer += oprot->writeFieldBegin("signature_", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->signature_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSocialContactsEditSignatureResponse &a, MessageSocialContactsEditSignatureResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.signature_, b.signature_);
  swap(a.__isset, b.__isset);
}

const char* MessageSocialContactsAddRequest::ascii_fingerprint = "D6FD826D949221396F4FFC3ECCD3D192";
const uint8_t MessageSocialContactsAddRequest::binary_fingerprint[16] = {0xD6,0xFD,0x82,0x6D,0x94,0x92,0x21,0x39,0x6F,0x4F,0xFC,0x3E,0xCC,0xD3,0xD1,0x92};

uint32_t MessageSocialContactsAddRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_name_ = false;
  bool isset_contacts_type_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_name_);
          isset_actor_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast10;
          xfer += iprot->readI32(ecast10);
          this->contacts_type_ = ( ::entity::ContactsType::type)ecast10;
          isset_contacts_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_name_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_contacts_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSocialContactsAddRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSocialContactsAddRequest");

  xfer += oprot->writeFieldBegin("actor_name_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_name_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contacts_type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->contacts_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSocialContactsAddRequest &a, MessageSocialContactsAddRequest &b) {
  using ::std::swap;
  swap(a.actor_name_, b.actor_name_);
  swap(a.contacts_type_, b.contacts_type_);
}

const char* MessageSocialContactsAddResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageSocialContactsAddResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageSocialContactsAddResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSocialContactsAddResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSocialContactsAddResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSocialContactsAddResponse &a, MessageSocialContactsAddResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageSocialContactsAddNotify::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MessageSocialContactsAddNotify::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MessageSocialContactsAddNotify::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_name_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_name_);
          isset_actor_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_name_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSocialContactsAddNotify::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSocialContactsAddNotify");

  xfer += oprot->writeFieldBegin("actor_name_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_name_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSocialContactsAddNotify &a, MessageSocialContactsAddNotify &b) {
  using ::std::swap;
  swap(a.actor_name_, b.actor_name_);
}

const char* MessageSocialContactsRemoveRequest::ascii_fingerprint = "D6FD826D949221396F4FFC3ECCD3D192";
const uint8_t MessageSocialContactsRemoveRequest::binary_fingerprint[16] = {0xD6,0xFD,0x82,0x6D,0x94,0x92,0x21,0x39,0x6F,0x4F,0xFC,0x3E,0xCC,0xD3,0xD1,0x92};

uint32_t MessageSocialContactsRemoveRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_contacts_type_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast11;
          xfer += iprot->readI32(ecast11);
          this->contacts_type_ = ( ::entity::ContactsType::type)ecast11;
          isset_contacts_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_contacts_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSocialContactsRemoveRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSocialContactsRemoveRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contacts_type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->contacts_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSocialContactsRemoveRequest &a, MessageSocialContactsRemoveRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.contacts_type_, b.contacts_type_);
}

const char* MessageSocialContactsRemoveResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageSocialContactsRemoveResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageSocialContactsRemoveResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSocialContactsRemoveResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSocialContactsRemoveResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSocialContactsRemoveResponse &a, MessageSocialContactsRemoveResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageSocialContactsMoveRequest::ascii_fingerprint = "024F8F016D84C980886B97E7D0904502";
const uint8_t MessageSocialContactsMoveRequest::binary_fingerprint[16] = {0x02,0x4F,0x8F,0x01,0x6D,0x84,0xC9,0x80,0x88,0x6B,0x97,0xE7,0xD0,0x90,0x45,0x02};

uint32_t MessageSocialContactsMoveRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_src_contacts_type_ = false;
  bool isset_dst_contacts_type_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast12;
          xfer += iprot->readI32(ecast12);
          this->src_contacts_type_ = ( ::entity::ContactsType::type)ecast12;
          isset_src_contacts_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast13;
          xfer += iprot->readI32(ecast13);
          this->dst_contacts_type_ = ( ::entity::ContactsType::type)ecast13;
          isset_dst_contacts_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_src_contacts_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dst_contacts_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSocialContactsMoveRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSocialContactsMoveRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("src_contacts_type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->src_contacts_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dst_contacts_type_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->dst_contacts_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSocialContactsMoveRequest &a, MessageSocialContactsMoveRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.src_contacts_type_, b.src_contacts_type_);
  swap(a.dst_contacts_type_, b.dst_contacts_type_);
}

const char* MessageSocialContactsMoveResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageSocialContactsMoveResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageSocialContactsMoveResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSocialContactsMoveResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSocialContactsMoveResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSocialContactsMoveResponse &a, MessageSocialContactsMoveResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageSocialContactsRecommendRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageSocialContactsRecommendRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageSocialContactsRecommendRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageSocialContactsRecommendRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSocialContactsRecommendRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSocialContactsRecommendRequest &a, MessageSocialContactsRecommendRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* RecommendContactsData::ascii_fingerprint = "EEBC915CE44901401D881E6091423036";
const uint8_t RecommendContactsData::binary_fingerprint[16] = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

uint32_t RecommendContactsData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_name_ = false;
  bool isset_level_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_name_);
          isset_actor_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level_);
          isset_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_name_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RecommendContactsData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RecommendContactsData");

  xfer += oprot->writeFieldBegin("actor_name_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_name_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("level_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RecommendContactsData &a, RecommendContactsData &b) {
  using ::std::swap;
  swap(a.actor_name_, b.actor_name_);
  swap(a.level_, b.level_);
}

const char* MessageSocialContactsRecommendResponse::ascii_fingerprint = "3967FCB1D2A588AFFB6B3D0713F6F380";
const uint8_t MessageSocialContactsRecommendResponse::binary_fingerprint[16] = {0x39,0x67,0xFC,0xB1,0xD2,0xA5,0x88,0xAF,0xFB,0x6B,0x3D,0x07,0x13,0xF6,0xF3,0x80};

uint32_t MessageSocialContactsRecommendResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_contacts_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->contacts_.clear();
            uint32_t _size14;
            ::apache::thrift::protocol::TType _etype17;
            xfer += iprot->readListBegin(_etype17, _size14);
            this->contacts_.resize(_size14);
            uint32_t _i18;
            for (_i18 = 0; _i18 < _size14; ++_i18)
            {
              xfer += this->contacts_[_i18].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_contacts_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_contacts_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSocialContactsRecommendResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSocialContactsRecommendResponse");

  xfer += oprot->writeFieldBegin("contacts_", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->contacts_.size()));
    std::vector<RecommendContactsData> ::const_iterator _iter19;
    for (_iter19 = this->contacts_.begin(); _iter19 != this->contacts_.end(); ++_iter19)
    {
      xfer += (*_iter19).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSocialContactsRecommendResponse &a, MessageSocialContactsRecommendResponse &b) {
  using ::std::swap;
  swap(a.contacts_, b.contacts_);
}

const char* SocialEnemyData::ascii_fingerprint = "1D6333AF91BFD6266BB93768E95C41EA";
const uint8_t SocialEnemyData::binary_fingerprint[16] = {0x1D,0x63,0x33,0xAF,0x91,0xBF,0xD6,0x26,0x6B,0xB9,0x37,0x68,0xE9,0x5C,0x41,0xEA};

uint32_t SocialEnemyData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->online_);
          this->__isset.online_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_name_);
          this->__isset.actor_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level_);
          this->__isset.level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast20;
          xfer += iprot->readI32(ecast20);
          this->gender_ = ( ::entity::GenderType::type)ecast20;
          this->__isset.gender_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast21;
          xfer += iprot->readI32(ecast21);
          this->vocation_ = ( ::entity::VocationType::type)ecast21;
          this->__isset.vocation_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->map_);
          this->__isset.map_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SocialEnemyData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SocialEnemyData");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.online_) {
    xfer += oprot->writeFieldBegin("online_", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->online_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.actor_name_) {
    xfer += oprot->writeFieldBegin("actor_name_", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->actor_name_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.level_) {
    xfer += oprot->writeFieldBegin("level_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gender_) {
    xfer += oprot->writeFieldBegin("gender_", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32((int32_t)this->gender_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vocation_) {
    xfer += oprot->writeFieldBegin("vocation_", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32((int32_t)this->vocation_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.map_) {
    xfer += oprot->writeFieldBegin("map_", ::apache::thrift::protocol::T_I16, 7);
    xfer += oprot->writeI16(this->map_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SocialEnemyData &a, SocialEnemyData &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.online_, b.online_);
  swap(a.actor_name_, b.actor_name_);
  swap(a.level_, b.level_);
  swap(a.gender_, b.gender_);
  swap(a.vocation_, b.vocation_);
  swap(a.map_, b.map_);
  swap(a.__isset, b.__isset);
}

const char* MessageSocialEnemyInitialize::ascii_fingerprint = "629ED390B974BEADC8FD992FC20A2B38";
const uint8_t MessageSocialEnemyInitialize::binary_fingerprint[16] = {0x62,0x9E,0xD3,0x90,0xB9,0x74,0xBE,0xAD,0xC8,0xFD,0x99,0x2F,0xC2,0x0A,0x2B,0x38};

uint32_t MessageSocialEnemyInitialize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_enemies_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->enemies_.clear();
            uint32_t _size22;
            ::apache::thrift::protocol::TType _etype25;
            xfer += iprot->readListBegin(_etype25, _size22);
            this->enemies_.resize(_size22);
            uint32_t _i26;
            for (_i26 = 0; _i26 < _size22; ++_i26)
            {
              xfer += this->enemies_[_i26].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_enemies_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_enemies_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSocialEnemyInitialize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSocialEnemyInitialize");

  xfer += oprot->writeFieldBegin("enemies_", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->enemies_.size()));
    std::vector<SocialEnemyData> ::const_iterator _iter27;
    for (_iter27 = this->enemies_.begin(); _iter27 != this->enemies_.end(); ++_iter27)
    {
      xfer += (*_iter27).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSocialEnemyInitialize &a, MessageSocialEnemyInitialize &b) {
  using ::std::swap;
  swap(a.enemies_, b.enemies_);
}

const char* MessageSocialEnemySynchronize::ascii_fingerprint = "05B8C4B1DF3BE4950AE79766C3E09161";
const uint8_t MessageSocialEnemySynchronize::binary_fingerprint[16] = {0x05,0xB8,0xC4,0xB1,0xDF,0x3B,0xE4,0x95,0x0A,0xE7,0x97,0x66,0xC3,0xE0,0x91,0x61};

uint32_t MessageSocialEnemySynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_enemy_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast28;
          xfer += iprot->readI32(ecast28);
          this->type_ = (SocialEnemyOperateType::type)ecast28;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->enemy_.read(iprot);
          isset_enemy_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_enemy_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSocialEnemySynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSocialEnemySynchronize");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enemy_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->enemy_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSocialEnemySynchronize &a, MessageSocialEnemySynchronize &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.enemy_, b.enemy_);
}

const char* MessageSocialEnemyAddRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MessageSocialEnemyAddRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MessageSocialEnemyAddRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_name_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_name_);
          isset_actor_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_name_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSocialEnemyAddRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSocialEnemyAddRequest");

  xfer += oprot->writeFieldBegin("actor_name_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_name_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSocialEnemyAddRequest &a, MessageSocialEnemyAddRequest &b) {
  using ::std::swap;
  swap(a.actor_name_, b.actor_name_);
}

const char* MessageSocialEnemyAddResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageSocialEnemyAddResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageSocialEnemyAddResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSocialEnemyAddResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSocialEnemyAddResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSocialEnemyAddResponse &a, MessageSocialEnemyAddResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageSocialEnemyRemoveRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MessageSocialEnemyRemoveRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MessageSocialEnemyRemoveRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSocialEnemyRemoveRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSocialEnemyRemoveRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSocialEnemyRemoveRequest &a, MessageSocialEnemyRemoveRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
}

const char* MessageSocialEnemyRemoveResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageSocialEnemyRemoveResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageSocialEnemyRemoveResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSocialEnemyRemoveResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSocialEnemyRemoveResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSocialEnemyRemoveResponse &a, MessageSocialEnemyRemoveResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* HomelandFriendData::ascii_fingerprint = "4C425DEF757E2A03CBEF8965E51C1BFB";
const uint8_t HomelandFriendData::binary_fingerprint[16] = {0x4C,0x42,0x5D,0xEF,0x75,0x7E,0x2A,0x03,0xCB,0xEF,0x89,0x65,0xE5,0x1C,0x1B,0xFB};

uint32_t HomelandFriendData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->can_visit_);
          this->__isset.can_visit_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->tree_can_water_);
          this->__isset.tree_can_water_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->tree_can_steal_);
          this->__isset.tree_can_steal_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t HomelandFriendData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HomelandFriendData");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.can_visit_) {
    xfer += oprot->writeFieldBegin("can_visit_", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->can_visit_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tree_can_water_) {
    xfer += oprot->writeFieldBegin("tree_can_water_", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->tree_can_water_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tree_can_steal_) {
    xfer += oprot->writeFieldBegin("tree_can_steal_", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->tree_can_steal_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HomelandFriendData &a, HomelandFriendData &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.can_visit_, b.can_visit_);
  swap(a.tree_can_water_, b.tree_can_water_);
  swap(a.tree_can_steal_, b.tree_can_steal_);
  swap(a.__isset, b.__isset);
}

const char* HomelandInvaderData::ascii_fingerprint = "3B14CDF4EE0F278981F739C429FC7058";
const uint8_t HomelandInvaderData::binary_fingerprint[16] = {0x3B,0x14,0xCD,0xF4,0xEE,0x0F,0x27,0x89,0x81,0xF7,0x39,0xC4,0x29,0xFC,0x70,0x58};

uint32_t HomelandInvaderData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_name_);
          this->__isset.actor_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level_);
          this->__isset.level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->can_visit_);
          this->__isset.can_visit_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->can_strike_back_);
          this->__isset.can_strike_back_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t HomelandInvaderData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HomelandInvaderData");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.actor_name_) {
    xfer += oprot->writeFieldBegin("actor_name_", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->actor_name_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.level_) {
    xfer += oprot->writeFieldBegin("level_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.can_visit_) {
    xfer += oprot->writeFieldBegin("can_visit_", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->can_visit_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.can_strike_back_) {
    xfer += oprot->writeFieldBegin("can_strike_back_", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->can_strike_back_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HomelandInvaderData &a, HomelandInvaderData &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.actor_name_, b.actor_name_);
  swap(a.level_, b.level_);
  swap(a.can_visit_, b.can_visit_);
  swap(a.can_strike_back_, b.can_strike_back_);
  swap(a.__isset, b.__isset);
}

const char* HomelandSupportedSoulData::ascii_fingerprint = "ED9A997A6C663B2A6DDAF280383349E9";
const uint8_t HomelandSupportedSoulData::binary_fingerprint[16] = {0xED,0x9A,0x99,0x7A,0x6C,0x66,0x3B,0x2A,0x6D,0xDA,0xF2,0x80,0x38,0x33,0x49,0xE9};

uint32_t HomelandSupportedSoulData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_name_);
          this->__isset.actor_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->soul_id_);
          this->__isset.soul_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->soul_level_);
          this->__isset.soul_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->leave_cooling_);
          this->__isset.leave_cooling_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t HomelandSupportedSoulData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HomelandSupportedSoulData");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.actor_name_) {
    xfer += oprot->writeFieldBegin("actor_name_", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->actor_name_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.soul_id_) {
    xfer += oprot->writeFieldBegin("soul_id_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->soul_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.soul_level_) {
    xfer += oprot->writeFieldBegin("soul_level_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->soul_level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.leave_cooling_) {
    xfer += oprot->writeFieldBegin("leave_cooling_", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->leave_cooling_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HomelandSupportedSoulData &a, HomelandSupportedSoulData &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.actor_name_, b.actor_name_);
  swap(a.soul_id_, b.soul_id_);
  swap(a.soul_level_, b.soul_level_);
  swap(a.leave_cooling_, b.leave_cooling_);
  swap(a.__isset, b.__isset);
}

const char* HomelandSupportSoulData::ascii_fingerprint = "4565BB1FF0D1E9F90EE8B3F200B0C257";
const uint8_t HomelandSupportSoulData::binary_fingerprint[16] = {0x45,0x65,0xBB,0x1F,0xF0,0xD1,0xE9,0xF9,0x0E,0xE8,0xB3,0xF2,0x00,0xB0,0xC2,0x57};

uint32_t HomelandSupportSoulData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_soul_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->soul_id_);
          isset_soul_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          this->__isset.actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_name_);
          this->__isset.actor_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cooling_);
          this->__isset.cooling_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_soul_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t HomelandSupportSoulData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HomelandSupportSoulData");

  xfer += oprot->writeFieldBegin("soul_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->soul_id_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.actor_id_) {
    xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->actor_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.actor_name_) {
    xfer += oprot->writeFieldBegin("actor_name_", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->actor_name_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cooling_) {
    xfer += oprot->writeFieldBegin("cooling_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->cooling_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HomelandSupportSoulData &a, HomelandSupportSoulData &b) {
  using ::std::swap;
  swap(a.soul_id_, b.soul_id_);
  swap(a.actor_id_, b.actor_id_);
  swap(a.actor_name_, b.actor_name_);
  swap(a.cooling_, b.cooling_);
  swap(a.__isset, b.__isset);
}

const char* HomelandEventData::ascii_fingerprint = "D121591FCC85D0E17C727CA264A5F46D";
const uint8_t HomelandEventData::binary_fingerprint[16] = {0xD1,0x21,0x59,0x1F,0xCC,0x85,0xD0,0xE1,0x7C,0x72,0x7C,0xA2,0x64,0xA5,0xF4,0x6D};

uint32_t HomelandEventData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_event_type_ = false;
  bool isset_timestamp_ = false;
  bool isset_vars_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast29;
          xfer += iprot->readI32(ecast29);
          this->event_type_ = ( ::entity::HomelandEventType::type)ecast29;
          isset_event_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->timestamp_);
          isset_timestamp_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vars_.clear();
            uint32_t _size30;
            ::apache::thrift::protocol::TType _etype33;
            xfer += iprot->readListBegin(_etype33, _size30);
            this->vars_.resize(_size30);
            uint32_t _i34;
            for (_i34 = 0; _i34 < _size30; ++_i34)
            {
              xfer += iprot->readString(this->vars_[_i34]);
            }
            xfer += iprot->readListEnd();
          }
          isset_vars_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_event_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_timestamp_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_vars_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t HomelandEventData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HomelandEventData");

  xfer += oprot->writeFieldBegin("event_type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->event_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamp_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->timestamp_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vars_", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->vars_.size()));
    std::vector<std::string> ::const_iterator _iter35;
    for (_iter35 = this->vars_.begin(); _iter35 != this->vars_.end(); ++_iter35)
    {
      xfer += oprot->writeString((*_iter35));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HomelandEventData &a, HomelandEventData &b) {
  using ::std::swap;
  swap(a.event_type_, b.event_type_);
  swap(a.timestamp_, b.timestamp_);
  swap(a.vars_, b.vars_);
}

const char* MessageHomelandInitialize::ascii_fingerprint = "C6837D6652BC26E5A9678AE896D2713B";
const uint8_t MessageHomelandInitialize::binary_fingerprint[16] = {0xC6,0x83,0x7D,0x66,0x52,0xBC,0x26,0xE5,0xA9,0x67,0x8A,0xE8,0x96,0xD2,0x71,0x3B};

uint32_t MessageHomelandInitialize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_upgrade_cooling_ = false;
  bool isset_upgrade_cooling_red_ = false;
  bool isset_temple_level_ = false;
  bool isset_temple_harvest_times_ = false;
  bool isset_temple_force_harvest_times_ = false;
  bool isset_temple_harvest_cooling_ = false;
  bool isset_goldmine_level_ = false;
  bool isset_goldmine_harvest_cooling_ = false;
  bool isset_goldmine_robbed_times_ = false;
  bool isset_goldmine_loss_rate_ = false;
  bool isset_goldmine_rob_times_ = false;
  bool isset_goldmine_rob_cooling_ = false;
  bool isset_pool_level_ = false;
  bool isset_pool_accumulate_time_ = false;
  bool isset_church_free_pray_times_ = false;
  bool isset_church_paid_pray_times_ = false;
  bool isset_church_free_refresh_times_ = false;
  bool isset_church_chest_type_ = false;
  bool isset_tree_level_ = false;
  bool isset_tree_harvest_times_ = false;
  bool isset_tree_stage_ = false;
  bool isset_tree_watered_times_ = false;
  bool isset_tree_stolen_times_ = false;
  bool isset_tree_water_cooling_ = false;
  bool isset_tree_growing_cooling_ = false;
  bool isset_tree_assist_water_times_ = false;
  bool isset_tower1_level_ = false;
  bool isset_tower2_level_ = false;
  bool isset_stronghold_level_ = false;
  bool isset_stronghold_call_support_cooling_ = false;
  bool isset_stronghold_support_times_ = false;
  bool isset_stronghold_supported_souls_ = false;
  bool isset_stronghold_support_souls_ = false;
  bool isset_friends_ = false;
  bool isset_invaders_ = false;
  bool isset_events_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->upgrade_cooling_);
          isset_upgrade_cooling_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->upgrade_cooling_red_);
          isset_upgrade_cooling_red_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->temple_level_);
          isset_temple_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->temple_harvest_times_);
          isset_temple_harvest_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->temple_force_harvest_times_);
          isset_temple_force_harvest_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->temple_harvest_cooling_);
          isset_temple_harvest_cooling_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->goldmine_level_);
          isset_goldmine_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->goldmine_harvest_cooling_);
          isset_goldmine_harvest_cooling_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->goldmine_robbed_times_);
          isset_goldmine_robbed_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->goldmine_loss_rate_);
          isset_goldmine_loss_rate_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->goldmine_rob_times_);
          isset_goldmine_rob_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->goldmine_rob_cooling_);
          isset_goldmine_rob_cooling_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pool_level_);
          isset_pool_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pool_accumulate_time_);
          isset_pool_accumulate_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->church_free_pray_times_);
          isset_church_free_pray_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->church_paid_pray_times_);
          isset_church_paid_pray_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->church_free_refresh_times_);
          isset_church_free_refresh_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->church_chest_type_);
          isset_church_chest_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tree_level_);
          isset_tree_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tree_harvest_times_);
          isset_tree_harvest_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast36;
          xfer += iprot->readI32(ecast36);
          this->tree_stage_ = ( ::entity::HomelandTreeStageType::type)ecast36;
          isset_tree_stage_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tree_watered_times_);
          isset_tree_watered_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tree_stolen_times_);
          isset_tree_stolen_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tree_water_cooling_);
          isset_tree_water_cooling_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tree_growing_cooling_);
          isset_tree_growing_cooling_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tree_assist_water_times_);
          isset_tree_assist_water_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tower1_level_);
          isset_tower1_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tower2_level_);
          isset_tower2_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->stronghold_level_);
          isset_stronghold_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->stronghold_call_support_cooling_);
          isset_stronghold_call_support_cooling_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->stronghold_support_times_);
          isset_stronghold_support_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->stronghold_supported_souls_.clear();
            uint32_t _size37;
            ::apache::thrift::protocol::TType _etype40;
            xfer += iprot->readListBegin(_etype40, _size37);
            this->stronghold_supported_souls_.resize(_size37);
            uint32_t _i41;
            for (_i41 = 0; _i41 < _size37; ++_i41)
            {
              xfer += this->stronghold_supported_souls_[_i41].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_stronghold_supported_souls_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->stronghold_support_souls_.clear();
            uint32_t _size42;
            ::apache::thrift::protocol::TType _etype45;
            xfer += iprot->readListBegin(_etype45, _size42);
            this->stronghold_support_souls_.resize(_size42);
            uint32_t _i46;
            for (_i46 = 0; _i46 < _size42; ++_i46)
            {
              xfer += this->stronghold_support_souls_[_i46].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_stronghold_support_souls_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->friends_.clear();
            uint32_t _size47;
            ::apache::thrift::protocol::TType _etype50;
            xfer += iprot->readListBegin(_etype50, _size47);
            this->friends_.resize(_size47);
            uint32_t _i51;
            for (_i51 = 0; _i51 < _size47; ++_i51)
            {
              xfer += this->friends_[_i51].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_friends_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->invaders_.clear();
            uint32_t _size52;
            ::apache::thrift::protocol::TType _etype55;
            xfer += iprot->readListBegin(_etype55, _size52);
            this->invaders_.resize(_size52);
            uint32_t _i56;
            for (_i56 = 0; _i56 < _size52; ++_i56)
            {
              xfer += this->invaders_[_i56].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_invaders_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->events_.clear();
            uint32_t _size57;
            ::apache::thrift::protocol::TType _etype60;
            xfer += iprot->readListBegin(_etype60, _size57);
            this->events_.resize(_size57);
            uint32_t _i61;
            for (_i61 = 0; _i61 < _size57; ++_i61)
            {
              xfer += this->events_[_i61].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_events_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_upgrade_cooling_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_upgrade_cooling_red_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_temple_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_temple_harvest_times_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_temple_force_harvest_times_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_temple_harvest_cooling_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_goldmine_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_goldmine_harvest_cooling_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_goldmine_robbed_times_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_goldmine_loss_rate_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_goldmine_rob_times_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_goldmine_rob_cooling_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pool_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pool_accumulate_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_church_free_pray_times_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_church_paid_pray_times_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_church_free_refresh_times_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_church_chest_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tree_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tree_harvest_times_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tree_stage_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tree_watered_times_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tree_stolen_times_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tree_water_cooling_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tree_growing_cooling_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tree_assist_water_times_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tower1_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tower2_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_stronghold_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_stronghold_call_support_cooling_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_stronghold_support_times_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_stronghold_supported_souls_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_stronghold_support_souls_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_friends_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_invaders_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_events_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandInitialize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandInitialize");

  xfer += oprot->writeFieldBegin("upgrade_cooling_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->upgrade_cooling_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("upgrade_cooling_red_", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->upgrade_cooling_red_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("temple_level_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->temple_level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("temple_harvest_times_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->temple_harvest_times_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("temple_force_harvest_times_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->temple_force_harvest_times_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("temple_harvest_cooling_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->temple_harvest_cooling_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("goldmine_level_", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->goldmine_level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("goldmine_harvest_cooling_", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->goldmine_harvest_cooling_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("goldmine_robbed_times_", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->goldmine_robbed_times_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("goldmine_loss_rate_", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->goldmine_loss_rate_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("goldmine_rob_times_", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->goldmine_rob_times_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("goldmine_rob_cooling_", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->goldmine_rob_cooling_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pool_level_", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->pool_level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pool_accumulate_time_", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->pool_accumulate_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("church_free_pray_times_", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->church_free_pray_times_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("church_paid_pray_times_", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->church_paid_pray_times_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("church_free_refresh_times_", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->church_free_refresh_times_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("church_chest_type_", ::apache::thrift::protocol::T_I32, 18);
  xfer += oprot->writeI32(this->church_chest_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tree_level_", ::apache::thrift::protocol::T_I32, 19);
  xfer += oprot->writeI32(this->tree_level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tree_harvest_times_", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32(this->tree_harvest_times_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tree_stage_", ::apache::thrift::protocol::T_I32, 21);
  xfer += oprot->writeI32((int32_t)this->tree_stage_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tree_watered_times_", ::apache::thrift::protocol::T_I32, 22);
  xfer += oprot->writeI32(this->tree_watered_times_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tree_stolen_times_", ::apache::thrift::protocol::T_I32, 23);
  xfer += oprot->writeI32(this->tree_stolen_times_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tree_water_cooling_", ::apache::thrift::protocol::T_I32, 24);
  xfer += oprot->writeI32(this->tree_water_cooling_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tree_growing_cooling_", ::apache::thrift::protocol::T_I32, 25);
  xfer += oprot->writeI32(this->tree_growing_cooling_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tree_assist_water_times_", ::apache::thrift::protocol::T_I32, 26);
  xfer += oprot->writeI32(this->tree_assist_water_times_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tower1_level_", ::apache::thrift::protocol::T_I32, 27);
  xfer += oprot->writeI32(this->tower1_level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tower2_level_", ::apache::thrift::protocol::T_I32, 28);
  xfer += oprot->writeI32(this->tower2_level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stronghold_level_", ::apache::thrift::protocol::T_I32, 29);
  xfer += oprot->writeI32(this->stronghold_level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stronghold_call_support_cooling_", ::apache::thrift::protocol::T_I32, 30);
  xfer += oprot->writeI32(this->stronghold_call_support_cooling_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stronghold_support_times_", ::apache::thrift::protocol::T_I32, 31);
  xfer += oprot->writeI32(this->stronghold_support_times_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stronghold_supported_souls_", ::apache::thrift::protocol::T_LIST, 32);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->stronghold_supported_souls_.size()));
    std::vector<HomelandSupportedSoulData> ::const_iterator _iter62;
    for (_iter62 = this->stronghold_supported_souls_.begin(); _iter62 != this->stronghold_supported_souls_.end(); ++_iter62)
    {
      xfer += (*_iter62).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stronghold_support_souls_", ::apache::thrift::protocol::T_LIST, 33);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->stronghold_support_souls_.size()));
    std::vector<HomelandSupportSoulData> ::const_iterator _iter63;
    for (_iter63 = this->stronghold_support_souls_.begin(); _iter63 != this->stronghold_support_souls_.end(); ++_iter63)
    {
      xfer += (*_iter63).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("friends_", ::apache::thrift::protocol::T_LIST, 34);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->friends_.size()));
    std::vector<HomelandFriendData> ::const_iterator _iter64;
    for (_iter64 = this->friends_.begin(); _iter64 != this->friends_.end(); ++_iter64)
    {
      xfer += (*_iter64).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("invaders_", ::apache::thrift::protocol::T_LIST, 35);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->invaders_.size()));
    std::vector<HomelandInvaderData> ::const_iterator _iter65;
    for (_iter65 = this->invaders_.begin(); _iter65 != this->invaders_.end(); ++_iter65)
    {
      xfer += (*_iter65).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("events_", ::apache::thrift::protocol::T_LIST, 36);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->events_.size()));
    std::vector<HomelandEventData> ::const_iterator _iter66;
    for (_iter66 = this->events_.begin(); _iter66 != this->events_.end(); ++_iter66)
    {
      xfer += (*_iter66).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandInitialize &a, MessageHomelandInitialize &b) {
  using ::std::swap;
  swap(a.upgrade_cooling_, b.upgrade_cooling_);
  swap(a.upgrade_cooling_red_, b.upgrade_cooling_red_);
  swap(a.temple_level_, b.temple_level_);
  swap(a.temple_harvest_times_, b.temple_harvest_times_);
  swap(a.temple_force_harvest_times_, b.temple_force_harvest_times_);
  swap(a.temple_harvest_cooling_, b.temple_harvest_cooling_);
  swap(a.goldmine_level_, b.goldmine_level_);
  swap(a.goldmine_harvest_cooling_, b.goldmine_harvest_cooling_);
  swap(a.goldmine_robbed_times_, b.goldmine_robbed_times_);
  swap(a.goldmine_loss_rate_, b.goldmine_loss_rate_);
  swap(a.goldmine_rob_times_, b.goldmine_rob_times_);
  swap(a.goldmine_rob_cooling_, b.goldmine_rob_cooling_);
  swap(a.pool_level_, b.pool_level_);
  swap(a.pool_accumulate_time_, b.pool_accumulate_time_);
  swap(a.church_free_pray_times_, b.church_free_pray_times_);
  swap(a.church_paid_pray_times_, b.church_paid_pray_times_);
  swap(a.church_free_refresh_times_, b.church_free_refresh_times_);
  swap(a.church_chest_type_, b.church_chest_type_);
  swap(a.tree_level_, b.tree_level_);
  swap(a.tree_harvest_times_, b.tree_harvest_times_);
  swap(a.tree_stage_, b.tree_stage_);
  swap(a.tree_watered_times_, b.tree_watered_times_);
  swap(a.tree_stolen_times_, b.tree_stolen_times_);
  swap(a.tree_water_cooling_, b.tree_water_cooling_);
  swap(a.tree_growing_cooling_, b.tree_growing_cooling_);
  swap(a.tree_assist_water_times_, b.tree_assist_water_times_);
  swap(a.tower1_level_, b.tower1_level_);
  swap(a.tower2_level_, b.tower2_level_);
  swap(a.stronghold_level_, b.stronghold_level_);
  swap(a.stronghold_call_support_cooling_, b.stronghold_call_support_cooling_);
  swap(a.stronghold_support_times_, b.stronghold_support_times_);
  swap(a.stronghold_supported_souls_, b.stronghold_supported_souls_);
  swap(a.stronghold_support_souls_, b.stronghold_support_souls_);
  swap(a.friends_, b.friends_);
  swap(a.invaders_, b.invaders_);
  swap(a.events_, b.events_);
}

const char* MessageHomelandSynchronize::ascii_fingerprint = "9336462648A5F2F851772504C1C3E309";
const uint8_t MessageHomelandSynchronize::binary_fingerprint[16] = {0x93,0x36,0x46,0x26,0x48,0xA5,0xF2,0xF8,0x51,0x77,0x25,0x04,0xC1,0xC3,0xE3,0x09};

uint32_t MessageHomelandSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->upgrade_cooling_);
          this->__isset.upgrade_cooling_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->upgrade_cooling_red_);
          this->__isset.upgrade_cooling_red_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->temple_level_);
          this->__isset.temple_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->temple_harvest_times_);
          this->__isset.temple_harvest_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->temple_force_harvest_times_);
          this->__isset.temple_force_harvest_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->temple_harvest_cooling_);
          this->__isset.temple_harvest_cooling_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->goldmine_level_);
          this->__isset.goldmine_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->goldmine_harvest_cooling_);
          this->__isset.goldmine_harvest_cooling_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->goldmine_robbed_times_);
          this->__isset.goldmine_robbed_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->goldmine_loss_rate_);
          this->__isset.goldmine_loss_rate_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->goldmine_rob_times_);
          this->__isset.goldmine_rob_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->goldmine_rob_cooling_);
          this->__isset.goldmine_rob_cooling_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pool_level_);
          this->__isset.pool_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pool_accumulate_time_);
          this->__isset.pool_accumulate_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->church_free_pray_times_);
          this->__isset.church_free_pray_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->church_paid_pray_times_);
          this->__isset.church_paid_pray_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->church_free_refresh_times_);
          this->__isset.church_free_refresh_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->church_chest_type_);
          this->__isset.church_chest_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tree_level_);
          this->__isset.tree_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tree_harvest_times_);
          this->__isset.tree_harvest_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast67;
          xfer += iprot->readI32(ecast67);
          this->tree_stage_ = ( ::entity::HomelandTreeStageType::type)ecast67;
          this->__isset.tree_stage_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tree_watered_times_);
          this->__isset.tree_watered_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tree_stolen_times_);
          this->__isset.tree_stolen_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tree_water_cooling_);
          this->__isset.tree_water_cooling_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tree_growing_cooling_);
          this->__isset.tree_growing_cooling_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tree_assist_water_times_);
          this->__isset.tree_assist_water_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tower1_level_);
          this->__isset.tower1_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tower2_level_);
          this->__isset.tower2_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->stronghold_level_);
          this->__isset.stronghold_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->stronghold_call_support_cooling_);
          this->__isset.stronghold_call_support_cooling_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->stronghold_support_times_);
          this->__isset.stronghold_support_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageHomelandSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandSynchronize");

  if (this->__isset.upgrade_cooling_) {
    xfer += oprot->writeFieldBegin("upgrade_cooling_", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->upgrade_cooling_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.upgrade_cooling_red_) {
    xfer += oprot->writeFieldBegin("upgrade_cooling_red_", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->upgrade_cooling_red_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.temple_level_) {
    xfer += oprot->writeFieldBegin("temple_level_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->temple_level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.temple_harvest_times_) {
    xfer += oprot->writeFieldBegin("temple_harvest_times_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->temple_harvest_times_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.temple_force_harvest_times_) {
    xfer += oprot->writeFieldBegin("temple_force_harvest_times_", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->temple_force_harvest_times_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.temple_harvest_cooling_) {
    xfer += oprot->writeFieldBegin("temple_harvest_cooling_", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->temple_harvest_cooling_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.goldmine_level_) {
    xfer += oprot->writeFieldBegin("goldmine_level_", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->goldmine_level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.goldmine_harvest_cooling_) {
    xfer += oprot->writeFieldBegin("goldmine_harvest_cooling_", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->goldmine_harvest_cooling_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.goldmine_robbed_times_) {
    xfer += oprot->writeFieldBegin("goldmine_robbed_times_", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32(this->goldmine_robbed_times_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.goldmine_loss_rate_) {
    xfer += oprot->writeFieldBegin("goldmine_loss_rate_", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->goldmine_loss_rate_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.goldmine_rob_times_) {
    xfer += oprot->writeFieldBegin("goldmine_rob_times_", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32(this->goldmine_rob_times_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.goldmine_rob_cooling_) {
    xfer += oprot->writeFieldBegin("goldmine_rob_cooling_", ::apache::thrift::protocol::T_I32, 12);
    xfer += oprot->writeI32(this->goldmine_rob_cooling_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.pool_level_) {
    xfer += oprot->writeFieldBegin("pool_level_", ::apache::thrift::protocol::T_I32, 13);
    xfer += oprot->writeI32(this->pool_level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.pool_accumulate_time_) {
    xfer += oprot->writeFieldBegin("pool_accumulate_time_", ::apache::thrift::protocol::T_I32, 14);
    xfer += oprot->writeI32(this->pool_accumulate_time_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.church_free_pray_times_) {
    xfer += oprot->writeFieldBegin("church_free_pray_times_", ::apache::thrift::protocol::T_I32, 15);
    xfer += oprot->writeI32(this->church_free_pray_times_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.church_paid_pray_times_) {
    xfer += oprot->writeFieldBegin("church_paid_pray_times_", ::apache::thrift::protocol::T_I32, 16);
    xfer += oprot->writeI32(this->church_paid_pray_times_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.church_free_refresh_times_) {
    xfer += oprot->writeFieldBegin("church_free_refresh_times_", ::apache::thrift::protocol::T_I32, 17);
    xfer += oprot->writeI32(this->church_free_refresh_times_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.church_chest_type_) {
    xfer += oprot->writeFieldBegin("church_chest_type_", ::apache::thrift::protocol::T_I32, 18);
    xfer += oprot->writeI32(this->church_chest_type_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tree_level_) {
    xfer += oprot->writeFieldBegin("tree_level_", ::apache::thrift::protocol::T_I32, 19);
    xfer += oprot->writeI32(this->tree_level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tree_harvest_times_) {
    xfer += oprot->writeFieldBegin("tree_harvest_times_", ::apache::thrift::protocol::T_I32, 20);
    xfer += oprot->writeI32(this->tree_harvest_times_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tree_stage_) {
    xfer += oprot->writeFieldBegin("tree_stage_", ::apache::thrift::protocol::T_I32, 21);
    xfer += oprot->writeI32((int32_t)this->tree_stage_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tree_watered_times_) {
    xfer += oprot->writeFieldBegin("tree_watered_times_", ::apache::thrift::protocol::T_I32, 22);
    xfer += oprot->writeI32(this->tree_watered_times_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tree_stolen_times_) {
    xfer += oprot->writeFieldBegin("tree_stolen_times_", ::apache::thrift::protocol::T_I32, 23);
    xfer += oprot->writeI32(this->tree_stolen_times_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tree_water_cooling_) {
    xfer += oprot->writeFieldBegin("tree_water_cooling_", ::apache::thrift::protocol::T_I32, 24);
    xfer += oprot->writeI32(this->tree_water_cooling_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tree_growing_cooling_) {
    xfer += oprot->writeFieldBegin("tree_growing_cooling_", ::apache::thrift::protocol::T_I32, 25);
    xfer += oprot->writeI32(this->tree_growing_cooling_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tree_assist_water_times_) {
    xfer += oprot->writeFieldBegin("tree_assist_water_times_", ::apache::thrift::protocol::T_I32, 26);
    xfer += oprot->writeI32(this->tree_assist_water_times_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tower1_level_) {
    xfer += oprot->writeFieldBegin("tower1_level_", ::apache::thrift::protocol::T_I32, 27);
    xfer += oprot->writeI32(this->tower1_level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tower2_level_) {
    xfer += oprot->writeFieldBegin("tower2_level_", ::apache::thrift::protocol::T_I32, 28);
    xfer += oprot->writeI32(this->tower2_level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stronghold_level_) {
    xfer += oprot->writeFieldBegin("stronghold_level_", ::apache::thrift::protocol::T_I32, 29);
    xfer += oprot->writeI32(this->stronghold_level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stronghold_call_support_cooling_) {
    xfer += oprot->writeFieldBegin("stronghold_call_support_cooling_", ::apache::thrift::protocol::T_I32, 30);
    xfer += oprot->writeI32(this->stronghold_call_support_cooling_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stronghold_support_times_) {
    xfer += oprot->writeFieldBegin("stronghold_support_times_", ::apache::thrift::protocol::T_I32, 31);
    xfer += oprot->writeI32(this->stronghold_support_times_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandSynchronize &a, MessageHomelandSynchronize &b) {
  using ::std::swap;
  swap(a.upgrade_cooling_, b.upgrade_cooling_);
  swap(a.upgrade_cooling_red_, b.upgrade_cooling_red_);
  swap(a.temple_level_, b.temple_level_);
  swap(a.temple_harvest_times_, b.temple_harvest_times_);
  swap(a.temple_force_harvest_times_, b.temple_force_harvest_times_);
  swap(a.temple_harvest_cooling_, b.temple_harvest_cooling_);
  swap(a.goldmine_level_, b.goldmine_level_);
  swap(a.goldmine_harvest_cooling_, b.goldmine_harvest_cooling_);
  swap(a.goldmine_robbed_times_, b.goldmine_robbed_times_);
  swap(a.goldmine_loss_rate_, b.goldmine_loss_rate_);
  swap(a.goldmine_rob_times_, b.goldmine_rob_times_);
  swap(a.goldmine_rob_cooling_, b.goldmine_rob_cooling_);
  swap(a.pool_level_, b.pool_level_);
  swap(a.pool_accumulate_time_, b.pool_accumulate_time_);
  swap(a.church_free_pray_times_, b.church_free_pray_times_);
  swap(a.church_paid_pray_times_, b.church_paid_pray_times_);
  swap(a.church_free_refresh_times_, b.church_free_refresh_times_);
  swap(a.church_chest_type_, b.church_chest_type_);
  swap(a.tree_level_, b.tree_level_);
  swap(a.tree_harvest_times_, b.tree_harvest_times_);
  swap(a.tree_stage_, b.tree_stage_);
  swap(a.tree_watered_times_, b.tree_watered_times_);
  swap(a.tree_stolen_times_, b.tree_stolen_times_);
  swap(a.tree_water_cooling_, b.tree_water_cooling_);
  swap(a.tree_growing_cooling_, b.tree_growing_cooling_);
  swap(a.tree_assist_water_times_, b.tree_assist_water_times_);
  swap(a.tower1_level_, b.tower1_level_);
  swap(a.tower2_level_, b.tower2_level_);
  swap(a.stronghold_level_, b.stronghold_level_);
  swap(a.stronghold_call_support_cooling_, b.stronghold_call_support_cooling_);
  swap(a.stronghold_support_times_, b.stronghold_support_times_);
  swap(a.__isset, b.__isset);
}

const char* MessageHomelandFriendSynchronize::ascii_fingerprint = "5CCC3CD993CC2EFA870D0F750E01AA7E";
const uint8_t MessageHomelandFriendSynchronize::binary_fingerprint[16] = {0x5C,0xCC,0x3C,0xD9,0x93,0xCC,0x2E,0xFA,0x87,0x0D,0x0F,0x75,0x0E,0x01,0xAA,0x7E};

uint32_t MessageHomelandFriendSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_data_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast68;
          xfer += iprot->readI32(ecast68);
          this->type_ = (HomelandFriendOperateType::type)ecast68;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data_.read(iprot);
          isset_data_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_data_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandFriendSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandFriendSynchronize");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->data_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandFriendSynchronize &a, MessageHomelandFriendSynchronize &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.data_, b.data_);
}

const char* MessageHomelandInvaderSynchronize::ascii_fingerprint = "F84DD9F53FC6CE4F37ECA9C3E1473504";
const uint8_t MessageHomelandInvaderSynchronize::binary_fingerprint[16] = {0xF8,0x4D,0xD9,0xF5,0x3F,0xC6,0xCE,0x4F,0x37,0xEC,0xA9,0xC3,0xE1,0x47,0x35,0x04};

uint32_t MessageHomelandInvaderSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_data_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast69;
          xfer += iprot->readI32(ecast69);
          this->type_ = (HomelandInvaderOperateType::type)ecast69;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data_.read(iprot);
          isset_data_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_data_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandInvaderSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandInvaderSynchronize");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->data_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandInvaderSynchronize &a, MessageHomelandInvaderSynchronize &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.data_, b.data_);
}

const char* MessageHomelandSupportedSoulSynchronize::ascii_fingerprint = "4BE2604F3C949CA95ED5862B3682681B";
const uint8_t MessageHomelandSupportedSoulSynchronize::binary_fingerprint[16] = {0x4B,0xE2,0x60,0x4F,0x3C,0x94,0x9C,0xA9,0x5E,0xD5,0x86,0x2B,0x36,0x82,0x68,0x1B};

uint32_t MessageHomelandSupportedSoulSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_data_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast70;
          xfer += iprot->readI32(ecast70);
          this->type_ = (HomelandSupportedSoulOperateType::type)ecast70;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data_.read(iprot);
          isset_data_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_data_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandSupportedSoulSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandSupportedSoulSynchronize");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->data_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandSupportedSoulSynchronize &a, MessageHomelandSupportedSoulSynchronize &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.data_, b.data_);
}

const char* MessageHomelandSupportSoulSynchronize::ascii_fingerprint = "4D68ACCA73CFF56325DE591700A4A8A7";
const uint8_t MessageHomelandSupportSoulSynchronize::binary_fingerprint[16] = {0x4D,0x68,0xAC,0xCA,0x73,0xCF,0xF5,0x63,0x25,0xDE,0x59,0x17,0x00,0xA4,0xA8,0xA7};

uint32_t MessageHomelandSupportSoulSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_data_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast71;
          xfer += iprot->readI32(ecast71);
          this->type_ = (HomelandSupportSoulOperateType::type)ecast71;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data_.read(iprot);
          isset_data_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_data_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandSupportSoulSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandSupportSoulSynchronize");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->data_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandSupportSoulSynchronize &a, MessageHomelandSupportSoulSynchronize &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.data_, b.data_);
}

const char* MessageHomelandEventSynchronize::ascii_fingerprint = "69CFAA92E04882F6EA54F81504CDEB9C";
const uint8_t MessageHomelandEventSynchronize::binary_fingerprint[16] = {0x69,0xCF,0xAA,0x92,0xE0,0x48,0x82,0xF6,0xEA,0x54,0xF8,0x15,0x04,0xCD,0xEB,0x9C};

uint32_t MessageHomelandEventSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_data_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast72;
          xfer += iprot->readI32(ecast72);
          this->type_ = (HomelandEventOperateType::type)ecast72;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data_.read(iprot);
          isset_data_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_data_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandEventSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandEventSynchronize");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->data_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandEventSynchronize &a, MessageHomelandEventSynchronize &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.data_, b.data_);
}

const char* MessageHomelandVisitRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MessageHomelandVisitRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MessageHomelandVisitRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandVisitRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandVisitRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandVisitRequest &a, MessageHomelandVisitRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
}

const char* MessageHomelandVisitResponse::ascii_fingerprint = "53E2FC0909805BEFF179209B12D57E01";
const uint8_t MessageHomelandVisitResponse::binary_fingerprint[16] = {0x53,0xE2,0xFC,0x09,0x09,0x80,0x5B,0xEF,0xF1,0x79,0x20,0x9B,0x12,0xD5,0x7E,0x01};

uint32_t MessageHomelandVisitResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          this->__isset.actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_name_);
          this->__isset.actor_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->temple_level_);
          this->__isset.temple_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->goldmine_level_);
          this->__isset.goldmine_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pool_level_);
          this->__isset.pool_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tree_level_);
          this->__isset.tree_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->church_enable_);
          this->__isset.church_enable_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast73;
          xfer += iprot->readI32(ecast73);
          this->tree_stage_ = ( ::entity::HomelandTreeStageType::type)ecast73;
          this->__isset.tree_stage_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tree_watered_times_);
          this->__isset.tree_watered_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->tree_can_water_);
          this->__isset.tree_can_water_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->tree_can_steal_);
          this->__isset.tree_can_steal_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tower1_level_);
          this->__isset.tower1_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tower2_level_);
          this->__isset.tower2_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->stronghold_level_);
          this->__isset.stronghold_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->stronghold_can_support_);
          this->__isset.stronghold_can_support_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandVisitResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandVisitResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.actor_id_) {
    xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->actor_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.actor_name_) {
    xfer += oprot->writeFieldBegin("actor_name_", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->actor_name_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.temple_level_) {
    xfer += oprot->writeFieldBegin("temple_level_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->temple_level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.goldmine_level_) {
    xfer += oprot->writeFieldBegin("goldmine_level_", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->goldmine_level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.pool_level_) {
    xfer += oprot->writeFieldBegin("pool_level_", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->pool_level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tree_level_) {
    xfer += oprot->writeFieldBegin("tree_level_", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->tree_level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.church_enable_) {
    xfer += oprot->writeFieldBegin("church_enable_", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->church_enable_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tree_stage_) {
    xfer += oprot->writeFieldBegin("tree_stage_", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32((int32_t)this->tree_stage_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tree_watered_times_) {
    xfer += oprot->writeFieldBegin("tree_watered_times_", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->tree_watered_times_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tree_can_water_) {
    xfer += oprot->writeFieldBegin("tree_can_water_", ::apache::thrift::protocol::T_BOOL, 11);
    xfer += oprot->writeBool(this->tree_can_water_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tree_can_steal_) {
    xfer += oprot->writeFieldBegin("tree_can_steal_", ::apache::thrift::protocol::T_BOOL, 12);
    xfer += oprot->writeBool(this->tree_can_steal_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tower1_level_) {
    xfer += oprot->writeFieldBegin("tower1_level_", ::apache::thrift::protocol::T_I32, 13);
    xfer += oprot->writeI32(this->tower1_level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tower2_level_) {
    xfer += oprot->writeFieldBegin("tower2_level_", ::apache::thrift::protocol::T_I32, 14);
    xfer += oprot->writeI32(this->tower2_level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stronghold_level_) {
    xfer += oprot->writeFieldBegin("stronghold_level_", ::apache::thrift::protocol::T_I32, 15);
    xfer += oprot->writeI32(this->stronghold_level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stronghold_can_support_) {
    xfer += oprot->writeFieldBegin("stronghold_can_support_", ::apache::thrift::protocol::T_BOOL, 16);
    xfer += oprot->writeBool(this->stronghold_can_support_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandVisitResponse &a, MessageHomelandVisitResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.actor_id_, b.actor_id_);
  swap(a.actor_name_, b.actor_name_);
  swap(a.temple_level_, b.temple_level_);
  swap(a.goldmine_level_, b.goldmine_level_);
  swap(a.pool_level_, b.pool_level_);
  swap(a.tree_level_, b.tree_level_);
  swap(a.church_enable_, b.church_enable_);
  swap(a.tree_stage_, b.tree_stage_);
  swap(a.tree_watered_times_, b.tree_watered_times_);
  swap(a.tree_can_water_, b.tree_can_water_);
  swap(a.tree_can_steal_, b.tree_can_steal_);
  swap(a.tower1_level_, b.tower1_level_);
  swap(a.tower2_level_, b.tower2_level_);
  swap(a.stronghold_level_, b.stronghold_level_);
  swap(a.stronghold_can_support_, b.stronghold_can_support_);
  swap(a.__isset, b.__isset);
}

const char* MessageHomelandClearUpgradeCoolingRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageHomelandClearUpgradeCoolingRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageHomelandClearUpgradeCoolingRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageHomelandClearUpgradeCoolingRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandClearUpgradeCoolingRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandClearUpgradeCoolingRequest &a, MessageHomelandClearUpgradeCoolingRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageHomelandClearUpgradeCoolingResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageHomelandClearUpgradeCoolingResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageHomelandClearUpgradeCoolingResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandClearUpgradeCoolingResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandClearUpgradeCoolingResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandClearUpgradeCoolingResponse &a, MessageHomelandClearUpgradeCoolingResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageHomelandTempleUpgradeRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageHomelandTempleUpgradeRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageHomelandTempleUpgradeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageHomelandTempleUpgradeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandTempleUpgradeRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandTempleUpgradeRequest &a, MessageHomelandTempleUpgradeRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageHomelandTempleUpgradeResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageHomelandTempleUpgradeResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageHomelandTempleUpgradeResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandTempleUpgradeResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandTempleUpgradeResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandTempleUpgradeResponse &a, MessageHomelandTempleUpgradeResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageHomelandTempleHarvestRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageHomelandTempleHarvestRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageHomelandTempleHarvestRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageHomelandTempleHarvestRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandTempleHarvestRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandTempleHarvestRequest &a, MessageHomelandTempleHarvestRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageHomelandTempleHarvestResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageHomelandTempleHarvestResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageHomelandTempleHarvestResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandTempleHarvestResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandTempleHarvestResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandTempleHarvestResponse &a, MessageHomelandTempleHarvestResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageHomelandTempleClearHarvestCoolingRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageHomelandTempleClearHarvestCoolingRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageHomelandTempleClearHarvestCoolingRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageHomelandTempleClearHarvestCoolingRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandTempleClearHarvestCoolingRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandTempleClearHarvestCoolingRequest &a, MessageHomelandTempleClearHarvestCoolingRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageHomelandTempleClearHarvestCoolingResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageHomelandTempleClearHarvestCoolingResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageHomelandTempleClearHarvestCoolingResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandTempleClearHarvestCoolingResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandTempleClearHarvestCoolingResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandTempleClearHarvestCoolingResponse &a, MessageHomelandTempleClearHarvestCoolingResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageHomelandTempleForceHarvestRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageHomelandTempleForceHarvestRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageHomelandTempleForceHarvestRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageHomelandTempleForceHarvestRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandTempleForceHarvestRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandTempleForceHarvestRequest &a, MessageHomelandTempleForceHarvestRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageHomelandTempleForceHarvestResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageHomelandTempleForceHarvestResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageHomelandTempleForceHarvestResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandTempleForceHarvestResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandTempleForceHarvestResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandTempleForceHarvestResponse &a, MessageHomelandTempleForceHarvestResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageHomelandGoldmineUpgradeRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageHomelandGoldmineUpgradeRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageHomelandGoldmineUpgradeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageHomelandGoldmineUpgradeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandGoldmineUpgradeRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandGoldmineUpgradeRequest &a, MessageHomelandGoldmineUpgradeRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageHomelandGoldmineUpgradeResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageHomelandGoldmineUpgradeResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageHomelandGoldmineUpgradeResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandGoldmineUpgradeResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandGoldmineUpgradeResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandGoldmineUpgradeResponse &a, MessageHomelandGoldmineUpgradeResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageHomelandGoldmineHarvestRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageHomelandGoldmineHarvestRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageHomelandGoldmineHarvestRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageHomelandGoldmineHarvestRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandGoldmineHarvestRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandGoldmineHarvestRequest &a, MessageHomelandGoldmineHarvestRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageHomelandGoldmineHarvestResponse::ascii_fingerprint = "3409A6BAF48299E7727EECFEBEC3BDA9";
const uint8_t MessageHomelandGoldmineHarvestResponse::binary_fingerprint[16] = {0x34,0x09,0xA6,0xBA,0xF4,0x82,0x99,0xE7,0x72,0x7E,0xEC,0xFE,0xBE,0xC3,0xBD,0xA9};

uint32_t MessageHomelandGoldmineHarvestResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gold_);
          this->__isset.gold_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandGoldmineHarvestResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandGoldmineHarvestResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.gold_) {
    xfer += oprot->writeFieldBegin("gold_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->gold_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandGoldmineHarvestResponse &a, MessageHomelandGoldmineHarvestResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.gold_, b.gold_);
  swap(a.__isset, b.__isset);
}

const char* MessageHomelandPoolUpgradeRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageHomelandPoolUpgradeRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageHomelandPoolUpgradeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageHomelandPoolUpgradeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandPoolUpgradeRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandPoolUpgradeRequest &a, MessageHomelandPoolUpgradeRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageHomelandPoolUpgradeResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageHomelandPoolUpgradeResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageHomelandPoolUpgradeResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandPoolUpgradeResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandPoolUpgradeResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandPoolUpgradeResponse &a, MessageHomelandPoolUpgradeResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageHomelandPoolHarvestRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageHomelandPoolHarvestRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageHomelandPoolHarvestRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageHomelandPoolHarvestRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandPoolHarvestRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandPoolHarvestRequest &a, MessageHomelandPoolHarvestRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageHomelandPoolHarvestResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageHomelandPoolHarvestResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageHomelandPoolHarvestResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandPoolHarvestResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandPoolHarvestResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandPoolHarvestResponse &a, MessageHomelandPoolHarvestResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageHomelandPoolDoubleHarvestRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageHomelandPoolDoubleHarvestRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageHomelandPoolDoubleHarvestRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageHomelandPoolDoubleHarvestRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandPoolDoubleHarvestRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandPoolDoubleHarvestRequest &a, MessageHomelandPoolDoubleHarvestRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageHomelandPoolDoubleHarvestResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageHomelandPoolDoubleHarvestResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageHomelandPoolDoubleHarvestResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandPoolDoubleHarvestResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandPoolDoubleHarvestResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandPoolDoubleHarvestResponse &a, MessageHomelandPoolDoubleHarvestResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageHomelandChurchPrayRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageHomelandChurchPrayRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageHomelandChurchPrayRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageHomelandChurchPrayRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandChurchPrayRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandChurchPrayRequest &a, MessageHomelandChurchPrayRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageHomelandChurchPrayResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageHomelandChurchPrayResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageHomelandChurchPrayResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandChurchPrayResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandChurchPrayResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandChurchPrayResponse &a, MessageHomelandChurchPrayResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageHomelandChurchRefreshRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageHomelandChurchRefreshRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageHomelandChurchRefreshRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageHomelandChurchRefreshRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandChurchRefreshRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandChurchRefreshRequest &a, MessageHomelandChurchRefreshRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageHomelandChurchRefreshResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageHomelandChurchRefreshResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageHomelandChurchRefreshResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandChurchRefreshResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandChurchRefreshResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandChurchRefreshResponse &a, MessageHomelandChurchRefreshResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageHomelandChurchVipRefreshRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageHomelandChurchVipRefreshRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageHomelandChurchVipRefreshRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageHomelandChurchVipRefreshRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandChurchVipRefreshRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandChurchVipRefreshRequest &a, MessageHomelandChurchVipRefreshRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageHomelandChurchVipRefreshResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageHomelandChurchVipRefreshResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageHomelandChurchVipRefreshResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandChurchVipRefreshResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandChurchVipRefreshResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandChurchVipRefreshResponse &a, MessageHomelandChurchVipRefreshResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageHomelandChurchHarvestRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageHomelandChurchHarvestRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageHomelandChurchHarvestRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageHomelandChurchHarvestRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandChurchHarvestRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandChurchHarvestRequest &a, MessageHomelandChurchHarvestRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageHomelandChurchHarvestResponse::ascii_fingerprint = "BFE20425629D93BB485E108BC04B77E7";
const uint8_t MessageHomelandChurchHarvestResponse::binary_fingerprint[16] = {0xBF,0xE2,0x04,0x25,0x62,0x9D,0x93,0xBB,0x48,0x5E,0x10,0x8B,0xC0,0x4B,0x77,0xE7};

uint32_t MessageHomelandChurchHarvestResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->chest_type_);
          this->__isset.chest_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->bonus_id_);
          this->__isset.bonus_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandChurchHarvestResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandChurchHarvestResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.chest_type_) {
    xfer += oprot->writeFieldBegin("chest_type_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->chest_type_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bonus_id_) {
    xfer += oprot->writeFieldBegin("bonus_id_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->bonus_id_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandChurchHarvestResponse &a, MessageHomelandChurchHarvestResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.chest_type_, b.chest_type_);
  swap(a.bonus_id_, b.bonus_id_);
  swap(a.__isset, b.__isset);
}

const char* MessageHomelandTreeWaterRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageHomelandTreeWaterRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageHomelandTreeWaterRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageHomelandTreeWaterRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandTreeWaterRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandTreeWaterRequest &a, MessageHomelandTreeWaterRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageHomelandTreeWaterResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageHomelandTreeWaterResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageHomelandTreeWaterResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandTreeWaterResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandTreeWaterResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandTreeWaterResponse &a, MessageHomelandTreeWaterResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageHomelandTreeAssistWaterRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MessageHomelandTreeAssistWaterRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MessageHomelandTreeAssistWaterRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandTreeAssistWaterRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandTreeAssistWaterRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandTreeAssistWaterRequest &a, MessageHomelandTreeAssistWaterRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
}

const char* MessageHomelandTreeAssistWaterResponse::ascii_fingerprint = "32347F24A4B324AA0BD6C48AD5834567";
const uint8_t MessageHomelandTreeAssistWaterResponse::binary_fingerprint[16] = {0x32,0x34,0x7F,0x24,0xA4,0xB3,0x24,0xAA,0x0B,0xD6,0xC4,0x8A,0xD5,0x83,0x45,0x67};

uint32_t MessageHomelandTreeAssistWaterResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          this->__isset.actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast74;
          xfer += iprot->readI32(ecast74);
          this->tree_stage_ = ( ::entity::HomelandTreeStageType::type)ecast74;
          this->__isset.tree_stage_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tree_watered_times_);
          this->__isset.tree_watered_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandTreeAssistWaterResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandTreeAssistWaterResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.actor_id_) {
    xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->actor_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tree_stage_) {
    xfer += oprot->writeFieldBegin("tree_stage_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->tree_stage_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tree_watered_times_) {
    xfer += oprot->writeFieldBegin("tree_watered_times_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->tree_watered_times_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandTreeAssistWaterResponse &a, MessageHomelandTreeAssistWaterResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.actor_id_, b.actor_id_);
  swap(a.tree_stage_, b.tree_stage_);
  swap(a.tree_watered_times_, b.tree_watered_times_);
  swap(a.__isset, b.__isset);
}

const char* MessageHomelandTreeStealRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MessageHomelandTreeStealRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MessageHomelandTreeStealRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandTreeStealRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandTreeStealRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandTreeStealRequest &a, MessageHomelandTreeStealRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
}

const char* MessageHomelandTreeStealResponse::ascii_fingerprint = "3409A6BAF48299E7727EECFEBEC3BDA9";
const uint8_t MessageHomelandTreeStealResponse::binary_fingerprint[16] = {0x34,0x09,0xA6,0xBA,0xF4,0x82,0x99,0xE7,0x72,0x7E,0xEC,0xFE,0xBE,0xC3,0xBD,0xA9};

uint32_t MessageHomelandTreeStealResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->restrict_dollars_);
          this->__isset.restrict_dollars_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandTreeStealResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandTreeStealResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.restrict_dollars_) {
    xfer += oprot->writeFieldBegin("restrict_dollars_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->restrict_dollars_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandTreeStealResponse &a, MessageHomelandTreeStealResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.restrict_dollars_, b.restrict_dollars_);
  swap(a.__isset, b.__isset);
}

const char* MessageHomelandTreeHarvestRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageHomelandTreeHarvestRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageHomelandTreeHarvestRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageHomelandTreeHarvestRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandTreeHarvestRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandTreeHarvestRequest &a, MessageHomelandTreeHarvestRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageHomelandTreeHarvestResponse::ascii_fingerprint = "3409A6BAF48299E7727EECFEBEC3BDA9";
const uint8_t MessageHomelandTreeHarvestResponse::binary_fingerprint[16] = {0x34,0x09,0xA6,0xBA,0xF4,0x82,0x99,0xE7,0x72,0x7E,0xEC,0xFE,0xBE,0xC3,0xBD,0xA9};

uint32_t MessageHomelandTreeHarvestResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->restrict_dollars_);
          this->__isset.restrict_dollars_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandTreeHarvestResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandTreeHarvestResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.restrict_dollars_) {
    xfer += oprot->writeFieldBegin("restrict_dollars_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->restrict_dollars_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandTreeHarvestResponse &a, MessageHomelandTreeHarvestResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.restrict_dollars_, b.restrict_dollars_);
  swap(a.__isset, b.__isset);
}

const char* MessageHomelandTowerUpgradeRequest::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t MessageHomelandTowerUpgradeRequest::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t MessageHomelandTowerUpgradeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_tower_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tower_id_);
          isset_tower_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_tower_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandTowerUpgradeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandTowerUpgradeRequest");

  xfer += oprot->writeFieldBegin("tower_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->tower_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandTowerUpgradeRequest &a, MessageHomelandTowerUpgradeRequest &b) {
  using ::std::swap;
  swap(a.tower_id_, b.tower_id_);
}

const char* MessageHomelandTowerUpgradeResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageHomelandTowerUpgradeResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageHomelandTowerUpgradeResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandTowerUpgradeResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandTowerUpgradeResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandTowerUpgradeResponse &a, MessageHomelandTowerUpgradeResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageHomelandStrongholdUpgradeRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageHomelandStrongholdUpgradeRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageHomelandStrongholdUpgradeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageHomelandStrongholdUpgradeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandStrongholdUpgradeRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandStrongholdUpgradeRequest &a, MessageHomelandStrongholdUpgradeRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageHomelandStrongholdUpgradeResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageHomelandStrongholdUpgradeResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageHomelandStrongholdUpgradeResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandStrongholdUpgradeResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandStrongholdUpgradeResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandStrongholdUpgradeResponse &a, MessageHomelandStrongholdUpgradeResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageHomelandStrongholdCallSupportRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageHomelandStrongholdCallSupportRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageHomelandStrongholdCallSupportRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageHomelandStrongholdCallSupportRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandStrongholdCallSupportRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandStrongholdCallSupportRequest &a, MessageHomelandStrongholdCallSupportRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageHomelandStrongholdCallSupportResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageHomelandStrongholdCallSupportResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageHomelandStrongholdCallSupportResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandStrongholdCallSupportResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandStrongholdCallSupportResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandStrongholdCallSupportResponse &a, MessageHomelandStrongholdCallSupportResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageHomelandStrongholdCallSupportNotify::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t MessageHomelandStrongholdCallSupportNotify::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t MessageHomelandStrongholdCallSupportNotify::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_actor_name_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_name_);
          isset_actor_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_actor_name_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandStrongholdCallSupportNotify::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandStrongholdCallSupportNotify");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("actor_name_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->actor_name_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandStrongholdCallSupportNotify &a, MessageHomelandStrongholdCallSupportNotify &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.actor_name_, b.actor_name_);
}

const char* MessageHomelandStrongholdSupportRequest::ascii_fingerprint = "EEBC915CE44901401D881E6091423036";
const uint8_t MessageHomelandStrongholdSupportRequest::binary_fingerprint[16] = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

uint32_t MessageHomelandStrongholdSupportRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_soul_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->soul_id_);
          isset_soul_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_soul_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandStrongholdSupportRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandStrongholdSupportRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("soul_id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->soul_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandStrongholdSupportRequest &a, MessageHomelandStrongholdSupportRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.soul_id_, b.soul_id_);
}

const char* MessageHomelandStrongholdSupportResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageHomelandStrongholdSupportResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageHomelandStrongholdSupportResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandStrongholdSupportResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandStrongholdSupportResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandStrongholdSupportResponse &a, MessageHomelandStrongholdSupportResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* HomelandBattleUnitData::ascii_fingerprint = "C39DC18AD27C094ED19966B66EBA8A96";
const uint8_t HomelandBattleUnitData::binary_fingerprint[16] = {0xC3,0x9D,0xC1,0x8A,0xD2,0x7C,0x09,0x4E,0xD1,0x99,0x66,0xB6,0x6E,0xBA,0x8A,0x96};

uint32_t HomelandBattleUnitData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_unit_id_ = false;
  bool isset_side_ = false;
  bool isset_unit_type_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unit_id_);
          isset_unit_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast75;
          xfer += iprot->readI32(ecast75);
          this->side_ = ( ::entity::HomelandBattleSideType::type)ecast75;
          isset_side_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast76;
          xfer += iprot->readI32(ecast76);
          this->unit_type_ = ( ::entity::HomelandBattleUnitType::type)ecast76;
          isset_unit_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->row_);
          this->__isset.row_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->column_);
          this->__isset.column_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->soul_id_);
          this->__isset.soul_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hp_);
          this->__isset.hp_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_unit_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_side_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unit_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t HomelandBattleUnitData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HomelandBattleUnitData");

  xfer += oprot->writeFieldBegin("unit_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->unit_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("side_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->side_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unit_type_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->unit_type_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.row_) {
    xfer += oprot->writeFieldBegin("row_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->row_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.column_) {
    xfer += oprot->writeFieldBegin("column_", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->column_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.soul_id_) {
    xfer += oprot->writeFieldBegin("soul_id_", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->soul_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hp_) {
    xfer += oprot->writeFieldBegin("hp_", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->hp_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HomelandBattleUnitData &a, HomelandBattleUnitData &b) {
  using ::std::swap;
  swap(a.unit_id_, b.unit_id_);
  swap(a.side_, b.side_);
  swap(a.unit_type_, b.unit_type_);
  swap(a.row_, b.row_);
  swap(a.column_, b.column_);
  swap(a.soul_id_, b.soul_id_);
  swap(a.hp_, b.hp_);
  swap(a.__isset, b.__isset);
}

const char* HomelandBattleStateChangeData::ascii_fingerprint = "3A58C014B73F7C306CCF8F84BE78E33A";
const uint8_t HomelandBattleStateChangeData::binary_fingerprint[16] = {0x3A,0x58,0xC0,0x14,0xB7,0x3F,0x7C,0x30,0x6C,0xCF,0x8F,0x84,0xBE,0x78,0xE3,0x3A};

uint32_t HomelandBattleStateChangeData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_unit_id_ = false;
  bool isset_type_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unit_id_);
          isset_unit_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast77;
          xfer += iprot->readI32(ecast77);
          this->type_ = ( ::entity::HomelandBattleStateChangeType::type)ecast77;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->value_);
          this->__isset.value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_unit_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t HomelandBattleStateChangeData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HomelandBattleStateChangeData");

  xfer += oprot->writeFieldBegin("unit_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->unit_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.value_) {
    xfer += oprot->writeFieldBegin("value_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->value_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HomelandBattleStateChangeData &a, HomelandBattleStateChangeData &b) {
  using ::std::swap;
  swap(a.unit_id_, b.unit_id_);
  swap(a.type_, b.type_);
  swap(a.value_, b.value_);
  swap(a.__isset, b.__isset);
}

const char* HomelandBattleActionData::ascii_fingerprint = "BE037CB1C4ED6CD27D48D1C1EACB42E6";
const uint8_t HomelandBattleActionData::binary_fingerprint[16] = {0xBE,0x03,0x7C,0xB1,0xC4,0xED,0x6C,0xD2,0x7D,0x48,0xD1,0xC1,0xEA,0xCB,0x42,0xE6};

uint32_t HomelandBattleActionData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_unit_id_ = false;
  bool isset_type_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unit_id_);
          isset_unit_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast78;
          xfer += iprot->readI32(ecast78);
          this->type_ = ( ::entity::HomelandBattleActionType::type)ecast78;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->result_.clear();
            uint32_t _size79;
            ::apache::thrift::protocol::TType _etype82;
            xfer += iprot->readListBegin(_etype82, _size79);
            this->result_.resize(_size79);
            uint32_t _i83;
            for (_i83 = 0; _i83 < _size79; ++_i83)
            {
              xfer += this->result_[_i83].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_unit_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t HomelandBattleActionData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HomelandBattleActionData");

  xfer += oprot->writeFieldBegin("unit_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->unit_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->result_.size()));
    std::vector<HomelandBattleStateChangeData> ::const_iterator _iter84;
    for (_iter84 = this->result_.begin(); _iter84 != this->result_.end(); ++_iter84)
    {
      xfer += (*_iter84).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HomelandBattleActionData &a, HomelandBattleActionData &b) {
  using ::std::swap;
  swap(a.unit_id_, b.unit_id_);
  swap(a.type_, b.type_);
  swap(a.result_, b.result_);
}

const char* HomelandBattleRoundData::ascii_fingerprint = "0D5DCB59570573B69F19370FAD571856";
const uint8_t HomelandBattleRoundData::binary_fingerprint[16] = {0x0D,0x5D,0xCB,0x59,0x57,0x05,0x73,0xB6,0x9F,0x19,0x37,0x0F,0xAD,0x57,0x18,0x56};

uint32_t HomelandBattleRoundData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actions_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->actions_.clear();
            uint32_t _size85;
            ::apache::thrift::protocol::TType _etype88;
            xfer += iprot->readListBegin(_etype88, _size85);
            this->actions_.resize(_size85);
            uint32_t _i89;
            for (_i89 = 0; _i89 < _size85; ++_i89)
            {
              xfer += this->actions_[_i89].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_actions_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actions_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t HomelandBattleRoundData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HomelandBattleRoundData");

  xfer += oprot->writeFieldBegin("actions_", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->actions_.size()));
    std::vector<HomelandBattleActionData> ::const_iterator _iter90;
    for (_iter90 = this->actions_.begin(); _iter90 != this->actions_.end(); ++_iter90)
    {
      xfer += (*_iter90).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HomelandBattleRoundData &a, HomelandBattleRoundData &b) {
  using ::std::swap;
  swap(a.actions_, b.actions_);
}

const char* MessageHomelandBattleMatchRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageHomelandBattleMatchRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageHomelandBattleMatchRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageHomelandBattleMatchRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandBattleMatchRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandBattleMatchRequest &a, MessageHomelandBattleMatchRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageHomelandBattleMatchResponse::ascii_fingerprint = "CE1DDFFBE208E870ECC89E99A9CF303E";
const uint8_t MessageHomelandBattleMatchResponse::binary_fingerprint[16] = {0xCE,0x1D,0xDF,0xFB,0xE2,0x08,0xE8,0x70,0xEC,0xC8,0x9E,0x99,0xA9,0xCF,0x30,0x3E};

uint32_t MessageHomelandBattleMatchResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_name_);
          this->__isset.actor_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gold_);
          this->__isset.gold_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandBattleMatchResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandBattleMatchResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.actor_name_) {
    xfer += oprot->writeFieldBegin("actor_name_", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->actor_name_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gold_) {
    xfer += oprot->writeFieldBegin("gold_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->gold_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandBattleMatchResponse &a, MessageHomelandBattleMatchResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.actor_name_, b.actor_name_);
  swap(a.gold_, b.gold_);
  swap(a.__isset, b.__isset);
}

const char* MessageHomelandBattleStrikeBackRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MessageHomelandBattleStrikeBackRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MessageHomelandBattleStrikeBackRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandBattleStrikeBackRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandBattleStrikeBackRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandBattleStrikeBackRequest &a, MessageHomelandBattleStrikeBackRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
}

const char* MessageHomelandBattleStrikeBackResponse::ascii_fingerprint = "3409A6BAF48299E7727EECFEBEC3BDA9";
const uint8_t MessageHomelandBattleStrikeBackResponse::binary_fingerprint[16] = {0x34,0x09,0xA6,0xBA,0xF4,0x82,0x99,0xE7,0x72,0x7E,0xEC,0xFE,0xBE,0xC3,0xBD,0xA9};

uint32_t MessageHomelandBattleStrikeBackResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gold_);
          this->__isset.gold_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandBattleStrikeBackResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandBattleStrikeBackResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.gold_) {
    xfer += oprot->writeFieldBegin("gold_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->gold_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandBattleStrikeBackResponse &a, MessageHomelandBattleStrikeBackResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.gold_, b.gold_);
  swap(a.__isset, b.__isset);
}

const char* MessageHomelandBattleFightDataNotify::ascii_fingerprint = "610A77EECC230E29A925FA2122097FCA";
const uint8_t MessageHomelandBattleFightDataNotify::binary_fingerprint[16] = {0x61,0x0A,0x77,0xEE,0xCC,0x23,0x0E,0x29,0xA9,0x25,0xFA,0x21,0x22,0x09,0x7F,0xCA};

uint32_t MessageHomelandBattleFightDataNotify::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_target_actor_name_ = false;
  bool isset_target_gender_ = false;
  bool isset_units_ = false;
  bool isset_commander_battle_ = false;
  bool isset_soul_battle_ = false;
  bool isset_battle_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->target_actor_name_);
          isset_target_actor_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast91;
          xfer += iprot->readI32(ecast91);
          this->target_gender_ = ( ::entity::GenderType::type)ecast91;
          isset_target_gender_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->units_.clear();
            uint32_t _size92;
            ::apache::thrift::protocol::TType _etype95;
            xfer += iprot->readListBegin(_etype95, _size92);
            this->units_.resize(_size92);
            uint32_t _i96;
            for (_i96 = 0; _i96 < _size92; ++_i96)
            {
              xfer += this->units_[_i96].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_units_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->commander_battle_.clear();
            uint32_t _size97;
            ::apache::thrift::protocol::TType _etype100;
            xfer += iprot->readListBegin(_etype100, _size97);
            this->commander_battle_.resize(_size97);
            uint32_t _i101;
            for (_i101 = 0; _i101 < _size97; ++_i101)
            {
              xfer += this->commander_battle_[_i101].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_commander_battle_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->soul_battle_.clear();
            uint32_t _size102;
            ::apache::thrift::protocol::TType _etype105;
            xfer += iprot->readListBegin(_etype105, _size102);
            this->soul_battle_.resize(_size102);
            uint32_t _i106;
            for (_i106 = 0; _i106 < _size102; ++_i106)
            {
              xfer += this->soul_battle_[_i106].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_soul_battle_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast107;
          xfer += iprot->readI32(ecast107);
          this->battle_result_ = ( ::entity::HomelandBattleResultType::type)ecast107;
          isset_battle_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_target_actor_name_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_target_gender_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_units_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_commander_battle_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_soul_battle_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_battle_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageHomelandBattleFightDataNotify::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageHomelandBattleFightDataNotify");

  xfer += oprot->writeFieldBegin("target_actor_name_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->target_actor_name_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target_gender_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->target_gender_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("units_", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->units_.size()));
    std::vector<HomelandBattleUnitData> ::const_iterator _iter108;
    for (_iter108 = this->units_.begin(); _iter108 != this->units_.end(); ++_iter108)
    {
      xfer += (*_iter108).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("commander_battle_", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->commander_battle_.size()));
    std::vector<HomelandBattleRoundData> ::const_iterator _iter109;
    for (_iter109 = this->commander_battle_.begin(); _iter109 != this->commander_battle_.end(); ++_iter109)
    {
      xfer += (*_iter109).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("soul_battle_", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->soul_battle_.size()));
    std::vector<HomelandBattleRoundData> ::const_iterator _iter110;
    for (_iter110 = this->soul_battle_.begin(); _iter110 != this->soul_battle_.end(); ++_iter110)
    {
      xfer += (*_iter110).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("battle_result_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->battle_result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageHomelandBattleFightDataNotify &a, MessageHomelandBattleFightDataNotify &b) {
  using ::std::swap;
  swap(a.target_actor_name_, b.target_actor_name_);
  swap(a.target_gender_, b.target_gender_);
  swap(a.units_, b.units_);
  swap(a.commander_battle_, b.commander_battle_);
  swap(a.soul_battle_, b.soul_battle_);
  swap(a.battle_result_, b.battle_result_);
}

}} // namespace
