/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef gateway_playing_protocol_TYPES_H
#define gateway_playing_protocol_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "gateway_protocol_types.h"
#include "playing_types.h"
#include "maze_types.h"


namespace gateway { namespace protocol {


class PlayingPageField {
 public:

  static const char* ascii_fingerprint; // = "8174D44AE91049FBB40F3E5E324445B8";
  static const uint8_t binary_fingerprint[16]; // = {0x81,0x74,0xD4,0x4A,0xE9,0x10,0x49,0xFB,0xB4,0x0F,0x3E,0x5E,0x32,0x44,0x45,0xB8};

  PlayingPageField() : template_(0) {
  }

  virtual ~PlayingPageField() throw() {}

  int32_t template_;
   ::entity::PlayingRecordField record_;
   ::entity::PlayingResultField result_;

  void __set_template_(const int32_t val) {
    template_ = val;
  }

  void __set_record_(const  ::entity::PlayingRecordField& val) {
    record_ = val;
  }

  void __set_result_(const  ::entity::PlayingResultField& val) {
    result_ = val;
  }

  bool operator == (const PlayingPageField & rhs) const
  {
    if (!(template_ == rhs.template_))
      return false;
    if (!(record_ == rhs.record_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const PlayingPageField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlayingPageField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PlayingPageField &a, PlayingPageField &b);

typedef struct _MessagePlayingInitialize__isset {
  _MessagePlayingInitialize__isset() : auto_playing_(false), auto_playing_group_(false), auto_remain_secs_(false) {}
  bool auto_playing_;
  bool auto_playing_group_;
  bool auto_remain_secs_;
} _MessagePlayingInitialize__isset;

class MessagePlayingInitialize {
 public:

  static const char* ascii_fingerprint; // = "CD40A4744C118EC00EF0F00681715372";
  static const uint8_t binary_fingerprint[16]; // = {0xCD,0x40,0xA4,0x74,0x4C,0x11,0x8E,0xC0,0x0E,0xF0,0xF0,0x06,0x81,0x71,0x53,0x72};

  MessagePlayingInitialize() : auto_playing_(0), auto_playing_group_(0), auto_remain_secs_(0) {
  }

  virtual ~MessagePlayingInitialize() throw() {}

  std::vector<PlayingPageField>  playings_;
  int32_t auto_playing_;
  int32_t auto_playing_group_;
  int32_t auto_remain_secs_;

  _MessagePlayingInitialize__isset __isset;

  void __set_playings_(const std::vector<PlayingPageField> & val) {
    playings_ = val;
  }

  void __set_auto_playing_(const int32_t val) {
    auto_playing_ = val;
    __isset.auto_playing_ = true;
  }

  void __set_auto_playing_group_(const int32_t val) {
    auto_playing_group_ = val;
    __isset.auto_playing_group_ = true;
  }

  void __set_auto_remain_secs_(const int32_t val) {
    auto_remain_secs_ = val;
    __isset.auto_remain_secs_ = true;
  }

  bool operator == (const MessagePlayingInitialize & rhs) const
  {
    if (!(playings_ == rhs.playings_))
      return false;
    if (__isset.auto_playing_ != rhs.__isset.auto_playing_)
      return false;
    else if (__isset.auto_playing_ && !(auto_playing_ == rhs.auto_playing_))
      return false;
    if (__isset.auto_playing_group_ != rhs.__isset.auto_playing_group_)
      return false;
    else if (__isset.auto_playing_group_ && !(auto_playing_group_ == rhs.auto_playing_group_))
      return false;
    if (__isset.auto_remain_secs_ != rhs.__isset.auto_remain_secs_)
      return false;
    else if (__isset.auto_remain_secs_ && !(auto_remain_secs_ == rhs.auto_remain_secs_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingInitialize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingInitialize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingInitialize &a, MessagePlayingInitialize &b);


class MessagePlayingCreateRequest {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MessagePlayingCreateRequest() : template_(0) {
  }

  virtual ~MessagePlayingCreateRequest() throw() {}

  int32_t template_;

  void __set_template_(const int32_t val) {
    template_ = val;
  }

  bool operator == (const MessagePlayingCreateRequest & rhs) const
  {
    if (!(template_ == rhs.template_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingCreateRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingCreateRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingCreateRequest &a, MessagePlayingCreateRequest &b);


class MessagePlayingCreateResponse {
 public:

  static const char* ascii_fingerprint; // = "4DC0C1A1F380340B40244ADC7FB0BA60";
  static const uint8_t binary_fingerprint[16]; // = {0x4D,0xC0,0xC1,0xA1,0xF3,0x80,0x34,0x0B,0x40,0x24,0x4A,0xDC,0x7F,0xB0,0xBA,0x60};

  MessagePlayingCreateResponse() : template_(0), result_(0) {
  }

  virtual ~MessagePlayingCreateResponse() throw() {}

  int32_t template_;
  bool result_;

  void __set_template_(const int32_t val) {
    template_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessagePlayingCreateResponse & rhs) const
  {
    if (!(template_ == rhs.template_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingCreateResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingCreateResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingCreateResponse &a, MessagePlayingCreateResponse &b);


class MessagePlayingCreateFinishNotice {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  MessagePlayingCreateFinishNotice() : template_(0), playing_() {
  }

  virtual ~MessagePlayingCreateFinishNotice() throw() {}

  int32_t template_;
  std::string playing_;

  void __set_template_(const int32_t val) {
    template_ = val;
  }

  void __set_playing_(const std::string& val) {
    playing_ = val;
  }

  bool operator == (const MessagePlayingCreateFinishNotice & rhs) const
  {
    if (!(template_ == rhs.template_))
      return false;
    if (!(playing_ == rhs.playing_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingCreateFinishNotice &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingCreateFinishNotice & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingCreateFinishNotice &a, MessagePlayingCreateFinishNotice &b);


class MessagePlayingEnterRequest {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  MessagePlayingEnterRequest() : playing_(), template_(0) {
  }

  virtual ~MessagePlayingEnterRequest() throw() {}

  std::string playing_;
  int32_t template_;

  void __set_playing_(const std::string& val) {
    playing_ = val;
  }

  void __set_template_(const int32_t val) {
    template_ = val;
  }

  bool operator == (const MessagePlayingEnterRequest & rhs) const
  {
    if (!(playing_ == rhs.playing_))
      return false;
    if (!(template_ == rhs.template_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingEnterRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingEnterRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingEnterRequest &a, MessagePlayingEnterRequest &b);


class MessagePlayingEnterResponse {
 public:

  static const char* ascii_fingerprint; // = "88440F45A63E63607868B983E4E50558";
  static const uint8_t binary_fingerprint[16]; // = {0x88,0x44,0x0F,0x45,0xA6,0x3E,0x63,0x60,0x78,0x68,0xB9,0x83,0xE4,0xE5,0x05,0x58};

  MessagePlayingEnterResponse() : result_(0), template_(0) {
  }

  virtual ~MessagePlayingEnterResponse() throw() {}

  bool result_;
  int32_t template_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_template_(const int32_t val) {
    template_ = val;
  }

  bool operator == (const MessagePlayingEnterResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (!(template_ == rhs.template_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingEnterResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingEnterResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingEnterResponse &a, MessagePlayingEnterResponse &b);


class MessagePlayingEnterInitialize {
 public:

  static const char* ascii_fingerprint; // = "1987B348D4EBD3E0C5A3E5ADA0C5F336";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0x87,0xB3,0x48,0xD4,0xEB,0xD3,0xE0,0xC5,0xA3,0xE5,0xAD,0xA0,0xC5,0xF3,0x36};

  MessagePlayingEnterInitialize() : template_(0), spend_time_(0) {
  }

  virtual ~MessagePlayingEnterInitialize() throw() {}

  int32_t template_;
  int32_t spend_time_;
  std::vector< ::entity::PlayingScoreField>  scores_;
  std::vector<int32_t>  datas_;

  void __set_template_(const int32_t val) {
    template_ = val;
  }

  void __set_spend_time_(const int32_t val) {
    spend_time_ = val;
  }

  void __set_scores_(const std::vector< ::entity::PlayingScoreField> & val) {
    scores_ = val;
  }

  void __set_datas_(const std::vector<int32_t> & val) {
    datas_ = val;
  }

  bool operator == (const MessagePlayingEnterInitialize & rhs) const
  {
    if (!(template_ == rhs.template_))
      return false;
    if (!(spend_time_ == rhs.spend_time_))
      return false;
    if (!(scores_ == rhs.scores_))
      return false;
    if (!(datas_ == rhs.datas_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingEnterInitialize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingEnterInitialize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingEnterInitialize &a, MessagePlayingEnterInitialize &b);


class MessagePlayingScoreSynchronize {
 public:

  static const char* ascii_fingerprint; // = "A9A743155101F957A8E1B32AA26169BD";
  static const uint8_t binary_fingerprint[16]; // = {0xA9,0xA7,0x43,0x15,0x51,0x01,0xF9,0x57,0xA8,0xE1,0xB3,0x2A,0xA2,0x61,0x69,0xBD};

  MessagePlayingScoreSynchronize() {
  }

  virtual ~MessagePlayingScoreSynchronize() throw() {}

   ::entity::PlayingScoreField score_;

  void __set_score_(const  ::entity::PlayingScoreField& val) {
    score_ = val;
  }

  bool operator == (const MessagePlayingScoreSynchronize & rhs) const
  {
    if (!(score_ == rhs.score_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingScoreSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingScoreSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingScoreSynchronize &a, MessagePlayingScoreSynchronize &b);


class MessagePlayingRandkingSynchronize {
 public:

  static const char* ascii_fingerprint; // = "3967FCB1D2A588AFFB6B3D0713F6F380";
  static const uint8_t binary_fingerprint[16]; // = {0x39,0x67,0xFC,0xB1,0xD2,0xA5,0x88,0xAF,0xFB,0x6B,0x3D,0x07,0x13,0xF6,0xF3,0x80};

  MessagePlayingRandkingSynchronize() {
  }

  virtual ~MessagePlayingRandkingSynchronize() throw() {}

  std::vector< ::entity::PlayingRankingField>  ranking_;

  void __set_ranking_(const std::vector< ::entity::PlayingRankingField> & val) {
    ranking_ = val;
  }

  bool operator == (const MessagePlayingRandkingSynchronize & rhs) const
  {
    if (!(ranking_ == rhs.ranking_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingRandkingSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingRandkingSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingRandkingSynchronize &a, MessagePlayingRandkingSynchronize &b);


class MessagePlayingCompleteRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessagePlayingCompleteRequest() {
  }

  virtual ~MessagePlayingCompleteRequest() throw() {}


  bool operator == (const MessagePlayingCompleteRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessagePlayingCompleteRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingCompleteRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingCompleteRequest &a, MessagePlayingCompleteRequest &b);


class MessagePlayingCompleteResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessagePlayingCompleteResponse() : result_(0) {
  }

  virtual ~MessagePlayingCompleteResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessagePlayingCompleteResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingCompleteResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingCompleteResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingCompleteResponse &a, MessagePlayingCompleteResponse &b);

typedef struct _MessagePlayingCompleteSynchronize__isset {
  _MessagePlayingCompleteSynchronize__isset() : awards_(false), draw_award_(false) {}
  bool awards_;
  bool draw_award_;
} _MessagePlayingCompleteSynchronize__isset;

class MessagePlayingCompleteSynchronize {
 public:

  static const char* ascii_fingerprint; // = "78595F5A50763C69557151A458DDADB8";
  static const uint8_t binary_fingerprint[16]; // = {0x78,0x59,0x5F,0x5A,0x50,0x76,0x3C,0x69,0x55,0x71,0x51,0xA4,0x58,0xDD,0xAD,0xB8};

  MessagePlayingCompleteSynchronize() {
  }

  virtual ~MessagePlayingCompleteSynchronize() throw() {}

   ::entity::PlayingResultField result_;
  std::vector< ::entity::PlayingAwardField>  awards_;
   ::entity::PlayingAwardField draw_award_;

  _MessagePlayingCompleteSynchronize__isset __isset;

  void __set_result_(const  ::entity::PlayingResultField& val) {
    result_ = val;
  }

  void __set_awards_(const std::vector< ::entity::PlayingAwardField> & val) {
    awards_ = val;
    __isset.awards_ = true;
  }

  void __set_draw_award_(const  ::entity::PlayingAwardField& val) {
    draw_award_ = val;
    __isset.draw_award_ = true;
  }

  bool operator == (const MessagePlayingCompleteSynchronize & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.awards_ != rhs.__isset.awards_)
      return false;
    else if (__isset.awards_ && !(awards_ == rhs.awards_))
      return false;
    if (__isset.draw_award_ != rhs.__isset.draw_award_)
      return false;
    else if (__isset.draw_award_ && !(draw_award_ == rhs.draw_award_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingCompleteSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingCompleteSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingCompleteSynchronize &a, MessagePlayingCompleteSynchronize &b);


class MessagePlayingLeaveRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessagePlayingLeaveRequest() {
  }

  virtual ~MessagePlayingLeaveRequest() throw() {}


  bool operator == (const MessagePlayingLeaveRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessagePlayingLeaveRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingLeaveRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingLeaveRequest &a, MessagePlayingLeaveRequest &b);


class MessagePlayingLeaveResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessagePlayingLeaveResponse() : result_(0) {
  }

  virtual ~MessagePlayingLeaveResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessagePlayingLeaveResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingLeaveResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingLeaveResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingLeaveResponse &a, MessagePlayingLeaveResponse &b);


class MessagePlayingLeaveSynchronize {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessagePlayingLeaveSynchronize() {
  }

  virtual ~MessagePlayingLeaveSynchronize() throw() {}


  bool operator == (const MessagePlayingLeaveSynchronize & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessagePlayingLeaveSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingLeaveSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingLeaveSynchronize &a, MessagePlayingLeaveSynchronize &b);

typedef struct _MessagePlayingAwardRequest__isset {
  _MessagePlayingAwardRequest__isset() : playing_template_(false), playing_group_(false) {}
  bool playing_template_;
  bool playing_group_;
} _MessagePlayingAwardRequest__isset;

class MessagePlayingAwardRequest {
 public:

  static const char* ascii_fingerprint; // = "C1241AF5AA92C586B664FD41DC97C576";
  static const uint8_t binary_fingerprint[16]; // = {0xC1,0x24,0x1A,0xF5,0xAA,0x92,0xC5,0x86,0xB6,0x64,0xFD,0x41,0xDC,0x97,0xC5,0x76};

  MessagePlayingAwardRequest() : playing_template_(0), playing_group_(0) {
  }

  virtual ~MessagePlayingAwardRequest() throw() {}

  int32_t playing_template_;
  int32_t playing_group_;

  _MessagePlayingAwardRequest__isset __isset;

  void __set_playing_template_(const int32_t val) {
    playing_template_ = val;
    __isset.playing_template_ = true;
  }

  void __set_playing_group_(const int32_t val) {
    playing_group_ = val;
    __isset.playing_group_ = true;
  }

  bool operator == (const MessagePlayingAwardRequest & rhs) const
  {
    if (__isset.playing_template_ != rhs.__isset.playing_template_)
      return false;
    else if (__isset.playing_template_ && !(playing_template_ == rhs.playing_template_))
      return false;
    if (__isset.playing_group_ != rhs.__isset.playing_group_)
      return false;
    else if (__isset.playing_group_ && !(playing_group_ == rhs.playing_group_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingAwardRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingAwardRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingAwardRequest &a, MessagePlayingAwardRequest &b);


class MessagePlayingAwardResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessagePlayingAwardResponse() : result_(0) {
  }

  virtual ~MessagePlayingAwardResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessagePlayingAwardResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingAwardResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingAwardResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingAwardResponse &a, MessagePlayingAwardResponse &b);


class MessagePlayingRecordSynchronize {
 public:

  static const char* ascii_fingerprint; // = "8174D44AE91049FBB40F3E5E324445B8";
  static const uint8_t binary_fingerprint[16]; // = {0x81,0x74,0xD4,0x4A,0xE9,0x10,0x49,0xFB,0xB4,0x0F,0x3E,0x5E,0x32,0x44,0x45,0xB8};

  MessagePlayingRecordSynchronize() : playing_template_(0) {
  }

  virtual ~MessagePlayingRecordSynchronize() throw() {}

  int32_t playing_template_;
   ::entity::PlayingRecordField record_;
   ::entity::PlayingResultField result_;

  void __set_playing_template_(const int32_t val) {
    playing_template_ = val;
  }

  void __set_record_(const  ::entity::PlayingRecordField& val) {
    record_ = val;
  }

  void __set_result_(const  ::entity::PlayingResultField& val) {
    result_ = val;
  }

  bool operator == (const MessagePlayingRecordSynchronize & rhs) const
  {
    if (!(playing_template_ == rhs.playing_template_))
      return false;
    if (!(record_ == rhs.record_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingRecordSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingRecordSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingRecordSynchronize &a, MessagePlayingRecordSynchronize &b);

typedef struct _MessagePlayingAutoRequest__isset {
  _MessagePlayingAutoRequest__isset() : playing_template_(false), playing_group_(false) {}
  bool playing_template_;
  bool playing_group_;
} _MessagePlayingAutoRequest__isset;

class MessagePlayingAutoRequest {
 public:

  static const char* ascii_fingerprint; // = "C1241AF5AA92C586B664FD41DC97C576";
  static const uint8_t binary_fingerprint[16]; // = {0xC1,0x24,0x1A,0xF5,0xAA,0x92,0xC5,0x86,0xB6,0x64,0xFD,0x41,0xDC,0x97,0xC5,0x76};

  MessagePlayingAutoRequest() : playing_template_(0), playing_group_(0) {
  }

  virtual ~MessagePlayingAutoRequest() throw() {}

  int32_t playing_template_;
  int32_t playing_group_;

  _MessagePlayingAutoRequest__isset __isset;

  void __set_playing_template_(const int32_t val) {
    playing_template_ = val;
    __isset.playing_template_ = true;
  }

  void __set_playing_group_(const int32_t val) {
    playing_group_ = val;
    __isset.playing_group_ = true;
  }

  bool operator == (const MessagePlayingAutoRequest & rhs) const
  {
    if (__isset.playing_template_ != rhs.__isset.playing_template_)
      return false;
    else if (__isset.playing_template_ && !(playing_template_ == rhs.playing_template_))
      return false;
    if (__isset.playing_group_ != rhs.__isset.playing_group_)
      return false;
    else if (__isset.playing_group_ && !(playing_group_ == rhs.playing_group_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingAutoRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingAutoRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingAutoRequest &a, MessagePlayingAutoRequest &b);

typedef struct _MessagePlayingAutoResponse__isset {
  _MessagePlayingAutoResponse__isset() : playing_template_(false), playing_group_(false) {}
  bool playing_template_;
  bool playing_group_;
} _MessagePlayingAutoResponse__isset;

class MessagePlayingAutoResponse {
 public:

  static const char* ascii_fingerprint; // = "BFE20425629D93BB485E108BC04B77E7";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0xE2,0x04,0x25,0x62,0x9D,0x93,0xBB,0x48,0x5E,0x10,0x8B,0xC0,0x4B,0x77,0xE7};

  MessagePlayingAutoResponse() : result_(0), playing_template_(0), playing_group_(0) {
  }

  virtual ~MessagePlayingAutoResponse() throw() {}

  bool result_;
  int32_t playing_template_;
  int32_t playing_group_;

  _MessagePlayingAutoResponse__isset __isset;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_playing_template_(const int32_t val) {
    playing_template_ = val;
    __isset.playing_template_ = true;
  }

  void __set_playing_group_(const int32_t val) {
    playing_group_ = val;
    __isset.playing_group_ = true;
  }

  bool operator == (const MessagePlayingAutoResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.playing_template_ != rhs.__isset.playing_template_)
      return false;
    else if (__isset.playing_template_ && !(playing_template_ == rhs.playing_template_))
      return false;
    if (__isset.playing_group_ != rhs.__isset.playing_group_)
      return false;
    else if (__isset.playing_group_ && !(playing_group_ == rhs.playing_group_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingAutoResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingAutoResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingAutoResponse &a, MessagePlayingAutoResponse &b);

typedef struct _MessagePlayingAutoStopSynchronize__isset {
  _MessagePlayingAutoStopSynchronize__isset() : playing_template_(false), playing_group_(false) {}
  bool playing_template_;
  bool playing_group_;
} _MessagePlayingAutoStopSynchronize__isset;

class MessagePlayingAutoStopSynchronize {
 public:

  static const char* ascii_fingerprint; // = "BFE20425629D93BB485E108BC04B77E7";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0xE2,0x04,0x25,0x62,0x9D,0x93,0xBB,0x48,0x5E,0x10,0x8B,0xC0,0x4B,0x77,0xE7};

  MessagePlayingAutoStopSynchronize() : finish_(0), playing_template_(0), playing_group_(0) {
  }

  virtual ~MessagePlayingAutoStopSynchronize() throw() {}

  bool finish_;
  int32_t playing_template_;
  int32_t playing_group_;

  _MessagePlayingAutoStopSynchronize__isset __isset;

  void __set_finish_(const bool val) {
    finish_ = val;
  }

  void __set_playing_template_(const int32_t val) {
    playing_template_ = val;
    __isset.playing_template_ = true;
  }

  void __set_playing_group_(const int32_t val) {
    playing_group_ = val;
    __isset.playing_group_ = true;
  }

  bool operator == (const MessagePlayingAutoStopSynchronize & rhs) const
  {
    if (!(finish_ == rhs.finish_))
      return false;
    if (__isset.playing_template_ != rhs.__isset.playing_template_)
      return false;
    else if (__isset.playing_template_ && !(playing_template_ == rhs.playing_template_))
      return false;
    if (__isset.playing_group_ != rhs.__isset.playing_group_)
      return false;
    else if (__isset.playing_group_ && !(playing_group_ == rhs.playing_group_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingAutoStopSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingAutoStopSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingAutoStopSynchronize &a, MessagePlayingAutoStopSynchronize &b);

typedef struct _MessagePlayingAutoFinishRequest__isset {
  _MessagePlayingAutoFinishRequest__isset() : playing_template_(false), playing_group_(false) {}
  bool playing_template_;
  bool playing_group_;
} _MessagePlayingAutoFinishRequest__isset;

class MessagePlayingAutoFinishRequest {
 public:

  static const char* ascii_fingerprint; // = "C1241AF5AA92C586B664FD41DC97C576";
  static const uint8_t binary_fingerprint[16]; // = {0xC1,0x24,0x1A,0xF5,0xAA,0x92,0xC5,0x86,0xB6,0x64,0xFD,0x41,0xDC,0x97,0xC5,0x76};

  MessagePlayingAutoFinishRequest() : playing_template_(0), playing_group_(0) {
  }

  virtual ~MessagePlayingAutoFinishRequest() throw() {}

  int32_t playing_template_;
  int32_t playing_group_;

  _MessagePlayingAutoFinishRequest__isset __isset;

  void __set_playing_template_(const int32_t val) {
    playing_template_ = val;
    __isset.playing_template_ = true;
  }

  void __set_playing_group_(const int32_t val) {
    playing_group_ = val;
    __isset.playing_group_ = true;
  }

  bool operator == (const MessagePlayingAutoFinishRequest & rhs) const
  {
    if (__isset.playing_template_ != rhs.__isset.playing_template_)
      return false;
    else if (__isset.playing_template_ && !(playing_template_ == rhs.playing_template_))
      return false;
    if (__isset.playing_group_ != rhs.__isset.playing_group_)
      return false;
    else if (__isset.playing_group_ && !(playing_group_ == rhs.playing_group_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingAutoFinishRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingAutoFinishRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingAutoFinishRequest &a, MessagePlayingAutoFinishRequest &b);

typedef struct _MessagePlayingAutoFinishResponse__isset {
  _MessagePlayingAutoFinishResponse__isset() : playing_template_(false), playing_group_(false) {}
  bool playing_template_;
  bool playing_group_;
} _MessagePlayingAutoFinishResponse__isset;

class MessagePlayingAutoFinishResponse {
 public:

  static const char* ascii_fingerprint; // = "BFE20425629D93BB485E108BC04B77E7";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0xE2,0x04,0x25,0x62,0x9D,0x93,0xBB,0x48,0x5E,0x10,0x8B,0xC0,0x4B,0x77,0xE7};

  MessagePlayingAutoFinishResponse() : result_(0), playing_template_(0), playing_group_(0) {
  }

  virtual ~MessagePlayingAutoFinishResponse() throw() {}

  bool result_;
  int32_t playing_template_;
  int32_t playing_group_;

  _MessagePlayingAutoFinishResponse__isset __isset;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_playing_template_(const int32_t val) {
    playing_template_ = val;
    __isset.playing_template_ = true;
  }

  void __set_playing_group_(const int32_t val) {
    playing_group_ = val;
    __isset.playing_group_ = true;
  }

  bool operator == (const MessagePlayingAutoFinishResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.playing_template_ != rhs.__isset.playing_template_)
      return false;
    else if (__isset.playing_template_ && !(playing_template_ == rhs.playing_template_))
      return false;
    if (__isset.playing_group_ != rhs.__isset.playing_group_)
      return false;
    else if (__isset.playing_group_ && !(playing_group_ == rhs.playing_group_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingAutoFinishResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingAutoFinishResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingAutoFinishResponse &a, MessagePlayingAutoFinishResponse &b);


class MessagePlayingPaidAwardRequest {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MessagePlayingPaidAwardRequest() : playing_template_(0) {
  }

  virtual ~MessagePlayingPaidAwardRequest() throw() {}

  int32_t playing_template_;

  void __set_playing_template_(const int32_t val) {
    playing_template_ = val;
  }

  bool operator == (const MessagePlayingPaidAwardRequest & rhs) const
  {
    if (!(playing_template_ == rhs.playing_template_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingPaidAwardRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingPaidAwardRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingPaidAwardRequest &a, MessagePlayingPaidAwardRequest &b);


class MessagePlayingTeamListRequest {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MessagePlayingTeamListRequest() : playing_template_(0) {
  }

  virtual ~MessagePlayingTeamListRequest() throw() {}

  int32_t playing_template_;

  void __set_playing_template_(const int32_t val) {
    playing_template_ = val;
  }

  bool operator == (const MessagePlayingTeamListRequest & rhs) const
  {
    if (!(playing_template_ == rhs.playing_template_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingTeamListRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingTeamListRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingTeamListRequest &a, MessagePlayingTeamListRequest &b);


class MessagePlayingTeamListResponse {
 public:

  static const char* ascii_fingerprint; // = "53D1A426235A4CFE8B1ACF5BA5BF8772";
  static const uint8_t binary_fingerprint[16]; // = {0x53,0xD1,0xA4,0x26,0x23,0x5A,0x4C,0xFE,0x8B,0x1A,0xCF,0x5B,0xA5,0xBF,0x87,0x72};

  MessagePlayingTeamListResponse() : playing_template_(0) {
  }

  virtual ~MessagePlayingTeamListResponse() throw() {}

  int32_t playing_template_;
  std::vector< ::entity::PlayingTeamField>  teams_;

  void __set_playing_template_(const int32_t val) {
    playing_template_ = val;
  }

  void __set_teams_(const std::vector< ::entity::PlayingTeamField> & val) {
    teams_ = val;
  }

  bool operator == (const MessagePlayingTeamListResponse & rhs) const
  {
    if (!(playing_template_ == rhs.playing_template_))
      return false;
    if (!(teams_ == rhs.teams_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingTeamListResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingTeamListResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingTeamListResponse &a, MessagePlayingTeamListResponse &b);


class MessagePlayingTeamCreateRequest {
 public:

  static const char* ascii_fingerprint; // = "E0991C843E3F9D01A30FF59D9FBC2CAF";
  static const uint8_t binary_fingerprint[16]; // = {0xE0,0x99,0x1C,0x84,0x3E,0x3F,0x9D,0x01,0xA3,0x0F,0xF5,0x9D,0x9F,0xBC,0x2C,0xAF};

  MessagePlayingTeamCreateRequest() : playing_template_(0), min_fight_score_(0), auto_open_(0) {
  }

  virtual ~MessagePlayingTeamCreateRequest() throw() {}

  int32_t playing_template_;
  int32_t min_fight_score_;
  bool auto_open_;

  void __set_playing_template_(const int32_t val) {
    playing_template_ = val;
  }

  void __set_min_fight_score_(const int32_t val) {
    min_fight_score_ = val;
  }

  void __set_auto_open_(const bool val) {
    auto_open_ = val;
  }

  bool operator == (const MessagePlayingTeamCreateRequest & rhs) const
  {
    if (!(playing_template_ == rhs.playing_template_))
      return false;
    if (!(min_fight_score_ == rhs.min_fight_score_))
      return false;
    if (!(auto_open_ == rhs.auto_open_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingTeamCreateRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingTeamCreateRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingTeamCreateRequest &a, MessagePlayingTeamCreateRequest &b);


class MessagePlayingTeamCreateResponse {
 public:

  static const char* ascii_fingerprint; // = "88440F45A63E63607868B983E4E50558";
  static const uint8_t binary_fingerprint[16]; // = {0x88,0x44,0x0F,0x45,0xA6,0x3E,0x63,0x60,0x78,0x68,0xB9,0x83,0xE4,0xE5,0x05,0x58};

  MessagePlayingTeamCreateResponse() : result_(0), playing_template_(0) {
  }

  virtual ~MessagePlayingTeamCreateResponse() throw() {}

  bool result_;
  int32_t playing_template_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_playing_template_(const int32_t val) {
    playing_template_ = val;
  }

  bool operator == (const MessagePlayingTeamCreateResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (!(playing_template_ == rhs.playing_template_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingTeamCreateResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingTeamCreateResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingTeamCreateResponse &a, MessagePlayingTeamCreateResponse &b);

typedef struct _MessagePlayingTeamSynchronize__isset {
  _MessagePlayingTeamSynchronize__isset() : name_(false), status_(false), capacity_(false), min_fight_score_(false), auto_open_(false), members_(false) {}
  bool name_;
  bool status_;
  bool capacity_;
  bool min_fight_score_;
  bool auto_open_;
  bool members_;
} _MessagePlayingTeamSynchronize__isset;

class MessagePlayingTeamSynchronize {
 public:

  static const char* ascii_fingerprint; // = "B996D2D0AE88C5A9453F9675299841E9";
  static const uint8_t binary_fingerprint[16]; // = {0xB9,0x96,0xD2,0xD0,0xAE,0x88,0xC5,0xA9,0x45,0x3F,0x96,0x75,0x29,0x98,0x41,0xE9};

  MessagePlayingTeamSynchronize() : id_(), name_(), status_(( ::entity::PlayingTeamStatus::type)0), capacity_(0), min_fight_score_(0), auto_open_(0) {
  }

  virtual ~MessagePlayingTeamSynchronize() throw() {}

  std::string id_;
  std::string name_;
   ::entity::PlayingTeamStatus::type status_;
  int32_t capacity_;
  int32_t min_fight_score_;
  bool auto_open_;
  std::vector< ::entity::PlayingTeamMemberField>  members_;

  _MessagePlayingTeamSynchronize__isset __isset;

  void __set_id_(const std::string& val) {
    id_ = val;
  }

  void __set_name_(const std::string& val) {
    name_ = val;
    __isset.name_ = true;
  }

  void __set_status_(const  ::entity::PlayingTeamStatus::type val) {
    status_ = val;
    __isset.status_ = true;
  }

  void __set_capacity_(const int32_t val) {
    capacity_ = val;
    __isset.capacity_ = true;
  }

  void __set_min_fight_score_(const int32_t val) {
    min_fight_score_ = val;
    __isset.min_fight_score_ = true;
  }

  void __set_auto_open_(const bool val) {
    auto_open_ = val;
    __isset.auto_open_ = true;
  }

  void __set_members_(const std::vector< ::entity::PlayingTeamMemberField> & val) {
    members_ = val;
    __isset.members_ = true;
  }

  bool operator == (const MessagePlayingTeamSynchronize & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (__isset.name_ != rhs.__isset.name_)
      return false;
    else if (__isset.name_ && !(name_ == rhs.name_))
      return false;
    if (__isset.status_ != rhs.__isset.status_)
      return false;
    else if (__isset.status_ && !(status_ == rhs.status_))
      return false;
    if (__isset.capacity_ != rhs.__isset.capacity_)
      return false;
    else if (__isset.capacity_ && !(capacity_ == rhs.capacity_))
      return false;
    if (__isset.min_fight_score_ != rhs.__isset.min_fight_score_)
      return false;
    else if (__isset.min_fight_score_ && !(min_fight_score_ == rhs.min_fight_score_))
      return false;
    if (__isset.auto_open_ != rhs.__isset.auto_open_)
      return false;
    else if (__isset.auto_open_ && !(auto_open_ == rhs.auto_open_))
      return false;
    if (__isset.members_ != rhs.__isset.members_)
      return false;
    else if (__isset.members_ && !(members_ == rhs.members_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingTeamSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingTeamSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingTeamSynchronize &a, MessagePlayingTeamSynchronize &b);

typedef struct _MessagePlayingTeamMemberSynchronize__isset {
  _MessagePlayingTeamMemberSynchronize__isset() : name_(false), fight_score_(false), level_(false), ready_(false) {}
  bool name_;
  bool fight_score_;
  bool level_;
  bool ready_;
} _MessagePlayingTeamMemberSynchronize__isset;

class MessagePlayingTeamMemberSynchronize {
 public:

  static const char* ascii_fingerprint; // = "35022F71B663CBAC41410C71848B3D74";
  static const uint8_t binary_fingerprint[16]; // = {0x35,0x02,0x2F,0x71,0xB6,0x63,0xCB,0xAC,0x41,0x41,0x0C,0x71,0x84,0x8B,0x3D,0x74};

  MessagePlayingTeamMemberSynchronize() : actor_(), name_(), fight_score_(0), level_(0), ready_(0) {
  }

  virtual ~MessagePlayingTeamMemberSynchronize() throw() {}

  std::string actor_;
  std::string name_;
  int32_t fight_score_;
  int32_t level_;
  bool ready_;

  _MessagePlayingTeamMemberSynchronize__isset __isset;

  void __set_actor_(const std::string& val) {
    actor_ = val;
  }

  void __set_name_(const std::string& val) {
    name_ = val;
    __isset.name_ = true;
  }

  void __set_fight_score_(const int32_t val) {
    fight_score_ = val;
    __isset.fight_score_ = true;
  }

  void __set_level_(const int32_t val) {
    level_ = val;
    __isset.level_ = true;
  }

  void __set_ready_(const bool val) {
    ready_ = val;
    __isset.ready_ = true;
  }

  bool operator == (const MessagePlayingTeamMemberSynchronize & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (__isset.name_ != rhs.__isset.name_)
      return false;
    else if (__isset.name_ && !(name_ == rhs.name_))
      return false;
    if (__isset.fight_score_ != rhs.__isset.fight_score_)
      return false;
    else if (__isset.fight_score_ && !(fight_score_ == rhs.fight_score_))
      return false;
    if (__isset.level_ != rhs.__isset.level_)
      return false;
    else if (__isset.level_ && !(level_ == rhs.level_))
      return false;
    if (__isset.ready_ != rhs.__isset.ready_)
      return false;
    else if (__isset.ready_ && !(ready_ == rhs.ready_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingTeamMemberSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingTeamMemberSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingTeamMemberSynchronize &a, MessagePlayingTeamMemberSynchronize &b);


class MessagePlayingTeamJoinRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MessagePlayingTeamJoinRequest() : team_id_() {
  }

  virtual ~MessagePlayingTeamJoinRequest() throw() {}

  std::string team_id_;

  void __set_team_id_(const std::string& val) {
    team_id_ = val;
  }

  bool operator == (const MessagePlayingTeamJoinRequest & rhs) const
  {
    if (!(team_id_ == rhs.team_id_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingTeamJoinRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingTeamJoinRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingTeamJoinRequest &a, MessagePlayingTeamJoinRequest &b);


class MessagePlayingTeamJoinResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessagePlayingTeamJoinResponse() : result_(0) {
  }

  virtual ~MessagePlayingTeamJoinResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessagePlayingTeamJoinResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingTeamJoinResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingTeamJoinResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingTeamJoinResponse &a, MessagePlayingTeamJoinResponse &b);


class MessagePlayingTeamJoinSynchronize {
 public:

  static const char* ascii_fingerprint; // = "0FAA12BA4C0DEB2499895230F6057237";
  static const uint8_t binary_fingerprint[16]; // = {0x0F,0xAA,0x12,0xBA,0x4C,0x0D,0xEB,0x24,0x99,0x89,0x52,0x30,0xF6,0x05,0x72,0x37};

  MessagePlayingTeamJoinSynchronize() : actor_(), name_(), fight_score_(0), level_(0), ready_(0) {
  }

  virtual ~MessagePlayingTeamJoinSynchronize() throw() {}

  std::string actor_;
  std::string name_;
  int32_t fight_score_;
  int32_t level_;
  bool ready_;

  void __set_actor_(const std::string& val) {
    actor_ = val;
  }

  void __set_name_(const std::string& val) {
    name_ = val;
  }

  void __set_fight_score_(const int32_t val) {
    fight_score_ = val;
  }

  void __set_level_(const int32_t val) {
    level_ = val;
  }

  void __set_ready_(const bool val) {
    ready_ = val;
  }

  bool operator == (const MessagePlayingTeamJoinSynchronize & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(name_ == rhs.name_))
      return false;
    if (!(fight_score_ == rhs.fight_score_))
      return false;
    if (!(level_ == rhs.level_))
      return false;
    if (!(ready_ == rhs.ready_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingTeamJoinSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingTeamJoinSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingTeamJoinSynchronize &a, MessagePlayingTeamJoinSynchronize &b);


class MessagePlayingTeamQuitRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessagePlayingTeamQuitRequest() {
  }

  virtual ~MessagePlayingTeamQuitRequest() throw() {}


  bool operator == (const MessagePlayingTeamQuitRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessagePlayingTeamQuitRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingTeamQuitRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingTeamQuitRequest &a, MessagePlayingTeamQuitRequest &b);


class MessagePlayingTeamQuitResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessagePlayingTeamQuitResponse() : result_(0) {
  }

  virtual ~MessagePlayingTeamQuitResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessagePlayingTeamQuitResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingTeamQuitResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingTeamQuitResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingTeamQuitResponse &a, MessagePlayingTeamQuitResponse &b);


class MessagePlayingTeamQuitSynchronize {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MessagePlayingTeamQuitSynchronize() : actor_() {
  }

  virtual ~MessagePlayingTeamQuitSynchronize() throw() {}

  std::string actor_;

  void __set_actor_(const std::string& val) {
    actor_ = val;
  }

  bool operator == (const MessagePlayingTeamQuitSynchronize & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingTeamQuitSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingTeamQuitSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingTeamQuitSynchronize &a, MessagePlayingTeamQuitSynchronize &b);


class MessagePlayingTeamReadyRequest {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessagePlayingTeamReadyRequest() : ready_(0) {
  }

  virtual ~MessagePlayingTeamReadyRequest() throw() {}

  bool ready_;

  void __set_ready_(const bool val) {
    ready_ = val;
  }

  bool operator == (const MessagePlayingTeamReadyRequest & rhs) const
  {
    if (!(ready_ == rhs.ready_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingTeamReadyRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingTeamReadyRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingTeamReadyRequest &a, MessagePlayingTeamReadyRequest &b);


class MessagePlayingTeamReadyResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessagePlayingTeamReadyResponse() : result_(0) {
  }

  virtual ~MessagePlayingTeamReadyResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessagePlayingTeamReadyResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingTeamReadyResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingTeamReadyResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingTeamReadyResponse &a, MessagePlayingTeamReadyResponse &b);


class MessagePlayingTeamKickoutRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MessagePlayingTeamKickoutRequest() : actor_() {
  }

  virtual ~MessagePlayingTeamKickoutRequest() throw() {}

  std::string actor_;

  void __set_actor_(const std::string& val) {
    actor_ = val;
  }

  bool operator == (const MessagePlayingTeamKickoutRequest & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingTeamKickoutRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingTeamKickoutRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingTeamKickoutRequest &a, MessagePlayingTeamKickoutRequest &b);


class MessagePlayingTeamKickoutResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessagePlayingTeamKickoutResponse() : result_(0) {
  }

  virtual ~MessagePlayingTeamKickoutResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessagePlayingTeamKickoutResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingTeamKickoutResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingTeamKickoutResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingTeamKickoutResponse &a, MessagePlayingTeamKickoutResponse &b);


class MessagePlayingTeamCapacitySetRequest {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MessagePlayingTeamCapacitySetRequest() : capacity_(0) {
  }

  virtual ~MessagePlayingTeamCapacitySetRequest() throw() {}

  int32_t capacity_;

  void __set_capacity_(const int32_t val) {
    capacity_ = val;
  }

  bool operator == (const MessagePlayingTeamCapacitySetRequest & rhs) const
  {
    if (!(capacity_ == rhs.capacity_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingTeamCapacitySetRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingTeamCapacitySetRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingTeamCapacitySetRequest &a, MessagePlayingTeamCapacitySetRequest &b);


class MessagePlayingTeamCapacitySetResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessagePlayingTeamCapacitySetResponse() : result_(0) {
  }

  virtual ~MessagePlayingTeamCapacitySetResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessagePlayingTeamCapacitySetResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingTeamCapacitySetResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingTeamCapacitySetResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingTeamCapacitySetResponse &a, MessagePlayingTeamCapacitySetResponse &b);


class MessagePlayingPaidAwardResponse {
 public:

  static const char* ascii_fingerprint; // = "88440F45A63E63607868B983E4E50558";
  static const uint8_t binary_fingerprint[16]; // = {0x88,0x44,0x0F,0x45,0xA6,0x3E,0x63,0x60,0x78,0x68,0xB9,0x83,0xE4,0xE5,0x05,0x58};

  MessagePlayingPaidAwardResponse() : result_(0), playing_template_(0) {
  }

  virtual ~MessagePlayingPaidAwardResponse() throw() {}

  bool result_;
  int32_t playing_template_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_playing_template_(const int32_t val) {
    playing_template_ = val;
  }

  bool operator == (const MessagePlayingPaidAwardResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (!(playing_template_ == rhs.playing_template_))
      return false;
    return true;
  }
  bool operator != (const MessagePlayingPaidAwardResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessagePlayingPaidAwardResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessagePlayingPaidAwardResponse &a, MessagePlayingPaidAwardResponse &b);


class MessageMazeInitialize {
 public:

  static const char* ascii_fingerprint; // = "960CE69B823934FEB2E396568DFF599D";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0x0C,0xE6,0x9B,0x82,0x39,0x34,0xFE,0xB2,0xE3,0x96,0x56,0x8D,0xFF,0x59,0x9D};

  MessageMazeInitialize() : action_point_(0), action_point_recover_cooling_(0), floor_(0), x_(0), y_(0), gift_num_(0) {
  }

  virtual ~MessageMazeInitialize() throw() {}

  int32_t action_point_;
  int32_t action_point_recover_cooling_;
  int32_t floor_;
  int32_t x_;
  int32_t y_;
  std::vector<int32_t>  grids_;
  int32_t gift_num_;

  void __set_action_point_(const int32_t val) {
    action_point_ = val;
  }

  void __set_action_point_recover_cooling_(const int32_t val) {
    action_point_recover_cooling_ = val;
  }

  void __set_floor_(const int32_t val) {
    floor_ = val;
  }

  void __set_x_(const int32_t val) {
    x_ = val;
  }

  void __set_y_(const int32_t val) {
    y_ = val;
  }

  void __set_grids_(const std::vector<int32_t> & val) {
    grids_ = val;
  }

  void __set_gift_num_(const int32_t val) {
    gift_num_ = val;
  }

  bool operator == (const MessageMazeInitialize & rhs) const
  {
    if (!(action_point_ == rhs.action_point_))
      return false;
    if (!(action_point_recover_cooling_ == rhs.action_point_recover_cooling_))
      return false;
    if (!(floor_ == rhs.floor_))
      return false;
    if (!(x_ == rhs.x_))
      return false;
    if (!(y_ == rhs.y_))
      return false;
    if (!(grids_ == rhs.grids_))
      return false;
    if (!(gift_num_ == rhs.gift_num_))
      return false;
    return true;
  }
  bool operator != (const MessageMazeInitialize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageMazeInitialize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageMazeInitialize &a, MessageMazeInitialize &b);

typedef struct _MessageMazeSynchronize__isset {
  _MessageMazeSynchronize__isset() : action_point_(false), action_point_recover_cooling_(false), x_(false), y_(false), gift_num_(false) {}
  bool action_point_;
  bool action_point_recover_cooling_;
  bool x_;
  bool y_;
  bool gift_num_;
} _MessageMazeSynchronize__isset;

class MessageMazeSynchronize {
 public:

  static const char* ascii_fingerprint; // = "413DD9025F26475272C9206314AF8A22";
  static const uint8_t binary_fingerprint[16]; // = {0x41,0x3D,0xD9,0x02,0x5F,0x26,0x47,0x52,0x72,0xC9,0x20,0x63,0x14,0xAF,0x8A,0x22};

  MessageMazeSynchronize() : action_point_(0), action_point_recover_cooling_(0), x_(0), y_(0), gift_num_(0) {
  }

  virtual ~MessageMazeSynchronize() throw() {}

  int32_t action_point_;
  int32_t action_point_recover_cooling_;
  int32_t x_;
  int32_t y_;
  int32_t gift_num_;

  _MessageMazeSynchronize__isset __isset;

  void __set_action_point_(const int32_t val) {
    action_point_ = val;
    __isset.action_point_ = true;
  }

  void __set_action_point_recover_cooling_(const int32_t val) {
    action_point_recover_cooling_ = val;
    __isset.action_point_recover_cooling_ = true;
  }

  void __set_x_(const int32_t val) {
    x_ = val;
    __isset.x_ = true;
  }

  void __set_y_(const int32_t val) {
    y_ = val;
    __isset.y_ = true;
  }

  void __set_gift_num_(const int32_t val) {
    gift_num_ = val;
    __isset.gift_num_ = true;
  }

  bool operator == (const MessageMazeSynchronize & rhs) const
  {
    if (__isset.action_point_ != rhs.__isset.action_point_)
      return false;
    else if (__isset.action_point_ && !(action_point_ == rhs.action_point_))
      return false;
    if (__isset.action_point_recover_cooling_ != rhs.__isset.action_point_recover_cooling_)
      return false;
    else if (__isset.action_point_recover_cooling_ && !(action_point_recover_cooling_ == rhs.action_point_recover_cooling_))
      return false;
    if (__isset.x_ != rhs.__isset.x_)
      return false;
    else if (__isset.x_ && !(x_ == rhs.x_))
      return false;
    if (__isset.y_ != rhs.__isset.y_)
      return false;
    else if (__isset.y_ && !(y_ == rhs.y_))
      return false;
    if (__isset.gift_num_ != rhs.__isset.gift_num_)
      return false;
    else if (__isset.gift_num_ && !(gift_num_ == rhs.gift_num_))
      return false;
    return true;
  }
  bool operator != (const MessageMazeSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageMazeSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageMazeSynchronize &a, MessageMazeSynchronize &b);


class MessageMazeEnterNextFloorNotify {
 public:

  static const char* ascii_fingerprint; // = "ACBC8ECF4940BD768FA35CCD08154770";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xBC,0x8E,0xCF,0x49,0x40,0xBD,0x76,0x8F,0xA3,0x5C,0xCD,0x08,0x15,0x47,0x70};

  MessageMazeEnterNextFloorNotify() : floor_(0) {
  }

  virtual ~MessageMazeEnterNextFloorNotify() throw() {}

  int32_t floor_;
  std::vector<int32_t>  grids_;

  void __set_floor_(const int32_t val) {
    floor_ = val;
  }

  void __set_grids_(const std::vector<int32_t> & val) {
    grids_ = val;
  }

  bool operator == (const MessageMazeEnterNextFloorNotify & rhs) const
  {
    if (!(floor_ == rhs.floor_))
      return false;
    if (!(grids_ == rhs.grids_))
      return false;
    return true;
  }
  bool operator != (const MessageMazeEnterNextFloorNotify &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageMazeEnterNextFloorNotify & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageMazeEnterNextFloorNotify &a, MessageMazeEnterNextFloorNotify &b);


class MessageMazeMoveRequest {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

  MessageMazeMoveRequest() : dir_(( ::entity::MazeDirectionType::type)0) {
  }

  virtual ~MessageMazeMoveRequest() throw() {}

   ::entity::MazeDirectionType::type dir_;

  void __set_dir_(const  ::entity::MazeDirectionType::type val) {
    dir_ = val;
  }

  bool operator == (const MessageMazeMoveRequest & rhs) const
  {
    if (!(dir_ == rhs.dir_))
      return false;
    return true;
  }
  bool operator != (const MessageMazeMoveRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageMazeMoveRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageMazeMoveRequest &a, MessageMazeMoveRequest &b);

typedef struct _MessageMazeMoveResponse__isset {
  _MessageMazeMoveResponse__isset() : grid_id_(false) {}
  bool grid_id_;
} _MessageMazeMoveResponse__isset;

class MessageMazeMoveResponse {
 public:

  static const char* ascii_fingerprint; // = "3409A6BAF48299E7727EECFEBEC3BDA9";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0x09,0xA6,0xBA,0xF4,0x82,0x99,0xE7,0x72,0x7E,0xEC,0xFE,0xBE,0xC3,0xBD,0xA9};

  MessageMazeMoveResponse() : result_(0), grid_id_(0) {
  }

  virtual ~MessageMazeMoveResponse() throw() {}

  bool result_;
  int32_t grid_id_;

  _MessageMazeMoveResponse__isset __isset;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_grid_id_(const int32_t val) {
    grid_id_ = val;
    __isset.grid_id_ = true;
  }

  bool operator == (const MessageMazeMoveResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.grid_id_ != rhs.__isset.grid_id_)
      return false;
    else if (__isset.grid_id_ && !(grid_id_ == rhs.grid_id_))
      return false;
    return true;
  }
  bool operator != (const MessageMazeMoveResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageMazeMoveResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageMazeMoveResponse &a, MessageMazeMoveResponse &b);


class MessageMazeConfirmMoveRequest {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

  MessageMazeConfirmMoveRequest() : dir_(( ::entity::MazeDirectionType::type)0) {
  }

  virtual ~MessageMazeConfirmMoveRequest() throw() {}

   ::entity::MazeDirectionType::type dir_;

  void __set_dir_(const  ::entity::MazeDirectionType::type val) {
    dir_ = val;
  }

  bool operator == (const MessageMazeConfirmMoveRequest & rhs) const
  {
    if (!(dir_ == rhs.dir_))
      return false;
    return true;
  }
  bool operator != (const MessageMazeConfirmMoveRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageMazeConfirmMoveRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageMazeConfirmMoveRequest &a, MessageMazeConfirmMoveRequest &b);

typedef struct _MessageMazeConfirmMoveResponse__isset {
  _MessageMazeConfirmMoveResponse__isset() : grid_id_(false), bonus_id_(false), number_(false) {}
  bool grid_id_;
  bool bonus_id_;
  bool number_;
} _MessageMazeConfirmMoveResponse__isset;

class MessageMazeConfirmMoveResponse {
 public:

  static const char* ascii_fingerprint; // = "0221E6F365401E5EF98D7210120C5D0A";
  static const uint8_t binary_fingerprint[16]; // = {0x02,0x21,0xE6,0xF3,0x65,0x40,0x1E,0x5E,0xF9,0x8D,0x72,0x10,0x12,0x0C,0x5D,0x0A};

  MessageMazeConfirmMoveResponse() : result_(0), grid_id_(0), bonus_id_(0), number_(0) {
  }

  virtual ~MessageMazeConfirmMoveResponse() throw() {}

  bool result_;
  int32_t grid_id_;
  int32_t bonus_id_;
  int32_t number_;

  _MessageMazeConfirmMoveResponse__isset __isset;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_grid_id_(const int32_t val) {
    grid_id_ = val;
    __isset.grid_id_ = true;
  }

  void __set_bonus_id_(const int32_t val) {
    bonus_id_ = val;
    __isset.bonus_id_ = true;
  }

  void __set_number_(const int32_t val) {
    number_ = val;
    __isset.number_ = true;
  }

  bool operator == (const MessageMazeConfirmMoveResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.grid_id_ != rhs.__isset.grid_id_)
      return false;
    else if (__isset.grid_id_ && !(grid_id_ == rhs.grid_id_))
      return false;
    if (__isset.bonus_id_ != rhs.__isset.bonus_id_)
      return false;
    else if (__isset.bonus_id_ && !(bonus_id_ == rhs.bonus_id_))
      return false;
    if (__isset.number_ != rhs.__isset.number_)
      return false;
    else if (__isset.number_ && !(number_ == rhs.number_))
      return false;
    return true;
  }
  bool operator != (const MessageMazeConfirmMoveResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageMazeConfirmMoveResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageMazeConfirmMoveResponse &a, MessageMazeConfirmMoveResponse &b);


class MessageMazeAwardRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageMazeAwardRequest() {
  }

  virtual ~MessageMazeAwardRequest() throw() {}


  bool operator == (const MessageMazeAwardRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageMazeAwardRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageMazeAwardRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageMazeAwardRequest &a, MessageMazeAwardRequest &b);


class MessageMazeAwardResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageMazeAwardResponse() : result_(0) {
  }

  virtual ~MessageMazeAwardResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageMazeAwardResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageMazeAwardResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageMazeAwardResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageMazeAwardResponse &a, MessageMazeAwardResponse &b);

}} // namespace

#endif
