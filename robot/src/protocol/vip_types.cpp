/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "vip_types.h"

#include <algorithm>

namespace entity {

int _kVipTypeValues[] = {
  VipType::INVALID,
  VipType::VIP_1,
  VipType::VIP_2,
  VipType::VIP_3,
  VipType::MAX
};
const char* _kVipTypeNames[] = {
  "INVALID",
  "VIP_1",
  "VIP_2",
  "VIP_3",
  "MAX"
};
const std::map<int, const char*> _VipType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kVipTypeValues, _kVipTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kVipPrivilegeTypeValues[] = {
  VipPrivilegeType::MIN,
  VipPrivilegeType::SOCIAL_HOMELAND_ODER,
  VipPrivilegeType::SOCIAL_HOMELAND_JUMP_FIGHT,
  VipPrivilegeType::SOCIAL_HOMELAND_HELP_WATERING,
  VipPrivilegeType::SOCIAL_HOMELAND_FIGHT_NUM,
  VipPrivilegeType::SOCIAL_HOMELAND_IMPRESS,
  VipPrivilegeType::CHECKIN_AWARDS,
  VipPrivilegeType::ATTR_ATTRIBUTE_UP,
  VipPrivilegeType::SCENE_KILL_NPC_UP_EXP,
  VipPrivilegeType::SCENE_MEDITATE_AWARD_UP,
  VipPrivilegeType::SCENE_WORLD_JUMP_NUM,
  VipPrivilegeType::CHECKIN_UP_NUM,
  VipPrivilegeType::TRANSPORT_NUM,
  VipPrivilegeType::DAILY_GIFT,
  VipPrivilegeType::TASK_FREE_FLY,
  VipPrivilegeType::DAILY_HONOUR,
  VipPrivilegeType::MAZE_ACTION_POINT,
  VipPrivilegeType::PLAYING_PERIOD_COUNT,
  VipPrivilegeType::PLAYING_GROUP_AUTO,
  VipPrivilegeType::PLAYING_PERIOD_PAID_AWARD_COUNT,
  VipPrivilegeType::TRANSPORT_TASK_COUNT,
  VipPrivilegeType::TRANSPORT_TASK_ROB_COUNT,
  VipPrivilegeType::TRANSPORT_TASK_REFRESH_COUNT,
  VipPrivilegeType::MAX
};
const char* _kVipPrivilegeTypeNames[] = {
  "MIN",
  "SOCIAL_HOMELAND_ODER",
  "SOCIAL_HOMELAND_JUMP_FIGHT",
  "SOCIAL_HOMELAND_HELP_WATERING",
  "SOCIAL_HOMELAND_FIGHT_NUM",
  "SOCIAL_HOMELAND_IMPRESS",
  "CHECKIN_AWARDS",
  "ATTR_ATTRIBUTE_UP",
  "SCENE_KILL_NPC_UP_EXP",
  "SCENE_MEDITATE_AWARD_UP",
  "SCENE_WORLD_JUMP_NUM",
  "CHECKIN_UP_NUM",
  "TRANSPORT_NUM",
  "DAILY_GIFT",
  "TASK_FREE_FLY",
  "DAILY_HONOUR",
  "MAZE_ACTION_POINT",
  "PLAYING_PERIOD_COUNT",
  "PLAYING_GROUP_AUTO",
  "PLAYING_PERIOD_PAID_AWARD_COUNT",
  "TRANSPORT_TASK_COUNT",
  "TRANSPORT_TASK_ROB_COUNT",
  "TRANSPORT_TASK_REFRESH_COUNT",
  "MAX"
};
const std::map<int, const char*> _VipPrivilegeType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(24, _kVipPrivilegeTypeValues, _kVipPrivilegeTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kVipAdmitTypeValues[] = {
  VipAdmitType::NO_ADMIT,
  VipAdmitType::ADMIT
};
const char* _kVipAdmitTypeNames[] = {
  "NO_ADMIT",
  "ADMIT"
};
const std::map<int, const char*> _VipAdmitType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kVipAdmitTypeValues, _kVipAdmitTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

} // namespace
