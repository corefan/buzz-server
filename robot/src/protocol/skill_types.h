/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef skill_TYPES_H
#define skill_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace entity {

struct SkillHitType {
  enum type {
    COMMON = 0,
    CRIT = 1,
    DODGE = 2,
    IGNORE_DEF = 3,
    MAX = 4
  };
};

extern const std::map<int, const char*> _SkillHitType_VALUES_TO_NAMES;

struct SkillHurtType {
  enum type {
    MIN = 0,
    PHYSICS_ATTACK = 1,
    MAGIC_ATTACK = 2,
    REDUCE_HP = 3,
    REDUCE_MP = 4,
    PHYSICS_CURE = 5,
    MAGIC_CURE = 6,
    ADD_HP = 7,
    ADD_MP = 8,
    CLEAR_BUFF = 9,
    CLEAR_BUFF_GROUP = 10,
    MAX = 11
  };
};

extern const std::map<int, const char*> _SkillHurtType_VALUES_TO_NAMES;

struct BuffTargetType {
  enum type {
    SELF = 0,
    OTHER = 1
  };
};

extern const std::map<int, const char*> _BuffTargetType_VALUES_TO_NAMES;

struct SkillFormType {
  enum type {
    MIN = 0,
    COMMON = 1,
    TEMP = 2,
    MAX = 3
  };
};

extern const std::map<int, const char*> _SkillFormType_VALUES_TO_NAMES;

struct SkillVarFields {
  enum type {
    SKILL_BEGIN = 0,
    COOLING_ADD_VALUE = 0,
    DISTANCE_ADD_VALUE = 1,
    SING_TIME_ADD_VALUE = 2,
    AOE_MAX_NUM_ADD_VALUE = 3,
    AOE_RADIUS_ADD_VALUE = 4,
    HP_SPEND_ADD_VALUE = 5,
    HP_SPEND_ADD_PERCENT = 6,
    MP_SPEND_ADD_VALUE = 7,
    MP_SPEND_ADD_PERCENT = 8,
    HURT_ADD_VALUE = 9,
    HURT_ADD_PERCENT = 10,
    SKILL_END = 11
  };
};

extern const std::map<int, const char*> _SkillVarFields_VALUES_TO_NAMES;


class SkillVarField {
 public:

  static const char* ascii_fingerprint; // = "46A703A33337BED2F62F386FC66B2A5F";
  static const uint8_t binary_fingerprint[16]; // = {0x46,0xA7,0x03,0xA3,0x33,0x37,0xBE,0xD2,0xF6,0x2F,0x38,0x6F,0xC6,0x6B,0x2A,0x5F};

  SkillVarField() : type_((SkillVarFields::type)0), value_(0) {
  }

  virtual ~SkillVarField() throw() {}

  SkillVarFields::type type_;
  int32_t value_;

  void __set_type_(const SkillVarFields::type val) {
    type_ = val;
  }

  void __set_value_(const int32_t val) {
    value_ = val;
  }

  bool operator == (const SkillVarField & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(value_ == rhs.value_))
      return false;
    return true;
  }
  bool operator != (const SkillVarField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SkillVarField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SkillVarField &a, SkillVarField &b);

} // namespace

#endif
