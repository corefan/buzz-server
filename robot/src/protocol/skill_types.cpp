/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "skill_types.h"

#include <algorithm>

namespace entity {

int _kSkillHitTypeValues[] = {
  SkillHitType::COMMON,
  SkillHitType::CRIT,
  SkillHitType::DODGE,
  SkillHitType::IGNORE_DEF,
  SkillHitType::MAX
};
const char* _kSkillHitTypeNames[] = {
  "COMMON",
  "CRIT",
  "DODGE",
  "IGNORE_DEF",
  "MAX"
};
const std::map<int, const char*> _SkillHitType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kSkillHitTypeValues, _kSkillHitTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSkillHurtTypeValues[] = {
  SkillHurtType::MIN,
  SkillHurtType::PHYSICS_ATTACK,
  SkillHurtType::MAGIC_ATTACK,
  SkillHurtType::REDUCE_HP,
  SkillHurtType::REDUCE_MP,
  SkillHurtType::PHYSICS_CURE,
  SkillHurtType::MAGIC_CURE,
  SkillHurtType::ADD_HP,
  SkillHurtType::ADD_MP,
  SkillHurtType::CLEAR_BUFF,
  SkillHurtType::CLEAR_BUFF_GROUP,
  SkillHurtType::MAX
};
const char* _kSkillHurtTypeNames[] = {
  "MIN",
  "PHYSICS_ATTACK",
  "MAGIC_ATTACK",
  "REDUCE_HP",
  "REDUCE_MP",
  "PHYSICS_CURE",
  "MAGIC_CURE",
  "ADD_HP",
  "ADD_MP",
  "CLEAR_BUFF",
  "CLEAR_BUFF_GROUP",
  "MAX"
};
const std::map<int, const char*> _SkillHurtType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(12, _kSkillHurtTypeValues, _kSkillHurtTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kBuffTargetTypeValues[] = {
  BuffTargetType::SELF,
  BuffTargetType::OTHER
};
const char* _kBuffTargetTypeNames[] = {
  "SELF",
  "OTHER"
};
const std::map<int, const char*> _BuffTargetType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kBuffTargetTypeValues, _kBuffTargetTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSkillFormTypeValues[] = {
  SkillFormType::MIN,
  SkillFormType::COMMON,
  SkillFormType::TEMP,
  SkillFormType::MAX
};
const char* _kSkillFormTypeNames[] = {
  "MIN",
  "COMMON",
  "TEMP",
  "MAX"
};
const std::map<int, const char*> _SkillFormType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kSkillFormTypeValues, _kSkillFormTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSkillVarFieldsValues[] = {
  SkillVarFields::SKILL_BEGIN,
  SkillVarFields::COOLING_ADD_VALUE,
  SkillVarFields::DISTANCE_ADD_VALUE,
  SkillVarFields::SING_TIME_ADD_VALUE,
  SkillVarFields::AOE_MAX_NUM_ADD_VALUE,
  SkillVarFields::AOE_RADIUS_ADD_VALUE,
  SkillVarFields::HP_SPEND_ADD_VALUE,
  SkillVarFields::HP_SPEND_ADD_PERCENT,
  SkillVarFields::MP_SPEND_ADD_VALUE,
  SkillVarFields::MP_SPEND_ADD_PERCENT,
  SkillVarFields::HURT_ADD_VALUE,
  SkillVarFields::HURT_ADD_PERCENT,
  SkillVarFields::SKILL_END
};
const char* _kSkillVarFieldsNames[] = {
  "SKILL_BEGIN",
  "COOLING_ADD_VALUE",
  "DISTANCE_ADD_VALUE",
  "SING_TIME_ADD_VALUE",
  "AOE_MAX_NUM_ADD_VALUE",
  "AOE_RADIUS_ADD_VALUE",
  "HP_SPEND_ADD_VALUE",
  "HP_SPEND_ADD_PERCENT",
  "MP_SPEND_ADD_VALUE",
  "MP_SPEND_ADD_PERCENT",
  "HURT_ADD_VALUE",
  "HURT_ADD_PERCENT",
  "SKILL_END"
};
const std::map<int, const char*> _SkillVarFields_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(13, _kSkillVarFieldsValues, _kSkillVarFieldsNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* SkillVarField::ascii_fingerprint = "46A703A33337BED2F62F386FC66B2A5F";
const uint8_t SkillVarField::binary_fingerprint[16] = {0x46,0xA7,0x03,0xA3,0x33,0x37,0xBE,0xD2,0xF6,0x2F,0x38,0x6F,0xC6,0x6B,0x2A,0x5F};

uint32_t SkillVarField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_value_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type_ = (SkillVarFields::type)ecast0;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->value_);
          isset_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SkillVarField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SkillVarField");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SkillVarField &a, SkillVarField &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.value_, b.value_);
}

} // namespace
