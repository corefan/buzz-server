/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "gateway_skill_protocol_types.h"

#include <algorithm>

namespace gateway { namespace protocol {

int _kSkillOperateTypeValues[] = {
  SkillOperateType::USE,
  SkillOperateType::BOOT,
  SkillOperateType::LAUNCH,
  SkillOperateType::MAX
};
const char* _kSkillOperateTypeNames[] = {
  "USE",
  "BOOT",
  "LAUNCH",
  "MAX"
};
const std::map<int, const char*> _SkillOperateType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kSkillOperateTypeValues, _kSkillOperateTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* SkillContext::ascii_fingerprint = "B97534B7EBC38ED76D780E41DA48A6CF";
const uint8_t SkillContext::binary_fingerprint[16] = {0xB9,0x75,0x34,0xB7,0xEB,0xC3,0x8E,0xD7,0x6D,0x78,0x0E,0x41,0xDA,0x48,0xA6,0xCF};

uint32_t SkillContext::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->src_type_ = ( ::entity::EntityType::type)ecast0;
          this->__isset.src_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->src_id_);
          this->__isset.src_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->target_type_ = ( ::entity::EntityType::type)ecast1;
          this->__isset.target_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->target_id_);
          this->__isset.target_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->x_);
          this->__isset.x_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->y_);
          this->__isset.y_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->direction_);
          this->__isset.direction_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SkillContext::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SkillContext");

  if (this->__isset.src_type_) {
    xfer += oprot->writeFieldBegin("src_type_", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->src_type_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.src_id_) {
    xfer += oprot->writeFieldBegin("src_id_", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->src_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.target_type_) {
    xfer += oprot->writeFieldBegin("target_type_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->target_type_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.target_id_) {
    xfer += oprot->writeFieldBegin("target_id_", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->target_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.x_) {
    xfer += oprot->writeFieldBegin("x_", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->x_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.y_) {
    xfer += oprot->writeFieldBegin("y_", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->y_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.direction_) {
    xfer += oprot->writeFieldBegin("direction_", ::apache::thrift::protocol::T_I16, 7);
    xfer += oprot->writeI16(this->direction_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SkillContext &a, SkillContext &b) {
  using ::std::swap;
  swap(a.src_type_, b.src_type_);
  swap(a.src_id_, b.src_id_);
  swap(a.target_type_, b.target_type_);
  swap(a.target_id_, b.target_id_);
  swap(a.x_, b.x_);
  swap(a.y_, b.y_);
  swap(a.direction_, b.direction_);
  swap(a.__isset, b.__isset);
}

const char* MessageSkillOperate::ascii_fingerprint = "492BF2005D2FAA9FAB32DF0204AB358D";
const uint8_t MessageSkillOperate::binary_fingerprint[16] = {0x49,0x2B,0xF2,0x00,0x5D,0x2F,0xAA,0x9F,0xAB,0x32,0xDF,0x02,0x04,0xAB,0x35,0x8D};

uint32_t MessageSkillOperate::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_skill_id_ = false;
  bool isset_type_ = false;
  bool isset_context_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->skill_id_);
          isset_skill_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->type_ = (SkillOperateType::type)ecast2;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->context_.read(iprot);
          isset_context_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_skill_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_context_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSkillOperate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSkillOperate");

  xfer += oprot->writeFieldBegin("skill_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->skill_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("context_", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->context_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSkillOperate &a, MessageSkillOperate &b) {
  using ::std::swap;
  swap(a.skill_id_, b.skill_id_);
  swap(a.type_, b.type_);
  swap(a.context_, b.context_);
}

const char* MessageSkillHit::ascii_fingerprint = "036D4BEB6D64F959869A973AF3F73AA7";
const uint8_t MessageSkillHit::binary_fingerprint[16] = {0x03,0x6D,0x4B,0xEB,0x6D,0x64,0xF9,0x59,0x86,0x9A,0x97,0x3A,0xF3,0xF7,0x3A,0xA7};

uint32_t MessageSkillHit::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_skill_id_ = false;
  bool isset_src_type_ = false;
  bool isset_src_id_ = false;
  bool isset_target_type_ = false;
  bool isset_target_id_ = false;
  bool isset_hit_type_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->skill_id_);
          isset_skill_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->src_type_ = ( ::entity::EntityType::type)ecast3;
          isset_src_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->src_id_);
          isset_src_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast4;
          xfer += iprot->readI32(ecast4);
          this->target_type_ = ( ::entity::EntityType::type)ecast4;
          isset_target_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->target_id_);
          isset_target_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast5;
          xfer += iprot->readI32(ecast5);
          this->hit_type_ = ( ::entity::SkillHitType::type)ecast5;
          isset_hit_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->value_);
          this->__isset.value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_skill_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_src_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_src_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_target_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_target_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hit_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSkillHit::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSkillHit");

  xfer += oprot->writeFieldBegin("skill_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->skill_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("src_type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->src_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("src_id_", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->src_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target_type_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->target_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target_id_", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->target_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hit_type_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->hit_type_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.value_) {
    xfer += oprot->writeFieldBegin("value_", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->value_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSkillHit &a, MessageSkillHit &b) {
  using ::std::swap;
  swap(a.skill_id_, b.skill_id_);
  swap(a.src_type_, b.src_type_);
  swap(a.src_id_, b.src_id_);
  swap(a.target_type_, b.target_type_);
  swap(a.target_id_, b.target_id_);
  swap(a.hit_type_, b.hit_type_);
  swap(a.value_, b.value_);
  swap(a.__isset, b.__isset);
}

const char* MessageActorChoosePKMode::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t MessageActorChoosePKMode::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t MessageActorChoosePKMode::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_pk_mode_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pk_mode_);
          isset_pk_mode_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_pk_mode_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageActorChoosePKMode::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageActorChoosePKMode");

  xfer += oprot->writeFieldBegin("pk_mode_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->pk_mode_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageActorChoosePKMode &a, MessageActorChoosePKMode &b) {
  using ::std::swap;
  swap(a.pk_mode_, b.pk_mode_);
}

const char* MessageEnterFightingStatus::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageEnterFightingStatus::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageEnterFightingStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageEnterFightingStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageEnterFightingStatus");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageEnterFightingStatus &a, MessageEnterFightingStatus &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageLeaveFightingStatus::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageLeaveFightingStatus::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageLeaveFightingStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageLeaveFightingStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageLeaveFightingStatus");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageLeaveFightingStatus &a, MessageLeaveFightingStatus &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageEnterPvpStatus::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MessageEnterPvpStatus::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MessageEnterPvpStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageEnterPvpStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageEnterPvpStatus");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageEnterPvpStatus &a, MessageEnterPvpStatus &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
}

const char* MessageLeavePvpStatus::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MessageLeavePvpStatus::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MessageLeavePvpStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageLeavePvpStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageLeavePvpStatus");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageLeavePvpStatus &a, MessageLeavePvpStatus &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
}

const char* MessagePvpStatusBroadcast::ascii_fingerprint = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
const uint8_t MessagePvpStatusBroadcast::binary_fingerprint[16] = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};

uint32_t MessagePvpStatusBroadcast::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actors_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->actors_.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->actors_.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += iprot->readString(this->actors_[_i10]);
            }
            xfer += iprot->readListEnd();
          }
          isset_actors_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actors_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePvpStatusBroadcast::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePvpStatusBroadcast");

  xfer += oprot->writeFieldBegin("actors_", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->actors_.size()));
    std::vector<std::string> ::const_iterator _iter11;
    for (_iter11 = this->actors_.begin(); _iter11 != this->actors_.end(); ++_iter11)
    {
      xfer += oprot->writeString((*_iter11));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePvpStatusBroadcast &a, MessagePvpStatusBroadcast &b) {
  using ::std::swap;
  swap(a.actors_, b.actors_);
}

const char* MessageSkillBreakSynchronize::ascii_fingerprint = "A0A4DD7B8243FB842E64EAC6E5DA6C7B";
const uint8_t MessageSkillBreakSynchronize::binary_fingerprint[16] = {0xA0,0xA4,0xDD,0x7B,0x82,0x43,0xFB,0x84,0x2E,0x64,0xEA,0xC6,0xE5,0xDA,0x6C,0x7B};

uint32_t MessageSkillBreakSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_role_id_ = false;
  bool isset_role_type_ = false;
  bool isset_skill_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->role_id_);
          isset_role_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast12;
          xfer += iprot->readI32(ecast12);
          this->role_type_ = ( ::entity::EntityType::type)ecast12;
          isset_role_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->skill_id_);
          isset_skill_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_role_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_role_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_skill_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSkillBreakSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSkillBreakSynchronize");

  xfer += oprot->writeFieldBegin("role_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->role_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("role_type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->role_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("skill_id_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->skill_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSkillBreakSynchronize &a, MessageSkillBreakSynchronize &b) {
  using ::std::swap;
  swap(a.role_id_, b.role_id_);
  swap(a.role_type_, b.role_type_);
  swap(a.skill_id_, b.skill_id_);
}

const char* MessageSkillAttributeSynchronize::ascii_fingerprint = "4C1A22BE2C0C03AAC7555241DD64B76E";
const uint8_t MessageSkillAttributeSynchronize::binary_fingerprint[16] = {0x4C,0x1A,0x22,0xBE,0x2C,0x0C,0x03,0xAA,0xC7,0x55,0x52,0x41,0xDD,0x64,0xB7,0x6E};

uint32_t MessageSkillAttributeSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_skill_id_ = false;
  bool isset_attributes_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->skill_id_);
          isset_skill_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->attributes_.clear();
            uint32_t _size13;
            ::apache::thrift::protocol::TType _etype16;
            xfer += iprot->readListBegin(_etype16, _size13);
            this->attributes_.resize(_size13);
            uint32_t _i17;
            for (_i17 = 0; _i17 < _size13; ++_i17)
            {
              xfer += this->attributes_[_i17].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_attributes_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_skill_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_attributes_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSkillAttributeSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSkillAttributeSynchronize");

  xfer += oprot->writeFieldBegin("skill_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->skill_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attributes_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->attributes_.size()));
    std::vector< ::entity::SkillVarField> ::const_iterator _iter18;
    for (_iter18 = this->attributes_.begin(); _iter18 != this->attributes_.end(); ++_iter18)
    {
      xfer += (*_iter18).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSkillAttributeSynchronize &a, MessageSkillAttributeSynchronize &b) {
  using ::std::swap;
  swap(a.skill_id_, b.skill_id_);
  swap(a.attributes_, b.attributes_);
}

}} // namespace
