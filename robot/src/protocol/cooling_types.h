/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef cooling_TYPES_H
#define cooling_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace entity {


class CoolingFields {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  CoolingFields() : id_(0), elapse_time_() {
  }

  virtual ~CoolingFields() throw() {}

  int32_t id_;
  std::string elapse_time_;

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  void __set_elapse_time_(const std::string& val) {
    elapse_time_ = val;
  }

  bool operator == (const CoolingFields & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(elapse_time_ == rhs.elapse_time_))
      return false;
    return true;
  }
  bool operator != (const CoolingFields &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CoolingFields & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CoolingFields &a, CoolingFields &b);

} // namespace

#endif
