/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef soul_TYPES_H
#define soul_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "vocation_types.h"


namespace entity {

struct SoulSettingID {
  enum type {
    MIN = 0,
    COMMON_1 = 1,
    COMMON_2 = 2,
    COMMON_3 = 3,
    COMMON_4 = 4,
    SOUL = 5,
    MAX = 6
  };
};

extern const std::map<int, const char*> _SoulSettingID_VALUES_TO_NAMES;

struct SoulUnlockType {
  enum type {
    MIN = 0,
    ITEM = 1,
    SPIRIT_LEVEL = 2,
    SWORD_LEVEL = 3,
    NOBLE_LEVEL = 4,
    MAX = 5
  };
};

extern const std::map<int, const char*> _SoulUnlockType_VALUES_TO_NAMES;

struct SoulEffectType {
  enum type {
    MIN = 0,
    ATTR = 1,
    EFFECT = 2,
    SKILL_MAX_LEVEL = 3,
    MAX = 4
  };
};

extern const std::map<int, const char*> _SoulEffectType_VALUES_TO_NAMES;

struct SoulAttributeType {
  enum type {
    MIN = 0,
    MAX_HP = 0,
    MAX_MP = 1,
    PHYSICS_ATTACK = 2,
    PHYSICS_DEFENCE = 3,
    MAGIC_ATTACK = 4,
    MAGIC_DEFENCE = 5,
    DODGE = 6,
    CRIT = 7,
    IGNORE_DEFENCE = 8,
    MAX = 9
  };
};

extern const std::map<int, const char*> _SoulAttributeType_VALUES_TO_NAMES;

struct SoulEnergyStatus {
  enum type {
    MIN = 0,
    INCREMENT = 1,
    EXPLOSION = 2,
    DECREMENT = 3,
    MAX = 4
  };
};

extern const std::map<int, const char*> _SoulEnergyStatus_VALUES_TO_NAMES;


class SoulField {
 public:

  static const char* ascii_fingerprint; // = "62CBF95059CB084430B0BABE2E5A68C7";
  static const uint8_t binary_fingerprint[16]; // = {0x62,0xCB,0xF9,0x50,0x59,0xCB,0x08,0x44,0x30,0xB0,0xBA,0xBE,0x2E,0x5A,0x68,0xC7};

  SoulField() : id_(0), level_(0), step_(0), common_skill_level_(0), appear_skill_level_(0), soul_skill_level_(0) {
  }

  virtual ~SoulField() throw() {}

  int32_t id_;
  int32_t level_;
  int32_t step_;
  int32_t common_skill_level_;
  int32_t appear_skill_level_;
  int32_t soul_skill_level_;

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  void __set_level_(const int32_t val) {
    level_ = val;
  }

  void __set_step_(const int32_t val) {
    step_ = val;
  }

  void __set_common_skill_level_(const int32_t val) {
    common_skill_level_ = val;
  }

  void __set_appear_skill_level_(const int32_t val) {
    appear_skill_level_ = val;
  }

  void __set_soul_skill_level_(const int32_t val) {
    soul_skill_level_ = val;
  }

  bool operator == (const SoulField & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(level_ == rhs.level_))
      return false;
    if (!(step_ == rhs.step_))
      return false;
    if (!(common_skill_level_ == rhs.common_skill_level_))
      return false;
    if (!(appear_skill_level_ == rhs.appear_skill_level_))
      return false;
    if (!(soul_skill_level_ == rhs.soul_skill_level_))
      return false;
    return true;
  }
  bool operator != (const SoulField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SoulField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SoulField &a, SoulField &b);


class SoulSettingField {
 public:

  static const char* ascii_fingerprint; // = "7598AB33931F8E8513753EFF2D53550E";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0x98,0xAB,0x33,0x93,0x1F,0x8E,0x85,0x13,0x75,0x3E,0xFF,0x2D,0x53,0x55,0x0E};

  SoulSettingField() : vocation_(( ::entity::VocationType::type)0), group_(0) {
  }

  virtual ~SoulSettingField() throw() {}

   ::entity::VocationType::type vocation_;
  int32_t group_;
  std::vector<int32_t>  settings_;

  void __set_vocation_(const  ::entity::VocationType::type val) {
    vocation_ = val;
  }

  void __set_group_(const int32_t val) {
    group_ = val;
  }

  void __set_settings_(const std::vector<int32_t> & val) {
    settings_ = val;
  }

  bool operator == (const SoulSettingField & rhs) const
  {
    if (!(vocation_ == rhs.vocation_))
      return false;
    if (!(group_ == rhs.group_))
      return false;
    if (!(settings_ == rhs.settings_))
      return false;
    return true;
  }
  bool operator != (const SoulSettingField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SoulSettingField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SoulSettingField &a, SoulSettingField &b);

} // namespace

#endif
