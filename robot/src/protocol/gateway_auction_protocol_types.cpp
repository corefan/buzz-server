/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "gateway_auction_protocol_types.h"

#include <algorithm>

namespace gateway { namespace protocol {

int _kAuctionErrorCodeValues[] = {
  AuctionErrorCode::SUCCESS,
  AuctionErrorCode::ITEM_NOT_EXIST,
  AuctionErrorCode::OUTBIDDED,
  AuctionErrorCode::ERROR_UNKNOWN
};
const char* _kAuctionErrorCodeNames[] = {
  "SUCCESS",
  "ITEM_NOT_EXIST",
  "OUTBIDDED",
  "ERROR_UNKNOWN"
};
const std::map<int, const char*> _AuctionErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kAuctionErrorCodeValues, _kAuctionErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAuctionSellItemStatusTypeValues[] = {
  AuctionSellItemStatusType::OFF_SHELF,
  AuctionSellItemStatusType::ON_SELL,
  AuctionSellItemStatusType::SOLD
};
const char* _kAuctionSellItemStatusTypeNames[] = {
  "OFF_SHELF",
  "ON_SELL",
  "SOLD"
};
const std::map<int, const char*> _AuctionSellItemStatusType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kAuctionSellItemStatusTypeValues, _kAuctionSellItemStatusTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAuctionBuyItemStatusTypeValues[] = {
  AuctionBuyItemStatusType::HIGHEST_BID,
  AuctionBuyItemStatusType::OUTBIDDED,
  AuctionBuyItemStatusType::SOLD,
  AuctionBuyItemStatusType::WON
};
const char* _kAuctionBuyItemStatusTypeNames[] = {
  "HIGHEST_BID",
  "OUTBIDDED",
  "SOLD",
  "WON"
};
const std::map<int, const char*> _AuctionBuyItemStatusType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kAuctionBuyItemStatusTypeValues, _kAuctionBuyItemStatusTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAuctionSellItemOperateTypeValues[] = {
  AuctionSellItemOperateType::ADD,
  AuctionSellItemOperateType::REMOVE,
  AuctionSellItemOperateType::UPDATE
};
const char* _kAuctionSellItemOperateTypeNames[] = {
  "ADD",
  "REMOVE",
  "UPDATE"
};
const std::map<int, const char*> _AuctionSellItemOperateType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kAuctionSellItemOperateTypeValues, _kAuctionSellItemOperateTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAuctionBuyItemOperateTypeValues[] = {
  AuctionBuyItemOperateType::ADD,
  AuctionBuyItemOperateType::REMOVE,
  AuctionBuyItemOperateType::UPDATE
};
const char* _kAuctionBuyItemOperateTypeNames[] = {
  "ADD",
  "REMOVE",
  "UPDATE"
};
const std::map<int, const char*> _AuctionBuyItemOperateType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kAuctionBuyItemOperateTypeValues, _kAuctionBuyItemOperateTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAuctionHistoryOperateTypeValues[] = {
  AuctionHistoryOperateType::ADD
};
const char* _kAuctionHistoryOperateTypeNames[] = {
  "ADD"
};
const std::map<int, const char*> _AuctionHistoryOperateType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kAuctionHistoryOperateTypeValues, _kAuctionHistoryOperateTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* AuctionItemData::ascii_fingerprint = "483FF17F660E263BB767F3221B8836D2";
const uint8_t AuctionItemData::binary_fingerprint[16] = {0x48,0x3F,0xF1,0x7F,0x66,0x0E,0x26,0x3B,0xB7,0x67,0xF3,0x22,0x1B,0x88,0x36,0xD2};

uint32_t AuctionItemData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_transaction_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->transaction_id_);
          isset_transaction_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item_template_id_);
          this->__isset.item_template_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item_number_);
          this->__isset.item_number_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->item_extra_info_);
          this->__isset.item_extra_info_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->left_time_);
          this->__isset.left_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->owner_name_);
          this->__isset.owner_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->start_bid_price_);
          this->__isset.start_bid_price_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->last_bid_price_);
          this->__isset.last_bid_price_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->buyout_price_);
          this->__isset.buyout_price_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->auction_time_id_);
          this->__isset.auction_time_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->my_bid_price_);
          this->__isset.my_bid_price_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status_);
          this->__isset.status_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_transaction_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AuctionItemData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AuctionItemData");

  xfer += oprot->writeFieldBegin("transaction_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->transaction_id_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.item_template_id_) {
    xfer += oprot->writeFieldBegin("item_template_id_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->item_template_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.item_number_) {
    xfer += oprot->writeFieldBegin("item_number_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->item_number_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.item_extra_info_) {
    xfer += oprot->writeFieldBegin("item_extra_info_", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->item_extra_info_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.left_time_) {
    xfer += oprot->writeFieldBegin("left_time_", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->left_time_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.owner_name_) {
    xfer += oprot->writeFieldBegin("owner_name_", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->owner_name_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.start_bid_price_) {
    xfer += oprot->writeFieldBegin("start_bid_price_", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->start_bid_price_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.last_bid_price_) {
    xfer += oprot->writeFieldBegin("last_bid_price_", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->last_bid_price_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.buyout_price_) {
    xfer += oprot->writeFieldBegin("buyout_price_", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32(this->buyout_price_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.auction_time_id_) {
    xfer += oprot->writeFieldBegin("auction_time_id_", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->auction_time_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.my_bid_price_) {
    xfer += oprot->writeFieldBegin("my_bid_price_", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32(this->my_bid_price_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.status_) {
    xfer += oprot->writeFieldBegin("status_", ::apache::thrift::protocol::T_I32, 12);
    xfer += oprot->writeI32(this->status_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AuctionItemData &a, AuctionItemData &b) {
  using ::std::swap;
  swap(a.transaction_id_, b.transaction_id_);
  swap(a.item_template_id_, b.item_template_id_);
  swap(a.item_number_, b.item_number_);
  swap(a.item_extra_info_, b.item_extra_info_);
  swap(a.left_time_, b.left_time_);
  swap(a.owner_name_, b.owner_name_);
  swap(a.start_bid_price_, b.start_bid_price_);
  swap(a.last_bid_price_, b.last_bid_price_);
  swap(a.buyout_price_, b.buyout_price_);
  swap(a.auction_time_id_, b.auction_time_id_);
  swap(a.my_bid_price_, b.my_bid_price_);
  swap(a.status_, b.status_);
  swap(a.__isset, b.__isset);
}

const char* AuctionHistoryData::ascii_fingerprint = "D121591FCC85D0E17C727CA264A5F46D";
const uint8_t AuctionHistoryData::binary_fingerprint[16] = {0xD1,0x21,0x59,0x1F,0xCC,0x85,0xD0,0xE1,0x7C,0x72,0x7C,0xA2,0x64,0xA5,0xF4,0x6D};

uint32_t AuctionHistoryData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_timestamp_ = false;
  bool isset_vars_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type_ = ( ::entity::AuctionHistoryType::type)ecast0;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->timestamp_);
          isset_timestamp_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vars_.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readListBegin(_etype4, _size1);
            this->vars_.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += iprot->readString(this->vars_[_i5]);
            }
            xfer += iprot->readListEnd();
          }
          isset_vars_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_timestamp_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_vars_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AuctionHistoryData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AuctionHistoryData");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamp_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->timestamp_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vars_", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->vars_.size()));
    std::vector<std::string> ::const_iterator _iter6;
    for (_iter6 = this->vars_.begin(); _iter6 != this->vars_.end(); ++_iter6)
    {
      xfer += oprot->writeString((*_iter6));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AuctionHistoryData &a, AuctionHistoryData &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.timestamp_, b.timestamp_);
  swap(a.vars_, b.vars_);
}

const char* MessageAuctionInitialize::ascii_fingerprint = "A3C1EE95CC9CAF8A820BEC9D43AF9ED9";
const uint8_t MessageAuctionInitialize::binary_fingerprint[16] = {0xA3,0xC1,0xEE,0x95,0xCC,0x9C,0xAF,0x8A,0x82,0x0B,0xEC,0x9D,0x43,0xAF,0x9E,0xD9};

uint32_t MessageAuctionInitialize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_sell_items_ = false;
  bool isset_buy_items_ = false;
  bool isset_history_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sell_items_.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _etype10;
            xfer += iprot->readListBegin(_etype10, _size7);
            this->sell_items_.resize(_size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              xfer += this->sell_items_[_i11].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_sell_items_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->buy_items_.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->buy_items_.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += this->buy_items_[_i16].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_buy_items_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->history_.clear();
            uint32_t _size17;
            ::apache::thrift::protocol::TType _etype20;
            xfer += iprot->readListBegin(_etype20, _size17);
            this->history_.resize(_size17);
            uint32_t _i21;
            for (_i21 = 0; _i21 < _size17; ++_i21)
            {
              xfer += this->history_[_i21].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_history_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_sell_items_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_buy_items_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_history_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAuctionInitialize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAuctionInitialize");

  xfer += oprot->writeFieldBegin("sell_items_", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->sell_items_.size()));
    std::vector<AuctionItemData> ::const_iterator _iter22;
    for (_iter22 = this->sell_items_.begin(); _iter22 != this->sell_items_.end(); ++_iter22)
    {
      xfer += (*_iter22).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buy_items_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->buy_items_.size()));
    std::vector<AuctionItemData> ::const_iterator _iter23;
    for (_iter23 = this->buy_items_.begin(); _iter23 != this->buy_items_.end(); ++_iter23)
    {
      xfer += (*_iter23).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("history_", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->history_.size()));
    std::vector<AuctionHistoryData> ::const_iterator _iter24;
    for (_iter24 = this->history_.begin(); _iter24 != this->history_.end(); ++_iter24)
    {
      xfer += (*_iter24).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAuctionInitialize &a, MessageAuctionInitialize &b) {
  using ::std::swap;
  swap(a.sell_items_, b.sell_items_);
  swap(a.buy_items_, b.buy_items_);
  swap(a.history_, b.history_);
}

const char* MessageAuctionSellItemSynchronize::ascii_fingerprint = "12CEBF6BA57D7EE7053EE7C9219B9360";
const uint8_t MessageAuctionSellItemSynchronize::binary_fingerprint[16] = {0x12,0xCE,0xBF,0x6B,0xA5,0x7D,0x7E,0xE7,0x05,0x3E,0xE7,0xC9,0x21,0x9B,0x93,0x60};

uint32_t MessageAuctionSellItemSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_data_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast25;
          xfer += iprot->readI32(ecast25);
          this->type_ = (AuctionSellItemOperateType::type)ecast25;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data_.read(iprot);
          isset_data_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_data_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAuctionSellItemSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAuctionSellItemSynchronize");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->data_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAuctionSellItemSynchronize &a, MessageAuctionSellItemSynchronize &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.data_, b.data_);
}

const char* MessageAuctionBuyItemSynchronize::ascii_fingerprint = "12CEBF6BA57D7EE7053EE7C9219B9360";
const uint8_t MessageAuctionBuyItemSynchronize::binary_fingerprint[16] = {0x12,0xCE,0xBF,0x6B,0xA5,0x7D,0x7E,0xE7,0x05,0x3E,0xE7,0xC9,0x21,0x9B,0x93,0x60};

uint32_t MessageAuctionBuyItemSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_data_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast26;
          xfer += iprot->readI32(ecast26);
          this->type_ = (AuctionBuyItemOperateType::type)ecast26;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data_.read(iprot);
          isset_data_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_data_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAuctionBuyItemSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAuctionBuyItemSynchronize");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->data_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAuctionBuyItemSynchronize &a, MessageAuctionBuyItemSynchronize &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.data_, b.data_);
}

const char* MessageAuctionHistorySynchronize::ascii_fingerprint = "69CFAA92E04882F6EA54F81504CDEB9C";
const uint8_t MessageAuctionHistorySynchronize::binary_fingerprint[16] = {0x69,0xCF,0xAA,0x92,0xE0,0x48,0x82,0xF6,0xEA,0x54,0xF8,0x15,0x04,0xCD,0xEB,0x9C};

uint32_t MessageAuctionHistorySynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_data_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast27;
          xfer += iprot->readI32(ecast27);
          this->type_ = (AuctionHistoryOperateType::type)ecast27;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data_.read(iprot);
          isset_data_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_data_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAuctionHistorySynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAuctionHistorySynchronize");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->data_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAuctionHistorySynchronize &a, MessageAuctionHistorySynchronize &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.data_, b.data_);
}

const char* MessageAuctionQueryTransactionRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MessageAuctionQueryTransactionRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MessageAuctionQueryTransactionRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_transaction_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->transaction_id_);
          isset_transaction_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_transaction_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAuctionQueryTransactionRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAuctionQueryTransactionRequest");

  xfer += oprot->writeFieldBegin("transaction_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->transaction_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAuctionQueryTransactionRequest &a, MessageAuctionQueryTransactionRequest &b) {
  using ::std::swap;
  swap(a.transaction_id_, b.transaction_id_);
}

const char* MessageAuctionQueryTransactionResponse::ascii_fingerprint = "0A5346B72F2E978C15158CDB829D41C8";
const uint8_t MessageAuctionQueryTransactionResponse::binary_fingerprint[16] = {0x0A,0x53,0x46,0xB7,0x2F,0x2E,0x97,0x8C,0x15,0x15,0x8C,0xDB,0x82,0x9D,0x41,0xC8};

uint32_t MessageAuctionQueryTransactionResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data_.read(iprot);
          this->__isset.data_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAuctionQueryTransactionResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAuctionQueryTransactionResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.data_) {
    xfer += oprot->writeFieldBegin("data_", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->data_.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAuctionQueryTransactionResponse &a, MessageAuctionQueryTransactionResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.data_, b.data_);
  swap(a.__isset, b.__isset);
}

const char* MessageAuctionSearchRequest::ascii_fingerprint = "A9890A1F741082A25B7518F6CE313ADC";
const uint8_t MessageAuctionSearchRequest::binary_fingerprint[16] = {0xA9,0x89,0x0A,0x1F,0x74,0x10,0x82,0xA2,0x5B,0x75,0x18,0xF6,0xCE,0x31,0x3A,0xDC};

uint32_t MessageAuctionSearchRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_sort_type_ = false;
  bool isset_page_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->item_template_ids_.clear();
            uint32_t _size28;
            ::apache::thrift::protocol::TType _etype31;
            xfer += iprot->readListBegin(_etype31, _size28);
            this->item_template_ids_.resize(_size28);
            uint32_t _i32;
            for (_i32 = 0; _i32 < _size28; ++_i32)
            {
              xfer += iprot->readI32(this->item_template_ids_[_i32]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.item_template_ids_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item_type_);
          this->__isset.item_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast33;
          xfer += iprot->readI32(ecast33);
          this->sort_type_ = ( ::entity::AuctionSearchSortType::type)ecast33;
          isset_sort_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->page_);
          isset_page_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_sort_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_page_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAuctionSearchRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAuctionSearchRequest");

  if (this->__isset.item_template_ids_) {
    xfer += oprot->writeFieldBegin("item_template_ids_", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->item_template_ids_.size()));
      std::vector<int32_t> ::const_iterator _iter34;
      for (_iter34 = this->item_template_ids_.begin(); _iter34 != this->item_template_ids_.end(); ++_iter34)
      {
        xfer += oprot->writeI32((*_iter34));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.item_type_) {
    xfer += oprot->writeFieldBegin("item_type_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->item_type_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("sort_type_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->sort_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("page_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->page_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAuctionSearchRequest &a, MessageAuctionSearchRequest &b) {
  using ::std::swap;
  swap(a.item_template_ids_, b.item_template_ids_);
  swap(a.item_type_, b.item_type_);
  swap(a.sort_type_, b.sort_type_);
  swap(a.page_, b.page_);
  swap(a.__isset, b.__isset);
}

const char* MessageAuctionSearchResponse::ascii_fingerprint = "9E66040F53FA8132ECAEB49B888A93C3";
const uint8_t MessageAuctionSearchResponse::binary_fingerprint[16] = {0x9E,0x66,0x04,0x0F,0x53,0xFA,0x81,0x32,0xEC,0xAE,0xB4,0x9B,0x88,0x8A,0x93,0xC3};

uint32_t MessageAuctionSearchResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->items_.clear();
            uint32_t _size35;
            ::apache::thrift::protocol::TType _etype38;
            xfer += iprot->readListBegin(_etype38, _size35);
            this->items_.resize(_size35);
            uint32_t _i39;
            for (_i39 = 0; _i39 < _size35; ++_i39)
            {
              xfer += this->items_[_i39].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.items_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->page_);
          this->__isset.page_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->total_page_);
          this->__isset.total_page_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAuctionSearchResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAuctionSearchResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.items_) {
    xfer += oprot->writeFieldBegin("items_", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->items_.size()));
      std::vector<AuctionItemData> ::const_iterator _iter40;
      for (_iter40 = this->items_.begin(); _iter40 != this->items_.end(); ++_iter40)
      {
        xfer += (*_iter40).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.page_) {
    xfer += oprot->writeFieldBegin("page_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->page_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.total_page_) {
    xfer += oprot->writeFieldBegin("total_page_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->total_page_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAuctionSearchResponse &a, MessageAuctionSearchResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.items_, b.items_);
  swap(a.page_, b.page_);
  swap(a.total_page_, b.total_page_);
  swap(a.__isset, b.__isset);
}

const char* MessageAuctionSellRequest::ascii_fingerprint = "95F60733EFFE97F80C4D6A0571940F8F";
const uint8_t MessageAuctionSellRequest::binary_fingerprint[16] = {0x95,0xF6,0x07,0x33,0xEF,0xFE,0x97,0xF8,0x0C,0x4D,0x6A,0x05,0x71,0x94,0x0F,0x8F};

uint32_t MessageAuctionSellRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->item_id_);
          this->__isset.item_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item_template_id_);
          this->__isset.item_template_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item_number_);
          this->__isset.item_number_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->transaction_id_);
          this->__isset.transaction_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->start_bid_price_);
          this->__isset.start_bid_price_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->buyout_price_);
          this->__isset.buyout_price_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->auction_time_id_);
          this->__isset.auction_time_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageAuctionSellRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAuctionSellRequest");

  if (this->__isset.item_id_) {
    xfer += oprot->writeFieldBegin("item_id_", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->item_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.item_template_id_) {
    xfer += oprot->writeFieldBegin("item_template_id_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->item_template_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.item_number_) {
    xfer += oprot->writeFieldBegin("item_number_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->item_number_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.transaction_id_) {
    xfer += oprot->writeFieldBegin("transaction_id_", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->transaction_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.start_bid_price_) {
    xfer += oprot->writeFieldBegin("start_bid_price_", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->start_bid_price_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.buyout_price_) {
    xfer += oprot->writeFieldBegin("buyout_price_", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->buyout_price_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.auction_time_id_) {
    xfer += oprot->writeFieldBegin("auction_time_id_", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->auction_time_id_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAuctionSellRequest &a, MessageAuctionSellRequest &b) {
  using ::std::swap;
  swap(a.item_id_, b.item_id_);
  swap(a.item_template_id_, b.item_template_id_);
  swap(a.item_number_, b.item_number_);
  swap(a.transaction_id_, b.transaction_id_);
  swap(a.start_bid_price_, b.start_bid_price_);
  swap(a.buyout_price_, b.buyout_price_);
  swap(a.auction_time_id_, b.auction_time_id_);
  swap(a.__isset, b.__isset);
}

const char* MessageAuctionSellResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageAuctionSellResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageAuctionSellResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAuctionSellResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAuctionSellResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAuctionSellResponse &a, MessageAuctionSellResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageAuctionCancelSellRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MessageAuctionCancelSellRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MessageAuctionCancelSellRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_transaction_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->transaction_id_);
          isset_transaction_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_transaction_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAuctionCancelSellRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAuctionCancelSellRequest");

  xfer += oprot->writeFieldBegin("transaction_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->transaction_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAuctionCancelSellRequest &a, MessageAuctionCancelSellRequest &b) {
  using ::std::swap;
  swap(a.transaction_id_, b.transaction_id_);
}

const char* MessageAuctionCancelSellResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageAuctionCancelSellResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageAuctionCancelSellResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAuctionCancelSellResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAuctionCancelSellResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAuctionCancelSellResponse &a, MessageAuctionCancelSellResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageAuctionBidRequest::ascii_fingerprint = "EEBC915CE44901401D881E6091423036";
const uint8_t MessageAuctionBidRequest::binary_fingerprint[16] = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

uint32_t MessageAuctionBidRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_transaction_id_ = false;
  bool isset_bid_price_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->transaction_id_);
          isset_transaction_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->bid_price_);
          isset_bid_price_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_transaction_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_bid_price_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAuctionBidRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAuctionBidRequest");

  xfer += oprot->writeFieldBegin("transaction_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->transaction_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bid_price_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->bid_price_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAuctionBidRequest &a, MessageAuctionBidRequest &b) {
  using ::std::swap;
  swap(a.transaction_id_, b.transaction_id_);
  swap(a.bid_price_, b.bid_price_);
}

const char* MessageAuctionBidResponse::ascii_fingerprint = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
const uint8_t MessageAuctionBidResponse::binary_fingerprint[16] = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

uint32_t MessageAuctionBidResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast41;
          xfer += iprot->readI32(ecast41);
          this->result_ = (AuctionErrorCode::type)ecast41;
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAuctionBidResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAuctionBidResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAuctionBidResponse &a, MessageAuctionBidResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageAuctionBuyoutRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MessageAuctionBuyoutRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MessageAuctionBuyoutRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_transaction_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->transaction_id_);
          isset_transaction_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_transaction_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAuctionBuyoutRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAuctionBuyoutRequest");

  xfer += oprot->writeFieldBegin("transaction_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->transaction_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAuctionBuyoutRequest &a, MessageAuctionBuyoutRequest &b) {
  using ::std::swap;
  swap(a.transaction_id_, b.transaction_id_);
}

const char* MessageAuctionBuyoutResponse::ascii_fingerprint = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
const uint8_t MessageAuctionBuyoutResponse::binary_fingerprint[16] = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

uint32_t MessageAuctionBuyoutResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast42;
          xfer += iprot->readI32(ecast42);
          this->result_ = (AuctionErrorCode::type)ecast42;
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAuctionBuyoutResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAuctionBuyoutResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAuctionBuyoutResponse &a, MessageAuctionBuyoutResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageAuctionWithdrawRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MessageAuctionWithdrawRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MessageAuctionWithdrawRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_transaction_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->transaction_id_);
          isset_transaction_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_transaction_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAuctionWithdrawRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAuctionWithdrawRequest");

  xfer += oprot->writeFieldBegin("transaction_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->transaction_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAuctionWithdrawRequest &a, MessageAuctionWithdrawRequest &b) {
  using ::std::swap;
  swap(a.transaction_id_, b.transaction_id_);
}

const char* MessageAuctionWithdrawResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageAuctionWithdrawResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageAuctionWithdrawResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAuctionWithdrawResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAuctionWithdrawResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAuctionWithdrawResponse &a, MessageAuctionWithdrawResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

}} // namespace
