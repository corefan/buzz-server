/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef gateway_shop_protocol_TYPES_H
#define gateway_shop_protocol_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "gateway_protocol_types.h"
#include "entity_types.h"


namespace gateway { namespace protocol {


class ShopUnit {
 public:

  static const char* ascii_fingerprint; // = "422C35A5D98C69C9CDE50568C7E3028F";
  static const uint8_t binary_fingerprint[16]; // = {0x42,0x2C,0x35,0xA5,0xD9,0x8C,0x69,0xC9,0xCD,0xE5,0x05,0x68,0xC7,0xE3,0x02,0x8F};

  ShopUnit() : template_id_(0), location_(0) {
  }

  virtual ~ShopUnit() throw() {}

  int32_t template_id_;
  int16_t location_;

  void __set_template_id_(const int32_t val) {
    template_id_ = val;
  }

  void __set_location_(const int16_t val) {
    location_ = val;
  }

  bool operator == (const ShopUnit & rhs) const
  {
    if (!(template_id_ == rhs.template_id_))
      return false;
    if (!(location_ == rhs.location_))
      return false;
    return true;
  }
  bool operator != (const ShopUnit &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopUnit & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ShopUnit &a, ShopUnit &b);


class MessageShopBuybackInitialize {
 public:

  static const char* ascii_fingerprint; // = "9318BC0B43626CCFB1B99D7168F0337A";
  static const uint8_t binary_fingerprint[16]; // = {0x93,0x18,0xBC,0x0B,0x43,0x62,0x6C,0xCF,0xB1,0xB9,0x9D,0x71,0x68,0xF0,0x33,0x7A};

  MessageShopBuybackInitialize() {
  }

  virtual ~MessageShopBuybackInitialize() throw() {}

  std::vector<ShopUnit>  buybacks_;

  void __set_buybacks_(const std::vector<ShopUnit> & val) {
    buybacks_ = val;
  }

  bool operator == (const MessageShopBuybackInitialize & rhs) const
  {
    if (!(buybacks_ == rhs.buybacks_))
      return false;
    return true;
  }
  bool operator != (const MessageShopBuybackInitialize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageShopBuybackInitialize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageShopBuybackInitialize &a, MessageShopBuybackInitialize &b);


class MessageShopBuyRequest {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  MessageShopBuyRequest() : template_id_(0), num_(0) {
  }

  virtual ~MessageShopBuyRequest() throw() {}

  int32_t template_id_;
  int32_t num_;

  void __set_template_id_(const int32_t val) {
    template_id_ = val;
  }

  void __set_num_(const int32_t val) {
    num_ = val;
  }

  bool operator == (const MessageShopBuyRequest & rhs) const
  {
    if (!(template_id_ == rhs.template_id_))
      return false;
    if (!(num_ == rhs.num_))
      return false;
    return true;
  }
  bool operator != (const MessageShopBuyRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageShopBuyRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageShopBuyRequest &a, MessageShopBuyRequest &b);


class MessageShopBuyResponse {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MessageShopBuyResponse() : template_id_(0) {
  }

  virtual ~MessageShopBuyResponse() throw() {}

  int32_t template_id_;

  void __set_template_id_(const int32_t val) {
    template_id_ = val;
  }

  bool operator == (const MessageShopBuyResponse & rhs) const
  {
    if (!(template_id_ == rhs.template_id_))
      return false;
    return true;
  }
  bool operator != (const MessageShopBuyResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageShopBuyResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageShopBuyResponse &a, MessageShopBuyResponse &b);


class MessageShopBuybackRequest {
 public:

  static const char* ascii_fingerprint; // = "565787C31CF2D774B532CB755189BF39";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

  MessageShopBuybackRequest() : location_(0) {
  }

  virtual ~MessageShopBuybackRequest() throw() {}

  int16_t location_;

  void __set_location_(const int16_t val) {
    location_ = val;
  }

  bool operator == (const MessageShopBuybackRequest & rhs) const
  {
    if (!(location_ == rhs.location_))
      return false;
    return true;
  }
  bool operator != (const MessageShopBuybackRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageShopBuybackRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageShopBuybackRequest &a, MessageShopBuybackRequest &b);


class MessageShopBuybackResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageShopBuybackResponse() : result_(0) {
  }

  virtual ~MessageShopBuybackResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageShopBuybackResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageShopBuybackResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageShopBuybackResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageShopBuybackResponse &a, MessageShopBuybackResponse &b);


class MessageShopSellRequest {
 public:

  static const char* ascii_fingerprint; // = "565787C31CF2D774B532CB755189BF39";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

  MessageShopSellRequest() : location_(0) {
  }

  virtual ~MessageShopSellRequest() throw() {}

  int16_t location_;

  void __set_location_(const int16_t val) {
    location_ = val;
  }

  bool operator == (const MessageShopSellRequest & rhs) const
  {
    if (!(location_ == rhs.location_))
      return false;
    return true;
  }
  bool operator != (const MessageShopSellRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageShopSellRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageShopSellRequest &a, MessageShopSellRequest &b);


class MessageShopSellResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageShopSellResponse() : result_(0) {
  }

  virtual ~MessageShopSellResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageShopSellResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageShopSellResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageShopSellResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageShopSellResponse &a, MessageShopSellResponse &b);

}} // namespace

#endif
