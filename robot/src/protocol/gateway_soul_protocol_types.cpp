/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "gateway_soul_protocol_types.h"

#include <algorithm>

namespace gateway { namespace protocol {

int _kSoulAltarCardOperateTypeValues[] = {
  SoulAltarCardOperateType::ADD,
  SoulAltarCardOperateType::UPDATE,
  SoulAltarCardOperateType::CLEAR
};
const char* _kSoulAltarCardOperateTypeNames[] = {
  "ADD",
  "UPDATE",
  "CLEAR"
};
const std::map<int, const char*> _SoulAltarCardOperateType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kSoulAltarCardOperateTypeValues, _kSoulAltarCardOperateTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* MessageSoulInitialize::ascii_fingerprint = "7CE30C457A4843A67A1B576A4FA60235";
const uint8_t MessageSoulInitialize::binary_fingerprint[16] = {0x7C,0xE3,0x0C,0x45,0x7A,0x48,0x43,0xA6,0x7A,0x1B,0x57,0x6A,0x4F,0xA6,0x02,0x35};

uint32_t MessageSoulInitialize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_souls_ = false;
  bool isset_settings_ = false;
  bool isset_axe_group_ = false;
  bool isset_shoot_group_ = false;
  bool isset_magic_group_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->souls_.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->souls_.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->souls_[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_souls_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->settings_.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->settings_.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += this->settings_[_i9].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_settings_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->axe_group_);
          isset_axe_group_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->shoot_group_);
          isset_shoot_group_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->magic_group_);
          isset_magic_group_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_souls_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_settings_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_axe_group_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_shoot_group_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_magic_group_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSoulInitialize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSoulInitialize");

  xfer += oprot->writeFieldBegin("souls_", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->souls_.size()));
    std::vector< ::entity::SoulField> ::const_iterator _iter10;
    for (_iter10 = this->souls_.begin(); _iter10 != this->souls_.end(); ++_iter10)
    {
      xfer += (*_iter10).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("settings_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->settings_.size()));
    std::vector< ::entity::SoulSettingField> ::const_iterator _iter11;
    for (_iter11 = this->settings_.begin(); _iter11 != this->settings_.end(); ++_iter11)
    {
      xfer += (*_iter11).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("axe_group_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->axe_group_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("shoot_group_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->shoot_group_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("magic_group_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->magic_group_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSoulInitialize &a, MessageSoulInitialize &b) {
  using ::std::swap;
  swap(a.souls_, b.souls_);
  swap(a.settings_, b.settings_);
  swap(a.axe_group_, b.axe_group_);
  swap(a.shoot_group_, b.shoot_group_);
  swap(a.magic_group_, b.magic_group_);
}

const char* MessageSoulSynchronize::ascii_fingerprint = "47FCC482242A9FAF03ED744C761305CB";
const uint8_t MessageSoulSynchronize::binary_fingerprint[16] = {0x47,0xFC,0xC4,0x82,0x24,0x2A,0x9F,0xAF,0x03,0xED,0x74,0x4C,0x76,0x13,0x05,0xCB};

uint32_t MessageSoulSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_soul_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->soul_.read(iprot);
          isset_soul_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_soul_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSoulSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSoulSynchronize");

  xfer += oprot->writeFieldBegin("soul_", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->soul_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSoulSynchronize &a, MessageSoulSynchronize &b) {
  using ::std::swap;
  swap(a.soul_, b.soul_);
}

const char* MessageSoulUnlockRequest::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t MessageSoulUnlockRequest::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t MessageSoulUnlockRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_soul_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->soul_id_);
          isset_soul_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_soul_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSoulUnlockRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSoulUnlockRequest");

  xfer += oprot->writeFieldBegin("soul_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->soul_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSoulUnlockRequest &a, MessageSoulUnlockRequest &b) {
  using ::std::swap;
  swap(a.soul_id_, b.soul_id_);
}

const char* MessageSoulUnlockResponse::ascii_fingerprint = "3409A6BAF48299E7727EECFEBEC3BDA9";
const uint8_t MessageSoulUnlockResponse::binary_fingerprint[16] = {0x34,0x09,0xA6,0xBA,0xF4,0x82,0x99,0xE7,0x72,0x7E,0xEC,0xFE,0xBE,0xC3,0xBD,0xA9};

uint32_t MessageSoulUnlockResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->soul_id_);
          this->__isset.soul_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSoulUnlockResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSoulUnlockResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.soul_id_) {
    xfer += oprot->writeFieldBegin("soul_id_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->soul_id_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSoulUnlockResponse &a, MessageSoulUnlockResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.soul_id_, b.soul_id_);
  swap(a.__isset, b.__isset);
}

const char* MessageSoulUpgradeStepRequest::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t MessageSoulUpgradeStepRequest::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t MessageSoulUpgradeStepRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_soul_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->soul_id_);
          isset_soul_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_soul_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSoulUpgradeStepRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSoulUpgradeStepRequest");

  xfer += oprot->writeFieldBegin("soul_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->soul_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSoulUpgradeStepRequest &a, MessageSoulUpgradeStepRequest &b) {
  using ::std::swap;
  swap(a.soul_id_, b.soul_id_);
}

const char* MessageSoulUpgradeStepResponse::ascii_fingerprint = "3409A6BAF48299E7727EECFEBEC3BDA9";
const uint8_t MessageSoulUpgradeStepResponse::binary_fingerprint[16] = {0x34,0x09,0xA6,0xBA,0xF4,0x82,0x99,0xE7,0x72,0x7E,0xEC,0xFE,0xBE,0xC3,0xBD,0xA9};

uint32_t MessageSoulUpgradeStepResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->soul_id_);
          this->__isset.soul_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSoulUpgradeStepResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSoulUpgradeStepResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.soul_id_) {
    xfer += oprot->writeFieldBegin("soul_id_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->soul_id_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSoulUpgradeStepResponse &a, MessageSoulUpgradeStepResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.soul_id_, b.soul_id_);
  swap(a.__isset, b.__isset);
}

const char* MessageSoulUpgradeLevelRequest::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t MessageSoulUpgradeLevelRequest::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t MessageSoulUpgradeLevelRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_soul_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->soul_id_);
          isset_soul_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_soul_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSoulUpgradeLevelRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSoulUpgradeLevelRequest");

  xfer += oprot->writeFieldBegin("soul_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->soul_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSoulUpgradeLevelRequest &a, MessageSoulUpgradeLevelRequest &b) {
  using ::std::swap;
  swap(a.soul_id_, b.soul_id_);
}

const char* MessageSoulUpgradeLevelResponse::ascii_fingerprint = "88440F45A63E63607868B983E4E50558";
const uint8_t MessageSoulUpgradeLevelResponse::binary_fingerprint[16] = {0x88,0x44,0x0F,0x45,0xA6,0x3E,0x63,0x60,0x78,0x68,0xB9,0x83,0xE4,0xE5,0x05,0x58};

uint32_t MessageSoulUpgradeLevelResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;
  bool isset_soul_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->soul_id_);
          isset_soul_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_soul_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSoulUpgradeLevelResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSoulUpgradeLevelResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("soul_id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->soul_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSoulUpgradeLevelResponse &a, MessageSoulUpgradeLevelResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.soul_id_, b.soul_id_);
}

const char* MessageSoulSetRequest::ascii_fingerprint = "8BE89990D59E890F6D17E8BDDA4137FB";
const uint8_t MessageSoulSetRequest::binary_fingerprint[16] = {0x8B,0xE8,0x99,0x90,0xD5,0x9E,0x89,0x0F,0x6D,0x17,0xE8,0xBD,0xDA,0x41,0x37,0xFB};

uint32_t MessageSoulSetRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_vocation_ = false;
  bool isset_group_ = false;
  bool isset_soul_id_ = false;
  bool isset_position_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast12;
          xfer += iprot->readI32(ecast12);
          this->vocation_ = ( ::entity::VocationType::type)ecast12;
          isset_vocation_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->group_);
          isset_group_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->soul_id_);
          isset_soul_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->position_);
          isset_position_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_vocation_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_group_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_soul_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_position_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSoulSetRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSoulSetRequest");

  xfer += oprot->writeFieldBegin("vocation_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->vocation_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("group_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->group_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("soul_id_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->soul_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("position_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->position_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSoulSetRequest &a, MessageSoulSetRequest &b) {
  using ::std::swap;
  swap(a.vocation_, b.vocation_);
  swap(a.group_, b.group_);
  swap(a.soul_id_, b.soul_id_);
  swap(a.position_, b.position_);
}

const char* MessageSoulSetResponse::ascii_fingerprint = "723BF79B1177820923F1BF22E1F3F0CC";
const uint8_t MessageSoulSetResponse::binary_fingerprint[16] = {0x72,0x3B,0xF7,0x9B,0x11,0x77,0x82,0x09,0x23,0xF1,0xBF,0x22,0xE1,0xF3,0xF0,0xCC};

uint32_t MessageSoulSetResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;
  bool isset_position_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast13;
          xfer += iprot->readI32(ecast13);
          this->vocation_ = ( ::entity::VocationType::type)ecast13;
          this->__isset.vocation_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->group_);
          this->__isset.group_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->soul_id_);
          this->__isset.soul_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->position_);
          isset_position_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_position_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSoulSetResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSoulSetResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.vocation_) {
    xfer += oprot->writeFieldBegin("vocation_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->vocation_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.group_) {
    xfer += oprot->writeFieldBegin("group_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->group_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.soul_id_) {
    xfer += oprot->writeFieldBegin("soul_id_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->soul_id_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("position_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->position_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSoulSetResponse &a, MessageSoulSetResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.vocation_, b.vocation_);
  swap(a.group_, b.group_);
  swap(a.soul_id_, b.soul_id_);
  swap(a.position_, b.position_);
  swap(a.__isset, b.__isset);
}

const char* MessageSoulResetRequest::ascii_fingerprint = "9177E894815163D920ECC1A1CE512CD8";
const uint8_t MessageSoulResetRequest::binary_fingerprint[16] = {0x91,0x77,0xE8,0x94,0x81,0x51,0x63,0xD9,0x20,0xEC,0xC1,0xA1,0xCE,0x51,0x2C,0xD8};

uint32_t MessageSoulResetRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_vocation_ = false;
  bool isset_group_ = false;
  bool isset_position_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast14;
          xfer += iprot->readI32(ecast14);
          this->vocation_ = ( ::entity::VocationType::type)ecast14;
          isset_vocation_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->group_);
          isset_group_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->position_);
          isset_position_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_vocation_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_group_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_position_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSoulResetRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSoulResetRequest");

  xfer += oprot->writeFieldBegin("vocation_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->vocation_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("group_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->group_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("position_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->position_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSoulResetRequest &a, MessageSoulResetRequest &b) {
  using ::std::swap;
  swap(a.vocation_, b.vocation_);
  swap(a.group_, b.group_);
  swap(a.position_, b.position_);
}

const char* MessageSoulResetResponse::ascii_fingerprint = "15547C1A83A2A2FD446D04EE92697362";
const uint8_t MessageSoulResetResponse::binary_fingerprint[16] = {0x15,0x54,0x7C,0x1A,0x83,0xA2,0xA2,0xFD,0x44,0x6D,0x04,0xEE,0x92,0x69,0x73,0x62};

uint32_t MessageSoulResetResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast15;
          xfer += iprot->readI32(ecast15);
          this->vocation_ = ( ::entity::VocationType::type)ecast15;
          this->__isset.vocation_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->group_);
          this->__isset.group_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->position_);
          this->__isset.position_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSoulResetResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSoulResetResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.vocation_) {
    xfer += oprot->writeFieldBegin("vocation_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->vocation_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.group_) {
    xfer += oprot->writeFieldBegin("group_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->group_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.position_) {
    xfer += oprot->writeFieldBegin("position_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->position_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSoulResetResponse &a, MessageSoulResetResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.vocation_, b.vocation_);
  swap(a.group_, b.group_);
  swap(a.position_, b.position_);
  swap(a.__isset, b.__isset);
}

const char* MessageSoulSettingStandRequest::ascii_fingerprint = "46A703A33337BED2F62F386FC66B2A5F";
const uint8_t MessageSoulSettingStandRequest::binary_fingerprint[16] = {0x46,0xA7,0x03,0xA3,0x33,0x37,0xBE,0xD2,0xF6,0x2F,0x38,0x6F,0xC6,0x6B,0x2A,0x5F};

uint32_t MessageSoulSettingStandRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_vocation_ = false;
  bool isset_group_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast16;
          xfer += iprot->readI32(ecast16);
          this->vocation_ = ( ::entity::VocationType::type)ecast16;
          isset_vocation_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->group_);
          isset_group_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_vocation_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_group_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSoulSettingStandRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSoulSettingStandRequest");

  xfer += oprot->writeFieldBegin("vocation_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->vocation_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("group_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->group_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSoulSettingStandRequest &a, MessageSoulSettingStandRequest &b) {
  using ::std::swap;
  swap(a.vocation_, b.vocation_);
  swap(a.group_, b.group_);
}

const char* MessageSoulSettingStandResponse::ascii_fingerprint = "D6A0F418C1E51DA0BD4026CA4D82A339";
const uint8_t MessageSoulSettingStandResponse::binary_fingerprint[16] = {0xD6,0xA0,0xF4,0x18,0xC1,0xE5,0x1D,0xA0,0xBD,0x40,0x26,0xCA,0x4D,0x82,0xA3,0x39};

uint32_t MessageSoulSettingStandResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast17;
          xfer += iprot->readI32(ecast17);
          this->vocation_ = ( ::entity::VocationType::type)ecast17;
          this->__isset.vocation_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->group_);
          this->__isset.group_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSoulSettingStandResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSoulSettingStandResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.vocation_) {
    xfer += oprot->writeFieldBegin("vocation_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->vocation_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.group_) {
    xfer += oprot->writeFieldBegin("group_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->group_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSoulSettingStandResponse &a, MessageSoulSettingStandResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.vocation_, b.vocation_);
  swap(a.group_, b.group_);
  swap(a.__isset, b.__isset);
}

const char* SoulAltarCardData::ascii_fingerprint = "5F23756BD6446EDCA8AB6C0EF1027AD3";
const uint8_t SoulAltarCardData::binary_fingerprint[16] = {0x5F,0x23,0x75,0x6B,0xD6,0x44,0x6E,0xDC,0xA8,0xAB,0x6C,0x0E,0xF1,0x02,0x7A,0xD3};

uint32_t SoulAltarCardData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_card_pos_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->card_pos_);
          isset_card_pos_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->card_id_);
          this->__isset.card_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->exist_);
          this->__isset.exist_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_card_pos_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SoulAltarCardData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SoulAltarCardData");

  xfer += oprot->writeFieldBegin("card_pos_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->card_pos_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.card_id_) {
    xfer += oprot->writeFieldBegin("card_id_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->card_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.exist_) {
    xfer += oprot->writeFieldBegin("exist_", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->exist_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SoulAltarCardData &a, SoulAltarCardData &b) {
  using ::std::swap;
  swap(a.card_pos_, b.card_pos_);
  swap(a.card_id_, b.card_id_);
  swap(a.exist_, b.exist_);
  swap(a.__isset, b.__isset);
}

const char* MessageSoulAltarInitialize::ascii_fingerprint = "ABD188F9D2960E37F304433B00B95BB8";
const uint8_t MessageSoulAltarInitialize::binary_fingerprint[16] = {0xAB,0xD1,0x88,0xF9,0xD2,0x96,0x0E,0x37,0xF3,0x04,0x43,0x3B,0x00,0xB9,0x5B,0xB8};

uint32_t MessageSoulAltarInitialize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_summon_paid_ = false;
  bool isset_free_summon_times_ = false;
  bool isset_cards_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->summon_paid_);
          isset_summon_paid_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->free_summon_times_);
          isset_free_summon_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->cards_.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _etype21;
            xfer += iprot->readListBegin(_etype21, _size18);
            this->cards_.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += this->cards_[_i22].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_cards_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_summon_paid_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_free_summon_times_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cards_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSoulAltarInitialize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSoulAltarInitialize");

  xfer += oprot->writeFieldBegin("summon_paid_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->summon_paid_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("free_summon_times_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->free_summon_times_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cards_", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->cards_.size()));
    std::vector<SoulAltarCardData> ::const_iterator _iter23;
    for (_iter23 = this->cards_.begin(); _iter23 != this->cards_.end(); ++_iter23)
    {
      xfer += (*_iter23).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSoulAltarInitialize &a, MessageSoulAltarInitialize &b) {
  using ::std::swap;
  swap(a.summon_paid_, b.summon_paid_);
  swap(a.free_summon_times_, b.free_summon_times_);
  swap(a.cards_, b.cards_);
}

const char* MessageSoulAltarSynchronize::ascii_fingerprint = "65BE1B8735A75E17E15456B545C91C46";
const uint8_t MessageSoulAltarSynchronize::binary_fingerprint[16] = {0x65,0xBE,0x1B,0x87,0x35,0xA7,0x5E,0x17,0xE1,0x54,0x56,0xB5,0x45,0xC9,0x1C,0x46};

uint32_t MessageSoulAltarSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->summon_paid_);
          this->__isset.summon_paid_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->free_summon_times_);
          this->__isset.free_summon_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageSoulAltarSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSoulAltarSynchronize");

  if (this->__isset.summon_paid_) {
    xfer += oprot->writeFieldBegin("summon_paid_", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->summon_paid_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.free_summon_times_) {
    xfer += oprot->writeFieldBegin("free_summon_times_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->free_summon_times_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSoulAltarSynchronize &a, MessageSoulAltarSynchronize &b) {
  using ::std::swap;
  swap(a.summon_paid_, b.summon_paid_);
  swap(a.free_summon_times_, b.free_summon_times_);
  swap(a.__isset, b.__isset);
}

const char* MessageSoulAltarCardSynchronize::ascii_fingerprint = "26C482985A3334E4AACF43C5D13C77C1";
const uint8_t MessageSoulAltarCardSynchronize::binary_fingerprint[16] = {0x26,0xC4,0x82,0x98,0x5A,0x33,0x34,0xE4,0xAA,0xCF,0x43,0xC5,0xD1,0x3C,0x77,0xC1};

uint32_t MessageSoulAltarCardSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_data_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast24;
          xfer += iprot->readI32(ecast24);
          this->type_ = (SoulAltarCardOperateType::type)ecast24;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data_.read(iprot);
          isset_data_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_data_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSoulAltarCardSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSoulAltarCardSynchronize");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->data_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSoulAltarCardSynchronize &a, MessageSoulAltarCardSynchronize &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.data_, b.data_);
}

const char* MessageSoulAltarSummonRequest::ascii_fingerprint = "BF054652DEF86253C2BEE7D947F167DD";
const uint8_t MessageSoulAltarSummonRequest::binary_fingerprint[16] = {0xBF,0x05,0x46,0x52,0xDE,0xF8,0x62,0x53,0xC2,0xBE,0xE7,0xD9,0x47,0xF1,0x67,0xDD};

uint32_t MessageSoulAltarSummonRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->bind_);
          this->__isset.bind_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageSoulAltarSummonRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSoulAltarSummonRequest");

  if (this->__isset.bind_) {
    xfer += oprot->writeFieldBegin("bind_", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->bind_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSoulAltarSummonRequest &a, MessageSoulAltarSummonRequest &b) {
  using ::std::swap;
  swap(a.bind_, b.bind_);
  swap(a.__isset, b.__isset);
}

const char* MessageSoulAltarSummonResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageSoulAltarSummonResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageSoulAltarSummonResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSoulAltarSummonResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSoulAltarSummonResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSoulAltarSummonResponse &a, MessageSoulAltarSummonResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageSoulAltarTakeRequest::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t MessageSoulAltarTakeRequest::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t MessageSoulAltarTakeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_card_pos_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->card_pos_);
          isset_card_pos_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_card_pos_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSoulAltarTakeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSoulAltarTakeRequest");

  xfer += oprot->writeFieldBegin("card_pos_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->card_pos_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSoulAltarTakeRequest &a, MessageSoulAltarTakeRequest &b) {
  using ::std::swap;
  swap(a.card_pos_, b.card_pos_);
}

const char* MessageSoulAltarTakeResponse::ascii_fingerprint = "3409A6BAF48299E7727EECFEBEC3BDA9";
const uint8_t MessageSoulAltarTakeResponse::binary_fingerprint[16] = {0x34,0x09,0xA6,0xBA,0xF4,0x82,0x99,0xE7,0x72,0x7E,0xEC,0xFE,0xBE,0xC3,0xBD,0xA9};

uint32_t MessageSoulAltarTakeResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->card_id_);
          this->__isset.card_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSoulAltarTakeResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSoulAltarTakeResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.card_id_) {
    xfer += oprot->writeFieldBegin("card_id_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->card_id_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSoulAltarTakeResponse &a, MessageSoulAltarTakeResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.card_id_, b.card_id_);
  swap(a.__isset, b.__isset);
}

const char* MessageSoulAltarResetRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageSoulAltarResetRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageSoulAltarResetRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageSoulAltarResetRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSoulAltarResetRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSoulAltarResetRequest &a, MessageSoulAltarResetRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageSoulAltarResetResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageSoulAltarResetResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageSoulAltarResetResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSoulAltarResetResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSoulAltarResetResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSoulAltarResetResponse &a, MessageSoulAltarResetResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageSoulSkillUpgradeRequest::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t MessageSoulSkillUpgradeRequest::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

uint32_t MessageSoulSkillUpgradeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_soul_id_ = false;
  bool isset_skill_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->soul_id_);
          isset_soul_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->skill_id_);
          isset_skill_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_soul_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_skill_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSoulSkillUpgradeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSoulSkillUpgradeRequest");

  xfer += oprot->writeFieldBegin("soul_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->soul_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("skill_id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->skill_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSoulSkillUpgradeRequest &a, MessageSoulSkillUpgradeRequest &b) {
  using ::std::swap;
  swap(a.soul_id_, b.soul_id_);
  swap(a.skill_id_, b.skill_id_);
}

const char* MessageSoulSkillUpgradeResponse::ascii_fingerprint = "5C4D84321B3CBB236930D75F16BF3C14";
const uint8_t MessageSoulSkillUpgradeResponse::binary_fingerprint[16] = {0x5C,0x4D,0x84,0x32,0x1B,0x3C,0xBB,0x23,0x69,0x30,0xD7,0x5F,0x16,0xBF,0x3C,0x14};

uint32_t MessageSoulSkillUpgradeResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;
  bool isset_soul_id_ = false;
  bool isset_skill_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->soul_id_);
          isset_soul_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->skill_id_);
          isset_skill_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_soul_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_skill_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSoulSkillUpgradeResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSoulSkillUpgradeResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("soul_id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->soul_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("skill_id_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->skill_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSoulSkillUpgradeResponse &a, MessageSoulSkillUpgradeResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.soul_id_, b.soul_id_);
  swap(a.skill_id_, b.skill_id_);
}

}} // namespace
