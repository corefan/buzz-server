/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef gateway_social_protocol_TYPES_H
#define gateway_social_protocol_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "contacts_types.h"
#include "gender_types.h"
#include "vocation_types.h"
#include "homeland_types.h"
#include "gateway_protocol_types.h"


namespace gateway { namespace protocol {

struct ContactsOperateType {
  enum type {
    ADD = 0,
    REMOVE = 1,
    UPDATE = 2
  };
};

extern const std::map<int, const char*> _ContactsOperateType_VALUES_TO_NAMES;

struct SocialEnemyOperateType {
  enum type {
    ADD = 0,
    REMOVE = 1,
    UPDATE = 2
  };
};

extern const std::map<int, const char*> _SocialEnemyOperateType_VALUES_TO_NAMES;

struct HomelandFriendOperateType {
  enum type {
    ADD = 0,
    REMOVE = 1,
    UPDATE = 2
  };
};

extern const std::map<int, const char*> _HomelandFriendOperateType_VALUES_TO_NAMES;

struct HomelandInvaderOperateType {
  enum type {
    ADD = 0,
    REMOVE = 1,
    UPDATE = 2
  };
};

extern const std::map<int, const char*> _HomelandInvaderOperateType_VALUES_TO_NAMES;

struct HomelandSupportedSoulOperateType {
  enum type {
    ADD = 0,
    REMOVE = 1
  };
};

extern const std::map<int, const char*> _HomelandSupportedSoulOperateType_VALUES_TO_NAMES;

struct HomelandSupportSoulOperateType {
  enum type {
    ADD = 0
  };
};

extern const std::map<int, const char*> _HomelandSupportSoulOperateType_VALUES_TO_NAMES;

struct HomelandEventOperateType {
  enum type {
    ADD = 0
  };
};

extern const std::map<int, const char*> _HomelandEventOperateType_VALUES_TO_NAMES;

typedef struct _ContactsData__isset {
  _ContactsData__isset() : online_(false), actor_name_(false), level_(false), gender_(false), vocation_(false), map_(false), last_logout_time_(false), signature_(false) {}
  bool online_;
  bool actor_name_;
  bool level_;
  bool gender_;
  bool vocation_;
  bool map_;
  bool last_logout_time_;
  bool signature_;
} _ContactsData__isset;

class ContactsData {
 public:

  static const char* ascii_fingerprint; // = "2C69455719838124E713A996F5A40019";
  static const uint8_t binary_fingerprint[16]; // = {0x2C,0x69,0x45,0x57,0x19,0x83,0x81,0x24,0xE7,0x13,0xA9,0x96,0xF5,0xA4,0x00,0x19};

  ContactsData() : actor_id_(), contacts_type_(( ::entity::ContactsType::type)0), online_(0), actor_name_(), level_(0), gender_(( ::entity::GenderType::type)0), vocation_(( ::entity::VocationType::type)0), map_(0), last_logout_time_(), signature_() {
  }

  virtual ~ContactsData() throw() {}

  std::string actor_id_;
   ::entity::ContactsType::type contacts_type_;
  bool online_;
  std::string actor_name_;
  int32_t level_;
   ::entity::GenderType::type gender_;
   ::entity::VocationType::type vocation_;
  int16_t map_;
  std::string last_logout_time_;
  std::string signature_;

  _ContactsData__isset __isset;

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
  }

  void __set_contacts_type_(const  ::entity::ContactsType::type val) {
    contacts_type_ = val;
  }

  void __set_online_(const bool val) {
    online_ = val;
    __isset.online_ = true;
  }

  void __set_actor_name_(const std::string& val) {
    actor_name_ = val;
    __isset.actor_name_ = true;
  }

  void __set_level_(const int32_t val) {
    level_ = val;
    __isset.level_ = true;
  }

  void __set_gender_(const  ::entity::GenderType::type val) {
    gender_ = val;
    __isset.gender_ = true;
  }

  void __set_vocation_(const  ::entity::VocationType::type val) {
    vocation_ = val;
    __isset.vocation_ = true;
  }

  void __set_map_(const int16_t val) {
    map_ = val;
    __isset.map_ = true;
  }

  void __set_last_logout_time_(const std::string& val) {
    last_logout_time_ = val;
    __isset.last_logout_time_ = true;
  }

  void __set_signature_(const std::string& val) {
    signature_ = val;
    __isset.signature_ = true;
  }

  bool operator == (const ContactsData & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(contacts_type_ == rhs.contacts_type_))
      return false;
    if (__isset.online_ != rhs.__isset.online_)
      return false;
    else if (__isset.online_ && !(online_ == rhs.online_))
      return false;
    if (__isset.actor_name_ != rhs.__isset.actor_name_)
      return false;
    else if (__isset.actor_name_ && !(actor_name_ == rhs.actor_name_))
      return false;
    if (__isset.level_ != rhs.__isset.level_)
      return false;
    else if (__isset.level_ && !(level_ == rhs.level_))
      return false;
    if (__isset.gender_ != rhs.__isset.gender_)
      return false;
    else if (__isset.gender_ && !(gender_ == rhs.gender_))
      return false;
    if (__isset.vocation_ != rhs.__isset.vocation_)
      return false;
    else if (__isset.vocation_ && !(vocation_ == rhs.vocation_))
      return false;
    if (__isset.map_ != rhs.__isset.map_)
      return false;
    else if (__isset.map_ && !(map_ == rhs.map_))
      return false;
    if (__isset.last_logout_time_ != rhs.__isset.last_logout_time_)
      return false;
    else if (__isset.last_logout_time_ && !(last_logout_time_ == rhs.last_logout_time_))
      return false;
    if (__isset.signature_ != rhs.__isset.signature_)
      return false;
    else if (__isset.signature_ && !(signature_ == rhs.signature_))
      return false;
    return true;
  }
  bool operator != (const ContactsData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContactsData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ContactsData &a, ContactsData &b);


class MessageSocialContactsInitialize {
 public:

  static const char* ascii_fingerprint; // = "2A83E2051E794B20924B3278DD5DEC56";
  static const uint8_t binary_fingerprint[16]; // = {0x2A,0x83,0xE2,0x05,0x1E,0x79,0x4B,0x20,0x92,0x4B,0x32,0x78,0xDD,0x5D,0xEC,0x56};

  MessageSocialContactsInitialize() : signature_() {
  }

  virtual ~MessageSocialContactsInitialize() throw() {}

  std::vector<ContactsData>  contacts_;
  std::string signature_;

  void __set_contacts_(const std::vector<ContactsData> & val) {
    contacts_ = val;
  }

  void __set_signature_(const std::string& val) {
    signature_ = val;
  }

  bool operator == (const MessageSocialContactsInitialize & rhs) const
  {
    if (!(contacts_ == rhs.contacts_))
      return false;
    if (!(signature_ == rhs.signature_))
      return false;
    return true;
  }
  bool operator != (const MessageSocialContactsInitialize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSocialContactsInitialize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSocialContactsInitialize &a, MessageSocialContactsInitialize &b);


class MessageSocialContactsSynchronize {
 public:

  static const char* ascii_fingerprint; // = "6929CBA987F957995E7641EE15EAE2E4";
  static const uint8_t binary_fingerprint[16]; // = {0x69,0x29,0xCB,0xA9,0x87,0xF9,0x57,0x99,0x5E,0x76,0x41,0xEE,0x15,0xEA,0xE2,0xE4};

  MessageSocialContactsSynchronize() : type_((ContactsOperateType::type)0) {
  }

  virtual ~MessageSocialContactsSynchronize() throw() {}

  ContactsOperateType::type type_;
  ContactsData contacts_;

  void __set_type_(const ContactsOperateType::type val) {
    type_ = val;
  }

  void __set_contacts_(const ContactsData& val) {
    contacts_ = val;
  }

  bool operator == (const MessageSocialContactsSynchronize & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(contacts_ == rhs.contacts_))
      return false;
    return true;
  }
  bool operator != (const MessageSocialContactsSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSocialContactsSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSocialContactsSynchronize &a, MessageSocialContactsSynchronize &b);


class MessageSocialContactsEditSignatureRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MessageSocialContactsEditSignatureRequest() : signature_() {
  }

  virtual ~MessageSocialContactsEditSignatureRequest() throw() {}

  std::string signature_;

  void __set_signature_(const std::string& val) {
    signature_ = val;
  }

  bool operator == (const MessageSocialContactsEditSignatureRequest & rhs) const
  {
    if (!(signature_ == rhs.signature_))
      return false;
    return true;
  }
  bool operator != (const MessageSocialContactsEditSignatureRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSocialContactsEditSignatureRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSocialContactsEditSignatureRequest &a, MessageSocialContactsEditSignatureRequest &b);

typedef struct _MessageSocialContactsEditSignatureResponse__isset {
  _MessageSocialContactsEditSignatureResponse__isset() : signature_(false) {}
  bool signature_;
} _MessageSocialContactsEditSignatureResponse__isset;

class MessageSocialContactsEditSignatureResponse {
 public:

  static const char* ascii_fingerprint; // = "EB04A806CFFC9025AEE48CFFDC378A86";
  static const uint8_t binary_fingerprint[16]; // = {0xEB,0x04,0xA8,0x06,0xCF,0xFC,0x90,0x25,0xAE,0xE4,0x8C,0xFF,0xDC,0x37,0x8A,0x86};

  MessageSocialContactsEditSignatureResponse() : result_(0), signature_() {
  }

  virtual ~MessageSocialContactsEditSignatureResponse() throw() {}

  bool result_;
  std::string signature_;

  _MessageSocialContactsEditSignatureResponse__isset __isset;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_signature_(const std::string& val) {
    signature_ = val;
    __isset.signature_ = true;
  }

  bool operator == (const MessageSocialContactsEditSignatureResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.signature_ != rhs.__isset.signature_)
      return false;
    else if (__isset.signature_ && !(signature_ == rhs.signature_))
      return false;
    return true;
  }
  bool operator != (const MessageSocialContactsEditSignatureResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSocialContactsEditSignatureResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSocialContactsEditSignatureResponse &a, MessageSocialContactsEditSignatureResponse &b);


class MessageSocialContactsAddRequest {
 public:

  static const char* ascii_fingerprint; // = "D6FD826D949221396F4FFC3ECCD3D192";
  static const uint8_t binary_fingerprint[16]; // = {0xD6,0xFD,0x82,0x6D,0x94,0x92,0x21,0x39,0x6F,0x4F,0xFC,0x3E,0xCC,0xD3,0xD1,0x92};

  MessageSocialContactsAddRequest() : actor_name_(), contacts_type_(( ::entity::ContactsType::type)0) {
  }

  virtual ~MessageSocialContactsAddRequest() throw() {}

  std::string actor_name_;
   ::entity::ContactsType::type contacts_type_;

  void __set_actor_name_(const std::string& val) {
    actor_name_ = val;
  }

  void __set_contacts_type_(const  ::entity::ContactsType::type val) {
    contacts_type_ = val;
  }

  bool operator == (const MessageSocialContactsAddRequest & rhs) const
  {
    if (!(actor_name_ == rhs.actor_name_))
      return false;
    if (!(contacts_type_ == rhs.contacts_type_))
      return false;
    return true;
  }
  bool operator != (const MessageSocialContactsAddRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSocialContactsAddRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSocialContactsAddRequest &a, MessageSocialContactsAddRequest &b);


class MessageSocialContactsAddResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageSocialContactsAddResponse() : result_(0) {
  }

  virtual ~MessageSocialContactsAddResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageSocialContactsAddResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageSocialContactsAddResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSocialContactsAddResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSocialContactsAddResponse &a, MessageSocialContactsAddResponse &b);


class MessageSocialContactsAddNotify {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MessageSocialContactsAddNotify() : actor_name_() {
  }

  virtual ~MessageSocialContactsAddNotify() throw() {}

  std::string actor_name_;

  void __set_actor_name_(const std::string& val) {
    actor_name_ = val;
  }

  bool operator == (const MessageSocialContactsAddNotify & rhs) const
  {
    if (!(actor_name_ == rhs.actor_name_))
      return false;
    return true;
  }
  bool operator != (const MessageSocialContactsAddNotify &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSocialContactsAddNotify & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSocialContactsAddNotify &a, MessageSocialContactsAddNotify &b);


class MessageSocialContactsRemoveRequest {
 public:

  static const char* ascii_fingerprint; // = "D6FD826D949221396F4FFC3ECCD3D192";
  static const uint8_t binary_fingerprint[16]; // = {0xD6,0xFD,0x82,0x6D,0x94,0x92,0x21,0x39,0x6F,0x4F,0xFC,0x3E,0xCC,0xD3,0xD1,0x92};

  MessageSocialContactsRemoveRequest() : actor_id_(), contacts_type_(( ::entity::ContactsType::type)0) {
  }

  virtual ~MessageSocialContactsRemoveRequest() throw() {}

  std::string actor_id_;
   ::entity::ContactsType::type contacts_type_;

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
  }

  void __set_contacts_type_(const  ::entity::ContactsType::type val) {
    contacts_type_ = val;
  }

  bool operator == (const MessageSocialContactsRemoveRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(contacts_type_ == rhs.contacts_type_))
      return false;
    return true;
  }
  bool operator != (const MessageSocialContactsRemoveRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSocialContactsRemoveRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSocialContactsRemoveRequest &a, MessageSocialContactsRemoveRequest &b);


class MessageSocialContactsRemoveResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageSocialContactsRemoveResponse() : result_(0) {
  }

  virtual ~MessageSocialContactsRemoveResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageSocialContactsRemoveResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageSocialContactsRemoveResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSocialContactsRemoveResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSocialContactsRemoveResponse &a, MessageSocialContactsRemoveResponse &b);


class MessageSocialContactsMoveRequest {
 public:

  static const char* ascii_fingerprint; // = "024F8F016D84C980886B97E7D0904502";
  static const uint8_t binary_fingerprint[16]; // = {0x02,0x4F,0x8F,0x01,0x6D,0x84,0xC9,0x80,0x88,0x6B,0x97,0xE7,0xD0,0x90,0x45,0x02};

  MessageSocialContactsMoveRequest() : actor_id_(), src_contacts_type_(( ::entity::ContactsType::type)0), dst_contacts_type_(( ::entity::ContactsType::type)0) {
  }

  virtual ~MessageSocialContactsMoveRequest() throw() {}

  std::string actor_id_;
   ::entity::ContactsType::type src_contacts_type_;
   ::entity::ContactsType::type dst_contacts_type_;

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
  }

  void __set_src_contacts_type_(const  ::entity::ContactsType::type val) {
    src_contacts_type_ = val;
  }

  void __set_dst_contacts_type_(const  ::entity::ContactsType::type val) {
    dst_contacts_type_ = val;
  }

  bool operator == (const MessageSocialContactsMoveRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(src_contacts_type_ == rhs.src_contacts_type_))
      return false;
    if (!(dst_contacts_type_ == rhs.dst_contacts_type_))
      return false;
    return true;
  }
  bool operator != (const MessageSocialContactsMoveRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSocialContactsMoveRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSocialContactsMoveRequest &a, MessageSocialContactsMoveRequest &b);


class MessageSocialContactsMoveResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageSocialContactsMoveResponse() : result_(0) {
  }

  virtual ~MessageSocialContactsMoveResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageSocialContactsMoveResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageSocialContactsMoveResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSocialContactsMoveResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSocialContactsMoveResponse &a, MessageSocialContactsMoveResponse &b);


class MessageSocialContactsRecommendRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageSocialContactsRecommendRequest() {
  }

  virtual ~MessageSocialContactsRecommendRequest() throw() {}


  bool operator == (const MessageSocialContactsRecommendRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageSocialContactsRecommendRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSocialContactsRecommendRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSocialContactsRecommendRequest &a, MessageSocialContactsRecommendRequest &b);


class RecommendContactsData {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  RecommendContactsData() : actor_name_(), level_(0) {
  }

  virtual ~RecommendContactsData() throw() {}

  std::string actor_name_;
  int32_t level_;

  void __set_actor_name_(const std::string& val) {
    actor_name_ = val;
  }

  void __set_level_(const int32_t val) {
    level_ = val;
  }

  bool operator == (const RecommendContactsData & rhs) const
  {
    if (!(actor_name_ == rhs.actor_name_))
      return false;
    if (!(level_ == rhs.level_))
      return false;
    return true;
  }
  bool operator != (const RecommendContactsData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommendContactsData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RecommendContactsData &a, RecommendContactsData &b);


class MessageSocialContactsRecommendResponse {
 public:

  static const char* ascii_fingerprint; // = "3967FCB1D2A588AFFB6B3D0713F6F380";
  static const uint8_t binary_fingerprint[16]; // = {0x39,0x67,0xFC,0xB1,0xD2,0xA5,0x88,0xAF,0xFB,0x6B,0x3D,0x07,0x13,0xF6,0xF3,0x80};

  MessageSocialContactsRecommendResponse() {
  }

  virtual ~MessageSocialContactsRecommendResponse() throw() {}

  std::vector<RecommendContactsData>  contacts_;

  void __set_contacts_(const std::vector<RecommendContactsData> & val) {
    contacts_ = val;
  }

  bool operator == (const MessageSocialContactsRecommendResponse & rhs) const
  {
    if (!(contacts_ == rhs.contacts_))
      return false;
    return true;
  }
  bool operator != (const MessageSocialContactsRecommendResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSocialContactsRecommendResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSocialContactsRecommendResponse &a, MessageSocialContactsRecommendResponse &b);

typedef struct _SocialEnemyData__isset {
  _SocialEnemyData__isset() : online_(false), actor_name_(false), level_(false), gender_(false), vocation_(false), map_(false) {}
  bool online_;
  bool actor_name_;
  bool level_;
  bool gender_;
  bool vocation_;
  bool map_;
} _SocialEnemyData__isset;

class SocialEnemyData {
 public:

  static const char* ascii_fingerprint; // = "1D6333AF91BFD6266BB93768E95C41EA";
  static const uint8_t binary_fingerprint[16]; // = {0x1D,0x63,0x33,0xAF,0x91,0xBF,0xD6,0x26,0x6B,0xB9,0x37,0x68,0xE9,0x5C,0x41,0xEA};

  SocialEnemyData() : actor_id_(), online_(0), actor_name_(), level_(0), gender_(( ::entity::GenderType::type)0), vocation_(( ::entity::VocationType::type)0), map_(0) {
  }

  virtual ~SocialEnemyData() throw() {}

  std::string actor_id_;
  bool online_;
  std::string actor_name_;
  int32_t level_;
   ::entity::GenderType::type gender_;
   ::entity::VocationType::type vocation_;
  int16_t map_;

  _SocialEnemyData__isset __isset;

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
  }

  void __set_online_(const bool val) {
    online_ = val;
    __isset.online_ = true;
  }

  void __set_actor_name_(const std::string& val) {
    actor_name_ = val;
    __isset.actor_name_ = true;
  }

  void __set_level_(const int32_t val) {
    level_ = val;
    __isset.level_ = true;
  }

  void __set_gender_(const  ::entity::GenderType::type val) {
    gender_ = val;
    __isset.gender_ = true;
  }

  void __set_vocation_(const  ::entity::VocationType::type val) {
    vocation_ = val;
    __isset.vocation_ = true;
  }

  void __set_map_(const int16_t val) {
    map_ = val;
    __isset.map_ = true;
  }

  bool operator == (const SocialEnemyData & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (__isset.online_ != rhs.__isset.online_)
      return false;
    else if (__isset.online_ && !(online_ == rhs.online_))
      return false;
    if (__isset.actor_name_ != rhs.__isset.actor_name_)
      return false;
    else if (__isset.actor_name_ && !(actor_name_ == rhs.actor_name_))
      return false;
    if (__isset.level_ != rhs.__isset.level_)
      return false;
    else if (__isset.level_ && !(level_ == rhs.level_))
      return false;
    if (__isset.gender_ != rhs.__isset.gender_)
      return false;
    else if (__isset.gender_ && !(gender_ == rhs.gender_))
      return false;
    if (__isset.vocation_ != rhs.__isset.vocation_)
      return false;
    else if (__isset.vocation_ && !(vocation_ == rhs.vocation_))
      return false;
    if (__isset.map_ != rhs.__isset.map_)
      return false;
    else if (__isset.map_ && !(map_ == rhs.map_))
      return false;
    return true;
  }
  bool operator != (const SocialEnemyData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SocialEnemyData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SocialEnemyData &a, SocialEnemyData &b);


class MessageSocialEnemyInitialize {
 public:

  static const char* ascii_fingerprint; // = "629ED390B974BEADC8FD992FC20A2B38";
  static const uint8_t binary_fingerprint[16]; // = {0x62,0x9E,0xD3,0x90,0xB9,0x74,0xBE,0xAD,0xC8,0xFD,0x99,0x2F,0xC2,0x0A,0x2B,0x38};

  MessageSocialEnemyInitialize() {
  }

  virtual ~MessageSocialEnemyInitialize() throw() {}

  std::vector<SocialEnemyData>  enemies_;

  void __set_enemies_(const std::vector<SocialEnemyData> & val) {
    enemies_ = val;
  }

  bool operator == (const MessageSocialEnemyInitialize & rhs) const
  {
    if (!(enemies_ == rhs.enemies_))
      return false;
    return true;
  }
  bool operator != (const MessageSocialEnemyInitialize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSocialEnemyInitialize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSocialEnemyInitialize &a, MessageSocialEnemyInitialize &b);


class MessageSocialEnemySynchronize {
 public:

  static const char* ascii_fingerprint; // = "05B8C4B1DF3BE4950AE79766C3E09161";
  static const uint8_t binary_fingerprint[16]; // = {0x05,0xB8,0xC4,0xB1,0xDF,0x3B,0xE4,0x95,0x0A,0xE7,0x97,0x66,0xC3,0xE0,0x91,0x61};

  MessageSocialEnemySynchronize() : type_((SocialEnemyOperateType::type)0) {
  }

  virtual ~MessageSocialEnemySynchronize() throw() {}

  SocialEnemyOperateType::type type_;
  SocialEnemyData enemy_;

  void __set_type_(const SocialEnemyOperateType::type val) {
    type_ = val;
  }

  void __set_enemy_(const SocialEnemyData& val) {
    enemy_ = val;
  }

  bool operator == (const MessageSocialEnemySynchronize & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(enemy_ == rhs.enemy_))
      return false;
    return true;
  }
  bool operator != (const MessageSocialEnemySynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSocialEnemySynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSocialEnemySynchronize &a, MessageSocialEnemySynchronize &b);


class MessageSocialEnemyAddRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MessageSocialEnemyAddRequest() : actor_name_() {
  }

  virtual ~MessageSocialEnemyAddRequest() throw() {}

  std::string actor_name_;

  void __set_actor_name_(const std::string& val) {
    actor_name_ = val;
  }

  bool operator == (const MessageSocialEnemyAddRequest & rhs) const
  {
    if (!(actor_name_ == rhs.actor_name_))
      return false;
    return true;
  }
  bool operator != (const MessageSocialEnemyAddRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSocialEnemyAddRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSocialEnemyAddRequest &a, MessageSocialEnemyAddRequest &b);


class MessageSocialEnemyAddResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageSocialEnemyAddResponse() : result_(0) {
  }

  virtual ~MessageSocialEnemyAddResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageSocialEnemyAddResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageSocialEnemyAddResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSocialEnemyAddResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSocialEnemyAddResponse &a, MessageSocialEnemyAddResponse &b);


class MessageSocialEnemyRemoveRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MessageSocialEnemyRemoveRequest() : actor_id_() {
  }

  virtual ~MessageSocialEnemyRemoveRequest() throw() {}

  std::string actor_id_;

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
  }

  bool operator == (const MessageSocialEnemyRemoveRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    return true;
  }
  bool operator != (const MessageSocialEnemyRemoveRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSocialEnemyRemoveRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSocialEnemyRemoveRequest &a, MessageSocialEnemyRemoveRequest &b);


class MessageSocialEnemyRemoveResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageSocialEnemyRemoveResponse() : result_(0) {
  }

  virtual ~MessageSocialEnemyRemoveResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageSocialEnemyRemoveResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageSocialEnemyRemoveResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSocialEnemyRemoveResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSocialEnemyRemoveResponse &a, MessageSocialEnemyRemoveResponse &b);

typedef struct _HomelandFriendData__isset {
  _HomelandFriendData__isset() : can_visit_(false), tree_can_water_(false), tree_can_steal_(false) {}
  bool can_visit_;
  bool tree_can_water_;
  bool tree_can_steal_;
} _HomelandFriendData__isset;

class HomelandFriendData {
 public:

  static const char* ascii_fingerprint; // = "4C425DEF757E2A03CBEF8965E51C1BFB";
  static const uint8_t binary_fingerprint[16]; // = {0x4C,0x42,0x5D,0xEF,0x75,0x7E,0x2A,0x03,0xCB,0xEF,0x89,0x65,0xE5,0x1C,0x1B,0xFB};

  HomelandFriendData() : actor_id_(), can_visit_(0), tree_can_water_(0), tree_can_steal_(0) {
  }

  virtual ~HomelandFriendData() throw() {}

  std::string actor_id_;
  bool can_visit_;
  bool tree_can_water_;
  bool tree_can_steal_;

  _HomelandFriendData__isset __isset;

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
  }

  void __set_can_visit_(const bool val) {
    can_visit_ = val;
    __isset.can_visit_ = true;
  }

  void __set_tree_can_water_(const bool val) {
    tree_can_water_ = val;
    __isset.tree_can_water_ = true;
  }

  void __set_tree_can_steal_(const bool val) {
    tree_can_steal_ = val;
    __isset.tree_can_steal_ = true;
  }

  bool operator == (const HomelandFriendData & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (__isset.can_visit_ != rhs.__isset.can_visit_)
      return false;
    else if (__isset.can_visit_ && !(can_visit_ == rhs.can_visit_))
      return false;
    if (__isset.tree_can_water_ != rhs.__isset.tree_can_water_)
      return false;
    else if (__isset.tree_can_water_ && !(tree_can_water_ == rhs.tree_can_water_))
      return false;
    if (__isset.tree_can_steal_ != rhs.__isset.tree_can_steal_)
      return false;
    else if (__isset.tree_can_steal_ && !(tree_can_steal_ == rhs.tree_can_steal_))
      return false;
    return true;
  }
  bool operator != (const HomelandFriendData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HomelandFriendData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HomelandFriendData &a, HomelandFriendData &b);

typedef struct _HomelandInvaderData__isset {
  _HomelandInvaderData__isset() : actor_name_(false), level_(false), can_visit_(false), can_strike_back_(false) {}
  bool actor_name_;
  bool level_;
  bool can_visit_;
  bool can_strike_back_;
} _HomelandInvaderData__isset;

class HomelandInvaderData {
 public:

  static const char* ascii_fingerprint; // = "3B14CDF4EE0F278981F739C429FC7058";
  static const uint8_t binary_fingerprint[16]; // = {0x3B,0x14,0xCD,0xF4,0xEE,0x0F,0x27,0x89,0x81,0xF7,0x39,0xC4,0x29,0xFC,0x70,0x58};

  HomelandInvaderData() : actor_id_(), actor_name_(), level_(0), can_visit_(0), can_strike_back_(0) {
  }

  virtual ~HomelandInvaderData() throw() {}

  std::string actor_id_;
  std::string actor_name_;
  int32_t level_;
  bool can_visit_;
  bool can_strike_back_;

  _HomelandInvaderData__isset __isset;

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
  }

  void __set_actor_name_(const std::string& val) {
    actor_name_ = val;
    __isset.actor_name_ = true;
  }

  void __set_level_(const int32_t val) {
    level_ = val;
    __isset.level_ = true;
  }

  void __set_can_visit_(const bool val) {
    can_visit_ = val;
    __isset.can_visit_ = true;
  }

  void __set_can_strike_back_(const bool val) {
    can_strike_back_ = val;
    __isset.can_strike_back_ = true;
  }

  bool operator == (const HomelandInvaderData & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (__isset.actor_name_ != rhs.__isset.actor_name_)
      return false;
    else if (__isset.actor_name_ && !(actor_name_ == rhs.actor_name_))
      return false;
    if (__isset.level_ != rhs.__isset.level_)
      return false;
    else if (__isset.level_ && !(level_ == rhs.level_))
      return false;
    if (__isset.can_visit_ != rhs.__isset.can_visit_)
      return false;
    else if (__isset.can_visit_ && !(can_visit_ == rhs.can_visit_))
      return false;
    if (__isset.can_strike_back_ != rhs.__isset.can_strike_back_)
      return false;
    else if (__isset.can_strike_back_ && !(can_strike_back_ == rhs.can_strike_back_))
      return false;
    return true;
  }
  bool operator != (const HomelandInvaderData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HomelandInvaderData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HomelandInvaderData &a, HomelandInvaderData &b);

typedef struct _HomelandSupportedSoulData__isset {
  _HomelandSupportedSoulData__isset() : actor_name_(false), soul_id_(false), soul_level_(false), leave_cooling_(false) {}
  bool actor_name_;
  bool soul_id_;
  bool soul_level_;
  bool leave_cooling_;
} _HomelandSupportedSoulData__isset;

class HomelandSupportedSoulData {
 public:

  static const char* ascii_fingerprint; // = "ED9A997A6C663B2A6DDAF280383349E9";
  static const uint8_t binary_fingerprint[16]; // = {0xED,0x9A,0x99,0x7A,0x6C,0x66,0x3B,0x2A,0x6D,0xDA,0xF2,0x80,0x38,0x33,0x49,0xE9};

  HomelandSupportedSoulData() : actor_id_(), actor_name_(), soul_id_(0), soul_level_(0), leave_cooling_(0) {
  }

  virtual ~HomelandSupportedSoulData() throw() {}

  std::string actor_id_;
  std::string actor_name_;
  int32_t soul_id_;
  int32_t soul_level_;
  int32_t leave_cooling_;

  _HomelandSupportedSoulData__isset __isset;

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
  }

  void __set_actor_name_(const std::string& val) {
    actor_name_ = val;
    __isset.actor_name_ = true;
  }

  void __set_soul_id_(const int32_t val) {
    soul_id_ = val;
    __isset.soul_id_ = true;
  }

  void __set_soul_level_(const int32_t val) {
    soul_level_ = val;
    __isset.soul_level_ = true;
  }

  void __set_leave_cooling_(const int32_t val) {
    leave_cooling_ = val;
    __isset.leave_cooling_ = true;
  }

  bool operator == (const HomelandSupportedSoulData & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (__isset.actor_name_ != rhs.__isset.actor_name_)
      return false;
    else if (__isset.actor_name_ && !(actor_name_ == rhs.actor_name_))
      return false;
    if (__isset.soul_id_ != rhs.__isset.soul_id_)
      return false;
    else if (__isset.soul_id_ && !(soul_id_ == rhs.soul_id_))
      return false;
    if (__isset.soul_level_ != rhs.__isset.soul_level_)
      return false;
    else if (__isset.soul_level_ && !(soul_level_ == rhs.soul_level_))
      return false;
    if (__isset.leave_cooling_ != rhs.__isset.leave_cooling_)
      return false;
    else if (__isset.leave_cooling_ && !(leave_cooling_ == rhs.leave_cooling_))
      return false;
    return true;
  }
  bool operator != (const HomelandSupportedSoulData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HomelandSupportedSoulData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HomelandSupportedSoulData &a, HomelandSupportedSoulData &b);

typedef struct _HomelandSupportSoulData__isset {
  _HomelandSupportSoulData__isset() : actor_id_(false), actor_name_(false), cooling_(false) {}
  bool actor_id_;
  bool actor_name_;
  bool cooling_;
} _HomelandSupportSoulData__isset;

class HomelandSupportSoulData {
 public:

  static const char* ascii_fingerprint; // = "4565BB1FF0D1E9F90EE8B3F200B0C257";
  static const uint8_t binary_fingerprint[16]; // = {0x45,0x65,0xBB,0x1F,0xF0,0xD1,0xE9,0xF9,0x0E,0xE8,0xB3,0xF2,0x00,0xB0,0xC2,0x57};

  HomelandSupportSoulData() : soul_id_(0), actor_id_(), actor_name_(), cooling_(0) {
  }

  virtual ~HomelandSupportSoulData() throw() {}

  int32_t soul_id_;
  std::string actor_id_;
  std::string actor_name_;
  int32_t cooling_;

  _HomelandSupportSoulData__isset __isset;

  void __set_soul_id_(const int32_t val) {
    soul_id_ = val;
  }

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
    __isset.actor_id_ = true;
  }

  void __set_actor_name_(const std::string& val) {
    actor_name_ = val;
    __isset.actor_name_ = true;
  }

  void __set_cooling_(const int32_t val) {
    cooling_ = val;
    __isset.cooling_ = true;
  }

  bool operator == (const HomelandSupportSoulData & rhs) const
  {
    if (!(soul_id_ == rhs.soul_id_))
      return false;
    if (__isset.actor_id_ != rhs.__isset.actor_id_)
      return false;
    else if (__isset.actor_id_ && !(actor_id_ == rhs.actor_id_))
      return false;
    if (__isset.actor_name_ != rhs.__isset.actor_name_)
      return false;
    else if (__isset.actor_name_ && !(actor_name_ == rhs.actor_name_))
      return false;
    if (__isset.cooling_ != rhs.__isset.cooling_)
      return false;
    else if (__isset.cooling_ && !(cooling_ == rhs.cooling_))
      return false;
    return true;
  }
  bool operator != (const HomelandSupportSoulData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HomelandSupportSoulData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HomelandSupportSoulData &a, HomelandSupportSoulData &b);


class HomelandEventData {
 public:

  static const char* ascii_fingerprint; // = "D121591FCC85D0E17C727CA264A5F46D";
  static const uint8_t binary_fingerprint[16]; // = {0xD1,0x21,0x59,0x1F,0xCC,0x85,0xD0,0xE1,0x7C,0x72,0x7C,0xA2,0x64,0xA5,0xF4,0x6D};

  HomelandEventData() : event_type_(( ::entity::HomelandEventType::type)0), timestamp_() {
  }

  virtual ~HomelandEventData() throw() {}

   ::entity::HomelandEventType::type event_type_;
  std::string timestamp_;
  std::vector<std::string>  vars_;

  void __set_event_type_(const  ::entity::HomelandEventType::type val) {
    event_type_ = val;
  }

  void __set_timestamp_(const std::string& val) {
    timestamp_ = val;
  }

  void __set_vars_(const std::vector<std::string> & val) {
    vars_ = val;
  }

  bool operator == (const HomelandEventData & rhs) const
  {
    if (!(event_type_ == rhs.event_type_))
      return false;
    if (!(timestamp_ == rhs.timestamp_))
      return false;
    if (!(vars_ == rhs.vars_))
      return false;
    return true;
  }
  bool operator != (const HomelandEventData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HomelandEventData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HomelandEventData &a, HomelandEventData &b);


class MessageHomelandInitialize {
 public:

  static const char* ascii_fingerprint; // = "C6837D6652BC26E5A9678AE896D2713B";
  static const uint8_t binary_fingerprint[16]; // = {0xC6,0x83,0x7D,0x66,0x52,0xBC,0x26,0xE5,0xA9,0x67,0x8A,0xE8,0x96,0xD2,0x71,0x3B};

  MessageHomelandInitialize() : upgrade_cooling_(0), upgrade_cooling_red_(0), temple_level_(0), temple_harvest_times_(0), temple_force_harvest_times_(0), temple_harvest_cooling_(0), goldmine_level_(0), goldmine_harvest_cooling_(0), goldmine_robbed_times_(0), goldmine_loss_rate_(0), goldmine_rob_times_(0), goldmine_rob_cooling_(0), pool_level_(0), pool_accumulate_time_(0), church_free_pray_times_(0), church_paid_pray_times_(0), church_free_refresh_times_(0), church_chest_type_(0), tree_level_(0), tree_harvest_times_(0), tree_stage_(( ::entity::HomelandTreeStageType::type)0), tree_watered_times_(0), tree_stolen_times_(0), tree_water_cooling_(0), tree_growing_cooling_(0), tree_assist_water_times_(0), tower1_level_(0), tower2_level_(0), stronghold_level_(0), stronghold_call_support_cooling_(0), stronghold_support_times_(0) {
  }

  virtual ~MessageHomelandInitialize() throw() {}

  int32_t upgrade_cooling_;
  bool upgrade_cooling_red_;
  int32_t temple_level_;
  int32_t temple_harvest_times_;
  int32_t temple_force_harvest_times_;
  int32_t temple_harvest_cooling_;
  int32_t goldmine_level_;
  int32_t goldmine_harvest_cooling_;
  int32_t goldmine_robbed_times_;
  int32_t goldmine_loss_rate_;
  int32_t goldmine_rob_times_;
  int32_t goldmine_rob_cooling_;
  int32_t pool_level_;
  int32_t pool_accumulate_time_;
  int32_t church_free_pray_times_;
  int32_t church_paid_pray_times_;
  int32_t church_free_refresh_times_;
  int32_t church_chest_type_;
  int32_t tree_level_;
  int32_t tree_harvest_times_;
   ::entity::HomelandTreeStageType::type tree_stage_;
  int32_t tree_watered_times_;
  int32_t tree_stolen_times_;
  int32_t tree_water_cooling_;
  int32_t tree_growing_cooling_;
  int32_t tree_assist_water_times_;
  int32_t tower1_level_;
  int32_t tower2_level_;
  int32_t stronghold_level_;
  int32_t stronghold_call_support_cooling_;
  int32_t stronghold_support_times_;
  std::vector<HomelandSupportedSoulData>  stronghold_supported_souls_;
  std::vector<HomelandSupportSoulData>  stronghold_support_souls_;
  std::vector<HomelandFriendData>  friends_;
  std::vector<HomelandInvaderData>  invaders_;
  std::vector<HomelandEventData>  events_;

  void __set_upgrade_cooling_(const int32_t val) {
    upgrade_cooling_ = val;
  }

  void __set_upgrade_cooling_red_(const bool val) {
    upgrade_cooling_red_ = val;
  }

  void __set_temple_level_(const int32_t val) {
    temple_level_ = val;
  }

  void __set_temple_harvest_times_(const int32_t val) {
    temple_harvest_times_ = val;
  }

  void __set_temple_force_harvest_times_(const int32_t val) {
    temple_force_harvest_times_ = val;
  }

  void __set_temple_harvest_cooling_(const int32_t val) {
    temple_harvest_cooling_ = val;
  }

  void __set_goldmine_level_(const int32_t val) {
    goldmine_level_ = val;
  }

  void __set_goldmine_harvest_cooling_(const int32_t val) {
    goldmine_harvest_cooling_ = val;
  }

  void __set_goldmine_robbed_times_(const int32_t val) {
    goldmine_robbed_times_ = val;
  }

  void __set_goldmine_loss_rate_(const int32_t val) {
    goldmine_loss_rate_ = val;
  }

  void __set_goldmine_rob_times_(const int32_t val) {
    goldmine_rob_times_ = val;
  }

  void __set_goldmine_rob_cooling_(const int32_t val) {
    goldmine_rob_cooling_ = val;
  }

  void __set_pool_level_(const int32_t val) {
    pool_level_ = val;
  }

  void __set_pool_accumulate_time_(const int32_t val) {
    pool_accumulate_time_ = val;
  }

  void __set_church_free_pray_times_(const int32_t val) {
    church_free_pray_times_ = val;
  }

  void __set_church_paid_pray_times_(const int32_t val) {
    church_paid_pray_times_ = val;
  }

  void __set_church_free_refresh_times_(const int32_t val) {
    church_free_refresh_times_ = val;
  }

  void __set_church_chest_type_(const int32_t val) {
    church_chest_type_ = val;
  }

  void __set_tree_level_(const int32_t val) {
    tree_level_ = val;
  }

  void __set_tree_harvest_times_(const int32_t val) {
    tree_harvest_times_ = val;
  }

  void __set_tree_stage_(const  ::entity::HomelandTreeStageType::type val) {
    tree_stage_ = val;
  }

  void __set_tree_watered_times_(const int32_t val) {
    tree_watered_times_ = val;
  }

  void __set_tree_stolen_times_(const int32_t val) {
    tree_stolen_times_ = val;
  }

  void __set_tree_water_cooling_(const int32_t val) {
    tree_water_cooling_ = val;
  }

  void __set_tree_growing_cooling_(const int32_t val) {
    tree_growing_cooling_ = val;
  }

  void __set_tree_assist_water_times_(const int32_t val) {
    tree_assist_water_times_ = val;
  }

  void __set_tower1_level_(const int32_t val) {
    tower1_level_ = val;
  }

  void __set_tower2_level_(const int32_t val) {
    tower2_level_ = val;
  }

  void __set_stronghold_level_(const int32_t val) {
    stronghold_level_ = val;
  }

  void __set_stronghold_call_support_cooling_(const int32_t val) {
    stronghold_call_support_cooling_ = val;
  }

  void __set_stronghold_support_times_(const int32_t val) {
    stronghold_support_times_ = val;
  }

  void __set_stronghold_supported_souls_(const std::vector<HomelandSupportedSoulData> & val) {
    stronghold_supported_souls_ = val;
  }

  void __set_stronghold_support_souls_(const std::vector<HomelandSupportSoulData> & val) {
    stronghold_support_souls_ = val;
  }

  void __set_friends_(const std::vector<HomelandFriendData> & val) {
    friends_ = val;
  }

  void __set_invaders_(const std::vector<HomelandInvaderData> & val) {
    invaders_ = val;
  }

  void __set_events_(const std::vector<HomelandEventData> & val) {
    events_ = val;
  }

  bool operator == (const MessageHomelandInitialize & rhs) const
  {
    if (!(upgrade_cooling_ == rhs.upgrade_cooling_))
      return false;
    if (!(upgrade_cooling_red_ == rhs.upgrade_cooling_red_))
      return false;
    if (!(temple_level_ == rhs.temple_level_))
      return false;
    if (!(temple_harvest_times_ == rhs.temple_harvest_times_))
      return false;
    if (!(temple_force_harvest_times_ == rhs.temple_force_harvest_times_))
      return false;
    if (!(temple_harvest_cooling_ == rhs.temple_harvest_cooling_))
      return false;
    if (!(goldmine_level_ == rhs.goldmine_level_))
      return false;
    if (!(goldmine_harvest_cooling_ == rhs.goldmine_harvest_cooling_))
      return false;
    if (!(goldmine_robbed_times_ == rhs.goldmine_robbed_times_))
      return false;
    if (!(goldmine_loss_rate_ == rhs.goldmine_loss_rate_))
      return false;
    if (!(goldmine_rob_times_ == rhs.goldmine_rob_times_))
      return false;
    if (!(goldmine_rob_cooling_ == rhs.goldmine_rob_cooling_))
      return false;
    if (!(pool_level_ == rhs.pool_level_))
      return false;
    if (!(pool_accumulate_time_ == rhs.pool_accumulate_time_))
      return false;
    if (!(church_free_pray_times_ == rhs.church_free_pray_times_))
      return false;
    if (!(church_paid_pray_times_ == rhs.church_paid_pray_times_))
      return false;
    if (!(church_free_refresh_times_ == rhs.church_free_refresh_times_))
      return false;
    if (!(church_chest_type_ == rhs.church_chest_type_))
      return false;
    if (!(tree_level_ == rhs.tree_level_))
      return false;
    if (!(tree_harvest_times_ == rhs.tree_harvest_times_))
      return false;
    if (!(tree_stage_ == rhs.tree_stage_))
      return false;
    if (!(tree_watered_times_ == rhs.tree_watered_times_))
      return false;
    if (!(tree_stolen_times_ == rhs.tree_stolen_times_))
      return false;
    if (!(tree_water_cooling_ == rhs.tree_water_cooling_))
      return false;
    if (!(tree_growing_cooling_ == rhs.tree_growing_cooling_))
      return false;
    if (!(tree_assist_water_times_ == rhs.tree_assist_water_times_))
      return false;
    if (!(tower1_level_ == rhs.tower1_level_))
      return false;
    if (!(tower2_level_ == rhs.tower2_level_))
      return false;
    if (!(stronghold_level_ == rhs.stronghold_level_))
      return false;
    if (!(stronghold_call_support_cooling_ == rhs.stronghold_call_support_cooling_))
      return false;
    if (!(stronghold_support_times_ == rhs.stronghold_support_times_))
      return false;
    if (!(stronghold_supported_souls_ == rhs.stronghold_supported_souls_))
      return false;
    if (!(stronghold_support_souls_ == rhs.stronghold_support_souls_))
      return false;
    if (!(friends_ == rhs.friends_))
      return false;
    if (!(invaders_ == rhs.invaders_))
      return false;
    if (!(events_ == rhs.events_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandInitialize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandInitialize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandInitialize &a, MessageHomelandInitialize &b);

typedef struct _MessageHomelandSynchronize__isset {
  _MessageHomelandSynchronize__isset() : upgrade_cooling_(false), upgrade_cooling_red_(false), temple_level_(false), temple_harvest_times_(false), temple_force_harvest_times_(false), temple_harvest_cooling_(false), goldmine_level_(false), goldmine_harvest_cooling_(false), goldmine_robbed_times_(false), goldmine_loss_rate_(false), goldmine_rob_times_(false), goldmine_rob_cooling_(false), pool_level_(false), pool_accumulate_time_(false), church_free_pray_times_(false), church_paid_pray_times_(false), church_free_refresh_times_(false), church_chest_type_(false), tree_level_(false), tree_harvest_times_(false), tree_stage_(false), tree_watered_times_(false), tree_stolen_times_(false), tree_water_cooling_(false), tree_growing_cooling_(false), tree_assist_water_times_(false), tower1_level_(false), tower2_level_(false), stronghold_level_(false), stronghold_call_support_cooling_(false), stronghold_support_times_(false) {}
  bool upgrade_cooling_;
  bool upgrade_cooling_red_;
  bool temple_level_;
  bool temple_harvest_times_;
  bool temple_force_harvest_times_;
  bool temple_harvest_cooling_;
  bool goldmine_level_;
  bool goldmine_harvest_cooling_;
  bool goldmine_robbed_times_;
  bool goldmine_loss_rate_;
  bool goldmine_rob_times_;
  bool goldmine_rob_cooling_;
  bool pool_level_;
  bool pool_accumulate_time_;
  bool church_free_pray_times_;
  bool church_paid_pray_times_;
  bool church_free_refresh_times_;
  bool church_chest_type_;
  bool tree_level_;
  bool tree_harvest_times_;
  bool tree_stage_;
  bool tree_watered_times_;
  bool tree_stolen_times_;
  bool tree_water_cooling_;
  bool tree_growing_cooling_;
  bool tree_assist_water_times_;
  bool tower1_level_;
  bool tower2_level_;
  bool stronghold_level_;
  bool stronghold_call_support_cooling_;
  bool stronghold_support_times_;
} _MessageHomelandSynchronize__isset;

class MessageHomelandSynchronize {
 public:

  static const char* ascii_fingerprint; // = "9336462648A5F2F851772504C1C3E309";
  static const uint8_t binary_fingerprint[16]; // = {0x93,0x36,0x46,0x26,0x48,0xA5,0xF2,0xF8,0x51,0x77,0x25,0x04,0xC1,0xC3,0xE3,0x09};

  MessageHomelandSynchronize() : upgrade_cooling_(0), upgrade_cooling_red_(0), temple_level_(0), temple_harvest_times_(0), temple_force_harvest_times_(0), temple_harvest_cooling_(0), goldmine_level_(0), goldmine_harvest_cooling_(0), goldmine_robbed_times_(0), goldmine_loss_rate_(0), goldmine_rob_times_(0), goldmine_rob_cooling_(0), pool_level_(0), pool_accumulate_time_(0), church_free_pray_times_(0), church_paid_pray_times_(0), church_free_refresh_times_(0), church_chest_type_(0), tree_level_(0), tree_harvest_times_(0), tree_stage_(( ::entity::HomelandTreeStageType::type)0), tree_watered_times_(0), tree_stolen_times_(0), tree_water_cooling_(0), tree_growing_cooling_(0), tree_assist_water_times_(0), tower1_level_(0), tower2_level_(0), stronghold_level_(0), stronghold_call_support_cooling_(0), stronghold_support_times_(0) {
  }

  virtual ~MessageHomelandSynchronize() throw() {}

  int32_t upgrade_cooling_;
  bool upgrade_cooling_red_;
  int32_t temple_level_;
  int32_t temple_harvest_times_;
  int32_t temple_force_harvest_times_;
  int32_t temple_harvest_cooling_;
  int32_t goldmine_level_;
  int32_t goldmine_harvest_cooling_;
  int32_t goldmine_robbed_times_;
  int32_t goldmine_loss_rate_;
  int32_t goldmine_rob_times_;
  int32_t goldmine_rob_cooling_;
  int32_t pool_level_;
  int32_t pool_accumulate_time_;
  int32_t church_free_pray_times_;
  int32_t church_paid_pray_times_;
  int32_t church_free_refresh_times_;
  int32_t church_chest_type_;
  int32_t tree_level_;
  int32_t tree_harvest_times_;
   ::entity::HomelandTreeStageType::type tree_stage_;
  int32_t tree_watered_times_;
  int32_t tree_stolen_times_;
  int32_t tree_water_cooling_;
  int32_t tree_growing_cooling_;
  int32_t tree_assist_water_times_;
  int32_t tower1_level_;
  int32_t tower2_level_;
  int32_t stronghold_level_;
  int32_t stronghold_call_support_cooling_;
  int32_t stronghold_support_times_;

  _MessageHomelandSynchronize__isset __isset;

  void __set_upgrade_cooling_(const int32_t val) {
    upgrade_cooling_ = val;
    __isset.upgrade_cooling_ = true;
  }

  void __set_upgrade_cooling_red_(const bool val) {
    upgrade_cooling_red_ = val;
    __isset.upgrade_cooling_red_ = true;
  }

  void __set_temple_level_(const int32_t val) {
    temple_level_ = val;
    __isset.temple_level_ = true;
  }

  void __set_temple_harvest_times_(const int32_t val) {
    temple_harvest_times_ = val;
    __isset.temple_harvest_times_ = true;
  }

  void __set_temple_force_harvest_times_(const int32_t val) {
    temple_force_harvest_times_ = val;
    __isset.temple_force_harvest_times_ = true;
  }

  void __set_temple_harvest_cooling_(const int32_t val) {
    temple_harvest_cooling_ = val;
    __isset.temple_harvest_cooling_ = true;
  }

  void __set_goldmine_level_(const int32_t val) {
    goldmine_level_ = val;
    __isset.goldmine_level_ = true;
  }

  void __set_goldmine_harvest_cooling_(const int32_t val) {
    goldmine_harvest_cooling_ = val;
    __isset.goldmine_harvest_cooling_ = true;
  }

  void __set_goldmine_robbed_times_(const int32_t val) {
    goldmine_robbed_times_ = val;
    __isset.goldmine_robbed_times_ = true;
  }

  void __set_goldmine_loss_rate_(const int32_t val) {
    goldmine_loss_rate_ = val;
    __isset.goldmine_loss_rate_ = true;
  }

  void __set_goldmine_rob_times_(const int32_t val) {
    goldmine_rob_times_ = val;
    __isset.goldmine_rob_times_ = true;
  }

  void __set_goldmine_rob_cooling_(const int32_t val) {
    goldmine_rob_cooling_ = val;
    __isset.goldmine_rob_cooling_ = true;
  }

  void __set_pool_level_(const int32_t val) {
    pool_level_ = val;
    __isset.pool_level_ = true;
  }

  void __set_pool_accumulate_time_(const int32_t val) {
    pool_accumulate_time_ = val;
    __isset.pool_accumulate_time_ = true;
  }

  void __set_church_free_pray_times_(const int32_t val) {
    church_free_pray_times_ = val;
    __isset.church_free_pray_times_ = true;
  }

  void __set_church_paid_pray_times_(const int32_t val) {
    church_paid_pray_times_ = val;
    __isset.church_paid_pray_times_ = true;
  }

  void __set_church_free_refresh_times_(const int32_t val) {
    church_free_refresh_times_ = val;
    __isset.church_free_refresh_times_ = true;
  }

  void __set_church_chest_type_(const int32_t val) {
    church_chest_type_ = val;
    __isset.church_chest_type_ = true;
  }

  void __set_tree_level_(const int32_t val) {
    tree_level_ = val;
    __isset.tree_level_ = true;
  }

  void __set_tree_harvest_times_(const int32_t val) {
    tree_harvest_times_ = val;
    __isset.tree_harvest_times_ = true;
  }

  void __set_tree_stage_(const  ::entity::HomelandTreeStageType::type val) {
    tree_stage_ = val;
    __isset.tree_stage_ = true;
  }

  void __set_tree_watered_times_(const int32_t val) {
    tree_watered_times_ = val;
    __isset.tree_watered_times_ = true;
  }

  void __set_tree_stolen_times_(const int32_t val) {
    tree_stolen_times_ = val;
    __isset.tree_stolen_times_ = true;
  }

  void __set_tree_water_cooling_(const int32_t val) {
    tree_water_cooling_ = val;
    __isset.tree_water_cooling_ = true;
  }

  void __set_tree_growing_cooling_(const int32_t val) {
    tree_growing_cooling_ = val;
    __isset.tree_growing_cooling_ = true;
  }

  void __set_tree_assist_water_times_(const int32_t val) {
    tree_assist_water_times_ = val;
    __isset.tree_assist_water_times_ = true;
  }

  void __set_tower1_level_(const int32_t val) {
    tower1_level_ = val;
    __isset.tower1_level_ = true;
  }

  void __set_tower2_level_(const int32_t val) {
    tower2_level_ = val;
    __isset.tower2_level_ = true;
  }

  void __set_stronghold_level_(const int32_t val) {
    stronghold_level_ = val;
    __isset.stronghold_level_ = true;
  }

  void __set_stronghold_call_support_cooling_(const int32_t val) {
    stronghold_call_support_cooling_ = val;
    __isset.stronghold_call_support_cooling_ = true;
  }

  void __set_stronghold_support_times_(const int32_t val) {
    stronghold_support_times_ = val;
    __isset.stronghold_support_times_ = true;
  }

  bool operator == (const MessageHomelandSynchronize & rhs) const
  {
    if (__isset.upgrade_cooling_ != rhs.__isset.upgrade_cooling_)
      return false;
    else if (__isset.upgrade_cooling_ && !(upgrade_cooling_ == rhs.upgrade_cooling_))
      return false;
    if (__isset.upgrade_cooling_red_ != rhs.__isset.upgrade_cooling_red_)
      return false;
    else if (__isset.upgrade_cooling_red_ && !(upgrade_cooling_red_ == rhs.upgrade_cooling_red_))
      return false;
    if (__isset.temple_level_ != rhs.__isset.temple_level_)
      return false;
    else if (__isset.temple_level_ && !(temple_level_ == rhs.temple_level_))
      return false;
    if (__isset.temple_harvest_times_ != rhs.__isset.temple_harvest_times_)
      return false;
    else if (__isset.temple_harvest_times_ && !(temple_harvest_times_ == rhs.temple_harvest_times_))
      return false;
    if (__isset.temple_force_harvest_times_ != rhs.__isset.temple_force_harvest_times_)
      return false;
    else if (__isset.temple_force_harvest_times_ && !(temple_force_harvest_times_ == rhs.temple_force_harvest_times_))
      return false;
    if (__isset.temple_harvest_cooling_ != rhs.__isset.temple_harvest_cooling_)
      return false;
    else if (__isset.temple_harvest_cooling_ && !(temple_harvest_cooling_ == rhs.temple_harvest_cooling_))
      return false;
    if (__isset.goldmine_level_ != rhs.__isset.goldmine_level_)
      return false;
    else if (__isset.goldmine_level_ && !(goldmine_level_ == rhs.goldmine_level_))
      return false;
    if (__isset.goldmine_harvest_cooling_ != rhs.__isset.goldmine_harvest_cooling_)
      return false;
    else if (__isset.goldmine_harvest_cooling_ && !(goldmine_harvest_cooling_ == rhs.goldmine_harvest_cooling_))
      return false;
    if (__isset.goldmine_robbed_times_ != rhs.__isset.goldmine_robbed_times_)
      return false;
    else if (__isset.goldmine_robbed_times_ && !(goldmine_robbed_times_ == rhs.goldmine_robbed_times_))
      return false;
    if (__isset.goldmine_loss_rate_ != rhs.__isset.goldmine_loss_rate_)
      return false;
    else if (__isset.goldmine_loss_rate_ && !(goldmine_loss_rate_ == rhs.goldmine_loss_rate_))
      return false;
    if (__isset.goldmine_rob_times_ != rhs.__isset.goldmine_rob_times_)
      return false;
    else if (__isset.goldmine_rob_times_ && !(goldmine_rob_times_ == rhs.goldmine_rob_times_))
      return false;
    if (__isset.goldmine_rob_cooling_ != rhs.__isset.goldmine_rob_cooling_)
      return false;
    else if (__isset.goldmine_rob_cooling_ && !(goldmine_rob_cooling_ == rhs.goldmine_rob_cooling_))
      return false;
    if (__isset.pool_level_ != rhs.__isset.pool_level_)
      return false;
    else if (__isset.pool_level_ && !(pool_level_ == rhs.pool_level_))
      return false;
    if (__isset.pool_accumulate_time_ != rhs.__isset.pool_accumulate_time_)
      return false;
    else if (__isset.pool_accumulate_time_ && !(pool_accumulate_time_ == rhs.pool_accumulate_time_))
      return false;
    if (__isset.church_free_pray_times_ != rhs.__isset.church_free_pray_times_)
      return false;
    else if (__isset.church_free_pray_times_ && !(church_free_pray_times_ == rhs.church_free_pray_times_))
      return false;
    if (__isset.church_paid_pray_times_ != rhs.__isset.church_paid_pray_times_)
      return false;
    else if (__isset.church_paid_pray_times_ && !(church_paid_pray_times_ == rhs.church_paid_pray_times_))
      return false;
    if (__isset.church_free_refresh_times_ != rhs.__isset.church_free_refresh_times_)
      return false;
    else if (__isset.church_free_refresh_times_ && !(church_free_refresh_times_ == rhs.church_free_refresh_times_))
      return false;
    if (__isset.church_chest_type_ != rhs.__isset.church_chest_type_)
      return false;
    else if (__isset.church_chest_type_ && !(church_chest_type_ == rhs.church_chest_type_))
      return false;
    if (__isset.tree_level_ != rhs.__isset.tree_level_)
      return false;
    else if (__isset.tree_level_ && !(tree_level_ == rhs.tree_level_))
      return false;
    if (__isset.tree_harvest_times_ != rhs.__isset.tree_harvest_times_)
      return false;
    else if (__isset.tree_harvest_times_ && !(tree_harvest_times_ == rhs.tree_harvest_times_))
      return false;
    if (__isset.tree_stage_ != rhs.__isset.tree_stage_)
      return false;
    else if (__isset.tree_stage_ && !(tree_stage_ == rhs.tree_stage_))
      return false;
    if (__isset.tree_watered_times_ != rhs.__isset.tree_watered_times_)
      return false;
    else if (__isset.tree_watered_times_ && !(tree_watered_times_ == rhs.tree_watered_times_))
      return false;
    if (__isset.tree_stolen_times_ != rhs.__isset.tree_stolen_times_)
      return false;
    else if (__isset.tree_stolen_times_ && !(tree_stolen_times_ == rhs.tree_stolen_times_))
      return false;
    if (__isset.tree_water_cooling_ != rhs.__isset.tree_water_cooling_)
      return false;
    else if (__isset.tree_water_cooling_ && !(tree_water_cooling_ == rhs.tree_water_cooling_))
      return false;
    if (__isset.tree_growing_cooling_ != rhs.__isset.tree_growing_cooling_)
      return false;
    else if (__isset.tree_growing_cooling_ && !(tree_growing_cooling_ == rhs.tree_growing_cooling_))
      return false;
    if (__isset.tree_assist_water_times_ != rhs.__isset.tree_assist_water_times_)
      return false;
    else if (__isset.tree_assist_water_times_ && !(tree_assist_water_times_ == rhs.tree_assist_water_times_))
      return false;
    if (__isset.tower1_level_ != rhs.__isset.tower1_level_)
      return false;
    else if (__isset.tower1_level_ && !(tower1_level_ == rhs.tower1_level_))
      return false;
    if (__isset.tower2_level_ != rhs.__isset.tower2_level_)
      return false;
    else if (__isset.tower2_level_ && !(tower2_level_ == rhs.tower2_level_))
      return false;
    if (__isset.stronghold_level_ != rhs.__isset.stronghold_level_)
      return false;
    else if (__isset.stronghold_level_ && !(stronghold_level_ == rhs.stronghold_level_))
      return false;
    if (__isset.stronghold_call_support_cooling_ != rhs.__isset.stronghold_call_support_cooling_)
      return false;
    else if (__isset.stronghold_call_support_cooling_ && !(stronghold_call_support_cooling_ == rhs.stronghold_call_support_cooling_))
      return false;
    if (__isset.stronghold_support_times_ != rhs.__isset.stronghold_support_times_)
      return false;
    else if (__isset.stronghold_support_times_ && !(stronghold_support_times_ == rhs.stronghold_support_times_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandSynchronize &a, MessageHomelandSynchronize &b);


class MessageHomelandFriendSynchronize {
 public:

  static const char* ascii_fingerprint; // = "5CCC3CD993CC2EFA870D0F750E01AA7E";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0xCC,0x3C,0xD9,0x93,0xCC,0x2E,0xFA,0x87,0x0D,0x0F,0x75,0x0E,0x01,0xAA,0x7E};

  MessageHomelandFriendSynchronize() : type_((HomelandFriendOperateType::type)0) {
  }

  virtual ~MessageHomelandFriendSynchronize() throw() {}

  HomelandFriendOperateType::type type_;
  HomelandFriendData data_;

  void __set_type_(const HomelandFriendOperateType::type val) {
    type_ = val;
  }

  void __set_data_(const HomelandFriendData& val) {
    data_ = val;
  }

  bool operator == (const MessageHomelandFriendSynchronize & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(data_ == rhs.data_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandFriendSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandFriendSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandFriendSynchronize &a, MessageHomelandFriendSynchronize &b);


class MessageHomelandInvaderSynchronize {
 public:

  static const char* ascii_fingerprint; // = "F84DD9F53FC6CE4F37ECA9C3E1473504";
  static const uint8_t binary_fingerprint[16]; // = {0xF8,0x4D,0xD9,0xF5,0x3F,0xC6,0xCE,0x4F,0x37,0xEC,0xA9,0xC3,0xE1,0x47,0x35,0x04};

  MessageHomelandInvaderSynchronize() : type_((HomelandInvaderOperateType::type)0) {
  }

  virtual ~MessageHomelandInvaderSynchronize() throw() {}

  HomelandInvaderOperateType::type type_;
  HomelandInvaderData data_;

  void __set_type_(const HomelandInvaderOperateType::type val) {
    type_ = val;
  }

  void __set_data_(const HomelandInvaderData& val) {
    data_ = val;
  }

  bool operator == (const MessageHomelandInvaderSynchronize & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(data_ == rhs.data_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandInvaderSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandInvaderSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandInvaderSynchronize &a, MessageHomelandInvaderSynchronize &b);


class MessageHomelandSupportedSoulSynchronize {
 public:

  static const char* ascii_fingerprint; // = "4BE2604F3C949CA95ED5862B3682681B";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0xE2,0x60,0x4F,0x3C,0x94,0x9C,0xA9,0x5E,0xD5,0x86,0x2B,0x36,0x82,0x68,0x1B};

  MessageHomelandSupportedSoulSynchronize() : type_((HomelandSupportedSoulOperateType::type)0) {
  }

  virtual ~MessageHomelandSupportedSoulSynchronize() throw() {}

  HomelandSupportedSoulOperateType::type type_;
  HomelandSupportedSoulData data_;

  void __set_type_(const HomelandSupportedSoulOperateType::type val) {
    type_ = val;
  }

  void __set_data_(const HomelandSupportedSoulData& val) {
    data_ = val;
  }

  bool operator == (const MessageHomelandSupportedSoulSynchronize & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(data_ == rhs.data_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandSupportedSoulSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandSupportedSoulSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandSupportedSoulSynchronize &a, MessageHomelandSupportedSoulSynchronize &b);


class MessageHomelandSupportSoulSynchronize {
 public:

  static const char* ascii_fingerprint; // = "4D68ACCA73CFF56325DE591700A4A8A7";
  static const uint8_t binary_fingerprint[16]; // = {0x4D,0x68,0xAC,0xCA,0x73,0xCF,0xF5,0x63,0x25,0xDE,0x59,0x17,0x00,0xA4,0xA8,0xA7};

  MessageHomelandSupportSoulSynchronize() : type_((HomelandSupportSoulOperateType::type)0) {
  }

  virtual ~MessageHomelandSupportSoulSynchronize() throw() {}

  HomelandSupportSoulOperateType::type type_;
  HomelandSupportSoulData data_;

  void __set_type_(const HomelandSupportSoulOperateType::type val) {
    type_ = val;
  }

  void __set_data_(const HomelandSupportSoulData& val) {
    data_ = val;
  }

  bool operator == (const MessageHomelandSupportSoulSynchronize & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(data_ == rhs.data_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandSupportSoulSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandSupportSoulSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandSupportSoulSynchronize &a, MessageHomelandSupportSoulSynchronize &b);


class MessageHomelandEventSynchronize {
 public:

  static const char* ascii_fingerprint; // = "69CFAA92E04882F6EA54F81504CDEB9C";
  static const uint8_t binary_fingerprint[16]; // = {0x69,0xCF,0xAA,0x92,0xE0,0x48,0x82,0xF6,0xEA,0x54,0xF8,0x15,0x04,0xCD,0xEB,0x9C};

  MessageHomelandEventSynchronize() : type_((HomelandEventOperateType::type)0) {
  }

  virtual ~MessageHomelandEventSynchronize() throw() {}

  HomelandEventOperateType::type type_;
  HomelandEventData data_;

  void __set_type_(const HomelandEventOperateType::type val) {
    type_ = val;
  }

  void __set_data_(const HomelandEventData& val) {
    data_ = val;
  }

  bool operator == (const MessageHomelandEventSynchronize & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(data_ == rhs.data_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandEventSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandEventSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandEventSynchronize &a, MessageHomelandEventSynchronize &b);


class MessageHomelandVisitRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MessageHomelandVisitRequest() : actor_id_() {
  }

  virtual ~MessageHomelandVisitRequest() throw() {}

  std::string actor_id_;

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
  }

  bool operator == (const MessageHomelandVisitRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandVisitRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandVisitRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandVisitRequest &a, MessageHomelandVisitRequest &b);

typedef struct _MessageHomelandVisitResponse__isset {
  _MessageHomelandVisitResponse__isset() : actor_id_(false), actor_name_(false), temple_level_(false), goldmine_level_(false), pool_level_(false), tree_level_(false), church_enable_(false), tree_stage_(false), tree_watered_times_(false), tree_can_water_(false), tree_can_steal_(false), tower1_level_(false), tower2_level_(false), stronghold_level_(false), stronghold_can_support_(false) {}
  bool actor_id_;
  bool actor_name_;
  bool temple_level_;
  bool goldmine_level_;
  bool pool_level_;
  bool tree_level_;
  bool church_enable_;
  bool tree_stage_;
  bool tree_watered_times_;
  bool tree_can_water_;
  bool tree_can_steal_;
  bool tower1_level_;
  bool tower2_level_;
  bool stronghold_level_;
  bool stronghold_can_support_;
} _MessageHomelandVisitResponse__isset;

class MessageHomelandVisitResponse {
 public:

  static const char* ascii_fingerprint; // = "53E2FC0909805BEFF179209B12D57E01";
  static const uint8_t binary_fingerprint[16]; // = {0x53,0xE2,0xFC,0x09,0x09,0x80,0x5B,0xEF,0xF1,0x79,0x20,0x9B,0x12,0xD5,0x7E,0x01};

  MessageHomelandVisitResponse() : result_(0), actor_id_(), actor_name_(), temple_level_(0), goldmine_level_(0), pool_level_(0), tree_level_(0), church_enable_(0), tree_stage_(( ::entity::HomelandTreeStageType::type)0), tree_watered_times_(0), tree_can_water_(0), tree_can_steal_(0), tower1_level_(0), tower2_level_(0), stronghold_level_(0), stronghold_can_support_(0) {
  }

  virtual ~MessageHomelandVisitResponse() throw() {}

  bool result_;
  std::string actor_id_;
  std::string actor_name_;
  int32_t temple_level_;
  int32_t goldmine_level_;
  int32_t pool_level_;
  int32_t tree_level_;
  bool church_enable_;
   ::entity::HomelandTreeStageType::type tree_stage_;
  int32_t tree_watered_times_;
  bool tree_can_water_;
  bool tree_can_steal_;
  int32_t tower1_level_;
  int32_t tower2_level_;
  int32_t stronghold_level_;
  bool stronghold_can_support_;

  _MessageHomelandVisitResponse__isset __isset;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
    __isset.actor_id_ = true;
  }

  void __set_actor_name_(const std::string& val) {
    actor_name_ = val;
    __isset.actor_name_ = true;
  }

  void __set_temple_level_(const int32_t val) {
    temple_level_ = val;
    __isset.temple_level_ = true;
  }

  void __set_goldmine_level_(const int32_t val) {
    goldmine_level_ = val;
    __isset.goldmine_level_ = true;
  }

  void __set_pool_level_(const int32_t val) {
    pool_level_ = val;
    __isset.pool_level_ = true;
  }

  void __set_tree_level_(const int32_t val) {
    tree_level_ = val;
    __isset.tree_level_ = true;
  }

  void __set_church_enable_(const bool val) {
    church_enable_ = val;
    __isset.church_enable_ = true;
  }

  void __set_tree_stage_(const  ::entity::HomelandTreeStageType::type val) {
    tree_stage_ = val;
    __isset.tree_stage_ = true;
  }

  void __set_tree_watered_times_(const int32_t val) {
    tree_watered_times_ = val;
    __isset.tree_watered_times_ = true;
  }

  void __set_tree_can_water_(const bool val) {
    tree_can_water_ = val;
    __isset.tree_can_water_ = true;
  }

  void __set_tree_can_steal_(const bool val) {
    tree_can_steal_ = val;
    __isset.tree_can_steal_ = true;
  }

  void __set_tower1_level_(const int32_t val) {
    tower1_level_ = val;
    __isset.tower1_level_ = true;
  }

  void __set_tower2_level_(const int32_t val) {
    tower2_level_ = val;
    __isset.tower2_level_ = true;
  }

  void __set_stronghold_level_(const int32_t val) {
    stronghold_level_ = val;
    __isset.stronghold_level_ = true;
  }

  void __set_stronghold_can_support_(const bool val) {
    stronghold_can_support_ = val;
    __isset.stronghold_can_support_ = true;
  }

  bool operator == (const MessageHomelandVisitResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.actor_id_ != rhs.__isset.actor_id_)
      return false;
    else if (__isset.actor_id_ && !(actor_id_ == rhs.actor_id_))
      return false;
    if (__isset.actor_name_ != rhs.__isset.actor_name_)
      return false;
    else if (__isset.actor_name_ && !(actor_name_ == rhs.actor_name_))
      return false;
    if (__isset.temple_level_ != rhs.__isset.temple_level_)
      return false;
    else if (__isset.temple_level_ && !(temple_level_ == rhs.temple_level_))
      return false;
    if (__isset.goldmine_level_ != rhs.__isset.goldmine_level_)
      return false;
    else if (__isset.goldmine_level_ && !(goldmine_level_ == rhs.goldmine_level_))
      return false;
    if (__isset.pool_level_ != rhs.__isset.pool_level_)
      return false;
    else if (__isset.pool_level_ && !(pool_level_ == rhs.pool_level_))
      return false;
    if (__isset.tree_level_ != rhs.__isset.tree_level_)
      return false;
    else if (__isset.tree_level_ && !(tree_level_ == rhs.tree_level_))
      return false;
    if (__isset.church_enable_ != rhs.__isset.church_enable_)
      return false;
    else if (__isset.church_enable_ && !(church_enable_ == rhs.church_enable_))
      return false;
    if (__isset.tree_stage_ != rhs.__isset.tree_stage_)
      return false;
    else if (__isset.tree_stage_ && !(tree_stage_ == rhs.tree_stage_))
      return false;
    if (__isset.tree_watered_times_ != rhs.__isset.tree_watered_times_)
      return false;
    else if (__isset.tree_watered_times_ && !(tree_watered_times_ == rhs.tree_watered_times_))
      return false;
    if (__isset.tree_can_water_ != rhs.__isset.tree_can_water_)
      return false;
    else if (__isset.tree_can_water_ && !(tree_can_water_ == rhs.tree_can_water_))
      return false;
    if (__isset.tree_can_steal_ != rhs.__isset.tree_can_steal_)
      return false;
    else if (__isset.tree_can_steal_ && !(tree_can_steal_ == rhs.tree_can_steal_))
      return false;
    if (__isset.tower1_level_ != rhs.__isset.tower1_level_)
      return false;
    else if (__isset.tower1_level_ && !(tower1_level_ == rhs.tower1_level_))
      return false;
    if (__isset.tower2_level_ != rhs.__isset.tower2_level_)
      return false;
    else if (__isset.tower2_level_ && !(tower2_level_ == rhs.tower2_level_))
      return false;
    if (__isset.stronghold_level_ != rhs.__isset.stronghold_level_)
      return false;
    else if (__isset.stronghold_level_ && !(stronghold_level_ == rhs.stronghold_level_))
      return false;
    if (__isset.stronghold_can_support_ != rhs.__isset.stronghold_can_support_)
      return false;
    else if (__isset.stronghold_can_support_ && !(stronghold_can_support_ == rhs.stronghold_can_support_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandVisitResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandVisitResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandVisitResponse &a, MessageHomelandVisitResponse &b);


class MessageHomelandClearUpgradeCoolingRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageHomelandClearUpgradeCoolingRequest() {
  }

  virtual ~MessageHomelandClearUpgradeCoolingRequest() throw() {}


  bool operator == (const MessageHomelandClearUpgradeCoolingRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageHomelandClearUpgradeCoolingRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandClearUpgradeCoolingRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandClearUpgradeCoolingRequest &a, MessageHomelandClearUpgradeCoolingRequest &b);


class MessageHomelandClearUpgradeCoolingResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageHomelandClearUpgradeCoolingResponse() : result_(0) {
  }

  virtual ~MessageHomelandClearUpgradeCoolingResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageHomelandClearUpgradeCoolingResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandClearUpgradeCoolingResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandClearUpgradeCoolingResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandClearUpgradeCoolingResponse &a, MessageHomelandClearUpgradeCoolingResponse &b);


class MessageHomelandTempleUpgradeRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageHomelandTempleUpgradeRequest() {
  }

  virtual ~MessageHomelandTempleUpgradeRequest() throw() {}


  bool operator == (const MessageHomelandTempleUpgradeRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageHomelandTempleUpgradeRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandTempleUpgradeRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandTempleUpgradeRequest &a, MessageHomelandTempleUpgradeRequest &b);


class MessageHomelandTempleUpgradeResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageHomelandTempleUpgradeResponse() : result_(0) {
  }

  virtual ~MessageHomelandTempleUpgradeResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageHomelandTempleUpgradeResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandTempleUpgradeResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandTempleUpgradeResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandTempleUpgradeResponse &a, MessageHomelandTempleUpgradeResponse &b);


class MessageHomelandTempleHarvestRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageHomelandTempleHarvestRequest() {
  }

  virtual ~MessageHomelandTempleHarvestRequest() throw() {}


  bool operator == (const MessageHomelandTempleHarvestRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageHomelandTempleHarvestRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandTempleHarvestRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandTempleHarvestRequest &a, MessageHomelandTempleHarvestRequest &b);


class MessageHomelandTempleHarvestResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageHomelandTempleHarvestResponse() : result_(0) {
  }

  virtual ~MessageHomelandTempleHarvestResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageHomelandTempleHarvestResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandTempleHarvestResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandTempleHarvestResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandTempleHarvestResponse &a, MessageHomelandTempleHarvestResponse &b);


class MessageHomelandTempleClearHarvestCoolingRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageHomelandTempleClearHarvestCoolingRequest() {
  }

  virtual ~MessageHomelandTempleClearHarvestCoolingRequest() throw() {}


  bool operator == (const MessageHomelandTempleClearHarvestCoolingRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageHomelandTempleClearHarvestCoolingRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandTempleClearHarvestCoolingRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandTempleClearHarvestCoolingRequest &a, MessageHomelandTempleClearHarvestCoolingRequest &b);


class MessageHomelandTempleClearHarvestCoolingResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageHomelandTempleClearHarvestCoolingResponse() : result_(0) {
  }

  virtual ~MessageHomelandTempleClearHarvestCoolingResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageHomelandTempleClearHarvestCoolingResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandTempleClearHarvestCoolingResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandTempleClearHarvestCoolingResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandTempleClearHarvestCoolingResponse &a, MessageHomelandTempleClearHarvestCoolingResponse &b);


class MessageHomelandTempleForceHarvestRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageHomelandTempleForceHarvestRequest() {
  }

  virtual ~MessageHomelandTempleForceHarvestRequest() throw() {}


  bool operator == (const MessageHomelandTempleForceHarvestRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageHomelandTempleForceHarvestRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandTempleForceHarvestRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandTempleForceHarvestRequest &a, MessageHomelandTempleForceHarvestRequest &b);


class MessageHomelandTempleForceHarvestResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageHomelandTempleForceHarvestResponse() : result_(0) {
  }

  virtual ~MessageHomelandTempleForceHarvestResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageHomelandTempleForceHarvestResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandTempleForceHarvestResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandTempleForceHarvestResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandTempleForceHarvestResponse &a, MessageHomelandTempleForceHarvestResponse &b);


class MessageHomelandGoldmineUpgradeRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageHomelandGoldmineUpgradeRequest() {
  }

  virtual ~MessageHomelandGoldmineUpgradeRequest() throw() {}


  bool operator == (const MessageHomelandGoldmineUpgradeRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageHomelandGoldmineUpgradeRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandGoldmineUpgradeRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandGoldmineUpgradeRequest &a, MessageHomelandGoldmineUpgradeRequest &b);


class MessageHomelandGoldmineUpgradeResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageHomelandGoldmineUpgradeResponse() : result_(0) {
  }

  virtual ~MessageHomelandGoldmineUpgradeResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageHomelandGoldmineUpgradeResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandGoldmineUpgradeResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandGoldmineUpgradeResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandGoldmineUpgradeResponse &a, MessageHomelandGoldmineUpgradeResponse &b);


class MessageHomelandGoldmineHarvestRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageHomelandGoldmineHarvestRequest() {
  }

  virtual ~MessageHomelandGoldmineHarvestRequest() throw() {}


  bool operator == (const MessageHomelandGoldmineHarvestRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageHomelandGoldmineHarvestRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandGoldmineHarvestRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandGoldmineHarvestRequest &a, MessageHomelandGoldmineHarvestRequest &b);

typedef struct _MessageHomelandGoldmineHarvestResponse__isset {
  _MessageHomelandGoldmineHarvestResponse__isset() : gold_(false) {}
  bool gold_;
} _MessageHomelandGoldmineHarvestResponse__isset;

class MessageHomelandGoldmineHarvestResponse {
 public:

  static const char* ascii_fingerprint; // = "3409A6BAF48299E7727EECFEBEC3BDA9";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0x09,0xA6,0xBA,0xF4,0x82,0x99,0xE7,0x72,0x7E,0xEC,0xFE,0xBE,0xC3,0xBD,0xA9};

  MessageHomelandGoldmineHarvestResponse() : result_(0), gold_(0) {
  }

  virtual ~MessageHomelandGoldmineHarvestResponse() throw() {}

  bool result_;
  int32_t gold_;

  _MessageHomelandGoldmineHarvestResponse__isset __isset;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_gold_(const int32_t val) {
    gold_ = val;
    __isset.gold_ = true;
  }

  bool operator == (const MessageHomelandGoldmineHarvestResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.gold_ != rhs.__isset.gold_)
      return false;
    else if (__isset.gold_ && !(gold_ == rhs.gold_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandGoldmineHarvestResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandGoldmineHarvestResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandGoldmineHarvestResponse &a, MessageHomelandGoldmineHarvestResponse &b);


class MessageHomelandPoolUpgradeRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageHomelandPoolUpgradeRequest() {
  }

  virtual ~MessageHomelandPoolUpgradeRequest() throw() {}


  bool operator == (const MessageHomelandPoolUpgradeRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageHomelandPoolUpgradeRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandPoolUpgradeRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandPoolUpgradeRequest &a, MessageHomelandPoolUpgradeRequest &b);


class MessageHomelandPoolUpgradeResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageHomelandPoolUpgradeResponse() : result_(0) {
  }

  virtual ~MessageHomelandPoolUpgradeResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageHomelandPoolUpgradeResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandPoolUpgradeResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandPoolUpgradeResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandPoolUpgradeResponse &a, MessageHomelandPoolUpgradeResponse &b);


class MessageHomelandPoolHarvestRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageHomelandPoolHarvestRequest() {
  }

  virtual ~MessageHomelandPoolHarvestRequest() throw() {}


  bool operator == (const MessageHomelandPoolHarvestRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageHomelandPoolHarvestRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandPoolHarvestRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandPoolHarvestRequest &a, MessageHomelandPoolHarvestRequest &b);


class MessageHomelandPoolHarvestResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageHomelandPoolHarvestResponse() : result_(0) {
  }

  virtual ~MessageHomelandPoolHarvestResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageHomelandPoolHarvestResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandPoolHarvestResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandPoolHarvestResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandPoolHarvestResponse &a, MessageHomelandPoolHarvestResponse &b);


class MessageHomelandPoolDoubleHarvestRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageHomelandPoolDoubleHarvestRequest() {
  }

  virtual ~MessageHomelandPoolDoubleHarvestRequest() throw() {}


  bool operator == (const MessageHomelandPoolDoubleHarvestRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageHomelandPoolDoubleHarvestRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandPoolDoubleHarvestRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandPoolDoubleHarvestRequest &a, MessageHomelandPoolDoubleHarvestRequest &b);


class MessageHomelandPoolDoubleHarvestResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageHomelandPoolDoubleHarvestResponse() : result_(0) {
  }

  virtual ~MessageHomelandPoolDoubleHarvestResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageHomelandPoolDoubleHarvestResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandPoolDoubleHarvestResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandPoolDoubleHarvestResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandPoolDoubleHarvestResponse &a, MessageHomelandPoolDoubleHarvestResponse &b);


class MessageHomelandChurchPrayRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageHomelandChurchPrayRequest() {
  }

  virtual ~MessageHomelandChurchPrayRequest() throw() {}


  bool operator == (const MessageHomelandChurchPrayRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageHomelandChurchPrayRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandChurchPrayRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandChurchPrayRequest &a, MessageHomelandChurchPrayRequest &b);


class MessageHomelandChurchPrayResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageHomelandChurchPrayResponse() : result_(0) {
  }

  virtual ~MessageHomelandChurchPrayResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageHomelandChurchPrayResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandChurchPrayResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandChurchPrayResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandChurchPrayResponse &a, MessageHomelandChurchPrayResponse &b);


class MessageHomelandChurchRefreshRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageHomelandChurchRefreshRequest() {
  }

  virtual ~MessageHomelandChurchRefreshRequest() throw() {}


  bool operator == (const MessageHomelandChurchRefreshRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageHomelandChurchRefreshRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandChurchRefreshRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandChurchRefreshRequest &a, MessageHomelandChurchRefreshRequest &b);


class MessageHomelandChurchRefreshResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageHomelandChurchRefreshResponse() : result_(0) {
  }

  virtual ~MessageHomelandChurchRefreshResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageHomelandChurchRefreshResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandChurchRefreshResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandChurchRefreshResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandChurchRefreshResponse &a, MessageHomelandChurchRefreshResponse &b);


class MessageHomelandChurchVipRefreshRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageHomelandChurchVipRefreshRequest() {
  }

  virtual ~MessageHomelandChurchVipRefreshRequest() throw() {}


  bool operator == (const MessageHomelandChurchVipRefreshRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageHomelandChurchVipRefreshRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandChurchVipRefreshRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandChurchVipRefreshRequest &a, MessageHomelandChurchVipRefreshRequest &b);


class MessageHomelandChurchVipRefreshResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageHomelandChurchVipRefreshResponse() : result_(0) {
  }

  virtual ~MessageHomelandChurchVipRefreshResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageHomelandChurchVipRefreshResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandChurchVipRefreshResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandChurchVipRefreshResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandChurchVipRefreshResponse &a, MessageHomelandChurchVipRefreshResponse &b);


class MessageHomelandChurchHarvestRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageHomelandChurchHarvestRequest() {
  }

  virtual ~MessageHomelandChurchHarvestRequest() throw() {}


  bool operator == (const MessageHomelandChurchHarvestRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageHomelandChurchHarvestRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandChurchHarvestRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandChurchHarvestRequest &a, MessageHomelandChurchHarvestRequest &b);

typedef struct _MessageHomelandChurchHarvestResponse__isset {
  _MessageHomelandChurchHarvestResponse__isset() : chest_type_(false), bonus_id_(false) {}
  bool chest_type_;
  bool bonus_id_;
} _MessageHomelandChurchHarvestResponse__isset;

class MessageHomelandChurchHarvestResponse {
 public:

  static const char* ascii_fingerprint; // = "BFE20425629D93BB485E108BC04B77E7";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0xE2,0x04,0x25,0x62,0x9D,0x93,0xBB,0x48,0x5E,0x10,0x8B,0xC0,0x4B,0x77,0xE7};

  MessageHomelandChurchHarvestResponse() : result_(0), chest_type_(0), bonus_id_(0) {
  }

  virtual ~MessageHomelandChurchHarvestResponse() throw() {}

  bool result_;
  int32_t chest_type_;
  int32_t bonus_id_;

  _MessageHomelandChurchHarvestResponse__isset __isset;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_chest_type_(const int32_t val) {
    chest_type_ = val;
    __isset.chest_type_ = true;
  }

  void __set_bonus_id_(const int32_t val) {
    bonus_id_ = val;
    __isset.bonus_id_ = true;
  }

  bool operator == (const MessageHomelandChurchHarvestResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.chest_type_ != rhs.__isset.chest_type_)
      return false;
    else if (__isset.chest_type_ && !(chest_type_ == rhs.chest_type_))
      return false;
    if (__isset.bonus_id_ != rhs.__isset.bonus_id_)
      return false;
    else if (__isset.bonus_id_ && !(bonus_id_ == rhs.bonus_id_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandChurchHarvestResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandChurchHarvestResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandChurchHarvestResponse &a, MessageHomelandChurchHarvestResponse &b);


class MessageHomelandTreeWaterRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageHomelandTreeWaterRequest() {
  }

  virtual ~MessageHomelandTreeWaterRequest() throw() {}


  bool operator == (const MessageHomelandTreeWaterRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageHomelandTreeWaterRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandTreeWaterRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandTreeWaterRequest &a, MessageHomelandTreeWaterRequest &b);


class MessageHomelandTreeWaterResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageHomelandTreeWaterResponse() : result_(0) {
  }

  virtual ~MessageHomelandTreeWaterResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageHomelandTreeWaterResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandTreeWaterResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandTreeWaterResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandTreeWaterResponse &a, MessageHomelandTreeWaterResponse &b);


class MessageHomelandTreeAssistWaterRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MessageHomelandTreeAssistWaterRequest() : actor_id_() {
  }

  virtual ~MessageHomelandTreeAssistWaterRequest() throw() {}

  std::string actor_id_;

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
  }

  bool operator == (const MessageHomelandTreeAssistWaterRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandTreeAssistWaterRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandTreeAssistWaterRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandTreeAssistWaterRequest &a, MessageHomelandTreeAssistWaterRequest &b);

typedef struct _MessageHomelandTreeAssistWaterResponse__isset {
  _MessageHomelandTreeAssistWaterResponse__isset() : actor_id_(false), tree_stage_(false), tree_watered_times_(false) {}
  bool actor_id_;
  bool tree_stage_;
  bool tree_watered_times_;
} _MessageHomelandTreeAssistWaterResponse__isset;

class MessageHomelandTreeAssistWaterResponse {
 public:

  static const char* ascii_fingerprint; // = "32347F24A4B324AA0BD6C48AD5834567";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x34,0x7F,0x24,0xA4,0xB3,0x24,0xAA,0x0B,0xD6,0xC4,0x8A,0xD5,0x83,0x45,0x67};

  MessageHomelandTreeAssistWaterResponse() : result_(0), actor_id_(), tree_stage_(( ::entity::HomelandTreeStageType::type)0), tree_watered_times_(0) {
  }

  virtual ~MessageHomelandTreeAssistWaterResponse() throw() {}

  bool result_;
  std::string actor_id_;
   ::entity::HomelandTreeStageType::type tree_stage_;
  int32_t tree_watered_times_;

  _MessageHomelandTreeAssistWaterResponse__isset __isset;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
    __isset.actor_id_ = true;
  }

  void __set_tree_stage_(const  ::entity::HomelandTreeStageType::type val) {
    tree_stage_ = val;
    __isset.tree_stage_ = true;
  }

  void __set_tree_watered_times_(const int32_t val) {
    tree_watered_times_ = val;
    __isset.tree_watered_times_ = true;
  }

  bool operator == (const MessageHomelandTreeAssistWaterResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.actor_id_ != rhs.__isset.actor_id_)
      return false;
    else if (__isset.actor_id_ && !(actor_id_ == rhs.actor_id_))
      return false;
    if (__isset.tree_stage_ != rhs.__isset.tree_stage_)
      return false;
    else if (__isset.tree_stage_ && !(tree_stage_ == rhs.tree_stage_))
      return false;
    if (__isset.tree_watered_times_ != rhs.__isset.tree_watered_times_)
      return false;
    else if (__isset.tree_watered_times_ && !(tree_watered_times_ == rhs.tree_watered_times_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandTreeAssistWaterResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandTreeAssistWaterResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandTreeAssistWaterResponse &a, MessageHomelandTreeAssistWaterResponse &b);


class MessageHomelandTreeStealRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MessageHomelandTreeStealRequest() : actor_id_() {
  }

  virtual ~MessageHomelandTreeStealRequest() throw() {}

  std::string actor_id_;

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
  }

  bool operator == (const MessageHomelandTreeStealRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandTreeStealRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandTreeStealRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandTreeStealRequest &a, MessageHomelandTreeStealRequest &b);

typedef struct _MessageHomelandTreeStealResponse__isset {
  _MessageHomelandTreeStealResponse__isset() : restrict_dollars_(false) {}
  bool restrict_dollars_;
} _MessageHomelandTreeStealResponse__isset;

class MessageHomelandTreeStealResponse {
 public:

  static const char* ascii_fingerprint; // = "3409A6BAF48299E7727EECFEBEC3BDA9";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0x09,0xA6,0xBA,0xF4,0x82,0x99,0xE7,0x72,0x7E,0xEC,0xFE,0xBE,0xC3,0xBD,0xA9};

  MessageHomelandTreeStealResponse() : result_(0), restrict_dollars_(0) {
  }

  virtual ~MessageHomelandTreeStealResponse() throw() {}

  bool result_;
  int32_t restrict_dollars_;

  _MessageHomelandTreeStealResponse__isset __isset;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_restrict_dollars_(const int32_t val) {
    restrict_dollars_ = val;
    __isset.restrict_dollars_ = true;
  }

  bool operator == (const MessageHomelandTreeStealResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.restrict_dollars_ != rhs.__isset.restrict_dollars_)
      return false;
    else if (__isset.restrict_dollars_ && !(restrict_dollars_ == rhs.restrict_dollars_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandTreeStealResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandTreeStealResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandTreeStealResponse &a, MessageHomelandTreeStealResponse &b);


class MessageHomelandTreeHarvestRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageHomelandTreeHarvestRequest() {
  }

  virtual ~MessageHomelandTreeHarvestRequest() throw() {}


  bool operator == (const MessageHomelandTreeHarvestRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageHomelandTreeHarvestRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandTreeHarvestRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandTreeHarvestRequest &a, MessageHomelandTreeHarvestRequest &b);

typedef struct _MessageHomelandTreeHarvestResponse__isset {
  _MessageHomelandTreeHarvestResponse__isset() : restrict_dollars_(false) {}
  bool restrict_dollars_;
} _MessageHomelandTreeHarvestResponse__isset;

class MessageHomelandTreeHarvestResponse {
 public:

  static const char* ascii_fingerprint; // = "3409A6BAF48299E7727EECFEBEC3BDA9";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0x09,0xA6,0xBA,0xF4,0x82,0x99,0xE7,0x72,0x7E,0xEC,0xFE,0xBE,0xC3,0xBD,0xA9};

  MessageHomelandTreeHarvestResponse() : result_(0), restrict_dollars_(0) {
  }

  virtual ~MessageHomelandTreeHarvestResponse() throw() {}

  bool result_;
  int32_t restrict_dollars_;

  _MessageHomelandTreeHarvestResponse__isset __isset;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_restrict_dollars_(const int32_t val) {
    restrict_dollars_ = val;
    __isset.restrict_dollars_ = true;
  }

  bool operator == (const MessageHomelandTreeHarvestResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.restrict_dollars_ != rhs.__isset.restrict_dollars_)
      return false;
    else if (__isset.restrict_dollars_ && !(restrict_dollars_ == rhs.restrict_dollars_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandTreeHarvestResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandTreeHarvestResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandTreeHarvestResponse &a, MessageHomelandTreeHarvestResponse &b);


class MessageHomelandTowerUpgradeRequest {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MessageHomelandTowerUpgradeRequest() : tower_id_(0) {
  }

  virtual ~MessageHomelandTowerUpgradeRequest() throw() {}

  int32_t tower_id_;

  void __set_tower_id_(const int32_t val) {
    tower_id_ = val;
  }

  bool operator == (const MessageHomelandTowerUpgradeRequest & rhs) const
  {
    if (!(tower_id_ == rhs.tower_id_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandTowerUpgradeRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandTowerUpgradeRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandTowerUpgradeRequest &a, MessageHomelandTowerUpgradeRequest &b);


class MessageHomelandTowerUpgradeResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageHomelandTowerUpgradeResponse() : result_(0) {
  }

  virtual ~MessageHomelandTowerUpgradeResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageHomelandTowerUpgradeResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandTowerUpgradeResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandTowerUpgradeResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandTowerUpgradeResponse &a, MessageHomelandTowerUpgradeResponse &b);


class MessageHomelandStrongholdUpgradeRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageHomelandStrongholdUpgradeRequest() {
  }

  virtual ~MessageHomelandStrongholdUpgradeRequest() throw() {}


  bool operator == (const MessageHomelandStrongholdUpgradeRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageHomelandStrongholdUpgradeRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandStrongholdUpgradeRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandStrongholdUpgradeRequest &a, MessageHomelandStrongholdUpgradeRequest &b);


class MessageHomelandStrongholdUpgradeResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageHomelandStrongholdUpgradeResponse() : result_(0) {
  }

  virtual ~MessageHomelandStrongholdUpgradeResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageHomelandStrongholdUpgradeResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandStrongholdUpgradeResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandStrongholdUpgradeResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandStrongholdUpgradeResponse &a, MessageHomelandStrongholdUpgradeResponse &b);


class MessageHomelandStrongholdCallSupportRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageHomelandStrongholdCallSupportRequest() {
  }

  virtual ~MessageHomelandStrongholdCallSupportRequest() throw() {}


  bool operator == (const MessageHomelandStrongholdCallSupportRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageHomelandStrongholdCallSupportRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandStrongholdCallSupportRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandStrongholdCallSupportRequest &a, MessageHomelandStrongholdCallSupportRequest &b);


class MessageHomelandStrongholdCallSupportResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageHomelandStrongholdCallSupportResponse() : result_(0) {
  }

  virtual ~MessageHomelandStrongholdCallSupportResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageHomelandStrongholdCallSupportResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandStrongholdCallSupportResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandStrongholdCallSupportResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandStrongholdCallSupportResponse &a, MessageHomelandStrongholdCallSupportResponse &b);


class MessageHomelandStrongholdCallSupportNotify {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  MessageHomelandStrongholdCallSupportNotify() : actor_id_(), actor_name_() {
  }

  virtual ~MessageHomelandStrongholdCallSupportNotify() throw() {}

  std::string actor_id_;
  std::string actor_name_;

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
  }

  void __set_actor_name_(const std::string& val) {
    actor_name_ = val;
  }

  bool operator == (const MessageHomelandStrongholdCallSupportNotify & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(actor_name_ == rhs.actor_name_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandStrongholdCallSupportNotify &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandStrongholdCallSupportNotify & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandStrongholdCallSupportNotify &a, MessageHomelandStrongholdCallSupportNotify &b);


class MessageHomelandStrongholdSupportRequest {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  MessageHomelandStrongholdSupportRequest() : actor_id_(), soul_id_(0) {
  }

  virtual ~MessageHomelandStrongholdSupportRequest() throw() {}

  std::string actor_id_;
  int32_t soul_id_;

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
  }

  void __set_soul_id_(const int32_t val) {
    soul_id_ = val;
  }

  bool operator == (const MessageHomelandStrongholdSupportRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(soul_id_ == rhs.soul_id_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandStrongholdSupportRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandStrongholdSupportRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandStrongholdSupportRequest &a, MessageHomelandStrongholdSupportRequest &b);


class MessageHomelandStrongholdSupportResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageHomelandStrongholdSupportResponse() : result_(0) {
  }

  virtual ~MessageHomelandStrongholdSupportResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageHomelandStrongholdSupportResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandStrongholdSupportResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandStrongholdSupportResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandStrongholdSupportResponse &a, MessageHomelandStrongholdSupportResponse &b);

typedef struct _HomelandBattleUnitData__isset {
  _HomelandBattleUnitData__isset() : row_(false), column_(false), soul_id_(false), hp_(false) {}
  bool row_;
  bool column_;
  bool soul_id_;
  bool hp_;
} _HomelandBattleUnitData__isset;

class HomelandBattleUnitData {
 public:

  static const char* ascii_fingerprint; // = "C39DC18AD27C094ED19966B66EBA8A96";
  static const uint8_t binary_fingerprint[16]; // = {0xC3,0x9D,0xC1,0x8A,0xD2,0x7C,0x09,0x4E,0xD1,0x99,0x66,0xB6,0x6E,0xBA,0x8A,0x96};

  HomelandBattleUnitData() : unit_id_(0), side_(( ::entity::HomelandBattleSideType::type)0), unit_type_(( ::entity::HomelandBattleUnitType::type)0), row_(0), column_(0), soul_id_(0), hp_(0) {
  }

  virtual ~HomelandBattleUnitData() throw() {}

  int32_t unit_id_;
   ::entity::HomelandBattleSideType::type side_;
   ::entity::HomelandBattleUnitType::type unit_type_;
  int32_t row_;
  int32_t column_;
  int32_t soul_id_;
  int32_t hp_;

  _HomelandBattleUnitData__isset __isset;

  void __set_unit_id_(const int32_t val) {
    unit_id_ = val;
  }

  void __set_side_(const  ::entity::HomelandBattleSideType::type val) {
    side_ = val;
  }

  void __set_unit_type_(const  ::entity::HomelandBattleUnitType::type val) {
    unit_type_ = val;
  }

  void __set_row_(const int32_t val) {
    row_ = val;
    __isset.row_ = true;
  }

  void __set_column_(const int32_t val) {
    column_ = val;
    __isset.column_ = true;
  }

  void __set_soul_id_(const int32_t val) {
    soul_id_ = val;
    __isset.soul_id_ = true;
  }

  void __set_hp_(const int32_t val) {
    hp_ = val;
    __isset.hp_ = true;
  }

  bool operator == (const HomelandBattleUnitData & rhs) const
  {
    if (!(unit_id_ == rhs.unit_id_))
      return false;
    if (!(side_ == rhs.side_))
      return false;
    if (!(unit_type_ == rhs.unit_type_))
      return false;
    if (__isset.row_ != rhs.__isset.row_)
      return false;
    else if (__isset.row_ && !(row_ == rhs.row_))
      return false;
    if (__isset.column_ != rhs.__isset.column_)
      return false;
    else if (__isset.column_ && !(column_ == rhs.column_))
      return false;
    if (__isset.soul_id_ != rhs.__isset.soul_id_)
      return false;
    else if (__isset.soul_id_ && !(soul_id_ == rhs.soul_id_))
      return false;
    if (__isset.hp_ != rhs.__isset.hp_)
      return false;
    else if (__isset.hp_ && !(hp_ == rhs.hp_))
      return false;
    return true;
  }
  bool operator != (const HomelandBattleUnitData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HomelandBattleUnitData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HomelandBattleUnitData &a, HomelandBattleUnitData &b);

typedef struct _HomelandBattleStateChangeData__isset {
  _HomelandBattleStateChangeData__isset() : value_(false) {}
  bool value_;
} _HomelandBattleStateChangeData__isset;

class HomelandBattleStateChangeData {
 public:

  static const char* ascii_fingerprint; // = "3A58C014B73F7C306CCF8F84BE78E33A";
  static const uint8_t binary_fingerprint[16]; // = {0x3A,0x58,0xC0,0x14,0xB7,0x3F,0x7C,0x30,0x6C,0xCF,0x8F,0x84,0xBE,0x78,0xE3,0x3A};

  HomelandBattleStateChangeData() : unit_id_(0), type_(( ::entity::HomelandBattleStateChangeType::type)0), value_(0) {
  }

  virtual ~HomelandBattleStateChangeData() throw() {}

  int32_t unit_id_;
   ::entity::HomelandBattleStateChangeType::type type_;
  int32_t value_;

  _HomelandBattleStateChangeData__isset __isset;

  void __set_unit_id_(const int32_t val) {
    unit_id_ = val;
  }

  void __set_type_(const  ::entity::HomelandBattleStateChangeType::type val) {
    type_ = val;
  }

  void __set_value_(const int32_t val) {
    value_ = val;
    __isset.value_ = true;
  }

  bool operator == (const HomelandBattleStateChangeData & rhs) const
  {
    if (!(unit_id_ == rhs.unit_id_))
      return false;
    if (!(type_ == rhs.type_))
      return false;
    if (__isset.value_ != rhs.__isset.value_)
      return false;
    else if (__isset.value_ && !(value_ == rhs.value_))
      return false;
    return true;
  }
  bool operator != (const HomelandBattleStateChangeData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HomelandBattleStateChangeData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HomelandBattleStateChangeData &a, HomelandBattleStateChangeData &b);


class HomelandBattleActionData {
 public:

  static const char* ascii_fingerprint; // = "BE037CB1C4ED6CD27D48D1C1EACB42E6";
  static const uint8_t binary_fingerprint[16]; // = {0xBE,0x03,0x7C,0xB1,0xC4,0xED,0x6C,0xD2,0x7D,0x48,0xD1,0xC1,0xEA,0xCB,0x42,0xE6};

  HomelandBattleActionData() : unit_id_(0), type_(( ::entity::HomelandBattleActionType::type)0) {
  }

  virtual ~HomelandBattleActionData() throw() {}

  int32_t unit_id_;
   ::entity::HomelandBattleActionType::type type_;
  std::vector<HomelandBattleStateChangeData>  result_;

  void __set_unit_id_(const int32_t val) {
    unit_id_ = val;
  }

  void __set_type_(const  ::entity::HomelandBattleActionType::type val) {
    type_ = val;
  }

  void __set_result_(const std::vector<HomelandBattleStateChangeData> & val) {
    result_ = val;
  }

  bool operator == (const HomelandBattleActionData & rhs) const
  {
    if (!(unit_id_ == rhs.unit_id_))
      return false;
    if (!(type_ == rhs.type_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const HomelandBattleActionData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HomelandBattleActionData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HomelandBattleActionData &a, HomelandBattleActionData &b);


class HomelandBattleRoundData {
 public:

  static const char* ascii_fingerprint; // = "0D5DCB59570573B69F19370FAD571856";
  static const uint8_t binary_fingerprint[16]; // = {0x0D,0x5D,0xCB,0x59,0x57,0x05,0x73,0xB6,0x9F,0x19,0x37,0x0F,0xAD,0x57,0x18,0x56};

  HomelandBattleRoundData() {
  }

  virtual ~HomelandBattleRoundData() throw() {}

  std::vector<HomelandBattleActionData>  actions_;

  void __set_actions_(const std::vector<HomelandBattleActionData> & val) {
    actions_ = val;
  }

  bool operator == (const HomelandBattleRoundData & rhs) const
  {
    if (!(actions_ == rhs.actions_))
      return false;
    return true;
  }
  bool operator != (const HomelandBattleRoundData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HomelandBattleRoundData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HomelandBattleRoundData &a, HomelandBattleRoundData &b);


class MessageHomelandBattleMatchRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageHomelandBattleMatchRequest() {
  }

  virtual ~MessageHomelandBattleMatchRequest() throw() {}


  bool operator == (const MessageHomelandBattleMatchRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageHomelandBattleMatchRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandBattleMatchRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandBattleMatchRequest &a, MessageHomelandBattleMatchRequest &b);

typedef struct _MessageHomelandBattleMatchResponse__isset {
  _MessageHomelandBattleMatchResponse__isset() : actor_name_(false), gold_(false) {}
  bool actor_name_;
  bool gold_;
} _MessageHomelandBattleMatchResponse__isset;

class MessageHomelandBattleMatchResponse {
 public:

  static const char* ascii_fingerprint; // = "CE1DDFFBE208E870ECC89E99A9CF303E";
  static const uint8_t binary_fingerprint[16]; // = {0xCE,0x1D,0xDF,0xFB,0xE2,0x08,0xE8,0x70,0xEC,0xC8,0x9E,0x99,0xA9,0xCF,0x30,0x3E};

  MessageHomelandBattleMatchResponse() : result_(0), actor_name_(), gold_(0) {
  }

  virtual ~MessageHomelandBattleMatchResponse() throw() {}

  bool result_;
  std::string actor_name_;
  int32_t gold_;

  _MessageHomelandBattleMatchResponse__isset __isset;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_actor_name_(const std::string& val) {
    actor_name_ = val;
    __isset.actor_name_ = true;
  }

  void __set_gold_(const int32_t val) {
    gold_ = val;
    __isset.gold_ = true;
  }

  bool operator == (const MessageHomelandBattleMatchResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.actor_name_ != rhs.__isset.actor_name_)
      return false;
    else if (__isset.actor_name_ && !(actor_name_ == rhs.actor_name_))
      return false;
    if (__isset.gold_ != rhs.__isset.gold_)
      return false;
    else if (__isset.gold_ && !(gold_ == rhs.gold_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandBattleMatchResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandBattleMatchResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandBattleMatchResponse &a, MessageHomelandBattleMatchResponse &b);


class MessageHomelandBattleStrikeBackRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MessageHomelandBattleStrikeBackRequest() : actor_id_() {
  }

  virtual ~MessageHomelandBattleStrikeBackRequest() throw() {}

  std::string actor_id_;

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
  }

  bool operator == (const MessageHomelandBattleStrikeBackRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandBattleStrikeBackRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandBattleStrikeBackRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandBattleStrikeBackRequest &a, MessageHomelandBattleStrikeBackRequest &b);

typedef struct _MessageHomelandBattleStrikeBackResponse__isset {
  _MessageHomelandBattleStrikeBackResponse__isset() : gold_(false) {}
  bool gold_;
} _MessageHomelandBattleStrikeBackResponse__isset;

class MessageHomelandBattleStrikeBackResponse {
 public:

  static const char* ascii_fingerprint; // = "3409A6BAF48299E7727EECFEBEC3BDA9";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0x09,0xA6,0xBA,0xF4,0x82,0x99,0xE7,0x72,0x7E,0xEC,0xFE,0xBE,0xC3,0xBD,0xA9};

  MessageHomelandBattleStrikeBackResponse() : result_(0), gold_(0) {
  }

  virtual ~MessageHomelandBattleStrikeBackResponse() throw() {}

  bool result_;
  int32_t gold_;

  _MessageHomelandBattleStrikeBackResponse__isset __isset;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_gold_(const int32_t val) {
    gold_ = val;
    __isset.gold_ = true;
  }

  bool operator == (const MessageHomelandBattleStrikeBackResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.gold_ != rhs.__isset.gold_)
      return false;
    else if (__isset.gold_ && !(gold_ == rhs.gold_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandBattleStrikeBackResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandBattleStrikeBackResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandBattleStrikeBackResponse &a, MessageHomelandBattleStrikeBackResponse &b);


class MessageHomelandBattleFightDataNotify {
 public:

  static const char* ascii_fingerprint; // = "610A77EECC230E29A925FA2122097FCA";
  static const uint8_t binary_fingerprint[16]; // = {0x61,0x0A,0x77,0xEE,0xCC,0x23,0x0E,0x29,0xA9,0x25,0xFA,0x21,0x22,0x09,0x7F,0xCA};

  MessageHomelandBattleFightDataNotify() : target_actor_name_(), target_gender_(( ::entity::GenderType::type)0), battle_result_(( ::entity::HomelandBattleResultType::type)0) {
  }

  virtual ~MessageHomelandBattleFightDataNotify() throw() {}

  std::string target_actor_name_;
   ::entity::GenderType::type target_gender_;
  std::vector<HomelandBattleUnitData>  units_;
  std::vector<HomelandBattleRoundData>  commander_battle_;
  std::vector<HomelandBattleRoundData>  soul_battle_;
   ::entity::HomelandBattleResultType::type battle_result_;

  void __set_target_actor_name_(const std::string& val) {
    target_actor_name_ = val;
  }

  void __set_target_gender_(const  ::entity::GenderType::type val) {
    target_gender_ = val;
  }

  void __set_units_(const std::vector<HomelandBattleUnitData> & val) {
    units_ = val;
  }

  void __set_commander_battle_(const std::vector<HomelandBattleRoundData> & val) {
    commander_battle_ = val;
  }

  void __set_soul_battle_(const std::vector<HomelandBattleRoundData> & val) {
    soul_battle_ = val;
  }

  void __set_battle_result_(const  ::entity::HomelandBattleResultType::type val) {
    battle_result_ = val;
  }

  bool operator == (const MessageHomelandBattleFightDataNotify & rhs) const
  {
    if (!(target_actor_name_ == rhs.target_actor_name_))
      return false;
    if (!(target_gender_ == rhs.target_gender_))
      return false;
    if (!(units_ == rhs.units_))
      return false;
    if (!(commander_battle_ == rhs.commander_battle_))
      return false;
    if (!(soul_battle_ == rhs.soul_battle_))
      return false;
    if (!(battle_result_ == rhs.battle_result_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandBattleFightDataNotify &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandBattleFightDataNotify & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandBattleFightDataNotify &a, MessageHomelandBattleFightDataNotify &b);

}} // namespace

#endif
