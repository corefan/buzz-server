/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "mall_types.h"

#include <algorithm>

namespace entity {

int _kMallUseTypeValues[] = {
  MallUseType::USE_FREEDOM_DOLLARS,
  MallUseType::USE_RESTRICT_DOLLARS,
  MallUseType::USE_FREEDOM_RESTRICT,
  MallUseType::USE_ARENA_INTEGRAL,
  MallUseType::USE_JUSTICE,
  MallUseType::USE_MIRACLE_INTEGRAL,
  MallUseType::USE_LEGEND_INTEGRAL
};
const char* _kMallUseTypeNames[] = {
  "USE_FREEDOM_DOLLARS",
  "USE_RESTRICT_DOLLARS",
  "USE_FREEDOM_RESTRICT",
  "USE_ARENA_INTEGRAL",
  "USE_JUSTICE",
  "USE_MIRACLE_INTEGRAL",
  "USE_LEGEND_INTEGRAL"
};
const std::map<int, const char*> _MallUseType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kMallUseTypeValues, _kMallUseTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMallTreasureTypeValues[] = {
  MallTreasureType::MALL,
  MallTreasureType::TREASURE
};
const char* _kMallTreasureTypeNames[] = {
  "MALL",
  "TREASURE"
};
const std::map<int, const char*> _MallTreasureType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kMallTreasureTypeValues, _kMallTreasureTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* MallTreasureCell::ascii_fingerprint = "725A17D7A8AFD5B81F9D20D41C41BA09";
const uint8_t MallTreasureCell::binary_fingerprint[16] = {0x72,0x5A,0x17,0xD7,0xA8,0xAF,0xD5,0xB8,0x1F,0x9D,0x20,0xD4,0x1C,0x41,0xBA,0x09};

uint32_t MallTreasureCell::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_tab_ = false;
  bool isset_shop_type_ = false;
  bool isset_location_ = false;
  bool isset_id_ = false;
  bool isset_hot_ = false;
  bool isset_dollars_ = false;
  bool isset_spend_type_ = false;
  bool isset_up_start_time_ = false;
  bool isset_up_end_time_ = false;
  bool isset_dollars_start_time_ = false;
  bool isset_dollars_end_time_ = false;
  bool isset_limit_buy_num_ = false;
  bool isset_sell_price_ = false;
  bool isset_bind_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->tab_);
          isset_tab_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->shop_type_);
          isset_shop_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->location_);
          isset_location_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hot_);
          isset_hot_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dollars_);
          isset_dollars_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->spend_type_);
          isset_spend_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->up_start_time_);
          isset_up_start_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->up_end_time_);
          isset_up_end_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dollars_start_time_);
          isset_dollars_start_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dollars_end_time_);
          isset_dollars_end_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit_buy_num_);
          isset_limit_buy_num_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sell_price_);
          isset_sell_price_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->bind_);
          isset_bind_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_tab_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_shop_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_location_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hot_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dollars_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_spend_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_up_start_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_up_end_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dollars_start_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dollars_end_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_limit_buy_num_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sell_price_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_bind_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MallTreasureCell::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MallTreasureCell");

  xfer += oprot->writeFieldBegin("tab_", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->tab_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("shop_type_", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->shop_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("location_", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->location_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hot_", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->hot_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dollars_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->dollars_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("spend_type_", ::apache::thrift::protocol::T_BYTE, 7);
  xfer += oprot->writeByte(this->spend_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("up_start_time_", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->up_start_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("up_end_time_", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->up_end_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dollars_start_time_", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->dollars_start_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dollars_end_time_", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->dollars_end_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limit_buy_num_", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->limit_buy_num_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sell_price_", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->sell_price_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bind_", ::apache::thrift::protocol::T_BYTE, 14);
  xfer += oprot->writeByte(this->bind_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MallTreasureCell &a, MallTreasureCell &b) {
  using ::std::swap;
  swap(a.tab_, b.tab_);
  swap(a.shop_type_, b.shop_type_);
  swap(a.location_, b.location_);
  swap(a.id_, b.id_);
  swap(a.hot_, b.hot_);
  swap(a.dollars_, b.dollars_);
  swap(a.spend_type_, b.spend_type_);
  swap(a.up_start_time_, b.up_start_time_);
  swap(a.up_end_time_, b.up_end_time_);
  swap(a.dollars_start_time_, b.dollars_start_time_);
  swap(a.dollars_end_time_, b.dollars_end_time_);
  swap(a.limit_buy_num_, b.limit_buy_num_);
  swap(a.sell_price_, b.sell_price_);
  swap(a.bind_, b.bind_);
}

const char* MallReasureBuyNum::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t MallReasureBuyNum::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

uint32_t MallReasureBuyNum::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_item_id_ = false;
  bool isset_num_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item_id_);
          isset_item_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num_);
          isset_num_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_item_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_num_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MallReasureBuyNum::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MallReasureBuyNum");

  xfer += oprot->writeFieldBegin("item_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->item_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->num_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MallReasureBuyNum &a, MallReasureBuyNum &b) {
  using ::std::swap;
  swap(a.item_id_, b.item_id_);
  swap(a.num_, b.num_);
}

} // namespace
