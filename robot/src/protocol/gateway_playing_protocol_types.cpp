/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "gateway_playing_protocol_types.h"

#include <algorithm>

namespace gateway { namespace protocol {

const char* PlayingPageField::ascii_fingerprint = "8174D44AE91049FBB40F3E5E324445B8";
const uint8_t PlayingPageField::binary_fingerprint[16] = {0x81,0x74,0xD4,0x4A,0xE9,0x10,0x49,0xFB,0xB4,0x0F,0x3E,0x5E,0x32,0x44,0x45,0xB8};

uint32_t PlayingPageField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_template_ = false;
  bool isset_record_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->template_);
          isset_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->record_.read(iprot);
          isset_record_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->result_.read(iprot);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_record_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PlayingPageField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PlayingPageField");

  xfer += oprot->writeFieldBegin("template_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("record_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->record_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->result_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PlayingPageField &a, PlayingPageField &b) {
  using ::std::swap;
  swap(a.template_, b.template_);
  swap(a.record_, b.record_);
  swap(a.result_, b.result_);
}

const char* MessagePlayingInitialize::ascii_fingerprint = "CD40A4744C118EC00EF0F00681715372";
const uint8_t MessagePlayingInitialize::binary_fingerprint[16] = {0xCD,0x40,0xA4,0x74,0x4C,0x11,0x8E,0xC0,0x0E,0xF0,0xF0,0x06,0x81,0x71,0x53,0x72};

uint32_t MessagePlayingInitialize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_playings_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->playings_.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->playings_.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->playings_[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_playings_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->auto_playing_);
          this->__isset.auto_playing_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->auto_playing_group_);
          this->__isset.auto_playing_group_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->auto_remain_secs_);
          this->__isset.auto_remain_secs_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_playings_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingInitialize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingInitialize");

  xfer += oprot->writeFieldBegin("playings_", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->playings_.size()));
    std::vector<PlayingPageField> ::const_iterator _iter5;
    for (_iter5 = this->playings_.begin(); _iter5 != this->playings_.end(); ++_iter5)
    {
      xfer += (*_iter5).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.auto_playing_) {
    xfer += oprot->writeFieldBegin("auto_playing_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->auto_playing_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.auto_playing_group_) {
    xfer += oprot->writeFieldBegin("auto_playing_group_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->auto_playing_group_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.auto_remain_secs_) {
    xfer += oprot->writeFieldBegin("auto_remain_secs_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->auto_remain_secs_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingInitialize &a, MessagePlayingInitialize &b) {
  using ::std::swap;
  swap(a.playings_, b.playings_);
  swap(a.auto_playing_, b.auto_playing_);
  swap(a.auto_playing_group_, b.auto_playing_group_);
  swap(a.auto_remain_secs_, b.auto_remain_secs_);
  swap(a.__isset, b.__isset);
}

const char* MessagePlayingCreateRequest::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t MessagePlayingCreateRequest::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t MessagePlayingCreateRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_template_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->template_);
          isset_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingCreateRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingCreateRequest");

  xfer += oprot->writeFieldBegin("template_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingCreateRequest &a, MessagePlayingCreateRequest &b) {
  using ::std::swap;
  swap(a.template_, b.template_);
}

const char* MessagePlayingCreateResponse::ascii_fingerprint = "4DC0C1A1F380340B40244ADC7FB0BA60";
const uint8_t MessagePlayingCreateResponse::binary_fingerprint[16] = {0x4D,0xC0,0xC1,0xA1,0xF3,0x80,0x34,0x0B,0x40,0x24,0x4A,0xDC,0x7F,0xB0,0xBA,0x60};

uint32_t MessagePlayingCreateResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_template_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->template_);
          isset_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingCreateResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingCreateResponse");

  xfer += oprot->writeFieldBegin("template_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingCreateResponse &a, MessagePlayingCreateResponse &b) {
  using ::std::swap;
  swap(a.template_, b.template_);
  swap(a.result_, b.result_);
}

const char* MessagePlayingCreateFinishNotice::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t MessagePlayingCreateFinishNotice::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

uint32_t MessagePlayingCreateFinishNotice::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_template_ = false;
  bool isset_playing_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->template_);
          isset_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->playing_);
          isset_playing_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_playing_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingCreateFinishNotice::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingCreateFinishNotice");

  xfer += oprot->writeFieldBegin("template_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("playing_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->playing_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingCreateFinishNotice &a, MessagePlayingCreateFinishNotice &b) {
  using ::std::swap;
  swap(a.template_, b.template_);
  swap(a.playing_, b.playing_);
}

const char* MessagePlayingEnterRequest::ascii_fingerprint = "EEBC915CE44901401D881E6091423036";
const uint8_t MessagePlayingEnterRequest::binary_fingerprint[16] = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

uint32_t MessagePlayingEnterRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_playing_ = false;
  bool isset_template_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->playing_);
          isset_playing_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->template_);
          isset_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_playing_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingEnterRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingEnterRequest");

  xfer += oprot->writeFieldBegin("playing_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->playing_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("template_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingEnterRequest &a, MessagePlayingEnterRequest &b) {
  using ::std::swap;
  swap(a.playing_, b.playing_);
  swap(a.template_, b.template_);
}

const char* MessagePlayingEnterResponse::ascii_fingerprint = "88440F45A63E63607868B983E4E50558";
const uint8_t MessagePlayingEnterResponse::binary_fingerprint[16] = {0x88,0x44,0x0F,0x45,0xA6,0x3E,0x63,0x60,0x78,0x68,0xB9,0x83,0xE4,0xE5,0x05,0x58};

uint32_t MessagePlayingEnterResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;
  bool isset_template_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->template_);
          isset_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingEnterResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingEnterResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("template_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingEnterResponse &a, MessagePlayingEnterResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.template_, b.template_);
}

const char* MessagePlayingEnterInitialize::ascii_fingerprint = "1987B348D4EBD3E0C5A3E5ADA0C5F336";
const uint8_t MessagePlayingEnterInitialize::binary_fingerprint[16] = {0x19,0x87,0xB3,0x48,0xD4,0xEB,0xD3,0xE0,0xC5,0xA3,0xE5,0xAD,0xA0,0xC5,0xF3,0x36};

uint32_t MessagePlayingEnterInitialize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_template_ = false;
  bool isset_spend_time_ = false;
  bool isset_scores_ = false;
  bool isset_datas_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->template_);
          isset_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->spend_time_);
          isset_spend_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->scores_.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->scores_.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += this->scores_[_i10].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_scores_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->datas_.clear();
            uint32_t _size11;
            ::apache::thrift::protocol::TType _etype14;
            xfer += iprot->readListBegin(_etype14, _size11);
            this->datas_.resize(_size11);
            uint32_t _i15;
            for (_i15 = 0; _i15 < _size11; ++_i15)
            {
              xfer += iprot->readI32(this->datas_[_i15]);
            }
            xfer += iprot->readListEnd();
          }
          isset_datas_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_spend_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_scores_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_datas_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingEnterInitialize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingEnterInitialize");

  xfer += oprot->writeFieldBegin("template_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("spend_time_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->spend_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scores_", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->scores_.size()));
    std::vector< ::entity::PlayingScoreField> ::const_iterator _iter16;
    for (_iter16 = this->scores_.begin(); _iter16 != this->scores_.end(); ++_iter16)
    {
      xfer += (*_iter16).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("datas_", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->datas_.size()));
    std::vector<int32_t> ::const_iterator _iter17;
    for (_iter17 = this->datas_.begin(); _iter17 != this->datas_.end(); ++_iter17)
    {
      xfer += oprot->writeI32((*_iter17));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingEnterInitialize &a, MessagePlayingEnterInitialize &b) {
  using ::std::swap;
  swap(a.template_, b.template_);
  swap(a.spend_time_, b.spend_time_);
  swap(a.scores_, b.scores_);
  swap(a.datas_, b.datas_);
}

const char* MessagePlayingScoreSynchronize::ascii_fingerprint = "A9A743155101F957A8E1B32AA26169BD";
const uint8_t MessagePlayingScoreSynchronize::binary_fingerprint[16] = {0xA9,0xA7,0x43,0x15,0x51,0x01,0xF9,0x57,0xA8,0xE1,0xB3,0x2A,0xA2,0x61,0x69,0xBD};

uint32_t MessagePlayingScoreSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_score_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->score_.read(iprot);
          isset_score_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_score_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingScoreSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingScoreSynchronize");

  xfer += oprot->writeFieldBegin("score_", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->score_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingScoreSynchronize &a, MessagePlayingScoreSynchronize &b) {
  using ::std::swap;
  swap(a.score_, b.score_);
}

const char* MessagePlayingRandkingSynchronize::ascii_fingerprint = "3967FCB1D2A588AFFB6B3D0713F6F380";
const uint8_t MessagePlayingRandkingSynchronize::binary_fingerprint[16] = {0x39,0x67,0xFC,0xB1,0xD2,0xA5,0x88,0xAF,0xFB,0x6B,0x3D,0x07,0x13,0xF6,0xF3,0x80};

uint32_t MessagePlayingRandkingSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_ranking_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ranking_.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _etype21;
            xfer += iprot->readListBegin(_etype21, _size18);
            this->ranking_.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += this->ranking_[_i22].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_ranking_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_ranking_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingRandkingSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingRandkingSynchronize");

  xfer += oprot->writeFieldBegin("ranking_", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ranking_.size()));
    std::vector< ::entity::PlayingRankingField> ::const_iterator _iter23;
    for (_iter23 = this->ranking_.begin(); _iter23 != this->ranking_.end(); ++_iter23)
    {
      xfer += (*_iter23).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingRandkingSynchronize &a, MessagePlayingRandkingSynchronize &b) {
  using ::std::swap;
  swap(a.ranking_, b.ranking_);
}

const char* MessagePlayingCompleteRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessagePlayingCompleteRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessagePlayingCompleteRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessagePlayingCompleteRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingCompleteRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingCompleteRequest &a, MessagePlayingCompleteRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessagePlayingCompleteResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessagePlayingCompleteResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessagePlayingCompleteResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingCompleteResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingCompleteResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingCompleteResponse &a, MessagePlayingCompleteResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessagePlayingCompleteSynchronize::ascii_fingerprint = "78595F5A50763C69557151A458DDADB8";
const uint8_t MessagePlayingCompleteSynchronize::binary_fingerprint[16] = {0x78,0x59,0x5F,0x5A,0x50,0x76,0x3C,0x69,0x55,0x71,0x51,0xA4,0x58,0xDD,0xAD,0xB8};

uint32_t MessagePlayingCompleteSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->result_.read(iprot);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->awards_.clear();
            uint32_t _size24;
            ::apache::thrift::protocol::TType _etype27;
            xfer += iprot->readListBegin(_etype27, _size24);
            this->awards_.resize(_size24);
            uint32_t _i28;
            for (_i28 = 0; _i28 < _size24; ++_i28)
            {
              xfer += this->awards_[_i28].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.awards_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->draw_award_.read(iprot);
          this->__isset.draw_award_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingCompleteSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingCompleteSynchronize");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->result_.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.awards_) {
    xfer += oprot->writeFieldBegin("awards_", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->awards_.size()));
      std::vector< ::entity::PlayingAwardField> ::const_iterator _iter29;
      for (_iter29 = this->awards_.begin(); _iter29 != this->awards_.end(); ++_iter29)
      {
        xfer += (*_iter29).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.draw_award_) {
    xfer += oprot->writeFieldBegin("draw_award_", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->draw_award_.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingCompleteSynchronize &a, MessagePlayingCompleteSynchronize &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.awards_, b.awards_);
  swap(a.draw_award_, b.draw_award_);
  swap(a.__isset, b.__isset);
}

const char* MessagePlayingLeaveRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessagePlayingLeaveRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessagePlayingLeaveRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessagePlayingLeaveRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingLeaveRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingLeaveRequest &a, MessagePlayingLeaveRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessagePlayingLeaveResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessagePlayingLeaveResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessagePlayingLeaveResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingLeaveResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingLeaveResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingLeaveResponse &a, MessagePlayingLeaveResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessagePlayingLeaveSynchronize::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessagePlayingLeaveSynchronize::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessagePlayingLeaveSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessagePlayingLeaveSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingLeaveSynchronize");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingLeaveSynchronize &a, MessagePlayingLeaveSynchronize &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessagePlayingAwardRequest::ascii_fingerprint = "C1241AF5AA92C586B664FD41DC97C576";
const uint8_t MessagePlayingAwardRequest::binary_fingerprint[16] = {0xC1,0x24,0x1A,0xF5,0xAA,0x92,0xC5,0x86,0xB6,0x64,0xFD,0x41,0xDC,0x97,0xC5,0x76};

uint32_t MessagePlayingAwardRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_template_);
          this->__isset.playing_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_group_);
          this->__isset.playing_group_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessagePlayingAwardRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingAwardRequest");

  if (this->__isset.playing_template_) {
    xfer += oprot->writeFieldBegin("playing_template_", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->playing_template_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.playing_group_) {
    xfer += oprot->writeFieldBegin("playing_group_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->playing_group_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingAwardRequest &a, MessagePlayingAwardRequest &b) {
  using ::std::swap;
  swap(a.playing_template_, b.playing_template_);
  swap(a.playing_group_, b.playing_group_);
  swap(a.__isset, b.__isset);
}

const char* MessagePlayingAwardResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessagePlayingAwardResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessagePlayingAwardResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingAwardResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingAwardResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingAwardResponse &a, MessagePlayingAwardResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessagePlayingRecordSynchronize::ascii_fingerprint = "8174D44AE91049FBB40F3E5E324445B8";
const uint8_t MessagePlayingRecordSynchronize::binary_fingerprint[16] = {0x81,0x74,0xD4,0x4A,0xE9,0x10,0x49,0xFB,0xB4,0x0F,0x3E,0x5E,0x32,0x44,0x45,0xB8};

uint32_t MessagePlayingRecordSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_playing_template_ = false;
  bool isset_record_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_template_);
          isset_playing_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->record_.read(iprot);
          isset_record_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->result_.read(iprot);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_playing_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_record_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingRecordSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingRecordSynchronize");

  xfer += oprot->writeFieldBegin("playing_template_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->playing_template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("record_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->record_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->result_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingRecordSynchronize &a, MessagePlayingRecordSynchronize &b) {
  using ::std::swap;
  swap(a.playing_template_, b.playing_template_);
  swap(a.record_, b.record_);
  swap(a.result_, b.result_);
}

const char* MessagePlayingAutoRequest::ascii_fingerprint = "C1241AF5AA92C586B664FD41DC97C576";
const uint8_t MessagePlayingAutoRequest::binary_fingerprint[16] = {0xC1,0x24,0x1A,0xF5,0xAA,0x92,0xC5,0x86,0xB6,0x64,0xFD,0x41,0xDC,0x97,0xC5,0x76};

uint32_t MessagePlayingAutoRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_template_);
          this->__isset.playing_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_group_);
          this->__isset.playing_group_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessagePlayingAutoRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingAutoRequest");

  if (this->__isset.playing_template_) {
    xfer += oprot->writeFieldBegin("playing_template_", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->playing_template_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.playing_group_) {
    xfer += oprot->writeFieldBegin("playing_group_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->playing_group_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingAutoRequest &a, MessagePlayingAutoRequest &b) {
  using ::std::swap;
  swap(a.playing_template_, b.playing_template_);
  swap(a.playing_group_, b.playing_group_);
  swap(a.__isset, b.__isset);
}

const char* MessagePlayingAutoResponse::ascii_fingerprint = "BFE20425629D93BB485E108BC04B77E7";
const uint8_t MessagePlayingAutoResponse::binary_fingerprint[16] = {0xBF,0xE2,0x04,0x25,0x62,0x9D,0x93,0xBB,0x48,0x5E,0x10,0x8B,0xC0,0x4B,0x77,0xE7};

uint32_t MessagePlayingAutoResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_template_);
          this->__isset.playing_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_group_);
          this->__isset.playing_group_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingAutoResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingAutoResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.playing_template_) {
    xfer += oprot->writeFieldBegin("playing_template_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->playing_template_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.playing_group_) {
    xfer += oprot->writeFieldBegin("playing_group_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->playing_group_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingAutoResponse &a, MessagePlayingAutoResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.playing_template_, b.playing_template_);
  swap(a.playing_group_, b.playing_group_);
  swap(a.__isset, b.__isset);
}

const char* MessagePlayingAutoStopSynchronize::ascii_fingerprint = "BFE20425629D93BB485E108BC04B77E7";
const uint8_t MessagePlayingAutoStopSynchronize::binary_fingerprint[16] = {0xBF,0xE2,0x04,0x25,0x62,0x9D,0x93,0xBB,0x48,0x5E,0x10,0x8B,0xC0,0x4B,0x77,0xE7};

uint32_t MessagePlayingAutoStopSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_finish_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->finish_);
          isset_finish_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_template_);
          this->__isset.playing_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_group_);
          this->__isset.playing_group_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_finish_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingAutoStopSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingAutoStopSynchronize");

  xfer += oprot->writeFieldBegin("finish_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->finish_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.playing_template_) {
    xfer += oprot->writeFieldBegin("playing_template_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->playing_template_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.playing_group_) {
    xfer += oprot->writeFieldBegin("playing_group_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->playing_group_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingAutoStopSynchronize &a, MessagePlayingAutoStopSynchronize &b) {
  using ::std::swap;
  swap(a.finish_, b.finish_);
  swap(a.playing_template_, b.playing_template_);
  swap(a.playing_group_, b.playing_group_);
  swap(a.__isset, b.__isset);
}

const char* MessagePlayingAutoFinishRequest::ascii_fingerprint = "C1241AF5AA92C586B664FD41DC97C576";
const uint8_t MessagePlayingAutoFinishRequest::binary_fingerprint[16] = {0xC1,0x24,0x1A,0xF5,0xAA,0x92,0xC5,0x86,0xB6,0x64,0xFD,0x41,0xDC,0x97,0xC5,0x76};

uint32_t MessagePlayingAutoFinishRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_template_);
          this->__isset.playing_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_group_);
          this->__isset.playing_group_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessagePlayingAutoFinishRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingAutoFinishRequest");

  if (this->__isset.playing_template_) {
    xfer += oprot->writeFieldBegin("playing_template_", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->playing_template_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.playing_group_) {
    xfer += oprot->writeFieldBegin("playing_group_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->playing_group_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingAutoFinishRequest &a, MessagePlayingAutoFinishRequest &b) {
  using ::std::swap;
  swap(a.playing_template_, b.playing_template_);
  swap(a.playing_group_, b.playing_group_);
  swap(a.__isset, b.__isset);
}

const char* MessagePlayingAutoFinishResponse::ascii_fingerprint = "BFE20425629D93BB485E108BC04B77E7";
const uint8_t MessagePlayingAutoFinishResponse::binary_fingerprint[16] = {0xBF,0xE2,0x04,0x25,0x62,0x9D,0x93,0xBB,0x48,0x5E,0x10,0x8B,0xC0,0x4B,0x77,0xE7};

uint32_t MessagePlayingAutoFinishResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_template_);
          this->__isset.playing_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_group_);
          this->__isset.playing_group_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingAutoFinishResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingAutoFinishResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.playing_template_) {
    xfer += oprot->writeFieldBegin("playing_template_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->playing_template_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.playing_group_) {
    xfer += oprot->writeFieldBegin("playing_group_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->playing_group_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingAutoFinishResponse &a, MessagePlayingAutoFinishResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.playing_template_, b.playing_template_);
  swap(a.playing_group_, b.playing_group_);
  swap(a.__isset, b.__isset);
}

const char* MessagePlayingPaidAwardRequest::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t MessagePlayingPaidAwardRequest::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t MessagePlayingPaidAwardRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_playing_template_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_template_);
          isset_playing_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_playing_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingPaidAwardRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingPaidAwardRequest");

  xfer += oprot->writeFieldBegin("playing_template_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->playing_template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingPaidAwardRequest &a, MessagePlayingPaidAwardRequest &b) {
  using ::std::swap;
  swap(a.playing_template_, b.playing_template_);
}

const char* MessagePlayingTeamListRequest::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t MessagePlayingTeamListRequest::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t MessagePlayingTeamListRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_playing_template_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_template_);
          isset_playing_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_playing_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingTeamListRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingTeamListRequest");

  xfer += oprot->writeFieldBegin("playing_template_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->playing_template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingTeamListRequest &a, MessagePlayingTeamListRequest &b) {
  using ::std::swap;
  swap(a.playing_template_, b.playing_template_);
}

const char* MessagePlayingTeamListResponse::ascii_fingerprint = "53D1A426235A4CFE8B1ACF5BA5BF8772";
const uint8_t MessagePlayingTeamListResponse::binary_fingerprint[16] = {0x53,0xD1,0xA4,0x26,0x23,0x5A,0x4C,0xFE,0x8B,0x1A,0xCF,0x5B,0xA5,0xBF,0x87,0x72};

uint32_t MessagePlayingTeamListResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_playing_template_ = false;
  bool isset_teams_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_template_);
          isset_playing_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->teams_.clear();
            uint32_t _size30;
            ::apache::thrift::protocol::TType _etype33;
            xfer += iprot->readListBegin(_etype33, _size30);
            this->teams_.resize(_size30);
            uint32_t _i34;
            for (_i34 = 0; _i34 < _size30; ++_i34)
            {
              xfer += this->teams_[_i34].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_teams_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_playing_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_teams_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingTeamListResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingTeamListResponse");

  xfer += oprot->writeFieldBegin("playing_template_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->playing_template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("teams_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->teams_.size()));
    std::vector< ::entity::PlayingTeamField> ::const_iterator _iter35;
    for (_iter35 = this->teams_.begin(); _iter35 != this->teams_.end(); ++_iter35)
    {
      xfer += (*_iter35).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingTeamListResponse &a, MessagePlayingTeamListResponse &b) {
  using ::std::swap;
  swap(a.playing_template_, b.playing_template_);
  swap(a.teams_, b.teams_);
}

const char* MessagePlayingTeamCreateRequest::ascii_fingerprint = "E0991C843E3F9D01A30FF59D9FBC2CAF";
const uint8_t MessagePlayingTeamCreateRequest::binary_fingerprint[16] = {0xE0,0x99,0x1C,0x84,0x3E,0x3F,0x9D,0x01,0xA3,0x0F,0xF5,0x9D,0x9F,0xBC,0x2C,0xAF};

uint32_t MessagePlayingTeamCreateRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_playing_template_ = false;
  bool isset_min_fight_score_ = false;
  bool isset_auto_open_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_template_);
          isset_playing_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->min_fight_score_);
          isset_min_fight_score_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->auto_open_);
          isset_auto_open_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_playing_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_min_fight_score_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_auto_open_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingTeamCreateRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingTeamCreateRequest");

  xfer += oprot->writeFieldBegin("playing_template_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->playing_template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("min_fight_score_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->min_fight_score_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("auto_open_", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->auto_open_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingTeamCreateRequest &a, MessagePlayingTeamCreateRequest &b) {
  using ::std::swap;
  swap(a.playing_template_, b.playing_template_);
  swap(a.min_fight_score_, b.min_fight_score_);
  swap(a.auto_open_, b.auto_open_);
}

const char* MessagePlayingTeamCreateResponse::ascii_fingerprint = "88440F45A63E63607868B983E4E50558";
const uint8_t MessagePlayingTeamCreateResponse::binary_fingerprint[16] = {0x88,0x44,0x0F,0x45,0xA6,0x3E,0x63,0x60,0x78,0x68,0xB9,0x83,0xE4,0xE5,0x05,0x58};

uint32_t MessagePlayingTeamCreateResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;
  bool isset_playing_template_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_template_);
          isset_playing_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_playing_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingTeamCreateResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingTeamCreateResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("playing_template_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->playing_template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingTeamCreateResponse &a, MessagePlayingTeamCreateResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.playing_template_, b.playing_template_);
}

const char* MessagePlayingTeamSynchronize::ascii_fingerprint = "B996D2D0AE88C5A9453F9675299841E9";
const uint8_t MessagePlayingTeamSynchronize::binary_fingerprint[16] = {0xB9,0x96,0xD2,0xD0,0xAE,0x88,0xC5,0xA9,0x45,0x3F,0x96,0x75,0x29,0x98,0x41,0xE9};

uint32_t MessagePlayingTeamSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name_);
          this->__isset.name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast36;
          xfer += iprot->readI32(ecast36);
          this->status_ = ( ::entity::PlayingTeamStatus::type)ecast36;
          this->__isset.status_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->capacity_);
          this->__isset.capacity_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->min_fight_score_);
          this->__isset.min_fight_score_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->auto_open_);
          this->__isset.auto_open_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->members_.clear();
            uint32_t _size37;
            ::apache::thrift::protocol::TType _etype40;
            xfer += iprot->readListBegin(_etype40, _size37);
            this->members_.resize(_size37);
            uint32_t _i41;
            for (_i41 = 0; _i41 < _size37; ++_i41)
            {
              xfer += this->members_[_i41].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.members_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingTeamSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingTeamSynchronize");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.name_) {
    xfer += oprot->writeFieldBegin("name_", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->name_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.status_) {
    xfer += oprot->writeFieldBegin("status_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->status_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.capacity_) {
    xfer += oprot->writeFieldBegin("capacity_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->capacity_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.min_fight_score_) {
    xfer += oprot->writeFieldBegin("min_fight_score_", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->min_fight_score_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.auto_open_) {
    xfer += oprot->writeFieldBegin("auto_open_", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->auto_open_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.members_) {
    xfer += oprot->writeFieldBegin("members_", ::apache::thrift::protocol::T_LIST, 7);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->members_.size()));
      std::vector< ::entity::PlayingTeamMemberField> ::const_iterator _iter42;
      for (_iter42 = this->members_.begin(); _iter42 != this->members_.end(); ++_iter42)
      {
        xfer += (*_iter42).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingTeamSynchronize &a, MessagePlayingTeamSynchronize &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.name_, b.name_);
  swap(a.status_, b.status_);
  swap(a.capacity_, b.capacity_);
  swap(a.min_fight_score_, b.min_fight_score_);
  swap(a.auto_open_, b.auto_open_);
  swap(a.members_, b.members_);
  swap(a.__isset, b.__isset);
}

const char* MessagePlayingTeamMemberSynchronize::ascii_fingerprint = "35022F71B663CBAC41410C71848B3D74";
const uint8_t MessagePlayingTeamMemberSynchronize::binary_fingerprint[16] = {0x35,0x02,0x2F,0x71,0xB6,0x63,0xCB,0xAC,0x41,0x41,0x0C,0x71,0x84,0x8B,0x3D,0x74};

uint32_t MessagePlayingTeamMemberSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name_);
          this->__isset.name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->fight_score_);
          this->__isset.fight_score_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level_);
          this->__isset.level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ready_);
          this->__isset.ready_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingTeamMemberSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingTeamMemberSynchronize");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.name_) {
    xfer += oprot->writeFieldBegin("name_", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->name_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fight_score_) {
    xfer += oprot->writeFieldBegin("fight_score_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->fight_score_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.level_) {
    xfer += oprot->writeFieldBegin("level_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ready_) {
    xfer += oprot->writeFieldBegin("ready_", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->ready_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingTeamMemberSynchronize &a, MessagePlayingTeamMemberSynchronize &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.name_, b.name_);
  swap(a.fight_score_, b.fight_score_);
  swap(a.level_, b.level_);
  swap(a.ready_, b.ready_);
  swap(a.__isset, b.__isset);
}

const char* MessagePlayingTeamJoinRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MessagePlayingTeamJoinRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MessagePlayingTeamJoinRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_team_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->team_id_);
          isset_team_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_team_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingTeamJoinRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingTeamJoinRequest");

  xfer += oprot->writeFieldBegin("team_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->team_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingTeamJoinRequest &a, MessagePlayingTeamJoinRequest &b) {
  using ::std::swap;
  swap(a.team_id_, b.team_id_);
}

const char* MessagePlayingTeamJoinResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessagePlayingTeamJoinResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessagePlayingTeamJoinResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingTeamJoinResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingTeamJoinResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingTeamJoinResponse &a, MessagePlayingTeamJoinResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessagePlayingTeamJoinSynchronize::ascii_fingerprint = "0FAA12BA4C0DEB2499895230F6057237";
const uint8_t MessagePlayingTeamJoinSynchronize::binary_fingerprint[16] = {0x0F,0xAA,0x12,0xBA,0x4C,0x0D,0xEB,0x24,0x99,0x89,0x52,0x30,0xF6,0x05,0x72,0x37};

uint32_t MessagePlayingTeamJoinSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_name_ = false;
  bool isset_fight_score_ = false;
  bool isset_level_ = false;
  bool isset_ready_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name_);
          isset_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->fight_score_);
          isset_fight_score_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level_);
          isset_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ready_);
          isset_ready_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_name_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fight_score_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ready_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingTeamJoinSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingTeamJoinSynchronize");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fight_score_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->fight_score_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("level_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ready_", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->ready_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingTeamJoinSynchronize &a, MessagePlayingTeamJoinSynchronize &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.name_, b.name_);
  swap(a.fight_score_, b.fight_score_);
  swap(a.level_, b.level_);
  swap(a.ready_, b.ready_);
}

const char* MessagePlayingTeamQuitRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessagePlayingTeamQuitRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessagePlayingTeamQuitRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessagePlayingTeamQuitRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingTeamQuitRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingTeamQuitRequest &a, MessagePlayingTeamQuitRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessagePlayingTeamQuitResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessagePlayingTeamQuitResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessagePlayingTeamQuitResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingTeamQuitResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingTeamQuitResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingTeamQuitResponse &a, MessagePlayingTeamQuitResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessagePlayingTeamQuitSynchronize::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MessagePlayingTeamQuitSynchronize::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MessagePlayingTeamQuitSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingTeamQuitSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingTeamQuitSynchronize");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingTeamQuitSynchronize &a, MessagePlayingTeamQuitSynchronize &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
}

const char* MessagePlayingTeamReadyRequest::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessagePlayingTeamReadyRequest::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessagePlayingTeamReadyRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_ready_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ready_);
          isset_ready_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_ready_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingTeamReadyRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingTeamReadyRequest");

  xfer += oprot->writeFieldBegin("ready_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->ready_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingTeamReadyRequest &a, MessagePlayingTeamReadyRequest &b) {
  using ::std::swap;
  swap(a.ready_, b.ready_);
}

const char* MessagePlayingTeamReadyResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessagePlayingTeamReadyResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessagePlayingTeamReadyResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingTeamReadyResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingTeamReadyResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingTeamReadyResponse &a, MessagePlayingTeamReadyResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessagePlayingTeamKickoutRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MessagePlayingTeamKickoutRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MessagePlayingTeamKickoutRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingTeamKickoutRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingTeamKickoutRequest");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingTeamKickoutRequest &a, MessagePlayingTeamKickoutRequest &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
}

const char* MessagePlayingTeamKickoutResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessagePlayingTeamKickoutResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessagePlayingTeamKickoutResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingTeamKickoutResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingTeamKickoutResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingTeamKickoutResponse &a, MessagePlayingTeamKickoutResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessagePlayingTeamCapacitySetRequest::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t MessagePlayingTeamCapacitySetRequest::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t MessagePlayingTeamCapacitySetRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_capacity_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->capacity_);
          isset_capacity_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_capacity_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingTeamCapacitySetRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingTeamCapacitySetRequest");

  xfer += oprot->writeFieldBegin("capacity_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->capacity_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingTeamCapacitySetRequest &a, MessagePlayingTeamCapacitySetRequest &b) {
  using ::std::swap;
  swap(a.capacity_, b.capacity_);
}

const char* MessagePlayingTeamCapacitySetResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessagePlayingTeamCapacitySetResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessagePlayingTeamCapacitySetResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingTeamCapacitySetResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingTeamCapacitySetResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingTeamCapacitySetResponse &a, MessagePlayingTeamCapacitySetResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessagePlayingPaidAwardResponse::ascii_fingerprint = "88440F45A63E63607868B983E4E50558";
const uint8_t MessagePlayingPaidAwardResponse::binary_fingerprint[16] = {0x88,0x44,0x0F,0x45,0xA6,0x3E,0x63,0x60,0x78,0x68,0xB9,0x83,0xE4,0xE5,0x05,0x58};

uint32_t MessagePlayingPaidAwardResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;
  bool isset_playing_template_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_template_);
          isset_playing_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_playing_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessagePlayingPaidAwardResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessagePlayingPaidAwardResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("playing_template_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->playing_template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessagePlayingPaidAwardResponse &a, MessagePlayingPaidAwardResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.playing_template_, b.playing_template_);
}

const char* MessageMazeInitialize::ascii_fingerprint = "960CE69B823934FEB2E396568DFF599D";
const uint8_t MessageMazeInitialize::binary_fingerprint[16] = {0x96,0x0C,0xE6,0x9B,0x82,0x39,0x34,0xFE,0xB2,0xE3,0x96,0x56,0x8D,0xFF,0x59,0x9D};

uint32_t MessageMazeInitialize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_point_ = false;
  bool isset_action_point_recover_cooling_ = false;
  bool isset_floor_ = false;
  bool isset_x_ = false;
  bool isset_y_ = false;
  bool isset_grids_ = false;
  bool isset_gift_num_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_point_);
          isset_action_point_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_point_recover_cooling_);
          isset_action_point_recover_cooling_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->floor_);
          isset_floor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->x_);
          isset_x_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->y_);
          isset_y_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->grids_.clear();
            uint32_t _size43;
            ::apache::thrift::protocol::TType _etype46;
            xfer += iprot->readListBegin(_etype46, _size43);
            this->grids_.resize(_size43);
            uint32_t _i47;
            for (_i47 = 0; _i47 < _size43; ++_i47)
            {
              xfer += iprot->readI32(this->grids_[_i47]);
            }
            xfer += iprot->readListEnd();
          }
          isset_grids_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gift_num_);
          isset_gift_num_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_point_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_point_recover_cooling_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_floor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_x_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_y_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_grids_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gift_num_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageMazeInitialize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageMazeInitialize");

  xfer += oprot->writeFieldBegin("action_point_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->action_point_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_point_recover_cooling_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->action_point_recover_cooling_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("floor_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->floor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->x_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->y_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("grids_", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->grids_.size()));
    std::vector<int32_t> ::const_iterator _iter48;
    for (_iter48 = this->grids_.begin(); _iter48 != this->grids_.end(); ++_iter48)
    {
      xfer += oprot->writeI32((*_iter48));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gift_num_", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->gift_num_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageMazeInitialize &a, MessageMazeInitialize &b) {
  using ::std::swap;
  swap(a.action_point_, b.action_point_);
  swap(a.action_point_recover_cooling_, b.action_point_recover_cooling_);
  swap(a.floor_, b.floor_);
  swap(a.x_, b.x_);
  swap(a.y_, b.y_);
  swap(a.grids_, b.grids_);
  swap(a.gift_num_, b.gift_num_);
}

const char* MessageMazeSynchronize::ascii_fingerprint = "413DD9025F26475272C9206314AF8A22";
const uint8_t MessageMazeSynchronize::binary_fingerprint[16] = {0x41,0x3D,0xD9,0x02,0x5F,0x26,0x47,0x52,0x72,0xC9,0x20,0x63,0x14,0xAF,0x8A,0x22};

uint32_t MessageMazeSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_point_);
          this->__isset.action_point_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_point_recover_cooling_);
          this->__isset.action_point_recover_cooling_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->x_);
          this->__isset.x_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->y_);
          this->__isset.y_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gift_num_);
          this->__isset.gift_num_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageMazeSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageMazeSynchronize");

  if (this->__isset.action_point_) {
    xfer += oprot->writeFieldBegin("action_point_", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->action_point_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.action_point_recover_cooling_) {
    xfer += oprot->writeFieldBegin("action_point_recover_cooling_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->action_point_recover_cooling_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.x_) {
    xfer += oprot->writeFieldBegin("x_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->x_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.y_) {
    xfer += oprot->writeFieldBegin("y_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->y_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gift_num_) {
    xfer += oprot->writeFieldBegin("gift_num_", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->gift_num_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageMazeSynchronize &a, MessageMazeSynchronize &b) {
  using ::std::swap;
  swap(a.action_point_, b.action_point_);
  swap(a.action_point_recover_cooling_, b.action_point_recover_cooling_);
  swap(a.x_, b.x_);
  swap(a.y_, b.y_);
  swap(a.gift_num_, b.gift_num_);
  swap(a.__isset, b.__isset);
}

const char* MessageMazeEnterNextFloorNotify::ascii_fingerprint = "ACBC8ECF4940BD768FA35CCD08154770";
const uint8_t MessageMazeEnterNextFloorNotify::binary_fingerprint[16] = {0xAC,0xBC,0x8E,0xCF,0x49,0x40,0xBD,0x76,0x8F,0xA3,0x5C,0xCD,0x08,0x15,0x47,0x70};

uint32_t MessageMazeEnterNextFloorNotify::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_floor_ = false;
  bool isset_grids_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->floor_);
          isset_floor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->grids_.clear();
            uint32_t _size49;
            ::apache::thrift::protocol::TType _etype52;
            xfer += iprot->readListBegin(_etype52, _size49);
            this->grids_.resize(_size49);
            uint32_t _i53;
            for (_i53 = 0; _i53 < _size49; ++_i53)
            {
              xfer += iprot->readI32(this->grids_[_i53]);
            }
            xfer += iprot->readListEnd();
          }
          isset_grids_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_floor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_grids_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageMazeEnterNextFloorNotify::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageMazeEnterNextFloorNotify");

  xfer += oprot->writeFieldBegin("floor_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->floor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("grids_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->grids_.size()));
    std::vector<int32_t> ::const_iterator _iter54;
    for (_iter54 = this->grids_.begin(); _iter54 != this->grids_.end(); ++_iter54)
    {
      xfer += oprot->writeI32((*_iter54));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageMazeEnterNextFloorNotify &a, MessageMazeEnterNextFloorNotify &b) {
  using ::std::swap;
  swap(a.floor_, b.floor_);
  swap(a.grids_, b.grids_);
}

const char* MessageMazeMoveRequest::ascii_fingerprint = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
const uint8_t MessageMazeMoveRequest::binary_fingerprint[16] = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

uint32_t MessageMazeMoveRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dir_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast55;
          xfer += iprot->readI32(ecast55);
          this->dir_ = ( ::entity::MazeDirectionType::type)ecast55;
          isset_dir_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dir_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageMazeMoveRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageMazeMoveRequest");

  xfer += oprot->writeFieldBegin("dir_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->dir_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageMazeMoveRequest &a, MessageMazeMoveRequest &b) {
  using ::std::swap;
  swap(a.dir_, b.dir_);
}

const char* MessageMazeMoveResponse::ascii_fingerprint = "3409A6BAF48299E7727EECFEBEC3BDA9";
const uint8_t MessageMazeMoveResponse::binary_fingerprint[16] = {0x34,0x09,0xA6,0xBA,0xF4,0x82,0x99,0xE7,0x72,0x7E,0xEC,0xFE,0xBE,0xC3,0xBD,0xA9};

uint32_t MessageMazeMoveResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->grid_id_);
          this->__isset.grid_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageMazeMoveResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageMazeMoveResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.grid_id_) {
    xfer += oprot->writeFieldBegin("grid_id_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->grid_id_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageMazeMoveResponse &a, MessageMazeMoveResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.grid_id_, b.grid_id_);
  swap(a.__isset, b.__isset);
}

const char* MessageMazeConfirmMoveRequest::ascii_fingerprint = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
const uint8_t MessageMazeConfirmMoveRequest::binary_fingerprint[16] = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

uint32_t MessageMazeConfirmMoveRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dir_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast56;
          xfer += iprot->readI32(ecast56);
          this->dir_ = ( ::entity::MazeDirectionType::type)ecast56;
          isset_dir_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dir_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageMazeConfirmMoveRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageMazeConfirmMoveRequest");

  xfer += oprot->writeFieldBegin("dir_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->dir_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageMazeConfirmMoveRequest &a, MessageMazeConfirmMoveRequest &b) {
  using ::std::swap;
  swap(a.dir_, b.dir_);
}

const char* MessageMazeConfirmMoveResponse::ascii_fingerprint = "0221E6F365401E5EF98D7210120C5D0A";
const uint8_t MessageMazeConfirmMoveResponse::binary_fingerprint[16] = {0x02,0x21,0xE6,0xF3,0x65,0x40,0x1E,0x5E,0xF9,0x8D,0x72,0x10,0x12,0x0C,0x5D,0x0A};

uint32_t MessageMazeConfirmMoveResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->grid_id_);
          this->__isset.grid_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->bonus_id_);
          this->__isset.bonus_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->number_);
          this->__isset.number_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageMazeConfirmMoveResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageMazeConfirmMoveResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.grid_id_) {
    xfer += oprot->writeFieldBegin("grid_id_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->grid_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bonus_id_) {
    xfer += oprot->writeFieldBegin("bonus_id_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->bonus_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.number_) {
    xfer += oprot->writeFieldBegin("number_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->number_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageMazeConfirmMoveResponse &a, MessageMazeConfirmMoveResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.grid_id_, b.grid_id_);
  swap(a.bonus_id_, b.bonus_id_);
  swap(a.number_, b.number_);
  swap(a.__isset, b.__isset);
}

const char* MessageMazeAwardRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageMazeAwardRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageMazeAwardRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageMazeAwardRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageMazeAwardRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageMazeAwardRequest &a, MessageMazeAwardRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageMazeAwardResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageMazeAwardResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageMazeAwardResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageMazeAwardResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageMazeAwardResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageMazeAwardResponse &a, MessageMazeAwardResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

}} // namespace
