/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "gateway_entity_protocol_types.h"

#include <algorithm>

namespace gateway { namespace protocol {

int _kUseTaslimanTypeValues[] = {
  UseTaslimanType::HP,
  UseTaslimanType::MP
};
const char* _kUseTaslimanTypeNames[] = {
  "HP",
  "MP"
};
const std::map<int, const char*> _UseTaslimanType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kUseTaslimanTypeValues, _kUseTaslimanTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* MessageCreateActor::ascii_fingerprint = "E79D53C59A72F8CC353D7673D9157F15";
const uint8_t MessageCreateActor::binary_fingerprint[16] = {0xE7,0x9D,0x53,0xC5,0x9A,0x72,0xF8,0xCC,0x35,0x3D,0x76,0x73,0xD9,0x15,0x7F,0x15};

uint32_t MessageCreateActor::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name_ = false;
  bool isset_entity_client_fields_ = false;
  bool isset_role_aoi_fields_ = false;
  bool isset_role_client_fields_ = false;
  bool isset_actor_aoi_fields_ = false;
  bool isset_actor_client_fields_ = false;
  bool isset_system_now_ = false;
  bool isset_functionality_state_ = false;
  bool isset_sub_fight_scores_ = false;
  bool isset_vip_remainder_time_ = false;
  bool isset_world_jump_vip_num_ = false;
  bool isset_fcm_online_time_ = false;
  bool isset_create_time_ = false;
  bool isset_current_hp_tasliman_value_ = false;
  bool isset_current_mp_tasliman_value_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name_);
          isset_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->entity_client_fields_.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->entity_client_fields_.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI32(this->entity_client_fields_[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          isset_entity_client_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->role_aoi_fields_.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->role_aoi_fields_.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += iprot->readI32(this->role_aoi_fields_[_i9]);
            }
            xfer += iprot->readListEnd();
          }
          isset_role_aoi_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->role_client_fields_.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _etype13;
            xfer += iprot->readListBegin(_etype13, _size10);
            this->role_client_fields_.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              xfer += iprot->readI32(this->role_client_fields_[_i14]);
            }
            xfer += iprot->readListEnd();
          }
          isset_role_client_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->actor_aoi_fields_.clear();
            uint32_t _size15;
            ::apache::thrift::protocol::TType _etype18;
            xfer += iprot->readListBegin(_etype18, _size15);
            this->actor_aoi_fields_.resize(_size15);
            uint32_t _i19;
            for (_i19 = 0; _i19 < _size15; ++_i19)
            {
              xfer += iprot->readI32(this->actor_aoi_fields_[_i19]);
            }
            xfer += iprot->readListEnd();
          }
          isset_actor_aoi_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->actor_client_fields_.clear();
            uint32_t _size20;
            ::apache::thrift::protocol::TType _etype23;
            xfer += iprot->readListBegin(_etype23, _size20);
            this->actor_client_fields_.resize(_size20);
            uint32_t _i24;
            for (_i24 = 0; _i24 < _size20; ++_i24)
            {
              xfer += iprot->readI32(this->actor_client_fields_[_i24]);
            }
            xfer += iprot->readListEnd();
          }
          isset_actor_client_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->system_now_);
          isset_system_now_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->functionality_state_);
          isset_functionality_state_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sub_fight_scores_.clear();
            uint32_t _size25;
            ::apache::thrift::protocol::TType _etype28;
            xfer += iprot->readListBegin(_etype28, _size25);
            this->sub_fight_scores_.resize(_size25);
            uint32_t _i29;
            for (_i29 = 0; _i29 < _size25; ++_i29)
            {
              xfer += iprot->readI32(this->sub_fight_scores_[_i29]);
            }
            xfer += iprot->readListEnd();
          }
          isset_sub_fight_scores_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vip_remainder_time_);
          isset_vip_remainder_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->world_jump_vip_num_);
          isset_world_jump_vip_num_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->fcm_online_time_);
          isset_fcm_online_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->create_time_);
          isset_create_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->current_hp_tasliman_value_);
          isset_current_hp_tasliman_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->current_mp_tasliman_value_);
          isset_current_mp_tasliman_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_entity_client_fields_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_role_aoi_fields_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_role_client_fields_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_actor_aoi_fields_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_actor_client_fields_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_system_now_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_functionality_state_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sub_fight_scores_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_vip_remainder_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_world_jump_vip_num_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fcm_online_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_create_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_current_hp_tasliman_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_current_mp_tasliman_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageCreateActor::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageCreateActor");

  xfer += oprot->writeFieldBegin("name_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("entity_client_fields_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->entity_client_fields_.size()));
    std::vector<int32_t> ::const_iterator _iter30;
    for (_iter30 = this->entity_client_fields_.begin(); _iter30 != this->entity_client_fields_.end(); ++_iter30)
    {
      xfer += oprot->writeI32((*_iter30));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("role_aoi_fields_", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->role_aoi_fields_.size()));
    std::vector<int32_t> ::const_iterator _iter31;
    for (_iter31 = this->role_aoi_fields_.begin(); _iter31 != this->role_aoi_fields_.end(); ++_iter31)
    {
      xfer += oprot->writeI32((*_iter31));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("role_client_fields_", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->role_client_fields_.size()));
    std::vector<int32_t> ::const_iterator _iter32;
    for (_iter32 = this->role_client_fields_.begin(); _iter32 != this->role_client_fields_.end(); ++_iter32)
    {
      xfer += oprot->writeI32((*_iter32));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("actor_aoi_fields_", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->actor_aoi_fields_.size()));
    std::vector<int32_t> ::const_iterator _iter33;
    for (_iter33 = this->actor_aoi_fields_.begin(); _iter33 != this->actor_aoi_fields_.end(); ++_iter33)
    {
      xfer += oprot->writeI32((*_iter33));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("actor_client_fields_", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->actor_client_fields_.size()));
    std::vector<int32_t> ::const_iterator _iter34;
    for (_iter34 = this->actor_client_fields_.begin(); _iter34 != this->actor_client_fields_.end(); ++_iter34)
    {
      xfer += oprot->writeI32((*_iter34));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("system_now_", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->system_now_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("functionality_state_", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->functionality_state_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sub_fight_scores_", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->sub_fight_scores_.size()));
    std::vector<int32_t> ::const_iterator _iter35;
    for (_iter35 = this->sub_fight_scores_.begin(); _iter35 != this->sub_fight_scores_.end(); ++_iter35)
    {
      xfer += oprot->writeI32((*_iter35));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vip_remainder_time_", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->vip_remainder_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("world_jump_vip_num_", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->world_jump_vip_num_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fcm_online_time_", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->fcm_online_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("create_time_", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->create_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("current_hp_tasliman_value_", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->current_hp_tasliman_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("current_mp_tasliman_value_", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->current_mp_tasliman_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageCreateActor &a, MessageCreateActor &b) {
  using ::std::swap;
  swap(a.name_, b.name_);
  swap(a.entity_client_fields_, b.entity_client_fields_);
  swap(a.role_aoi_fields_, b.role_aoi_fields_);
  swap(a.role_client_fields_, b.role_client_fields_);
  swap(a.actor_aoi_fields_, b.actor_aoi_fields_);
  swap(a.actor_client_fields_, b.actor_client_fields_);
  swap(a.system_now_, b.system_now_);
  swap(a.functionality_state_, b.functionality_state_);
  swap(a.sub_fight_scores_, b.sub_fight_scores_);
  swap(a.vip_remainder_time_, b.vip_remainder_time_);
  swap(a.world_jump_vip_num_, b.world_jump_vip_num_);
  swap(a.fcm_online_time_, b.fcm_online_time_);
  swap(a.create_time_, b.create_time_);
  swap(a.current_hp_tasliman_value_, b.current_hp_tasliman_value_);
  swap(a.current_mp_tasliman_value_, b.current_mp_tasliman_value_);
}

const char* MessageSynchronizeActor::ascii_fingerprint = "5449E4F337CE6D3E74ACC41520D5FAF4";
const uint8_t MessageSynchronizeActor::binary_fingerprint[16] = {0x54,0x49,0xE4,0xF3,0x37,0xCE,0x6D,0x3E,0x74,0xAC,0xC4,0x15,0x20,0xD5,0xFA,0xF4};

uint32_t MessageSynchronizeActor::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->entity_client_fields_.clear();
            uint32_t _size36;
            ::apache::thrift::protocol::TType _etype39;
            xfer += iprot->readListBegin(_etype39, _size36);
            this->entity_client_fields_.resize(_size36);
            uint32_t _i40;
            for (_i40 = 0; _i40 < _size36; ++_i40)
            {
              xfer += this->entity_client_fields_[_i40].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.entity_client_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->role_aoi_fields_.clear();
            uint32_t _size41;
            ::apache::thrift::protocol::TType _etype44;
            xfer += iprot->readListBegin(_etype44, _size41);
            this->role_aoi_fields_.resize(_size41);
            uint32_t _i45;
            for (_i45 = 0; _i45 < _size41; ++_i45)
            {
              xfer += this->role_aoi_fields_[_i45].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.role_aoi_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->role_client_fields_.clear();
            uint32_t _size46;
            ::apache::thrift::protocol::TType _etype49;
            xfer += iprot->readListBegin(_etype49, _size46);
            this->role_client_fields_.resize(_size46);
            uint32_t _i50;
            for (_i50 = 0; _i50 < _size46; ++_i50)
            {
              xfer += this->role_client_fields_[_i50].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.role_client_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->actor_aoi_fields_.clear();
            uint32_t _size51;
            ::apache::thrift::protocol::TType _etype54;
            xfer += iprot->readListBegin(_etype54, _size51);
            this->actor_aoi_fields_.resize(_size51);
            uint32_t _i55;
            for (_i55 = 0; _i55 < _size51; ++_i55)
            {
              xfer += this->actor_aoi_fields_[_i55].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.actor_aoi_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->actor_client_fields_.clear();
            uint32_t _size56;
            ::apache::thrift::protocol::TType _etype59;
            xfer += iprot->readListBegin(_etype59, _size56);
            this->actor_client_fields_.resize(_size56);
            uint32_t _i60;
            for (_i60 = 0; _i60 < _size56; ++_i60)
            {
              xfer += this->actor_client_fields_[_i60].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.actor_client_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSynchronizeActor::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSynchronizeActor");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.entity_client_fields_) {
    xfer += oprot->writeFieldBegin("entity_client_fields_", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->entity_client_fields_.size()));
      std::vector< ::entity::EntityClientField> ::const_iterator _iter61;
      for (_iter61 = this->entity_client_fields_.begin(); _iter61 != this->entity_client_fields_.end(); ++_iter61)
      {
        xfer += (*_iter61).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.role_aoi_fields_) {
    xfer += oprot->writeFieldBegin("role_aoi_fields_", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->role_aoi_fields_.size()));
      std::vector< ::entity::RoleAoiField> ::const_iterator _iter62;
      for (_iter62 = this->role_aoi_fields_.begin(); _iter62 != this->role_aoi_fields_.end(); ++_iter62)
      {
        xfer += (*_iter62).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.role_client_fields_) {
    xfer += oprot->writeFieldBegin("role_client_fields_", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->role_client_fields_.size()));
      std::vector< ::entity::RoleClientField> ::const_iterator _iter63;
      for (_iter63 = this->role_client_fields_.begin(); _iter63 != this->role_client_fields_.end(); ++_iter63)
      {
        xfer += (*_iter63).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.actor_aoi_fields_) {
    xfer += oprot->writeFieldBegin("actor_aoi_fields_", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->actor_aoi_fields_.size()));
      std::vector< ::entity::ActorAoiField> ::const_iterator _iter64;
      for (_iter64 = this->actor_aoi_fields_.begin(); _iter64 != this->actor_aoi_fields_.end(); ++_iter64)
      {
        xfer += (*_iter64).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.actor_client_fields_) {
    xfer += oprot->writeFieldBegin("actor_client_fields_", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->actor_client_fields_.size()));
      std::vector< ::entity::ActorClientField> ::const_iterator _iter65;
      for (_iter65 = this->actor_client_fields_.begin(); _iter65 != this->actor_client_fields_.end(); ++_iter65)
      {
        xfer += (*_iter65).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSynchronizeActor &a, MessageSynchronizeActor &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.entity_client_fields_, b.entity_client_fields_);
  swap(a.role_aoi_fields_, b.role_aoi_fields_);
  swap(a.role_client_fields_, b.role_client_fields_);
  swap(a.actor_aoi_fields_, b.actor_aoi_fields_);
  swap(a.actor_client_fields_, b.actor_client_fields_);
  swap(a.__isset, b.__isset);
}

const char* MessageSynchronizeActorFunctionalityState::ascii_fingerprint = "4DC0C1A1F380340B40244ADC7FB0BA60";
const uint8_t MessageSynchronizeActorFunctionalityState::binary_fingerprint[16] = {0x4D,0xC0,0xC1,0xA1,0xF3,0x80,0x34,0x0B,0x40,0x24,0x4A,0xDC,0x7F,0xB0,0xBA,0x60};

uint32_t MessageSynchronizeActorFunctionalityState::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;
  bool isset_state_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->state_);
          isset_state_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_state_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSynchronizeActorFunctionalityState::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSynchronizeActorFunctionalityState");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state_", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->state_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSynchronizeActorFunctionalityState &a, MessageSynchronizeActorFunctionalityState &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.state_, b.state_);
}

const char* MessageSynchronizeActorSubFightScore::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t MessageSynchronizeActorSubFightScore::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

uint32_t MessageSynchronizeActorSubFightScore::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;
  bool isset_sub_fight_score_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sub_fight_score_);
          isset_sub_fight_score_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sub_fight_score_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSynchronizeActorSubFightScore::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSynchronizeActorSubFightScore");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sub_fight_score_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sub_fight_score_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSynchronizeActorSubFightScore &a, MessageSynchronizeActorSubFightScore &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.sub_fight_score_, b.sub_fight_score_);
}

const char* MessageSynchronizeNpc::ascii_fingerprint = "E4DC7C275B46D9A9B015A35497907741";
const uint8_t MessageSynchronizeNpc::binary_fingerprint[16] = {0xE4,0xDC,0x7C,0x27,0x5B,0x46,0xD9,0xA9,0xB0,0x15,0xA3,0x54,0x97,0x90,0x77,0x41};

uint32_t MessageSynchronizeNpc::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_npc_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->npc_id_);
          isset_npc_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->entity_client_fields_.clear();
            uint32_t _size66;
            ::apache::thrift::protocol::TType _etype69;
            xfer += iprot->readListBegin(_etype69, _size66);
            this->entity_client_fields_.resize(_size66);
            uint32_t _i70;
            for (_i70 = 0; _i70 < _size66; ++_i70)
            {
              xfer += this->entity_client_fields_[_i70].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.entity_client_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->role_aoi_fields_.clear();
            uint32_t _size71;
            ::apache::thrift::protocol::TType _etype74;
            xfer += iprot->readListBegin(_etype74, _size71);
            this->role_aoi_fields_.resize(_size71);
            uint32_t _i75;
            for (_i75 = 0; _i75 < _size71; ++_i75)
            {
              xfer += this->role_aoi_fields_[_i75].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.role_aoi_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->role_client_fields_.clear();
            uint32_t _size76;
            ::apache::thrift::protocol::TType _etype79;
            xfer += iprot->readListBegin(_etype79, _size76);
            this->role_client_fields_.resize(_size76);
            uint32_t _i80;
            for (_i80 = 0; _i80 < _size76; ++_i80)
            {
              xfer += this->role_client_fields_[_i80].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.role_client_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->npc_aoi_fields_.clear();
            uint32_t _size81;
            ::apache::thrift::protocol::TType _etype84;
            xfer += iprot->readListBegin(_etype84, _size81);
            this->npc_aoi_fields_.resize(_size81);
            uint32_t _i85;
            for (_i85 = 0; _i85 < _size81; ++_i85)
            {
              xfer += this->npc_aoi_fields_[_i85].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.npc_aoi_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_npc_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSynchronizeNpc::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSynchronizeNpc");

  xfer += oprot->writeFieldBegin("npc_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->npc_id_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.entity_client_fields_) {
    xfer += oprot->writeFieldBegin("entity_client_fields_", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->entity_client_fields_.size()));
      std::vector< ::entity::EntityClientField> ::const_iterator _iter86;
      for (_iter86 = this->entity_client_fields_.begin(); _iter86 != this->entity_client_fields_.end(); ++_iter86)
      {
        xfer += (*_iter86).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.role_aoi_fields_) {
    xfer += oprot->writeFieldBegin("role_aoi_fields_", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->role_aoi_fields_.size()));
      std::vector< ::entity::RoleAoiField> ::const_iterator _iter87;
      for (_iter87 = this->role_aoi_fields_.begin(); _iter87 != this->role_aoi_fields_.end(); ++_iter87)
      {
        xfer += (*_iter87).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.role_client_fields_) {
    xfer += oprot->writeFieldBegin("role_client_fields_", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->role_client_fields_.size()));
      std::vector< ::entity::RoleClientField> ::const_iterator _iter88;
      for (_iter88 = this->role_client_fields_.begin(); _iter88 != this->role_client_fields_.end(); ++_iter88)
      {
        xfer += (*_iter88).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.npc_aoi_fields_) {
    xfer += oprot->writeFieldBegin("npc_aoi_fields_", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->npc_aoi_fields_.size()));
      std::vector< ::entity::NpcAoiField> ::const_iterator _iter89;
      for (_iter89 = this->npc_aoi_fields_.begin(); _iter89 != this->npc_aoi_fields_.end(); ++_iter89)
      {
        xfer += (*_iter89).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSynchronizeNpc &a, MessageSynchronizeNpc &b) {
  using ::std::swap;
  swap(a.npc_id_, b.npc_id_);
  swap(a.entity_client_fields_, b.entity_client_fields_);
  swap(a.role_aoi_fields_, b.role_aoi_fields_);
  swap(a.role_client_fields_, b.role_client_fields_);
  swap(a.npc_aoi_fields_, b.npc_aoi_fields_);
  swap(a.__isset, b.__isset);
}

const char* MessageSynchronizeSceneItem::ascii_fingerprint = "33DCCF5CC20FCBB7FC683B6B98331059";
const uint8_t MessageSynchronizeSceneItem::binary_fingerprint[16] = {0x33,0xDC,0xCF,0x5C,0xC2,0x0F,0xCB,0xB7,0xFC,0x68,0x3B,0x6B,0x98,0x33,0x10,0x59};

uint32_t MessageSynchronizeSceneItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;
  bool isset_owner_type_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->entity_client_fields_.clear();
            uint32_t _size90;
            ::apache::thrift::protocol::TType _etype93;
            xfer += iprot->readListBegin(_etype93, _size90);
            this->entity_client_fields_.resize(_size90);
            uint32_t _i94;
            for (_i94 = 0; _i94 < _size90; ++_i94)
            {
              xfer += this->entity_client_fields_[_i94].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.entity_client_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->scene_item_aoi_fields_.clear();
            uint32_t _size95;
            ::apache::thrift::protocol::TType _etype98;
            xfer += iprot->readListBegin(_etype98, _size95);
            this->scene_item_aoi_fields_.resize(_size95);
            uint32_t _i99;
            for (_i99 = 0; _i99 < _size95; ++_i99)
            {
              xfer += this->scene_item_aoi_fields_[_i99].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.scene_item_aoi_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->owner_actors_.clear();
            uint32_t _size100;
            ::apache::thrift::protocol::TType _etype103;
            xfer += iprot->readListBegin(_etype103, _size100);
            this->owner_actors_.resize(_size100);
            uint32_t _i104;
            for (_i104 = 0; _i104 < _size100; ++_i104)
            {
              xfer += iprot->readString(this->owner_actors_[_i104]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.owner_actors_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast105;
          xfer += iprot->readI32(ecast105);
          this->owner_type_ = ( ::entity::NpcOwnerType::type)ecast105;
          isset_owner_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_owner_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSynchronizeSceneItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSynchronizeSceneItem");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.entity_client_fields_) {
    xfer += oprot->writeFieldBegin("entity_client_fields_", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->entity_client_fields_.size()));
      std::vector< ::entity::EntityClientField> ::const_iterator _iter106;
      for (_iter106 = this->entity_client_fields_.begin(); _iter106 != this->entity_client_fields_.end(); ++_iter106)
      {
        xfer += (*_iter106).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.scene_item_aoi_fields_) {
    xfer += oprot->writeFieldBegin("scene_item_aoi_fields_", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->scene_item_aoi_fields_.size()));
      std::vector< ::entity::SceneItemAoiField> ::const_iterator _iter107;
      for (_iter107 = this->scene_item_aoi_fields_.begin(); _iter107 != this->scene_item_aoi_fields_.end(); ++_iter107)
      {
        xfer += (*_iter107).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.owner_actors_) {
    xfer += oprot->writeFieldBegin("owner_actors_", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->owner_actors_.size()));
      std::vector<std::string> ::const_iterator _iter108;
      for (_iter108 = this->owner_actors_.begin(); _iter108 != this->owner_actors_.end(); ++_iter108)
      {
        xfer += oprot->writeString((*_iter108));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("owner_type_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->owner_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSynchronizeSceneItem &a, MessageSynchronizeSceneItem &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.entity_client_fields_, b.entity_client_fields_);
  swap(a.scene_item_aoi_fields_, b.scene_item_aoi_fields_);
  swap(a.owner_actors_, b.owner_actors_);
  swap(a.owner_type_, b.owner_type_);
  swap(a.__isset, b.__isset);
}

const char* MessageActorEnterMap::ascii_fingerprint = "B8A7FA093F4BD296ED5A68E585595B52";
const uint8_t MessageActorEnterMap::binary_fingerprint[16] = {0xB8,0xA7,0xFA,0x09,0x3F,0x4B,0xD2,0x96,0xED,0x5A,0x68,0xE5,0x85,0x59,0x5B,0x52};

uint32_t MessageActorEnterMap::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_map_ = false;
  bool isset_x_ = false;
  bool isset_y_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->map_);
          isset_map_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->x_);
          isset_x_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->y_);
          isset_y_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_map_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_x_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_y_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageActorEnterMap::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageActorEnterMap");

  xfer += oprot->writeFieldBegin("map_", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->map_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->x_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->y_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageActorEnterMap &a, MessageActorEnterMap &b) {
  using ::std::swap;
  swap(a.map_, b.map_);
  swap(a.x_, b.x_);
  swap(a.y_, b.y_);
}

const char* MessageActorMove::ascii_fingerprint = "67A0115F572DF34260A1FEA842DE93F2";
const uint8_t MessageActorMove::binary_fingerprint[16] = {0x67,0xA0,0x11,0x5F,0x57,0x2D,0xF3,0x42,0x60,0xA1,0xFE,0xA8,0x42,0xDE,0x93,0xF2};

uint32_t MessageActorMove::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dir_ = false;
  bool isset_offset_x_ = false;
  bool isset_offset_y_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast109;
          xfer += iprot->readI32(ecast109);
          this->dir_ = ( ::entity::DirectionType::type)ecast109;
          isset_dir_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->offset_x_);
          isset_offset_x_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->offset_y_);
          isset_offset_y_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dir_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_offset_x_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_offset_y_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageActorMove::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageActorMove");

  xfer += oprot->writeFieldBegin("dir_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->dir_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("offset_x_", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->offset_x_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("offset_y_", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->offset_y_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageActorMove &a, MessageActorMove &b) {
  using ::std::swap;
  swap(a.dir_, b.dir_);
  swap(a.offset_x_, b.offset_x_);
  swap(a.offset_y_, b.offset_y_);
}

const char* MessageActorRelocation::ascii_fingerprint = "F4B065ED3B54DE599EA59E637E287456";
const uint8_t MessageActorRelocation::binary_fingerprint[16] = {0xF4,0xB0,0x65,0xED,0x3B,0x54,0xDE,0x59,0x9E,0xA5,0x9E,0x63,0x7E,0x28,0x74,0x56};

uint32_t MessageActorRelocation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;
  bool isset_x_ = false;
  bool isset_y_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->x_);
          isset_x_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->y_);
          isset_y_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->offset_x_);
          this->__isset.offset_x_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->offset_y_);
          this->__isset.offset_y_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_x_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_y_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageActorRelocation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageActorRelocation");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->x_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->y_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.offset_x_) {
    xfer += oprot->writeFieldBegin("offset_x_", ::apache::thrift::protocol::T_BYTE, 4);
    xfer += oprot->writeByte(this->offset_x_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.offset_y_) {
    xfer += oprot->writeFieldBegin("offset_y_", ::apache::thrift::protocol::T_BYTE, 5);
    xfer += oprot->writeByte(this->offset_y_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageActorRelocation &a, MessageActorRelocation &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.x_, b.x_);
  swap(a.y_, b.y_);
  swap(a.offset_x_, b.offset_x_);
  swap(a.offset_y_, b.offset_y_);
  swap(a.__isset, b.__isset);
}

const char* MessageRoleMoveSynchronize::ascii_fingerprint = "21F922F8524A2D0AED796F065A574989";
const uint8_t MessageRoleMoveSynchronize::binary_fingerprint[16] = {0x21,0xF9,0x22,0xF8,0x52,0x4A,0x2D,0x0A,0xED,0x79,0x6F,0x06,0x5A,0x57,0x49,0x89};

uint32_t MessageRoleMoveSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;
  bool isset_type_ = false;
  bool isset_dir_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast110;
          xfer += iprot->readI32(ecast110);
          this->type_ = ( ::entity::EntityType::type)ecast110;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast111;
          xfer += iprot->readI32(ecast111);
          this->dir_ = ( ::entity::DirectionType::type)ecast111;
          isset_dir_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->offset_x_);
          this->__isset.offset_x_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->offset_y_);
          this->__isset.offset_y_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dir_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageRoleMoveSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageRoleMoveSynchronize");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dir_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->dir_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.offset_x_) {
    xfer += oprot->writeFieldBegin("offset_x_", ::apache::thrift::protocol::T_BYTE, 4);
    xfer += oprot->writeByte(this->offset_x_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.offset_y_) {
    xfer += oprot->writeFieldBegin("offset_y_", ::apache::thrift::protocol::T_BYTE, 5);
    xfer += oprot->writeByte(this->offset_y_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageRoleMoveSynchronize &a, MessageRoleMoveSynchronize &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.type_, b.type_);
  swap(a.dir_, b.dir_);
  swap(a.offset_x_, b.offset_x_);
  swap(a.offset_y_, b.offset_y_);
  swap(a.__isset, b.__isset);
}

const char* MessageCreateActorSynchronize::ascii_fingerprint = "AE5E555ED8A7C0F02E084DDA2B26E3BA";
const uint8_t MessageCreateActorSynchronize::binary_fingerprint[16] = {0xAE,0x5E,0x55,0x5E,0xD8,0xA7,0xC0,0xF0,0x2E,0x08,0x4D,0xDA,0x2B,0x26,0xE3,0xBA};

uint32_t MessageCreateActorSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name_ = false;
  bool isset_id_ = false;
  bool isset_role_aoi_fields_ = false;
  bool isset_actor_aoi_fields_ = false;
  bool isset_pos_x_ = false;
  bool isset_pos_y_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name_);
          isset_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->role_aoi_fields_.clear();
            uint32_t _size112;
            ::apache::thrift::protocol::TType _etype115;
            xfer += iprot->readListBegin(_etype115, _size112);
            this->role_aoi_fields_.resize(_size112);
            uint32_t _i116;
            for (_i116 = 0; _i116 < _size112; ++_i116)
            {
              xfer += iprot->readI32(this->role_aoi_fields_[_i116]);
            }
            xfer += iprot->readListEnd();
          }
          isset_role_aoi_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->actor_aoi_fields_.clear();
            uint32_t _size117;
            ::apache::thrift::protocol::TType _etype120;
            xfer += iprot->readListBegin(_etype120, _size117);
            this->actor_aoi_fields_.resize(_size117);
            uint32_t _i121;
            for (_i121 = 0; _i121 < _size117; ++_i121)
            {
              xfer += iprot->readI32(this->actor_aoi_fields_[_i121]);
            }
            xfer += iprot->readListEnd();
          }
          isset_actor_aoi_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pos_x_);
          isset_pos_x_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pos_y_);
          isset_pos_y_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->offset_x_);
          this->__isset.offset_x_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->offset_y_);
          this->__isset.offset_y_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_role_aoi_fields_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_actor_aoi_fields_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pos_x_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pos_y_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageCreateActorSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageCreateActorSynchronize");

  xfer += oprot->writeFieldBegin("name_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("role_aoi_fields_", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->role_aoi_fields_.size()));
    std::vector<int32_t> ::const_iterator _iter122;
    for (_iter122 = this->role_aoi_fields_.begin(); _iter122 != this->role_aoi_fields_.end(); ++_iter122)
    {
      xfer += oprot->writeI32((*_iter122));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("actor_aoi_fields_", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->actor_aoi_fields_.size()));
    std::vector<int32_t> ::const_iterator _iter123;
    for (_iter123 = this->actor_aoi_fields_.begin(); _iter123 != this->actor_aoi_fields_.end(); ++_iter123)
    {
      xfer += oprot->writeI32((*_iter123));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pos_x_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->pos_x_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pos_y_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->pos_y_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.offset_x_) {
    xfer += oprot->writeFieldBegin("offset_x_", ::apache::thrift::protocol::T_BYTE, 7);
    xfer += oprot->writeByte(this->offset_x_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.offset_y_) {
    xfer += oprot->writeFieldBegin("offset_y_", ::apache::thrift::protocol::T_BYTE, 8);
    xfer += oprot->writeByte(this->offset_y_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageCreateActorSynchronize &a, MessageCreateActorSynchronize &b) {
  using ::std::swap;
  swap(a.name_, b.name_);
  swap(a.id_, b.id_);
  swap(a.role_aoi_fields_, b.role_aoi_fields_);
  swap(a.actor_aoi_fields_, b.actor_aoi_fields_);
  swap(a.pos_x_, b.pos_x_);
  swap(a.pos_y_, b.pos_y_);
  swap(a.offset_x_, b.offset_x_);
  swap(a.offset_y_, b.offset_y_);
  swap(a.__isset, b.__isset);
}

const char* MessageCreateNpcSynchronize::ascii_fingerprint = "EB3D03B3ADEC75F0051159757F0FE164";
const uint8_t MessageCreateNpcSynchronize::binary_fingerprint[16] = {0xEB,0x3D,0x03,0xB3,0xAD,0xEC,0x75,0xF0,0x05,0x11,0x59,0x75,0x7F,0x0F,0xE1,0x64};

uint32_t MessageCreateNpcSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;
  bool isset_template_id_ = false;
  bool isset_role_aoi_fields_ = false;
  bool isset_npc_aoi_fields_ = false;
  bool isset_pos_x_ = false;
  bool isset_pos_y_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->template_id_);
          isset_template_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->role_aoi_fields_.clear();
            uint32_t _size124;
            ::apache::thrift::protocol::TType _etype127;
            xfer += iprot->readListBegin(_etype127, _size124);
            this->role_aoi_fields_.resize(_size124);
            uint32_t _i128;
            for (_i128 = 0; _i128 < _size124; ++_i128)
            {
              xfer += iprot->readI32(this->role_aoi_fields_[_i128]);
            }
            xfer += iprot->readListEnd();
          }
          isset_role_aoi_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->npc_aoi_fields_.clear();
            uint32_t _size129;
            ::apache::thrift::protocol::TType _etype132;
            xfer += iprot->readListBegin(_etype132, _size129);
            this->npc_aoi_fields_.resize(_size129);
            uint32_t _i133;
            for (_i133 = 0; _i133 < _size129; ++_i133)
            {
              xfer += iprot->readI32(this->npc_aoi_fields_[_i133]);
            }
            xfer += iprot->readListEnd();
          }
          isset_npc_aoi_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pos_x_);
          isset_pos_x_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pos_y_);
          isset_pos_y_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_template_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_role_aoi_fields_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_npc_aoi_fields_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pos_x_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pos_y_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageCreateNpcSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageCreateNpcSynchronize");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("template_id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->template_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("role_aoi_fields_", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->role_aoi_fields_.size()));
    std::vector<int32_t> ::const_iterator _iter134;
    for (_iter134 = this->role_aoi_fields_.begin(); _iter134 != this->role_aoi_fields_.end(); ++_iter134)
    {
      xfer += oprot->writeI32((*_iter134));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("npc_aoi_fields_", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->npc_aoi_fields_.size()));
    std::vector<int32_t> ::const_iterator _iter135;
    for (_iter135 = this->npc_aoi_fields_.begin(); _iter135 != this->npc_aoi_fields_.end(); ++_iter135)
    {
      xfer += oprot->writeI32((*_iter135));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pos_x_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->pos_x_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pos_y_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->pos_y_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageCreateNpcSynchronize &a, MessageCreateNpcSynchronize &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.template_id_, b.template_id_);
  swap(a.role_aoi_fields_, b.role_aoi_fields_);
  swap(a.npc_aoi_fields_, b.npc_aoi_fields_);
  swap(a.pos_x_, b.pos_x_);
  swap(a.pos_y_, b.pos_y_);
}

const char* MessageCreateSceneItemSynchronize::ascii_fingerprint = "3E764007A5F01EE0370AF4DADDF6CC7F";
const uint8_t MessageCreateSceneItemSynchronize::binary_fingerprint[16] = {0x3E,0x76,0x40,0x07,0xA5,0xF0,0x1E,0xE0,0x37,0x0A,0xF4,0xDA,0xDD,0xF6,0xCC,0x7F};

uint32_t MessageCreateSceneItemSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;
  bool isset_scene_item_aoi_fields_ = false;
  bool isset_pos_x_ = false;
  bool isset_pos_y_ = false;
  bool isset_owner_actors_ = false;
  bool isset_owner_type_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->scene_item_aoi_fields_.clear();
            uint32_t _size136;
            ::apache::thrift::protocol::TType _etype139;
            xfer += iprot->readListBegin(_etype139, _size136);
            this->scene_item_aoi_fields_.resize(_size136);
            uint32_t _i140;
            for (_i140 = 0; _i140 < _size136; ++_i140)
            {
              xfer += iprot->readI32(this->scene_item_aoi_fields_[_i140]);
            }
            xfer += iprot->readListEnd();
          }
          isset_scene_item_aoi_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pos_x_);
          isset_pos_x_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pos_y_);
          isset_pos_y_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->owner_actors_.clear();
            uint32_t _size141;
            ::apache::thrift::protocol::TType _etype144;
            xfer += iprot->readListBegin(_etype144, _size141);
            this->owner_actors_.resize(_size141);
            uint32_t _i145;
            for (_i145 = 0; _i145 < _size141; ++_i145)
            {
              xfer += iprot->readString(this->owner_actors_[_i145]);
            }
            xfer += iprot->readListEnd();
          }
          isset_owner_actors_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast146;
          xfer += iprot->readI32(ecast146);
          this->owner_type_ = ( ::entity::NpcOwnerType::type)ecast146;
          isset_owner_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_scene_item_aoi_fields_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pos_x_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pos_y_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_owner_actors_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_owner_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageCreateSceneItemSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageCreateSceneItemSynchronize");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scene_item_aoi_fields_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->scene_item_aoi_fields_.size()));
    std::vector<int32_t> ::const_iterator _iter147;
    for (_iter147 = this->scene_item_aoi_fields_.begin(); _iter147 != this->scene_item_aoi_fields_.end(); ++_iter147)
    {
      xfer += oprot->writeI32((*_iter147));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pos_x_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->pos_x_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pos_y_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->pos_y_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("owner_actors_", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->owner_actors_.size()));
    std::vector<std::string> ::const_iterator _iter148;
    for (_iter148 = this->owner_actors_.begin(); _iter148 != this->owner_actors_.end(); ++_iter148)
    {
      xfer += oprot->writeString((*_iter148));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("owner_type_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->owner_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageCreateSceneItemSynchronize &a, MessageCreateSceneItemSynchronize &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.scene_item_aoi_fields_, b.scene_item_aoi_fields_);
  swap(a.pos_x_, b.pos_x_);
  swap(a.pos_y_, b.pos_y_);
  swap(a.owner_actors_, b.owner_actors_);
  swap(a.owner_type_, b.owner_type_);
}

const char* MessageDestoryRoleSynchronize::ascii_fingerprint = "D6FD826D949221396F4FFC3ECCD3D192";
const uint8_t MessageDestoryRoleSynchronize::binary_fingerprint[16] = {0xD6,0xFD,0x82,0x6D,0x94,0x92,0x21,0x39,0x6F,0x4F,0xFC,0x3E,0xCC,0xD3,0xD1,0x92};

uint32_t MessageDestoryRoleSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;
  bool isset_type_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast149;
          xfer += iprot->readI32(ecast149);
          this->type_ = ( ::entity::EntityType::type)ecast149;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageDestoryRoleSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageDestoryRoleSynchronize");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageDestoryRoleSynchronize &a, MessageDestoryRoleSynchronize &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.type_, b.type_);
}

const char* AoiActorData::ascii_fingerprint = "AE5E555ED8A7C0F02E084DDA2B26E3BA";
const uint8_t AoiActorData::binary_fingerprint[16] = {0xAE,0x5E,0x55,0x5E,0xD8,0xA7,0xC0,0xF0,0x2E,0x08,0x4D,0xDA,0x2B,0x26,0xE3,0xBA};

uint32_t AoiActorData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;
  bool isset_name_ = false;
  bool isset_role_aoi_fields_ = false;
  bool isset_actor_aoi_fields_ = false;
  bool isset_pos_x_ = false;
  bool isset_pos_y_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name_);
          isset_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->role_aoi_fields_.clear();
            uint32_t _size150;
            ::apache::thrift::protocol::TType _etype153;
            xfer += iprot->readListBegin(_etype153, _size150);
            this->role_aoi_fields_.resize(_size150);
            uint32_t _i154;
            for (_i154 = 0; _i154 < _size150; ++_i154)
            {
              xfer += iprot->readI32(this->role_aoi_fields_[_i154]);
            }
            xfer += iprot->readListEnd();
          }
          isset_role_aoi_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->actor_aoi_fields_.clear();
            uint32_t _size155;
            ::apache::thrift::protocol::TType _etype158;
            xfer += iprot->readListBegin(_etype158, _size155);
            this->actor_aoi_fields_.resize(_size155);
            uint32_t _i159;
            for (_i159 = 0; _i159 < _size155; ++_i159)
            {
              xfer += iprot->readI32(this->actor_aoi_fields_[_i159]);
            }
            xfer += iprot->readListEnd();
          }
          isset_actor_aoi_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pos_x_);
          isset_pos_x_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pos_y_);
          isset_pos_y_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->offset_x_);
          this->__isset.offset_x_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->offset_y_);
          this->__isset.offset_y_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_name_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_role_aoi_fields_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_actor_aoi_fields_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pos_x_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pos_y_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AoiActorData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AoiActorData");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("role_aoi_fields_", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->role_aoi_fields_.size()));
    std::vector<int32_t> ::const_iterator _iter160;
    for (_iter160 = this->role_aoi_fields_.begin(); _iter160 != this->role_aoi_fields_.end(); ++_iter160)
    {
      xfer += oprot->writeI32((*_iter160));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("actor_aoi_fields_", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->actor_aoi_fields_.size()));
    std::vector<int32_t> ::const_iterator _iter161;
    for (_iter161 = this->actor_aoi_fields_.begin(); _iter161 != this->actor_aoi_fields_.end(); ++_iter161)
    {
      xfer += oprot->writeI32((*_iter161));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pos_x_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->pos_x_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pos_y_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->pos_y_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.offset_x_) {
    xfer += oprot->writeFieldBegin("offset_x_", ::apache::thrift::protocol::T_BYTE, 7);
    xfer += oprot->writeByte(this->offset_x_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.offset_y_) {
    xfer += oprot->writeFieldBegin("offset_y_", ::apache::thrift::protocol::T_BYTE, 8);
    xfer += oprot->writeByte(this->offset_y_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AoiActorData &a, AoiActorData &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.name_, b.name_);
  swap(a.role_aoi_fields_, b.role_aoi_fields_);
  swap(a.actor_aoi_fields_, b.actor_aoi_fields_);
  swap(a.pos_x_, b.pos_x_);
  swap(a.pos_y_, b.pos_y_);
  swap(a.offset_x_, b.offset_x_);
  swap(a.offset_y_, b.offset_y_);
  swap(a.__isset, b.__isset);
}

const char* AoiNpcData::ascii_fingerprint = "EB3D03B3ADEC75F0051159757F0FE164";
const uint8_t AoiNpcData::binary_fingerprint[16] = {0xEB,0x3D,0x03,0xB3,0xAD,0xEC,0x75,0xF0,0x05,0x11,0x59,0x75,0x7F,0x0F,0xE1,0x64};

uint32_t AoiNpcData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;
  bool isset_template_id_ = false;
  bool isset_role_aoi_fields_ = false;
  bool isset_npc_aoi_fields_ = false;
  bool isset_pos_x_ = false;
  bool isset_pos_y_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->template_id_);
          isset_template_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->role_aoi_fields_.clear();
            uint32_t _size162;
            ::apache::thrift::protocol::TType _etype165;
            xfer += iprot->readListBegin(_etype165, _size162);
            this->role_aoi_fields_.resize(_size162);
            uint32_t _i166;
            for (_i166 = 0; _i166 < _size162; ++_i166)
            {
              xfer += iprot->readI32(this->role_aoi_fields_[_i166]);
            }
            xfer += iprot->readListEnd();
          }
          isset_role_aoi_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->npc_aoi_fields_.clear();
            uint32_t _size167;
            ::apache::thrift::protocol::TType _etype170;
            xfer += iprot->readListBegin(_etype170, _size167);
            this->npc_aoi_fields_.resize(_size167);
            uint32_t _i171;
            for (_i171 = 0; _i171 < _size167; ++_i171)
            {
              xfer += iprot->readI32(this->npc_aoi_fields_[_i171]);
            }
            xfer += iprot->readListEnd();
          }
          isset_npc_aoi_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pos_x_);
          isset_pos_x_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pos_y_);
          isset_pos_y_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_template_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_role_aoi_fields_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_npc_aoi_fields_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pos_x_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pos_y_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AoiNpcData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AoiNpcData");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("template_id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->template_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("role_aoi_fields_", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->role_aoi_fields_.size()));
    std::vector<int32_t> ::const_iterator _iter172;
    for (_iter172 = this->role_aoi_fields_.begin(); _iter172 != this->role_aoi_fields_.end(); ++_iter172)
    {
      xfer += oprot->writeI32((*_iter172));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("npc_aoi_fields_", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->npc_aoi_fields_.size()));
    std::vector<int32_t> ::const_iterator _iter173;
    for (_iter173 = this->npc_aoi_fields_.begin(); _iter173 != this->npc_aoi_fields_.end(); ++_iter173)
    {
      xfer += oprot->writeI32((*_iter173));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pos_x_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->pos_x_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pos_y_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->pos_y_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AoiNpcData &a, AoiNpcData &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.template_id_, b.template_id_);
  swap(a.role_aoi_fields_, b.role_aoi_fields_);
  swap(a.npc_aoi_fields_, b.npc_aoi_fields_);
  swap(a.pos_x_, b.pos_x_);
  swap(a.pos_y_, b.pos_y_);
}

const char* AoiSceneItemData::ascii_fingerprint = "3E764007A5F01EE0370AF4DADDF6CC7F";
const uint8_t AoiSceneItemData::binary_fingerprint[16] = {0x3E,0x76,0x40,0x07,0xA5,0xF0,0x1E,0xE0,0x37,0x0A,0xF4,0xDA,0xDD,0xF6,0xCC,0x7F};

uint32_t AoiSceneItemData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;
  bool isset_item_aoi_fields_ = false;
  bool isset_pos_x_ = false;
  bool isset_pos_y_ = false;
  bool isset_owner_actors_ = false;
  bool isset_owner_type_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->item_aoi_fields_.clear();
            uint32_t _size174;
            ::apache::thrift::protocol::TType _etype177;
            xfer += iprot->readListBegin(_etype177, _size174);
            this->item_aoi_fields_.resize(_size174);
            uint32_t _i178;
            for (_i178 = 0; _i178 < _size174; ++_i178)
            {
              xfer += iprot->readI32(this->item_aoi_fields_[_i178]);
            }
            xfer += iprot->readListEnd();
          }
          isset_item_aoi_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pos_x_);
          isset_pos_x_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pos_y_);
          isset_pos_y_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->owner_actors_.clear();
            uint32_t _size179;
            ::apache::thrift::protocol::TType _etype182;
            xfer += iprot->readListBegin(_etype182, _size179);
            this->owner_actors_.resize(_size179);
            uint32_t _i183;
            for (_i183 = 0; _i183 < _size179; ++_i183)
            {
              xfer += iprot->readString(this->owner_actors_[_i183]);
            }
            xfer += iprot->readListEnd();
          }
          isset_owner_actors_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast184;
          xfer += iprot->readI32(ecast184);
          this->owner_type_ = ( ::entity::NpcOwnerType::type)ecast184;
          isset_owner_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item_aoi_fields_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pos_x_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pos_y_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_owner_actors_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_owner_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AoiSceneItemData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AoiSceneItemData");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item_aoi_fields_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->item_aoi_fields_.size()));
    std::vector<int32_t> ::const_iterator _iter185;
    for (_iter185 = this->item_aoi_fields_.begin(); _iter185 != this->item_aoi_fields_.end(); ++_iter185)
    {
      xfer += oprot->writeI32((*_iter185));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pos_x_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->pos_x_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pos_y_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->pos_y_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("owner_actors_", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->owner_actors_.size()));
    std::vector<std::string> ::const_iterator _iter186;
    for (_iter186 = this->owner_actors_.begin(); _iter186 != this->owner_actors_.end(); ++_iter186)
    {
      xfer += oprot->writeString((*_iter186));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("owner_type_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->owner_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AoiSceneItemData &a, AoiSceneItemData &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.item_aoi_fields_, b.item_aoi_fields_);
  swap(a.pos_x_, b.pos_x_);
  swap(a.pos_y_, b.pos_y_);
  swap(a.owner_actors_, b.owner_actors_);
  swap(a.owner_type_, b.owner_type_);
}

const char* MessageCreateAoiRoles::ascii_fingerprint = "807B4D1626A5F62C70A8ABD3793006EF";
const uint8_t MessageCreateAoiRoles::binary_fingerprint[16] = {0x80,0x7B,0x4D,0x16,0x26,0xA5,0xF6,0x2C,0x70,0xA8,0xAB,0xD3,0x79,0x30,0x06,0xEF};

uint32_t MessageCreateAoiRoles::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actors_ = false;
  bool isset_npcs_ = false;
  bool isset_items_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->actors_.clear();
            uint32_t _size187;
            ::apache::thrift::protocol::TType _etype190;
            xfer += iprot->readListBegin(_etype190, _size187);
            this->actors_.resize(_size187);
            uint32_t _i191;
            for (_i191 = 0; _i191 < _size187; ++_i191)
            {
              xfer += this->actors_[_i191].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_actors_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->npcs_.clear();
            uint32_t _size192;
            ::apache::thrift::protocol::TType _etype195;
            xfer += iprot->readListBegin(_etype195, _size192);
            this->npcs_.resize(_size192);
            uint32_t _i196;
            for (_i196 = 0; _i196 < _size192; ++_i196)
            {
              xfer += this->npcs_[_i196].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_npcs_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->items_.clear();
            uint32_t _size197;
            ::apache::thrift::protocol::TType _etype200;
            xfer += iprot->readListBegin(_etype200, _size197);
            this->items_.resize(_size197);
            uint32_t _i201;
            for (_i201 = 0; _i201 < _size197; ++_i201)
            {
              xfer += this->items_[_i201].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_items_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actors_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_npcs_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_items_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageCreateAoiRoles::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageCreateAoiRoles");

  xfer += oprot->writeFieldBegin("actors_", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->actors_.size()));
    std::vector<AoiActorData> ::const_iterator _iter202;
    for (_iter202 = this->actors_.begin(); _iter202 != this->actors_.end(); ++_iter202)
    {
      xfer += (*_iter202).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("npcs_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->npcs_.size()));
    std::vector<AoiNpcData> ::const_iterator _iter203;
    for (_iter203 = this->npcs_.begin(); _iter203 != this->npcs_.end(); ++_iter203)
    {
      xfer += (*_iter203).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("items_", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->items_.size()));
    std::vector<AoiSceneItemData> ::const_iterator _iter204;
    for (_iter204 = this->items_.begin(); _iter204 != this->items_.end(); ++_iter204)
    {
      xfer += (*_iter204).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageCreateAoiRoles &a, MessageCreateAoiRoles &b) {
  using ::std::swap;
  swap(a.actors_, b.actors_);
  swap(a.npcs_, b.npcs_);
  swap(a.items_, b.items_);
}

const char* MessageDestoryAoiRoles::ascii_fingerprint = "F58DCEBA659ABD254B5B8D11A03A57B9";
const uint8_t MessageDestoryAoiRoles::binary_fingerprint[16] = {0xF5,0x8D,0xCE,0xBA,0x65,0x9A,0xBD,0x25,0x4B,0x5B,0x8D,0x11,0xA0,0x3A,0x57,0xB9};

uint32_t MessageDestoryAoiRoles::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actors_ = false;
  bool isset_npcs_ = false;
  bool isset_items_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->actors_.clear();
            uint32_t _size205;
            ::apache::thrift::protocol::TType _etype208;
            xfer += iprot->readListBegin(_etype208, _size205);
            this->actors_.resize(_size205);
            uint32_t _i209;
            for (_i209 = 0; _i209 < _size205; ++_i209)
            {
              xfer += iprot->readString(this->actors_[_i209]);
            }
            xfer += iprot->readListEnd();
          }
          isset_actors_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->npcs_.clear();
            uint32_t _size210;
            ::apache::thrift::protocol::TType _etype213;
            xfer += iprot->readListBegin(_etype213, _size210);
            this->npcs_.resize(_size210);
            uint32_t _i214;
            for (_i214 = 0; _i214 < _size210; ++_i214)
            {
              xfer += iprot->readString(this->npcs_[_i214]);
            }
            xfer += iprot->readListEnd();
          }
          isset_npcs_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->items_.clear();
            uint32_t _size215;
            ::apache::thrift::protocol::TType _etype218;
            xfer += iprot->readListBegin(_etype218, _size215);
            this->items_.resize(_size215);
            uint32_t _i219;
            for (_i219 = 0; _i219 < _size215; ++_i219)
            {
              xfer += iprot->readString(this->items_[_i219]);
            }
            xfer += iprot->readListEnd();
          }
          isset_items_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actors_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_npcs_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_items_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageDestoryAoiRoles::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageDestoryAoiRoles");

  xfer += oprot->writeFieldBegin("actors_", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->actors_.size()));
    std::vector<std::string> ::const_iterator _iter220;
    for (_iter220 = this->actors_.begin(); _iter220 != this->actors_.end(); ++_iter220)
    {
      xfer += oprot->writeString((*_iter220));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("npcs_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->npcs_.size()));
    std::vector<std::string> ::const_iterator _iter221;
    for (_iter221 = this->npcs_.begin(); _iter221 != this->npcs_.end(); ++_iter221)
    {
      xfer += oprot->writeString((*_iter221));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("items_", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->items_.size()));
    std::vector<std::string> ::const_iterator _iter222;
    for (_iter222 = this->items_.begin(); _iter222 != this->items_.end(); ++_iter222)
    {
      xfer += oprot->writeString((*_iter222));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageDestoryAoiRoles &a, MessageDestoryAoiRoles &b) {
  using ::std::swap;
  swap(a.actors_, b.actors_);
  swap(a.npcs_, b.npcs_);
  swap(a.items_, b.items_);
}

const char* MessageAddExpSynchronize::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t MessageAddExpSynchronize::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t MessageAddExpSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_exp_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->exp_);
          isset_exp_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_exp_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAddExpSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAddExpSynchronize");

  xfer += oprot->writeFieldBegin("exp_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->exp_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAddExpSynchronize &a, MessageAddExpSynchronize &b) {
  using ::std::swap;
  swap(a.exp_, b.exp_);
}

const char* MessageActorFacadeRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MessageActorFacadeRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MessageActorFacadeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageActorFacadeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageActorFacadeRequest");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageActorFacadeRequest &a, MessageActorFacadeRequest &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
}

const char* MessageActorFacadeResponse::ascii_fingerprint = "B1337BAC93D62ED42633ED9D90B2E646";
const uint8_t MessageActorFacadeResponse::binary_fingerprint[16] = {0xB1,0x33,0x7B,0xAC,0x93,0xD6,0x2E,0xD4,0x26,0x33,0xED,0x9D,0x90,0xB2,0xE6,0x46};

uint32_t MessageActorFacadeResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_vocation_ = false;
  bool isset_gender_ = false;
  bool isset_appearance_ = false;
  bool isset_equipments_ = false;
  bool isset_sword_ = false;
  bool isset_spirit_facade_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast223;
          xfer += iprot->readI32(ecast223);
          this->vocation_ = ( ::entity::VocationType::type)ecast223;
          isset_vocation_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast224;
          xfer += iprot->readI32(ecast224);
          this->gender_ = ( ::entity::GenderType::type)ecast224;
          isset_gender_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->appearance_);
          isset_appearance_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->equipments_.clear();
            uint32_t _size225;
            ::apache::thrift::protocol::TType _etype228;
            xfer += iprot->readListBegin(_etype228, _size225);
            this->equipments_.resize(_size225);
            uint32_t _i229;
            for (_i229 = 0; _i229 < _size225; ++_i229)
            {
              xfer += this->equipments_[_i229].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_equipments_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sword_);
          isset_sword_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->spirit_facade_);
          isset_spirit_facade_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_vocation_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gender_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_appearance_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_equipments_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sword_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_spirit_facade_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageActorFacadeResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageActorFacadeResponse");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vocation_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->vocation_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gender_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->gender_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("appearance_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->appearance_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("equipments_", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->equipments_.size()));
    std::vector< ::entity::EquipFacadeField> ::const_iterator _iter230;
    for (_iter230 = this->equipments_.begin(); _iter230 != this->equipments_.end(); ++_iter230)
    {
      xfer += (*_iter230).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sword_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->sword_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("spirit_facade_", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->spirit_facade_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageActorFacadeResponse &a, MessageActorFacadeResponse &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.vocation_, b.vocation_);
  swap(a.gender_, b.gender_);
  swap(a.appearance_, b.appearance_);
  swap(a.equipments_, b.equipments_);
  swap(a.sword_, b.sword_);
  swap(a.spirit_facade_, b.spirit_facade_);
}

const char* MessageActorVipSynchronize::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t MessageActorVipSynchronize::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t MessageActorVipSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_remainder_time_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->remainder_time_);
          isset_remainder_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_remainder_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageActorVipSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageActorVipSynchronize");

  xfer += oprot->writeFieldBegin("remainder_time_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->remainder_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageActorVipSynchronize &a, MessageActorVipSynchronize &b) {
  using ::std::swap;
  swap(a.remainder_time_, b.remainder_time_);
}

const char* MessageWorldJumpVipNumSynchronize::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t MessageWorldJumpVipNumSynchronize::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t MessageWorldJumpVipNumSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_remainder_num_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->remainder_num_);
          isset_remainder_num_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_remainder_num_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageWorldJumpVipNumSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageWorldJumpVipNumSynchronize");

  xfer += oprot->writeFieldBegin("remainder_num_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->remainder_num_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageWorldJumpVipNumSynchronize &a, MessageWorldJumpVipNumSynchronize &b) {
  using ::std::swap;
  swap(a.remainder_num_, b.remainder_num_);
}

const char* MessageActorFunctionalityOpenRequest::ascii_fingerprint = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
const uint8_t MessageActorFunctionalityOpenRequest::binary_fingerprint[16] = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

uint32_t MessageActorFunctionalityOpenRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_functionality_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast231;
          xfer += iprot->readI32(ecast231);
          this->functionality_id_ = ( ::entity::FunctionalityType::type)ecast231;
          isset_functionality_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_functionality_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageActorFunctionalityOpenRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageActorFunctionalityOpenRequest");

  xfer += oprot->writeFieldBegin("functionality_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->functionality_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageActorFunctionalityOpenRequest &a, MessageActorFunctionalityOpenRequest &b) {
  using ::std::swap;
  swap(a.functionality_id_, b.functionality_id_);
}

const char* MessageActorFunctionalityOpenResponse::ascii_fingerprint = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
const uint8_t MessageActorFunctionalityOpenResponse::binary_fingerprint[16] = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

uint32_t MessageActorFunctionalityOpenResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_functionality_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast232;
          xfer += iprot->readI32(ecast232);
          this->functionality_id_ = ( ::entity::FunctionalityType::type)ecast232;
          isset_functionality_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_functionality_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageActorFunctionalityOpenResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageActorFunctionalityOpenResponse");

  xfer += oprot->writeFieldBegin("functionality_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->functionality_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageActorFunctionalityOpenResponse &a, MessageActorFunctionalityOpenResponse &b) {
  using ::std::swap;
  swap(a.functionality_id_, b.functionality_id_);
}

const char* MessageActorUseTaslimanRequest::ascii_fingerprint = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
const uint8_t MessageActorUseTaslimanRequest::binary_fingerprint[16] = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

uint32_t MessageActorUseTaslimanRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast233;
          xfer += iprot->readI32(ecast233);
          this->type_ = (UseTaslimanType::type)ecast233;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageActorUseTaslimanRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageActorUseTaslimanRequest");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageActorUseTaslimanRequest &a, MessageActorUseTaslimanRequest &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
}

const char* MessageActorUseTaslimanResponse::ascii_fingerprint = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
const uint8_t MessageActorUseTaslimanResponse::binary_fingerprint[16] = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

uint32_t MessageActorUseTaslimanResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast234;
          xfer += iprot->readI32(ecast234);
          this->type_ = (UseTaslimanType::type)ecast234;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageActorUseTaslimanResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageActorUseTaslimanResponse");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageActorUseTaslimanResponse &a, MessageActorUseTaslimanResponse &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
}

const char* MessageActorTaslimanSynchronize::ascii_fingerprint = "46A703A33337BED2F62F386FC66B2A5F";
const uint8_t MessageActorTaslimanSynchronize::binary_fingerprint[16] = {0x46,0xA7,0x03,0xA3,0x33,0x37,0xBE,0xD2,0xF6,0x2F,0x38,0x6F,0xC6,0x6B,0x2A,0x5F};

uint32_t MessageActorTaslimanSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_value_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast235;
          xfer += iprot->readI32(ecast235);
          this->type_ = (UseTaslimanType::type)ecast235;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->value_);
          isset_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageActorTaslimanSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageActorTaslimanSynchronize");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageActorTaslimanSynchronize &a, MessageActorTaslimanSynchronize &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.value_, b.value_);
}

}} // namespace
