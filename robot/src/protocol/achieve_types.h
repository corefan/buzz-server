/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef achieve_TYPES_H
#define achieve_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace entity {

struct AchieveConditionType {
  enum type {
    MIN = 0,
    SOUL_UNLOCK = 1,
    SOUL_UPGRAGE_LEVEL = 2,
    SKILL_USE = 3,
    FUNCTIONALITY_OPEN = 4,
    SPIRIT_UPGRADE_LEVEL = 5,
    SPIRIT_COLLECT_SHAPE = 6,
    KILL_ROLE = 7,
    BAG_EXPAND = 8,
    KILLED_SELF = 9,
    EQUIP_STRENGTH = 10,
    WEAR_EQUIP = 11,
    GEM_OPT = 12,
    GEM_STRENGTH = 13,
    RELIVE_WAY = 14,
    VOCATION_SET = 15,
    SOUL_SCHEME = 16,
    SWORD_UPGRADE = 17,
    SWORD_STRENGTH = 18,
    HOMELAND_BUILDING_UPGRADE = 19,
    HOMELAND_REVENUE = 20,
    HOMELAND_USE = 21,
    HOMELAND_WATER = 22,
    HOMELAND_OPT = 23,
    HOMELAND_ATTACK_NUM = 24,
    CORPS_OPT = 25,
    CORPS_JOB = 26,
    CORPS_GET_HOLY_CITY = 27,
    TO_SENCE = 28,
    NOLIBITY_GET_LEVEL = 29,
    USE_ITEM = 30,
    RESOURCE = 31,
    ACTOR_GET_VALUE = 32,
    PASS_STORY_COPY = 33,
    SELF_KILLED_SKILL = 34,
    KILLED_SELF_ACTOR_FIGHTING = 35,
    KILLED_SELF_ACTOR_LEVEL = 36,
    KILLED_SELF_ACTOR_APPEAR = 37,
    KILL_ACTOR_FIGHTING = 38,
    KILL_ACTOR_LEVEL = 39,
    KILL_ACTOR_APPEAR = 40,
    KILL_ACTOR_SEX = 41,
    VIP_STATUS = 42,
    MAX = 43
  };
};

extern const std::map<int, const char*> _AchieveConditionType_VALUES_TO_NAMES;

struct AchieveSkillUseType {
  enum type {
    ID = 0,
    TYPE = 1
  };
};

extern const std::map<int, const char*> _AchieveSkillUseType_VALUES_TO_NAMES;

struct AchieveKillRoleType {
  enum type {
    ANY_WAY = 0,
    APPEAR_STATUS = 1,
    BEAST_STATUS = 2,
    WING_STATUS = 3
  };
};

extern const std::map<int, const char*> _AchieveKillRoleType_VALUES_TO_NAMES;

struct AchieveKilledSelfType {
  enum type {
    ACTOR = 0,
    ANY_WAY = 1,
    ANY_NPC = 2,
    SPECIALLY_NPC = 3
  };
};

extern const std::map<int, const char*> _AchieveKilledSelfType_VALUES_TO_NAMES;

struct AchieveEquipStrengthType {
  enum type {
    SUCCESS = 0,
    FAILED = 1
  };
};

extern const std::map<int, const char*> _AchieveEquipStrengthType_VALUES_TO_NAMES;

struct AchieveWearEquipType {
  enum type {
    QUALITY = 0,
    STRENGTH_LEVEL = 1
  };
};

extern const std::map<int, const char*> _AchieveWearEquipType_VALUES_TO_NAMES;

struct AchieveGemOptType {
  enum type {
    INLAY = 0,
    DOWN = 1
  };
};

extern const std::map<int, const char*> _AchieveGemOptType_VALUES_TO_NAMES;

struct AchieveReliveType {
  enum type {
    CITY = 0,
    SLOT = 1
  };
};

extern const std::map<int, const char*> _AchieveReliveType_VALUES_TO_NAMES;

struct AchieveHomelandRenenueType {
  enum type {
    GOLDSTONE = 0,
    IMPOSE = 1
  };
};

extern const std::map<int, const char*> _AchieveHomelandRenenueType_VALUES_TO_NAMES;

struct AchieveHomelandUseType {
  enum type {
    GOLDSTONE = 0,
    IMPOSE = 1
  };
};

extern const std::map<int, const char*> _AchieveHomelandUseType_VALUES_TO_NAMES;

struct AchieveHomelandWaterType {
  enum type {
    SELF = 0,
    OTHER = 1
  };
};

extern const std::map<int, const char*> _AchieveHomelandWaterType_VALUES_TO_NAMES;

struct AchieveHomelandOptType {
  enum type {
    TREE = 0,
    VISIT_HOMELAND = 1,
    ASSITANCE = 2
  };
};

extern const std::map<int, const char*> _AchieveHomelandOptType_VALUES_TO_NAMES;

struct AchieveAttackType {
  enum type {
    SUM = 0,
    DAY = 1
  };
};

extern const std::map<int, const char*> _AchieveAttackType_VALUES_TO_NAMES;

struct AchieveCopsActionType {
  enum type {
    ENTER = 0,
    LEAVE = 1,
    CREATE = 2
  };
};

extern const std::map<int, const char*> _AchieveCopsActionType_VALUES_TO_NAMES;

struct AchieveResourceType {
  enum type {
    SPEND = 0,
    GET = 1
  };
};

extern const std::map<int, const char*> _AchieveResourceType_VALUES_TO_NAMES;

struct AchieveActorAttrType {
  enum type {
    LEVEL = 0,
    FIGHTING = 1
  };
};

extern const std::map<int, const char*> _AchieveActorAttrType_VALUES_TO_NAMES;

struct AchievePassTalkFightingType {
  enum type {
    PASS = 0
  };
};

extern const std::map<int, const char*> _AchievePassTalkFightingType_VALUES_TO_NAMES;

struct AchieveSelfKilledType {
  enum type {
    FIGHTING = 0,
    LEVEL = 1,
    APPEAR_STATUS = 2
  };
};

extern const std::map<int, const char*> _AchieveSelfKilledType_VALUES_TO_NAMES;

struct AchieveKillActorType {
  enum type {
    FIGHTING = 0,
    LEVEL = 1,
    APPEAR_STATUS = 2,
    SEX = 3
  };
};

extern const std::map<int, const char*> _AchieveKillActorType_VALUES_TO_NAMES;

} // namespace

#endif
