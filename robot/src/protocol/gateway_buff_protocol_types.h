/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef gateway_buff_protocol_TYPES_H
#define gateway_buff_protocol_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "entity_types.h"
#include "gateway_protocol_types.h"


namespace gateway { namespace protocol {


class BuffField {
 public:

  static const char* ascii_fingerprint; // = "6435B39C87AB0E30F30BEDEFD7328C0D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

  BuffField() : buff_(0), left_time_(0), stack_count_(0) {
  }

  virtual ~BuffField() throw() {}

  int32_t buff_;
  int32_t left_time_;
  int32_t stack_count_;

  void __set_buff_(const int32_t val) {
    buff_ = val;
  }

  void __set_left_time_(const int32_t val) {
    left_time_ = val;
  }

  void __set_stack_count_(const int32_t val) {
    stack_count_ = val;
  }

  bool operator == (const BuffField & rhs) const
  {
    if (!(buff_ == rhs.buff_))
      return false;
    if (!(left_time_ == rhs.left_time_))
      return false;
    if (!(stack_count_ == rhs.stack_count_))
      return false;
    return true;
  }
  bool operator != (const BuffField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuffField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BuffField &a, BuffField &b);


class BuffRoleField {
 public:

  static const char* ascii_fingerprint; // = "DD353FCD0C93524745B9C9EB8050E41F";
  static const uint8_t binary_fingerprint[16]; // = {0xDD,0x35,0x3F,0xCD,0x0C,0x93,0x52,0x47,0x45,0xB9,0xC9,0xEB,0x80,0x50,0xE4,0x1F};

  BuffRoleField() : type_(( ::entity::EntityType::type)0), id_() {
  }

  virtual ~BuffRoleField() throw() {}

   ::entity::EntityType::type type_;
  std::string id_;
  std::vector<BuffField>  buffs_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const std::string& val) {
    id_ = val;
  }

  void __set_buffs_(const std::vector<BuffField> & val) {
    buffs_ = val;
  }

  bool operator == (const BuffRoleField & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(buffs_ == rhs.buffs_))
      return false;
    return true;
  }
  bool operator != (const BuffRoleField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuffRoleField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BuffRoleField &a, BuffRoleField &b);


class MessageBuffInitialize {
 public:

  static const char* ascii_fingerprint; // = "5E294FA449B7CDF4ACBBFBBEB5AEFE8F";
  static const uint8_t binary_fingerprint[16]; // = {0x5E,0x29,0x4F,0xA4,0x49,0xB7,0xCD,0xF4,0xAC,0xBB,0xFB,0xBE,0xB5,0xAE,0xFE,0x8F};

  MessageBuffInitialize() {
  }

  virtual ~MessageBuffInitialize() throw() {}

  std::vector<BuffRoleField>  roles_;

  void __set_roles_(const std::vector<BuffRoleField> & val) {
    roles_ = val;
  }

  bool operator == (const MessageBuffInitialize & rhs) const
  {
    if (!(roles_ == rhs.roles_))
      return false;
    return true;
  }
  bool operator != (const MessageBuffInitialize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageBuffInitialize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageBuffInitialize &a, MessageBuffInitialize &b);


class MessageAddBuff {
 public:

  static const char* ascii_fingerprint; // = "31BFBC55E24CCAB83D9E1E9DED82F2A1";
  static const uint8_t binary_fingerprint[16]; // = {0x31,0xBF,0xBC,0x55,0xE2,0x4C,0xCA,0xB8,0x3D,0x9E,0x1E,0x9D,0xED,0x82,0xF2,0xA1};

  MessageAddBuff() : type_(( ::entity::EntityType::type)0), id_(), buff_(0), stack_count_(0) {
  }

  virtual ~MessageAddBuff() throw() {}

   ::entity::EntityType::type type_;
  std::string id_;
  int32_t buff_;
  int32_t stack_count_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const std::string& val) {
    id_ = val;
  }

  void __set_buff_(const int32_t val) {
    buff_ = val;
  }

  void __set_stack_count_(const int32_t val) {
    stack_count_ = val;
  }

  bool operator == (const MessageAddBuff & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(buff_ == rhs.buff_))
      return false;
    if (!(stack_count_ == rhs.stack_count_))
      return false;
    return true;
  }
  bool operator != (const MessageAddBuff &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAddBuff & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAddBuff &a, MessageAddBuff &b);


class MessageRemoveBuff {
 public:

  static const char* ascii_fingerprint; // = "45749EB04CE5156B16C44184AF7EEA6C";
  static const uint8_t binary_fingerprint[16]; // = {0x45,0x74,0x9E,0xB0,0x4C,0xE5,0x15,0x6B,0x16,0xC4,0x41,0x84,0xAF,0x7E,0xEA,0x6C};

  MessageRemoveBuff() : type_(( ::entity::EntityType::type)0), id_(), buff_(0) {
  }

  virtual ~MessageRemoveBuff() throw() {}

   ::entity::EntityType::type type_;
  std::string id_;
  int32_t buff_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const std::string& val) {
    id_ = val;
  }

  void __set_buff_(const int32_t val) {
    buff_ = val;
  }

  bool operator == (const MessageRemoveBuff & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(buff_ == rhs.buff_))
      return false;
    return true;
  }
  bool operator != (const MessageRemoveBuff &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageRemoveBuff & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageRemoveBuff &a, MessageRemoveBuff &b);

}} // namespace

#endif
