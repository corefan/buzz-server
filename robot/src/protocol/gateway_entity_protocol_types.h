/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef gateway_entity_protocol_TYPES_H
#define gateway_entity_protocol_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "actor_types.h"
#include "entity_types.h"
#include "equipment_types.h"
#include "npc_types.h"
#include "gateway_protocol_types.h"
#include "role_types.h"
#include "direction_types.h"
#include "scene_item_types.h"
#include "vocation_types.h"
#include "gender_types.h"
#include "functionality_types.h"


namespace gateway { namespace protocol {

struct UseTaslimanType {
  enum type {
    HP = 0,
    MP = 1
  };
};

extern const std::map<int, const char*> _UseTaslimanType_VALUES_TO_NAMES;


class MessageCreateActor {
 public:

  static const char* ascii_fingerprint; // = "E79D53C59A72F8CC353D7673D9157F15";
  static const uint8_t binary_fingerprint[16]; // = {0xE7,0x9D,0x53,0xC5,0x9A,0x72,0xF8,0xCC,0x35,0x3D,0x76,0x73,0xD9,0x15,0x7F,0x15};

  MessageCreateActor() : name_(), system_now_(), functionality_state_(), vip_remainder_time_(0), world_jump_vip_num_(0), fcm_online_time_(0), create_time_(), current_hp_tasliman_value_(0), current_mp_tasliman_value_(0) {
  }

  virtual ~MessageCreateActor() throw() {}

  std::string name_;
  std::vector<int32_t>  entity_client_fields_;
  std::vector<int32_t>  role_aoi_fields_;
  std::vector<int32_t>  role_client_fields_;
  std::vector<int32_t>  actor_aoi_fields_;
  std::vector<int32_t>  actor_client_fields_;
  std::string system_now_;
  std::string functionality_state_;
  std::vector<int32_t>  sub_fight_scores_;
  int32_t vip_remainder_time_;
  int32_t world_jump_vip_num_;
  int32_t fcm_online_time_;
  std::string create_time_;
  int32_t current_hp_tasliman_value_;
  int32_t current_mp_tasliman_value_;

  void __set_name_(const std::string& val) {
    name_ = val;
  }

  void __set_entity_client_fields_(const std::vector<int32_t> & val) {
    entity_client_fields_ = val;
  }

  void __set_role_aoi_fields_(const std::vector<int32_t> & val) {
    role_aoi_fields_ = val;
  }

  void __set_role_client_fields_(const std::vector<int32_t> & val) {
    role_client_fields_ = val;
  }

  void __set_actor_aoi_fields_(const std::vector<int32_t> & val) {
    actor_aoi_fields_ = val;
  }

  void __set_actor_client_fields_(const std::vector<int32_t> & val) {
    actor_client_fields_ = val;
  }

  void __set_system_now_(const std::string& val) {
    system_now_ = val;
  }

  void __set_functionality_state_(const std::string& val) {
    functionality_state_ = val;
  }

  void __set_sub_fight_scores_(const std::vector<int32_t> & val) {
    sub_fight_scores_ = val;
  }

  void __set_vip_remainder_time_(const int32_t val) {
    vip_remainder_time_ = val;
  }

  void __set_world_jump_vip_num_(const int32_t val) {
    world_jump_vip_num_ = val;
  }

  void __set_fcm_online_time_(const int32_t val) {
    fcm_online_time_ = val;
  }

  void __set_create_time_(const std::string& val) {
    create_time_ = val;
  }

  void __set_current_hp_tasliman_value_(const int32_t val) {
    current_hp_tasliman_value_ = val;
  }

  void __set_current_mp_tasliman_value_(const int32_t val) {
    current_mp_tasliman_value_ = val;
  }

  bool operator == (const MessageCreateActor & rhs) const
  {
    if (!(name_ == rhs.name_))
      return false;
    if (!(entity_client_fields_ == rhs.entity_client_fields_))
      return false;
    if (!(role_aoi_fields_ == rhs.role_aoi_fields_))
      return false;
    if (!(role_client_fields_ == rhs.role_client_fields_))
      return false;
    if (!(actor_aoi_fields_ == rhs.actor_aoi_fields_))
      return false;
    if (!(actor_client_fields_ == rhs.actor_client_fields_))
      return false;
    if (!(system_now_ == rhs.system_now_))
      return false;
    if (!(functionality_state_ == rhs.functionality_state_))
      return false;
    if (!(sub_fight_scores_ == rhs.sub_fight_scores_))
      return false;
    if (!(vip_remainder_time_ == rhs.vip_remainder_time_))
      return false;
    if (!(world_jump_vip_num_ == rhs.world_jump_vip_num_))
      return false;
    if (!(fcm_online_time_ == rhs.fcm_online_time_))
      return false;
    if (!(create_time_ == rhs.create_time_))
      return false;
    if (!(current_hp_tasliman_value_ == rhs.current_hp_tasliman_value_))
      return false;
    if (!(current_mp_tasliman_value_ == rhs.current_mp_tasliman_value_))
      return false;
    return true;
  }
  bool operator != (const MessageCreateActor &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageCreateActor & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageCreateActor &a, MessageCreateActor &b);

typedef struct _MessageSynchronizeActor__isset {
  _MessageSynchronizeActor__isset() : entity_client_fields_(false), role_aoi_fields_(false), role_client_fields_(false), actor_aoi_fields_(false), actor_client_fields_(false) {}
  bool entity_client_fields_;
  bool role_aoi_fields_;
  bool role_client_fields_;
  bool actor_aoi_fields_;
  bool actor_client_fields_;
} _MessageSynchronizeActor__isset;

class MessageSynchronizeActor {
 public:

  static const char* ascii_fingerprint; // = "5449E4F337CE6D3E74ACC41520D5FAF4";
  static const uint8_t binary_fingerprint[16]; // = {0x54,0x49,0xE4,0xF3,0x37,0xCE,0x6D,0x3E,0x74,0xAC,0xC4,0x15,0x20,0xD5,0xFA,0xF4};

  MessageSynchronizeActor() : actor_id_() {
  }

  virtual ~MessageSynchronizeActor() throw() {}

  std::string actor_id_;
  std::vector< ::entity::EntityClientField>  entity_client_fields_;
  std::vector< ::entity::RoleAoiField>  role_aoi_fields_;
  std::vector< ::entity::RoleClientField>  role_client_fields_;
  std::vector< ::entity::ActorAoiField>  actor_aoi_fields_;
  std::vector< ::entity::ActorClientField>  actor_client_fields_;

  _MessageSynchronizeActor__isset __isset;

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
  }

  void __set_entity_client_fields_(const std::vector< ::entity::EntityClientField> & val) {
    entity_client_fields_ = val;
    __isset.entity_client_fields_ = true;
  }

  void __set_role_aoi_fields_(const std::vector< ::entity::RoleAoiField> & val) {
    role_aoi_fields_ = val;
    __isset.role_aoi_fields_ = true;
  }

  void __set_role_client_fields_(const std::vector< ::entity::RoleClientField> & val) {
    role_client_fields_ = val;
    __isset.role_client_fields_ = true;
  }

  void __set_actor_aoi_fields_(const std::vector< ::entity::ActorAoiField> & val) {
    actor_aoi_fields_ = val;
    __isset.actor_aoi_fields_ = true;
  }

  void __set_actor_client_fields_(const std::vector< ::entity::ActorClientField> & val) {
    actor_client_fields_ = val;
    __isset.actor_client_fields_ = true;
  }

  bool operator == (const MessageSynchronizeActor & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (__isset.entity_client_fields_ != rhs.__isset.entity_client_fields_)
      return false;
    else if (__isset.entity_client_fields_ && !(entity_client_fields_ == rhs.entity_client_fields_))
      return false;
    if (__isset.role_aoi_fields_ != rhs.__isset.role_aoi_fields_)
      return false;
    else if (__isset.role_aoi_fields_ && !(role_aoi_fields_ == rhs.role_aoi_fields_))
      return false;
    if (__isset.role_client_fields_ != rhs.__isset.role_client_fields_)
      return false;
    else if (__isset.role_client_fields_ && !(role_client_fields_ == rhs.role_client_fields_))
      return false;
    if (__isset.actor_aoi_fields_ != rhs.__isset.actor_aoi_fields_)
      return false;
    else if (__isset.actor_aoi_fields_ && !(actor_aoi_fields_ == rhs.actor_aoi_fields_))
      return false;
    if (__isset.actor_client_fields_ != rhs.__isset.actor_client_fields_)
      return false;
    else if (__isset.actor_client_fields_ && !(actor_client_fields_ == rhs.actor_client_fields_))
      return false;
    return true;
  }
  bool operator != (const MessageSynchronizeActor &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSynchronizeActor & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSynchronizeActor &a, MessageSynchronizeActor &b);


class MessageSynchronizeActorFunctionalityState {
 public:

  static const char* ascii_fingerprint; // = "4DC0C1A1F380340B40244ADC7FB0BA60";
  static const uint8_t binary_fingerprint[16]; // = {0x4D,0xC0,0xC1,0xA1,0xF3,0x80,0x34,0x0B,0x40,0x24,0x4A,0xDC,0x7F,0xB0,0xBA,0x60};

  MessageSynchronizeActorFunctionalityState() : id_(0), state_(0) {
  }

  virtual ~MessageSynchronizeActorFunctionalityState() throw() {}

  int32_t id_;
  bool state_;

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  void __set_state_(const bool val) {
    state_ = val;
  }

  bool operator == (const MessageSynchronizeActorFunctionalityState & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(state_ == rhs.state_))
      return false;
    return true;
  }
  bool operator != (const MessageSynchronizeActorFunctionalityState &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSynchronizeActorFunctionalityState & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSynchronizeActorFunctionalityState &a, MessageSynchronizeActorFunctionalityState &b);


class MessageSynchronizeActorSubFightScore {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  MessageSynchronizeActorSubFightScore() : id_(0), sub_fight_score_(0) {
  }

  virtual ~MessageSynchronizeActorSubFightScore() throw() {}

  int32_t id_;
  int32_t sub_fight_score_;

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  void __set_sub_fight_score_(const int32_t val) {
    sub_fight_score_ = val;
  }

  bool operator == (const MessageSynchronizeActorSubFightScore & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(sub_fight_score_ == rhs.sub_fight_score_))
      return false;
    return true;
  }
  bool operator != (const MessageSynchronizeActorSubFightScore &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSynchronizeActorSubFightScore & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSynchronizeActorSubFightScore &a, MessageSynchronizeActorSubFightScore &b);

typedef struct _MessageSynchronizeNpc__isset {
  _MessageSynchronizeNpc__isset() : entity_client_fields_(false), role_aoi_fields_(false), role_client_fields_(false), npc_aoi_fields_(false) {}
  bool entity_client_fields_;
  bool role_aoi_fields_;
  bool role_client_fields_;
  bool npc_aoi_fields_;
} _MessageSynchronizeNpc__isset;

class MessageSynchronizeNpc {
 public:

  static const char* ascii_fingerprint; // = "E4DC7C275B46D9A9B015A35497907741";
  static const uint8_t binary_fingerprint[16]; // = {0xE4,0xDC,0x7C,0x27,0x5B,0x46,0xD9,0xA9,0xB0,0x15,0xA3,0x54,0x97,0x90,0x77,0x41};

  MessageSynchronizeNpc() : npc_id_() {
  }

  virtual ~MessageSynchronizeNpc() throw() {}

  std::string npc_id_;
  std::vector< ::entity::EntityClientField>  entity_client_fields_;
  std::vector< ::entity::RoleAoiField>  role_aoi_fields_;
  std::vector< ::entity::RoleClientField>  role_client_fields_;
  std::vector< ::entity::NpcAoiField>  npc_aoi_fields_;

  _MessageSynchronizeNpc__isset __isset;

  void __set_npc_id_(const std::string& val) {
    npc_id_ = val;
  }

  void __set_entity_client_fields_(const std::vector< ::entity::EntityClientField> & val) {
    entity_client_fields_ = val;
    __isset.entity_client_fields_ = true;
  }

  void __set_role_aoi_fields_(const std::vector< ::entity::RoleAoiField> & val) {
    role_aoi_fields_ = val;
    __isset.role_aoi_fields_ = true;
  }

  void __set_role_client_fields_(const std::vector< ::entity::RoleClientField> & val) {
    role_client_fields_ = val;
    __isset.role_client_fields_ = true;
  }

  void __set_npc_aoi_fields_(const std::vector< ::entity::NpcAoiField> & val) {
    npc_aoi_fields_ = val;
    __isset.npc_aoi_fields_ = true;
  }

  bool operator == (const MessageSynchronizeNpc & rhs) const
  {
    if (!(npc_id_ == rhs.npc_id_))
      return false;
    if (__isset.entity_client_fields_ != rhs.__isset.entity_client_fields_)
      return false;
    else if (__isset.entity_client_fields_ && !(entity_client_fields_ == rhs.entity_client_fields_))
      return false;
    if (__isset.role_aoi_fields_ != rhs.__isset.role_aoi_fields_)
      return false;
    else if (__isset.role_aoi_fields_ && !(role_aoi_fields_ == rhs.role_aoi_fields_))
      return false;
    if (__isset.role_client_fields_ != rhs.__isset.role_client_fields_)
      return false;
    else if (__isset.role_client_fields_ && !(role_client_fields_ == rhs.role_client_fields_))
      return false;
    if (__isset.npc_aoi_fields_ != rhs.__isset.npc_aoi_fields_)
      return false;
    else if (__isset.npc_aoi_fields_ && !(npc_aoi_fields_ == rhs.npc_aoi_fields_))
      return false;
    return true;
  }
  bool operator != (const MessageSynchronizeNpc &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSynchronizeNpc & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSynchronizeNpc &a, MessageSynchronizeNpc &b);

typedef struct _MessageSynchronizeSceneItem__isset {
  _MessageSynchronizeSceneItem__isset() : entity_client_fields_(false), scene_item_aoi_fields_(false), owner_actors_(false) {}
  bool entity_client_fields_;
  bool scene_item_aoi_fields_;
  bool owner_actors_;
} _MessageSynchronizeSceneItem__isset;

class MessageSynchronizeSceneItem {
 public:

  static const char* ascii_fingerprint; // = "33DCCF5CC20FCBB7FC683B6B98331059";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0xDC,0xCF,0x5C,0xC2,0x0F,0xCB,0xB7,0xFC,0x68,0x3B,0x6B,0x98,0x33,0x10,0x59};

  MessageSynchronizeSceneItem() : id_(), owner_type_(( ::entity::NpcOwnerType::type)0) {
  }

  virtual ~MessageSynchronizeSceneItem() throw() {}

  std::string id_;
  std::vector< ::entity::EntityClientField>  entity_client_fields_;
  std::vector< ::entity::SceneItemAoiField>  scene_item_aoi_fields_;
  std::vector<std::string>  owner_actors_;
   ::entity::NpcOwnerType::type owner_type_;

  _MessageSynchronizeSceneItem__isset __isset;

  void __set_id_(const std::string& val) {
    id_ = val;
  }

  void __set_entity_client_fields_(const std::vector< ::entity::EntityClientField> & val) {
    entity_client_fields_ = val;
    __isset.entity_client_fields_ = true;
  }

  void __set_scene_item_aoi_fields_(const std::vector< ::entity::SceneItemAoiField> & val) {
    scene_item_aoi_fields_ = val;
    __isset.scene_item_aoi_fields_ = true;
  }

  void __set_owner_actors_(const std::vector<std::string> & val) {
    owner_actors_ = val;
    __isset.owner_actors_ = true;
  }

  void __set_owner_type_(const  ::entity::NpcOwnerType::type val) {
    owner_type_ = val;
  }

  bool operator == (const MessageSynchronizeSceneItem & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (__isset.entity_client_fields_ != rhs.__isset.entity_client_fields_)
      return false;
    else if (__isset.entity_client_fields_ && !(entity_client_fields_ == rhs.entity_client_fields_))
      return false;
    if (__isset.scene_item_aoi_fields_ != rhs.__isset.scene_item_aoi_fields_)
      return false;
    else if (__isset.scene_item_aoi_fields_ && !(scene_item_aoi_fields_ == rhs.scene_item_aoi_fields_))
      return false;
    if (__isset.owner_actors_ != rhs.__isset.owner_actors_)
      return false;
    else if (__isset.owner_actors_ && !(owner_actors_ == rhs.owner_actors_))
      return false;
    if (!(owner_type_ == rhs.owner_type_))
      return false;
    return true;
  }
  bool operator != (const MessageSynchronizeSceneItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSynchronizeSceneItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSynchronizeSceneItem &a, MessageSynchronizeSceneItem &b);


class MessageActorEnterMap {
 public:

  static const char* ascii_fingerprint; // = "B8A7FA093F4BD296ED5A68E585595B52";
  static const uint8_t binary_fingerprint[16]; // = {0xB8,0xA7,0xFA,0x09,0x3F,0x4B,0xD2,0x96,0xED,0x5A,0x68,0xE5,0x85,0x59,0x5B,0x52};

  MessageActorEnterMap() : map_(0), x_(0), y_(0) {
  }

  virtual ~MessageActorEnterMap() throw() {}

  int16_t map_;
  int32_t x_;
  int32_t y_;

  void __set_map_(const int16_t val) {
    map_ = val;
  }

  void __set_x_(const int32_t val) {
    x_ = val;
  }

  void __set_y_(const int32_t val) {
    y_ = val;
  }

  bool operator == (const MessageActorEnterMap & rhs) const
  {
    if (!(map_ == rhs.map_))
      return false;
    if (!(x_ == rhs.x_))
      return false;
    if (!(y_ == rhs.y_))
      return false;
    return true;
  }
  bool operator != (const MessageActorEnterMap &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageActorEnterMap & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageActorEnterMap &a, MessageActorEnterMap &b);


class MessageActorMove {
 public:

  static const char* ascii_fingerprint; // = "67A0115F572DF34260A1FEA842DE93F2";
  static const uint8_t binary_fingerprint[16]; // = {0x67,0xA0,0x11,0x5F,0x57,0x2D,0xF3,0x42,0x60,0xA1,0xFE,0xA8,0x42,0xDE,0x93,0xF2};

  MessageActorMove() : dir_(( ::entity::DirectionType::type)0), offset_x_(0), offset_y_(0) {
  }

  virtual ~MessageActorMove() throw() {}

   ::entity::DirectionType::type dir_;
  int8_t offset_x_;
  int8_t offset_y_;

  void __set_dir_(const  ::entity::DirectionType::type val) {
    dir_ = val;
  }

  void __set_offset_x_(const int8_t val) {
    offset_x_ = val;
  }

  void __set_offset_y_(const int8_t val) {
    offset_y_ = val;
  }

  bool operator == (const MessageActorMove & rhs) const
  {
    if (!(dir_ == rhs.dir_))
      return false;
    if (!(offset_x_ == rhs.offset_x_))
      return false;
    if (!(offset_y_ == rhs.offset_y_))
      return false;
    return true;
  }
  bool operator != (const MessageActorMove &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageActorMove & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageActorMove &a, MessageActorMove &b);

typedef struct _MessageActorRelocation__isset {
  _MessageActorRelocation__isset() : offset_x_(false), offset_y_(false) {}
  bool offset_x_;
  bool offset_y_;
} _MessageActorRelocation__isset;

class MessageActorRelocation {
 public:

  static const char* ascii_fingerprint; // = "F4B065ED3B54DE599EA59E637E287456";
  static const uint8_t binary_fingerprint[16]; // = {0xF4,0xB0,0x65,0xED,0x3B,0x54,0xDE,0x59,0x9E,0xA5,0x9E,0x63,0x7E,0x28,0x74,0x56};

  MessageActorRelocation() : id_(), x_(0), y_(0), offset_x_(0), offset_y_(0) {
  }

  virtual ~MessageActorRelocation() throw() {}

  std::string id_;
  int32_t x_;
  int32_t y_;
  int8_t offset_x_;
  int8_t offset_y_;

  _MessageActorRelocation__isset __isset;

  void __set_id_(const std::string& val) {
    id_ = val;
  }

  void __set_x_(const int32_t val) {
    x_ = val;
  }

  void __set_y_(const int32_t val) {
    y_ = val;
  }

  void __set_offset_x_(const int8_t val) {
    offset_x_ = val;
    __isset.offset_x_ = true;
  }

  void __set_offset_y_(const int8_t val) {
    offset_y_ = val;
    __isset.offset_y_ = true;
  }

  bool operator == (const MessageActorRelocation & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(x_ == rhs.x_))
      return false;
    if (!(y_ == rhs.y_))
      return false;
    if (__isset.offset_x_ != rhs.__isset.offset_x_)
      return false;
    else if (__isset.offset_x_ && !(offset_x_ == rhs.offset_x_))
      return false;
    if (__isset.offset_y_ != rhs.__isset.offset_y_)
      return false;
    else if (__isset.offset_y_ && !(offset_y_ == rhs.offset_y_))
      return false;
    return true;
  }
  bool operator != (const MessageActorRelocation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageActorRelocation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageActorRelocation &a, MessageActorRelocation &b);

typedef struct _MessageRoleMoveSynchronize__isset {
  _MessageRoleMoveSynchronize__isset() : offset_x_(false), offset_y_(false) {}
  bool offset_x_;
  bool offset_y_;
} _MessageRoleMoveSynchronize__isset;

class MessageRoleMoveSynchronize {
 public:

  static const char* ascii_fingerprint; // = "21F922F8524A2D0AED796F065A574989";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xF9,0x22,0xF8,0x52,0x4A,0x2D,0x0A,0xED,0x79,0x6F,0x06,0x5A,0x57,0x49,0x89};

  MessageRoleMoveSynchronize() : id_(), type_(( ::entity::EntityType::type)0), dir_(( ::entity::DirectionType::type)0), offset_x_(0), offset_y_(0) {
  }

  virtual ~MessageRoleMoveSynchronize() throw() {}

  std::string id_;
   ::entity::EntityType::type type_;
   ::entity::DirectionType::type dir_;
  int8_t offset_x_;
  int8_t offset_y_;

  _MessageRoleMoveSynchronize__isset __isset;

  void __set_id_(const std::string& val) {
    id_ = val;
  }

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_dir_(const  ::entity::DirectionType::type val) {
    dir_ = val;
  }

  void __set_offset_x_(const int8_t val) {
    offset_x_ = val;
    __isset.offset_x_ = true;
  }

  void __set_offset_y_(const int8_t val) {
    offset_y_ = val;
    __isset.offset_y_ = true;
  }

  bool operator == (const MessageRoleMoveSynchronize & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(type_ == rhs.type_))
      return false;
    if (!(dir_ == rhs.dir_))
      return false;
    if (__isset.offset_x_ != rhs.__isset.offset_x_)
      return false;
    else if (__isset.offset_x_ && !(offset_x_ == rhs.offset_x_))
      return false;
    if (__isset.offset_y_ != rhs.__isset.offset_y_)
      return false;
    else if (__isset.offset_y_ && !(offset_y_ == rhs.offset_y_))
      return false;
    return true;
  }
  bool operator != (const MessageRoleMoveSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageRoleMoveSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageRoleMoveSynchronize &a, MessageRoleMoveSynchronize &b);

typedef struct _MessageCreateActorSynchronize__isset {
  _MessageCreateActorSynchronize__isset() : offset_x_(false), offset_y_(false) {}
  bool offset_x_;
  bool offset_y_;
} _MessageCreateActorSynchronize__isset;

class MessageCreateActorSynchronize {
 public:

  static const char* ascii_fingerprint; // = "AE5E555ED8A7C0F02E084DDA2B26E3BA";
  static const uint8_t binary_fingerprint[16]; // = {0xAE,0x5E,0x55,0x5E,0xD8,0xA7,0xC0,0xF0,0x2E,0x08,0x4D,0xDA,0x2B,0x26,0xE3,0xBA};

  MessageCreateActorSynchronize() : name_(), id_(), pos_x_(0), pos_y_(0), offset_x_(0), offset_y_(0) {
  }

  virtual ~MessageCreateActorSynchronize() throw() {}

  std::string name_;
  std::string id_;
  std::vector<int32_t>  role_aoi_fields_;
  std::vector<int32_t>  actor_aoi_fields_;
  int32_t pos_x_;
  int32_t pos_y_;
  int8_t offset_x_;
  int8_t offset_y_;

  _MessageCreateActorSynchronize__isset __isset;

  void __set_name_(const std::string& val) {
    name_ = val;
  }

  void __set_id_(const std::string& val) {
    id_ = val;
  }

  void __set_role_aoi_fields_(const std::vector<int32_t> & val) {
    role_aoi_fields_ = val;
  }

  void __set_actor_aoi_fields_(const std::vector<int32_t> & val) {
    actor_aoi_fields_ = val;
  }

  void __set_pos_x_(const int32_t val) {
    pos_x_ = val;
  }

  void __set_pos_y_(const int32_t val) {
    pos_y_ = val;
  }

  void __set_offset_x_(const int8_t val) {
    offset_x_ = val;
    __isset.offset_x_ = true;
  }

  void __set_offset_y_(const int8_t val) {
    offset_y_ = val;
    __isset.offset_y_ = true;
  }

  bool operator == (const MessageCreateActorSynchronize & rhs) const
  {
    if (!(name_ == rhs.name_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(role_aoi_fields_ == rhs.role_aoi_fields_))
      return false;
    if (!(actor_aoi_fields_ == rhs.actor_aoi_fields_))
      return false;
    if (!(pos_x_ == rhs.pos_x_))
      return false;
    if (!(pos_y_ == rhs.pos_y_))
      return false;
    if (__isset.offset_x_ != rhs.__isset.offset_x_)
      return false;
    else if (__isset.offset_x_ && !(offset_x_ == rhs.offset_x_))
      return false;
    if (__isset.offset_y_ != rhs.__isset.offset_y_)
      return false;
    else if (__isset.offset_y_ && !(offset_y_ == rhs.offset_y_))
      return false;
    return true;
  }
  bool operator != (const MessageCreateActorSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageCreateActorSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageCreateActorSynchronize &a, MessageCreateActorSynchronize &b);


class MessageCreateNpcSynchronize {
 public:

  static const char* ascii_fingerprint; // = "EB3D03B3ADEC75F0051159757F0FE164";
  static const uint8_t binary_fingerprint[16]; // = {0xEB,0x3D,0x03,0xB3,0xAD,0xEC,0x75,0xF0,0x05,0x11,0x59,0x75,0x7F,0x0F,0xE1,0x64};

  MessageCreateNpcSynchronize() : id_(), template_id_(0), pos_x_(0), pos_y_(0) {
  }

  virtual ~MessageCreateNpcSynchronize() throw() {}

  std::string id_;
  int32_t template_id_;
  std::vector<int32_t>  role_aoi_fields_;
  std::vector<int32_t>  npc_aoi_fields_;
  int32_t pos_x_;
  int32_t pos_y_;

  void __set_id_(const std::string& val) {
    id_ = val;
  }

  void __set_template_id_(const int32_t val) {
    template_id_ = val;
  }

  void __set_role_aoi_fields_(const std::vector<int32_t> & val) {
    role_aoi_fields_ = val;
  }

  void __set_npc_aoi_fields_(const std::vector<int32_t> & val) {
    npc_aoi_fields_ = val;
  }

  void __set_pos_x_(const int32_t val) {
    pos_x_ = val;
  }

  void __set_pos_y_(const int32_t val) {
    pos_y_ = val;
  }

  bool operator == (const MessageCreateNpcSynchronize & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(template_id_ == rhs.template_id_))
      return false;
    if (!(role_aoi_fields_ == rhs.role_aoi_fields_))
      return false;
    if (!(npc_aoi_fields_ == rhs.npc_aoi_fields_))
      return false;
    if (!(pos_x_ == rhs.pos_x_))
      return false;
    if (!(pos_y_ == rhs.pos_y_))
      return false;
    return true;
  }
  bool operator != (const MessageCreateNpcSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageCreateNpcSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageCreateNpcSynchronize &a, MessageCreateNpcSynchronize &b);


class MessageCreateSceneItemSynchronize {
 public:

  static const char* ascii_fingerprint; // = "3E764007A5F01EE0370AF4DADDF6CC7F";
  static const uint8_t binary_fingerprint[16]; // = {0x3E,0x76,0x40,0x07,0xA5,0xF0,0x1E,0xE0,0x37,0x0A,0xF4,0xDA,0xDD,0xF6,0xCC,0x7F};

  MessageCreateSceneItemSynchronize() : id_(), pos_x_(0), pos_y_(0), owner_type_(( ::entity::NpcOwnerType::type)0) {
  }

  virtual ~MessageCreateSceneItemSynchronize() throw() {}

  std::string id_;
  std::vector<int32_t>  scene_item_aoi_fields_;
  int32_t pos_x_;
  int32_t pos_y_;
  std::vector<std::string>  owner_actors_;
   ::entity::NpcOwnerType::type owner_type_;

  void __set_id_(const std::string& val) {
    id_ = val;
  }

  void __set_scene_item_aoi_fields_(const std::vector<int32_t> & val) {
    scene_item_aoi_fields_ = val;
  }

  void __set_pos_x_(const int32_t val) {
    pos_x_ = val;
  }

  void __set_pos_y_(const int32_t val) {
    pos_y_ = val;
  }

  void __set_owner_actors_(const std::vector<std::string> & val) {
    owner_actors_ = val;
  }

  void __set_owner_type_(const  ::entity::NpcOwnerType::type val) {
    owner_type_ = val;
  }

  bool operator == (const MessageCreateSceneItemSynchronize & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(scene_item_aoi_fields_ == rhs.scene_item_aoi_fields_))
      return false;
    if (!(pos_x_ == rhs.pos_x_))
      return false;
    if (!(pos_y_ == rhs.pos_y_))
      return false;
    if (!(owner_actors_ == rhs.owner_actors_))
      return false;
    if (!(owner_type_ == rhs.owner_type_))
      return false;
    return true;
  }
  bool operator != (const MessageCreateSceneItemSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageCreateSceneItemSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageCreateSceneItemSynchronize &a, MessageCreateSceneItemSynchronize &b);


class MessageDestoryRoleSynchronize {
 public:

  static const char* ascii_fingerprint; // = "D6FD826D949221396F4FFC3ECCD3D192";
  static const uint8_t binary_fingerprint[16]; // = {0xD6,0xFD,0x82,0x6D,0x94,0x92,0x21,0x39,0x6F,0x4F,0xFC,0x3E,0xCC,0xD3,0xD1,0x92};

  MessageDestoryRoleSynchronize() : id_(), type_(( ::entity::EntityType::type)0) {
  }

  virtual ~MessageDestoryRoleSynchronize() throw() {}

  std::string id_;
   ::entity::EntityType::type type_;

  void __set_id_(const std::string& val) {
    id_ = val;
  }

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  bool operator == (const MessageDestoryRoleSynchronize & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(type_ == rhs.type_))
      return false;
    return true;
  }
  bool operator != (const MessageDestoryRoleSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageDestoryRoleSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageDestoryRoleSynchronize &a, MessageDestoryRoleSynchronize &b);

typedef struct _AoiActorData__isset {
  _AoiActorData__isset() : offset_x_(false), offset_y_(false) {}
  bool offset_x_;
  bool offset_y_;
} _AoiActorData__isset;

class AoiActorData {
 public:

  static const char* ascii_fingerprint; // = "AE5E555ED8A7C0F02E084DDA2B26E3BA";
  static const uint8_t binary_fingerprint[16]; // = {0xAE,0x5E,0x55,0x5E,0xD8,0xA7,0xC0,0xF0,0x2E,0x08,0x4D,0xDA,0x2B,0x26,0xE3,0xBA};

  AoiActorData() : id_(), name_(), pos_x_(0), pos_y_(0), offset_x_(0), offset_y_(0) {
  }

  virtual ~AoiActorData() throw() {}

  std::string id_;
  std::string name_;
  std::vector<int32_t>  role_aoi_fields_;
  std::vector<int32_t>  actor_aoi_fields_;
  int32_t pos_x_;
  int32_t pos_y_;
  int8_t offset_x_;
  int8_t offset_y_;

  _AoiActorData__isset __isset;

  void __set_id_(const std::string& val) {
    id_ = val;
  }

  void __set_name_(const std::string& val) {
    name_ = val;
  }

  void __set_role_aoi_fields_(const std::vector<int32_t> & val) {
    role_aoi_fields_ = val;
  }

  void __set_actor_aoi_fields_(const std::vector<int32_t> & val) {
    actor_aoi_fields_ = val;
  }

  void __set_pos_x_(const int32_t val) {
    pos_x_ = val;
  }

  void __set_pos_y_(const int32_t val) {
    pos_y_ = val;
  }

  void __set_offset_x_(const int8_t val) {
    offset_x_ = val;
    __isset.offset_x_ = true;
  }

  void __set_offset_y_(const int8_t val) {
    offset_y_ = val;
    __isset.offset_y_ = true;
  }

  bool operator == (const AoiActorData & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(name_ == rhs.name_))
      return false;
    if (!(role_aoi_fields_ == rhs.role_aoi_fields_))
      return false;
    if (!(actor_aoi_fields_ == rhs.actor_aoi_fields_))
      return false;
    if (!(pos_x_ == rhs.pos_x_))
      return false;
    if (!(pos_y_ == rhs.pos_y_))
      return false;
    if (__isset.offset_x_ != rhs.__isset.offset_x_)
      return false;
    else if (__isset.offset_x_ && !(offset_x_ == rhs.offset_x_))
      return false;
    if (__isset.offset_y_ != rhs.__isset.offset_y_)
      return false;
    else if (__isset.offset_y_ && !(offset_y_ == rhs.offset_y_))
      return false;
    return true;
  }
  bool operator != (const AoiActorData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AoiActorData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AoiActorData &a, AoiActorData &b);


class AoiNpcData {
 public:

  static const char* ascii_fingerprint; // = "EB3D03B3ADEC75F0051159757F0FE164";
  static const uint8_t binary_fingerprint[16]; // = {0xEB,0x3D,0x03,0xB3,0xAD,0xEC,0x75,0xF0,0x05,0x11,0x59,0x75,0x7F,0x0F,0xE1,0x64};

  AoiNpcData() : id_(), template_id_(0), pos_x_(0), pos_y_(0) {
  }

  virtual ~AoiNpcData() throw() {}

  std::string id_;
  int32_t template_id_;
  std::vector<int32_t>  role_aoi_fields_;
  std::vector<int32_t>  npc_aoi_fields_;
  int32_t pos_x_;
  int32_t pos_y_;

  void __set_id_(const std::string& val) {
    id_ = val;
  }

  void __set_template_id_(const int32_t val) {
    template_id_ = val;
  }

  void __set_role_aoi_fields_(const std::vector<int32_t> & val) {
    role_aoi_fields_ = val;
  }

  void __set_npc_aoi_fields_(const std::vector<int32_t> & val) {
    npc_aoi_fields_ = val;
  }

  void __set_pos_x_(const int32_t val) {
    pos_x_ = val;
  }

  void __set_pos_y_(const int32_t val) {
    pos_y_ = val;
  }

  bool operator == (const AoiNpcData & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(template_id_ == rhs.template_id_))
      return false;
    if (!(role_aoi_fields_ == rhs.role_aoi_fields_))
      return false;
    if (!(npc_aoi_fields_ == rhs.npc_aoi_fields_))
      return false;
    if (!(pos_x_ == rhs.pos_x_))
      return false;
    if (!(pos_y_ == rhs.pos_y_))
      return false;
    return true;
  }
  bool operator != (const AoiNpcData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AoiNpcData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AoiNpcData &a, AoiNpcData &b);


class AoiSceneItemData {
 public:

  static const char* ascii_fingerprint; // = "3E764007A5F01EE0370AF4DADDF6CC7F";
  static const uint8_t binary_fingerprint[16]; // = {0x3E,0x76,0x40,0x07,0xA5,0xF0,0x1E,0xE0,0x37,0x0A,0xF4,0xDA,0xDD,0xF6,0xCC,0x7F};

  AoiSceneItemData() : id_(), pos_x_(0), pos_y_(0), owner_type_(( ::entity::NpcOwnerType::type)0) {
  }

  virtual ~AoiSceneItemData() throw() {}

  std::string id_;
  std::vector<int32_t>  item_aoi_fields_;
  int32_t pos_x_;
  int32_t pos_y_;
  std::vector<std::string>  owner_actors_;
   ::entity::NpcOwnerType::type owner_type_;

  void __set_id_(const std::string& val) {
    id_ = val;
  }

  void __set_item_aoi_fields_(const std::vector<int32_t> & val) {
    item_aoi_fields_ = val;
  }

  void __set_pos_x_(const int32_t val) {
    pos_x_ = val;
  }

  void __set_pos_y_(const int32_t val) {
    pos_y_ = val;
  }

  void __set_owner_actors_(const std::vector<std::string> & val) {
    owner_actors_ = val;
  }

  void __set_owner_type_(const  ::entity::NpcOwnerType::type val) {
    owner_type_ = val;
  }

  bool operator == (const AoiSceneItemData & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(item_aoi_fields_ == rhs.item_aoi_fields_))
      return false;
    if (!(pos_x_ == rhs.pos_x_))
      return false;
    if (!(pos_y_ == rhs.pos_y_))
      return false;
    if (!(owner_actors_ == rhs.owner_actors_))
      return false;
    if (!(owner_type_ == rhs.owner_type_))
      return false;
    return true;
  }
  bool operator != (const AoiSceneItemData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AoiSceneItemData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AoiSceneItemData &a, AoiSceneItemData &b);


class MessageCreateAoiRoles {
 public:

  static const char* ascii_fingerprint; // = "807B4D1626A5F62C70A8ABD3793006EF";
  static const uint8_t binary_fingerprint[16]; // = {0x80,0x7B,0x4D,0x16,0x26,0xA5,0xF6,0x2C,0x70,0xA8,0xAB,0xD3,0x79,0x30,0x06,0xEF};

  MessageCreateAoiRoles() {
  }

  virtual ~MessageCreateAoiRoles() throw() {}

  std::vector<AoiActorData>  actors_;
  std::vector<AoiNpcData>  npcs_;
  std::vector<AoiSceneItemData>  items_;

  void __set_actors_(const std::vector<AoiActorData> & val) {
    actors_ = val;
  }

  void __set_npcs_(const std::vector<AoiNpcData> & val) {
    npcs_ = val;
  }

  void __set_items_(const std::vector<AoiSceneItemData> & val) {
    items_ = val;
  }

  bool operator == (const MessageCreateAoiRoles & rhs) const
  {
    if (!(actors_ == rhs.actors_))
      return false;
    if (!(npcs_ == rhs.npcs_))
      return false;
    if (!(items_ == rhs.items_))
      return false;
    return true;
  }
  bool operator != (const MessageCreateAoiRoles &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageCreateAoiRoles & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageCreateAoiRoles &a, MessageCreateAoiRoles &b);


class MessageDestoryAoiRoles {
 public:

  static const char* ascii_fingerprint; // = "F58DCEBA659ABD254B5B8D11A03A57B9";
  static const uint8_t binary_fingerprint[16]; // = {0xF5,0x8D,0xCE,0xBA,0x65,0x9A,0xBD,0x25,0x4B,0x5B,0x8D,0x11,0xA0,0x3A,0x57,0xB9};

  MessageDestoryAoiRoles() {
  }

  virtual ~MessageDestoryAoiRoles() throw() {}

  std::vector<std::string>  actors_;
  std::vector<std::string>  npcs_;
  std::vector<std::string>  items_;

  void __set_actors_(const std::vector<std::string> & val) {
    actors_ = val;
  }

  void __set_npcs_(const std::vector<std::string> & val) {
    npcs_ = val;
  }

  void __set_items_(const std::vector<std::string> & val) {
    items_ = val;
  }

  bool operator == (const MessageDestoryAoiRoles & rhs) const
  {
    if (!(actors_ == rhs.actors_))
      return false;
    if (!(npcs_ == rhs.npcs_))
      return false;
    if (!(items_ == rhs.items_))
      return false;
    return true;
  }
  bool operator != (const MessageDestoryAoiRoles &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageDestoryAoiRoles & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageDestoryAoiRoles &a, MessageDestoryAoiRoles &b);


class MessageAddExpSynchronize {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MessageAddExpSynchronize() : exp_(0) {
  }

  virtual ~MessageAddExpSynchronize() throw() {}

  int32_t exp_;

  void __set_exp_(const int32_t val) {
    exp_ = val;
  }

  bool operator == (const MessageAddExpSynchronize & rhs) const
  {
    if (!(exp_ == rhs.exp_))
      return false;
    return true;
  }
  bool operator != (const MessageAddExpSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAddExpSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAddExpSynchronize &a, MessageAddExpSynchronize &b);


class MessageActorFacadeRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MessageActorFacadeRequest() : actor_() {
  }

  virtual ~MessageActorFacadeRequest() throw() {}

  std::string actor_;

  void __set_actor_(const std::string& val) {
    actor_ = val;
  }

  bool operator == (const MessageActorFacadeRequest & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    return true;
  }
  bool operator != (const MessageActorFacadeRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageActorFacadeRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageActorFacadeRequest &a, MessageActorFacadeRequest &b);


class MessageActorFacadeResponse {
 public:

  static const char* ascii_fingerprint; // = "B1337BAC93D62ED42633ED9D90B2E646";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0x33,0x7B,0xAC,0x93,0xD6,0x2E,0xD4,0x26,0x33,0xED,0x9D,0x90,0xB2,0xE6,0x46};

  MessageActorFacadeResponse() : actor_(), vocation_(( ::entity::VocationType::type)0), gender_(( ::entity::GenderType::type)0), appearance_(0), sword_(0), spirit_facade_(0) {
  }

  virtual ~MessageActorFacadeResponse() throw() {}

  std::string actor_;
   ::entity::VocationType::type vocation_;
   ::entity::GenderType::type gender_;
  int32_t appearance_;
  std::vector< ::entity::EquipFacadeField>  equipments_;
  int32_t sword_;
  int32_t spirit_facade_;

  void __set_actor_(const std::string& val) {
    actor_ = val;
  }

  void __set_vocation_(const  ::entity::VocationType::type val) {
    vocation_ = val;
  }

  void __set_gender_(const  ::entity::GenderType::type val) {
    gender_ = val;
  }

  void __set_appearance_(const int32_t val) {
    appearance_ = val;
  }

  void __set_equipments_(const std::vector< ::entity::EquipFacadeField> & val) {
    equipments_ = val;
  }

  void __set_sword_(const int32_t val) {
    sword_ = val;
  }

  void __set_spirit_facade_(const int32_t val) {
    spirit_facade_ = val;
  }

  bool operator == (const MessageActorFacadeResponse & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(vocation_ == rhs.vocation_))
      return false;
    if (!(gender_ == rhs.gender_))
      return false;
    if (!(appearance_ == rhs.appearance_))
      return false;
    if (!(equipments_ == rhs.equipments_))
      return false;
    if (!(sword_ == rhs.sword_))
      return false;
    if (!(spirit_facade_ == rhs.spirit_facade_))
      return false;
    return true;
  }
  bool operator != (const MessageActorFacadeResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageActorFacadeResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageActorFacadeResponse &a, MessageActorFacadeResponse &b);


class MessageActorVipSynchronize {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MessageActorVipSynchronize() : remainder_time_(0) {
  }

  virtual ~MessageActorVipSynchronize() throw() {}

  int32_t remainder_time_;

  void __set_remainder_time_(const int32_t val) {
    remainder_time_ = val;
  }

  bool operator == (const MessageActorVipSynchronize & rhs) const
  {
    if (!(remainder_time_ == rhs.remainder_time_))
      return false;
    return true;
  }
  bool operator != (const MessageActorVipSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageActorVipSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageActorVipSynchronize &a, MessageActorVipSynchronize &b);


class MessageWorldJumpVipNumSynchronize {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MessageWorldJumpVipNumSynchronize() : remainder_num_(0) {
  }

  virtual ~MessageWorldJumpVipNumSynchronize() throw() {}

  int32_t remainder_num_;

  void __set_remainder_num_(const int32_t val) {
    remainder_num_ = val;
  }

  bool operator == (const MessageWorldJumpVipNumSynchronize & rhs) const
  {
    if (!(remainder_num_ == rhs.remainder_num_))
      return false;
    return true;
  }
  bool operator != (const MessageWorldJumpVipNumSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageWorldJumpVipNumSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageWorldJumpVipNumSynchronize &a, MessageWorldJumpVipNumSynchronize &b);


class MessageActorFunctionalityOpenRequest {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

  MessageActorFunctionalityOpenRequest() : functionality_id_(( ::entity::FunctionalityType::type)0) {
  }

  virtual ~MessageActorFunctionalityOpenRequest() throw() {}

   ::entity::FunctionalityType::type functionality_id_;

  void __set_functionality_id_(const  ::entity::FunctionalityType::type val) {
    functionality_id_ = val;
  }

  bool operator == (const MessageActorFunctionalityOpenRequest & rhs) const
  {
    if (!(functionality_id_ == rhs.functionality_id_))
      return false;
    return true;
  }
  bool operator != (const MessageActorFunctionalityOpenRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageActorFunctionalityOpenRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageActorFunctionalityOpenRequest &a, MessageActorFunctionalityOpenRequest &b);


class MessageActorFunctionalityOpenResponse {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

  MessageActorFunctionalityOpenResponse() : functionality_id_(( ::entity::FunctionalityType::type)0) {
  }

  virtual ~MessageActorFunctionalityOpenResponse() throw() {}

   ::entity::FunctionalityType::type functionality_id_;

  void __set_functionality_id_(const  ::entity::FunctionalityType::type val) {
    functionality_id_ = val;
  }

  bool operator == (const MessageActorFunctionalityOpenResponse & rhs) const
  {
    if (!(functionality_id_ == rhs.functionality_id_))
      return false;
    return true;
  }
  bool operator != (const MessageActorFunctionalityOpenResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageActorFunctionalityOpenResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageActorFunctionalityOpenResponse &a, MessageActorFunctionalityOpenResponse &b);


class MessageActorUseTaslimanRequest {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

  MessageActorUseTaslimanRequest() : type_((UseTaslimanType::type)0) {
  }

  virtual ~MessageActorUseTaslimanRequest() throw() {}

  UseTaslimanType::type type_;

  void __set_type_(const UseTaslimanType::type val) {
    type_ = val;
  }

  bool operator == (const MessageActorUseTaslimanRequest & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    return true;
  }
  bool operator != (const MessageActorUseTaslimanRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageActorUseTaslimanRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageActorUseTaslimanRequest &a, MessageActorUseTaslimanRequest &b);


class MessageActorUseTaslimanResponse {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

  MessageActorUseTaslimanResponse() : type_((UseTaslimanType::type)0) {
  }

  virtual ~MessageActorUseTaslimanResponse() throw() {}

  UseTaslimanType::type type_;

  void __set_type_(const UseTaslimanType::type val) {
    type_ = val;
  }

  bool operator == (const MessageActorUseTaslimanResponse & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    return true;
  }
  bool operator != (const MessageActorUseTaslimanResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageActorUseTaslimanResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageActorUseTaslimanResponse &a, MessageActorUseTaslimanResponse &b);


class MessageActorTaslimanSynchronize {
 public:

  static const char* ascii_fingerprint; // = "46A703A33337BED2F62F386FC66B2A5F";
  static const uint8_t binary_fingerprint[16]; // = {0x46,0xA7,0x03,0xA3,0x33,0x37,0xBE,0xD2,0xF6,0x2F,0x38,0x6F,0xC6,0x6B,0x2A,0x5F};

  MessageActorTaslimanSynchronize() : type_((UseTaslimanType::type)0), value_(0) {
  }

  virtual ~MessageActorTaslimanSynchronize() throw() {}

  UseTaslimanType::type type_;
  int32_t value_;

  void __set_type_(const UseTaslimanType::type val) {
    type_ = val;
  }

  void __set_value_(const int32_t val) {
    value_ = val;
  }

  bool operator == (const MessageActorTaslimanSynchronize & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(value_ == rhs.value_))
      return false;
    return true;
  }
  bool operator != (const MessageActorTaslimanSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageActorTaslimanSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageActorTaslimanSynchronize &a, MessageActorTaslimanSynchronize &b);

}} // namespace

#endif
