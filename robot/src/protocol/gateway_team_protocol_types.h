/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef gateway_team_protocol_TYPES_H
#define gateway_team_protocol_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "gateway_protocol_types.h"


namespace gateway { namespace protocol {


class MessageTeamCreateRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageTeamCreateRequest() {
  }

  virtual ~MessageTeamCreateRequest() throw() {}


  bool operator == (const MessageTeamCreateRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageTeamCreateRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamCreateRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamCreateRequest &a, MessageTeamCreateRequest &b);


class MessageTeamCreateResponse {
 public:

  static const char* ascii_fingerprint; // = "1767FFB0CB3D9275BC64B198AB3B8A8B";
  static const uint8_t binary_fingerprint[16]; // = {0x17,0x67,0xFF,0xB0,0xCB,0x3D,0x92,0x75,0xBC,0x64,0xB1,0x98,0xAB,0x3B,0x8A,0x8B};

  MessageTeamCreateResponse() : result_(0), team_() {
  }

  virtual ~MessageTeamCreateResponse() throw() {}

  bool result_;
  std::string team_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_team_(const std::string& val) {
    team_ = val;
  }

  bool operator == (const MessageTeamCreateResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (!(team_ == rhs.team_))
      return false;
    return true;
  }
  bool operator != (const MessageTeamCreateResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamCreateResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamCreateResponse &a, MessageTeamCreateResponse &b);


class MessageTeamJoinRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MessageTeamJoinRequest() : team_() {
  }

  virtual ~MessageTeamJoinRequest() throw() {}

  std::string team_;

  void __set_team_(const std::string& val) {
    team_ = val;
  }

  bool operator == (const MessageTeamJoinRequest & rhs) const
  {
    if (!(team_ == rhs.team_))
      return false;
    return true;
  }
  bool operator != (const MessageTeamJoinRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamJoinRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamJoinRequest &a, MessageTeamJoinRequest &b);


class MessageTeamJoinResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageTeamJoinResponse() : result_(0) {
  }

  virtual ~MessageTeamJoinResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageTeamJoinResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageTeamJoinResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamJoinResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamJoinResponse &a, MessageTeamJoinResponse &b);


class MessageTeamJoinNotify {
 public:

  static const char* ascii_fingerprint; // = "343DA57F446177400B333DC49B037B0C";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0x3D,0xA5,0x7F,0x44,0x61,0x77,0x40,0x0B,0x33,0x3D,0xC4,0x9B,0x03,0x7B,0x0C};

  MessageTeamJoinNotify() : actor_(), name_(), level_(0) {
  }

  virtual ~MessageTeamJoinNotify() throw() {}

  std::string actor_;
  std::string name_;
  int32_t level_;

  void __set_actor_(const std::string& val) {
    actor_ = val;
  }

  void __set_name_(const std::string& val) {
    name_ = val;
  }

  void __set_level_(const int32_t val) {
    level_ = val;
  }

  bool operator == (const MessageTeamJoinNotify & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(name_ == rhs.name_))
      return false;
    if (!(level_ == rhs.level_))
      return false;
    return true;
  }
  bool operator != (const MessageTeamJoinNotify &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamJoinNotify & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamJoinNotify &a, MessageTeamJoinNotify &b);


class MessageTeamJoinDisposeRequest {
 public:

  static const char* ascii_fingerprint; // = "7D61C9AA00102AB4D8F72A1DA58297DC";
  static const uint8_t binary_fingerprint[16]; // = {0x7D,0x61,0xC9,0xAA,0x00,0x10,0x2A,0xB4,0xD8,0xF7,0x2A,0x1D,0xA5,0x82,0x97,0xDC};

  MessageTeamJoinDisposeRequest() : actor_(), result_(0) {
  }

  virtual ~MessageTeamJoinDisposeRequest() throw() {}

  std::string actor_;
  bool result_;

  void __set_actor_(const std::string& val) {
    actor_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageTeamJoinDisposeRequest & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageTeamJoinDisposeRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamJoinDisposeRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamJoinDisposeRequest &a, MessageTeamJoinDisposeRequest &b);


class MessageTeamJoinDisposeResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageTeamJoinDisposeResponse() : result_(0) {
  }

  virtual ~MessageTeamJoinDisposeResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageTeamJoinDisposeResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageTeamJoinDisposeResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamJoinDisposeResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamJoinDisposeResponse &a, MessageTeamJoinDisposeResponse &b);

typedef struct _MessageTeamInviteRequest__isset {
  _MessageTeamInviteRequest__isset() : actor_(false), name_(false) {}
  bool actor_;
  bool name_;
} _MessageTeamInviteRequest__isset;

class MessageTeamInviteRequest {
 public:

  static const char* ascii_fingerprint; // = "D0297FC5011701BD87898CC36146A565";
  static const uint8_t binary_fingerprint[16]; // = {0xD0,0x29,0x7F,0xC5,0x01,0x17,0x01,0xBD,0x87,0x89,0x8C,0xC3,0x61,0x46,0xA5,0x65};

  MessageTeamInviteRequest() : actor_(), name_() {
  }

  virtual ~MessageTeamInviteRequest() throw() {}

  std::string actor_;
  std::string name_;

  _MessageTeamInviteRequest__isset __isset;

  void __set_actor_(const std::string& val) {
    actor_ = val;
    __isset.actor_ = true;
  }

  void __set_name_(const std::string& val) {
    name_ = val;
    __isset.name_ = true;
  }

  bool operator == (const MessageTeamInviteRequest & rhs) const
  {
    if (__isset.actor_ != rhs.__isset.actor_)
      return false;
    else if (__isset.actor_ && !(actor_ == rhs.actor_))
      return false;
    if (__isset.name_ != rhs.__isset.name_)
      return false;
    else if (__isset.name_ && !(name_ == rhs.name_))
      return false;
    return true;
  }
  bool operator != (const MessageTeamInviteRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamInviteRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamInviteRequest &a, MessageTeamInviteRequest &b);


class MessageTeamInviteResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageTeamInviteResponse() : result_(0) {
  }

  virtual ~MessageTeamInviteResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageTeamInviteResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageTeamInviteResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamInviteResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamInviteResponse &a, MessageTeamInviteResponse &b);


class MessageTeamInviteNotify {
 public:

  static const char* ascii_fingerprint; // = "343DA57F446177400B333DC49B037B0C";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0x3D,0xA5,0x7F,0x44,0x61,0x77,0x40,0x0B,0x33,0x3D,0xC4,0x9B,0x03,0x7B,0x0C};

  MessageTeamInviteNotify() : actor_(), name_(), level_(0) {
  }

  virtual ~MessageTeamInviteNotify() throw() {}

  std::string actor_;
  std::string name_;
  int32_t level_;

  void __set_actor_(const std::string& val) {
    actor_ = val;
  }

  void __set_name_(const std::string& val) {
    name_ = val;
  }

  void __set_level_(const int32_t val) {
    level_ = val;
  }

  bool operator == (const MessageTeamInviteNotify & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(name_ == rhs.name_))
      return false;
    if (!(level_ == rhs.level_))
      return false;
    return true;
  }
  bool operator != (const MessageTeamInviteNotify &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamInviteNotify & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamInviteNotify &a, MessageTeamInviteNotify &b);


class MessageTeamInviteDisposeRequest {
 public:

  static const char* ascii_fingerprint; // = "7D61C9AA00102AB4D8F72A1DA58297DC";
  static const uint8_t binary_fingerprint[16]; // = {0x7D,0x61,0xC9,0xAA,0x00,0x10,0x2A,0xB4,0xD8,0xF7,0x2A,0x1D,0xA5,0x82,0x97,0xDC};

  MessageTeamInviteDisposeRequest() : actor_(), result_(0) {
  }

  virtual ~MessageTeamInviteDisposeRequest() throw() {}

  std::string actor_;
  bool result_;

  void __set_actor_(const std::string& val) {
    actor_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageTeamInviteDisposeRequest & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageTeamInviteDisposeRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamInviteDisposeRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamInviteDisposeRequest &a, MessageTeamInviteDisposeRequest &b);


class MessageTeamInviteDisposeResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageTeamInviteDisposeResponse() : result_(0) {
  }

  virtual ~MessageTeamInviteDisposeResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageTeamInviteDisposeResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageTeamInviteDisposeResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamInviteDisposeResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamInviteDisposeResponse &a, MessageTeamInviteDisposeResponse &b);


class MessageTeamMemberAddSynchronize {
 public:

  static const char* ascii_fingerprint; // = "E9A7EEE9A2D27F7A70E08E1F60A257DB";
  static const uint8_t binary_fingerprint[16]; // = {0xE9,0xA7,0xEE,0xE9,0xA2,0xD2,0x7F,0x7A,0x70,0xE0,0x8E,0x1F,0x60,0xA2,0x57,0xDB};

  MessageTeamMemberAddSynchronize() : actor_(), name_(), level_(0), map_(0) {
  }

  virtual ~MessageTeamMemberAddSynchronize() throw() {}

  std::string actor_;
  std::string name_;
  int32_t level_;
  int32_t map_;

  void __set_actor_(const std::string& val) {
    actor_ = val;
  }

  void __set_name_(const std::string& val) {
    name_ = val;
  }

  void __set_level_(const int32_t val) {
    level_ = val;
  }

  void __set_map_(const int32_t val) {
    map_ = val;
  }

  bool operator == (const MessageTeamMemberAddSynchronize & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(name_ == rhs.name_))
      return false;
    if (!(level_ == rhs.level_))
      return false;
    if (!(map_ == rhs.map_))
      return false;
    return true;
  }
  bool operator != (const MessageTeamMemberAddSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamMemberAddSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamMemberAddSynchronize &a, MessageTeamMemberAddSynchronize &b);


class MessageTeamMemberRemoveSynchronize {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MessageTeamMemberRemoveSynchronize() : actor_() {
  }

  virtual ~MessageTeamMemberRemoveSynchronize() throw() {}

  std::string actor_;

  void __set_actor_(const std::string& val) {
    actor_ = val;
  }

  bool operator == (const MessageTeamMemberRemoveSynchronize & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    return true;
  }
  bool operator != (const MessageTeamMemberRemoveSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamMemberRemoveSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamMemberRemoveSynchronize &a, MessageTeamMemberRemoveSynchronize &b);


class TeamMemberFields {
 public:

  static const char* ascii_fingerprint; // = "2C38DC7FE6E06937BD93A5BBC3A2990C";
  static const uint8_t binary_fingerprint[16]; // = {0x2C,0x38,0xDC,0x7F,0xE6,0xE0,0x69,0x37,0xBD,0x93,0xA5,0xBB,0xC3,0xA2,0x99,0x0C};

  TeamMemberFields() : actor_(), name_(), level_(0), map_(0), x_(0), y_(0), current_hp_(0), max_hp_(0), current_mp_(0), max_mp_(0) {
  }

  virtual ~TeamMemberFields() throw() {}

  std::string actor_;
  std::string name_;
  int32_t level_;
  int32_t map_;
  int32_t x_;
  int32_t y_;
  int32_t current_hp_;
  int32_t max_hp_;
  int32_t current_mp_;
  int32_t max_mp_;

  void __set_actor_(const std::string& val) {
    actor_ = val;
  }

  void __set_name_(const std::string& val) {
    name_ = val;
  }

  void __set_level_(const int32_t val) {
    level_ = val;
  }

  void __set_map_(const int32_t val) {
    map_ = val;
  }

  void __set_x_(const int32_t val) {
    x_ = val;
  }

  void __set_y_(const int32_t val) {
    y_ = val;
  }

  void __set_current_hp_(const int32_t val) {
    current_hp_ = val;
  }

  void __set_max_hp_(const int32_t val) {
    max_hp_ = val;
  }

  void __set_current_mp_(const int32_t val) {
    current_mp_ = val;
  }

  void __set_max_mp_(const int32_t val) {
    max_mp_ = val;
  }

  bool operator == (const TeamMemberFields & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(name_ == rhs.name_))
      return false;
    if (!(level_ == rhs.level_))
      return false;
    if (!(map_ == rhs.map_))
      return false;
    if (!(x_ == rhs.x_))
      return false;
    if (!(y_ == rhs.y_))
      return false;
    if (!(current_hp_ == rhs.current_hp_))
      return false;
    if (!(max_hp_ == rhs.max_hp_))
      return false;
    if (!(current_mp_ == rhs.current_mp_))
      return false;
    if (!(max_mp_ == rhs.max_mp_))
      return false;
    return true;
  }
  bool operator != (const TeamMemberFields &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TeamMemberFields & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TeamMemberFields &a, TeamMemberFields &b);

typedef struct _MessageTeamSynchronize__isset {
  _MessageTeamSynchronize__isset() : members_(false) {}
  bool members_;
} _MessageTeamSynchronize__isset;

class MessageTeamSynchronize {
 public:

  static const char* ascii_fingerprint; // = "54AB2628CE3669B13627D4C9EAE7FF5B";
  static const uint8_t binary_fingerprint[16]; // = {0x54,0xAB,0x26,0x28,0xCE,0x36,0x69,0xB1,0x36,0x27,0xD4,0xC9,0xEA,0xE7,0xFF,0x5B};

  MessageTeamSynchronize() : team_id_(), captain_() {
  }

  virtual ~MessageTeamSynchronize() throw() {}

  std::string team_id_;
  std::string captain_;
  std::vector<TeamMemberFields>  members_;

  _MessageTeamSynchronize__isset __isset;

  void __set_team_id_(const std::string& val) {
    team_id_ = val;
  }

  void __set_captain_(const std::string& val) {
    captain_ = val;
  }

  void __set_members_(const std::vector<TeamMemberFields> & val) {
    members_ = val;
    __isset.members_ = true;
  }

  bool operator == (const MessageTeamSynchronize & rhs) const
  {
    if (!(team_id_ == rhs.team_id_))
      return false;
    if (!(captain_ == rhs.captain_))
      return false;
    if (__isset.members_ != rhs.__isset.members_)
      return false;
    else if (__isset.members_ && !(members_ == rhs.members_))
      return false;
    return true;
  }
  bool operator != (const MessageTeamSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamSynchronize &a, MessageTeamSynchronize &b);

typedef struct _MessageTeamMemberSynchronize__isset {
  _MessageTeamMemberSynchronize__isset() : name_(false), level_(false), map_(false), x_(false), y_(false), current_hp_(false), max_hp_(false), current_mp_(false), max_mp_(false) {}
  bool name_;
  bool level_;
  bool map_;
  bool x_;
  bool y_;
  bool current_hp_;
  bool max_hp_;
  bool current_mp_;
  bool max_mp_;
} _MessageTeamMemberSynchronize__isset;

class MessageTeamMemberSynchronize {
 public:

  static const char* ascii_fingerprint; // = "C91ADE70B0E9F4CB501646635CF89FA3";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x1A,0xDE,0x70,0xB0,0xE9,0xF4,0xCB,0x50,0x16,0x46,0x63,0x5C,0xF8,0x9F,0xA3};

  MessageTeamMemberSynchronize() : actor_(), name_(), level_(0), map_(0), x_(0), y_(0), current_hp_(0), max_hp_(0), current_mp_(0), max_mp_(0) {
  }

  virtual ~MessageTeamMemberSynchronize() throw() {}

  std::string actor_;
  std::string name_;
  int32_t level_;
  int32_t map_;
  int32_t x_;
  int32_t y_;
  int32_t current_hp_;
  int32_t max_hp_;
  int32_t current_mp_;
  int32_t max_mp_;

  _MessageTeamMemberSynchronize__isset __isset;

  void __set_actor_(const std::string& val) {
    actor_ = val;
  }

  void __set_name_(const std::string& val) {
    name_ = val;
    __isset.name_ = true;
  }

  void __set_level_(const int32_t val) {
    level_ = val;
    __isset.level_ = true;
  }

  void __set_map_(const int32_t val) {
    map_ = val;
    __isset.map_ = true;
  }

  void __set_x_(const int32_t val) {
    x_ = val;
    __isset.x_ = true;
  }

  void __set_y_(const int32_t val) {
    y_ = val;
    __isset.y_ = true;
  }

  void __set_current_hp_(const int32_t val) {
    current_hp_ = val;
    __isset.current_hp_ = true;
  }

  void __set_max_hp_(const int32_t val) {
    max_hp_ = val;
    __isset.max_hp_ = true;
  }

  void __set_current_mp_(const int32_t val) {
    current_mp_ = val;
    __isset.current_mp_ = true;
  }

  void __set_max_mp_(const int32_t val) {
    max_mp_ = val;
    __isset.max_mp_ = true;
  }

  bool operator == (const MessageTeamMemberSynchronize & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (__isset.name_ != rhs.__isset.name_)
      return false;
    else if (__isset.name_ && !(name_ == rhs.name_))
      return false;
    if (__isset.level_ != rhs.__isset.level_)
      return false;
    else if (__isset.level_ && !(level_ == rhs.level_))
      return false;
    if (__isset.map_ != rhs.__isset.map_)
      return false;
    else if (__isset.map_ && !(map_ == rhs.map_))
      return false;
    if (__isset.x_ != rhs.__isset.x_)
      return false;
    else if (__isset.x_ && !(x_ == rhs.x_))
      return false;
    if (__isset.y_ != rhs.__isset.y_)
      return false;
    else if (__isset.y_ && !(y_ == rhs.y_))
      return false;
    if (__isset.current_hp_ != rhs.__isset.current_hp_)
      return false;
    else if (__isset.current_hp_ && !(current_hp_ == rhs.current_hp_))
      return false;
    if (__isset.max_hp_ != rhs.__isset.max_hp_)
      return false;
    else if (__isset.max_hp_ && !(max_hp_ == rhs.max_hp_))
      return false;
    if (__isset.current_mp_ != rhs.__isset.current_mp_)
      return false;
    else if (__isset.current_mp_ && !(current_mp_ == rhs.current_mp_))
      return false;
    if (__isset.max_mp_ != rhs.__isset.max_mp_)
      return false;
    else if (__isset.max_mp_ && !(max_mp_ == rhs.max_mp_))
      return false;
    return true;
  }
  bool operator != (const MessageTeamMemberSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamMemberSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamMemberSynchronize &a, MessageTeamMemberSynchronize &b);


class MessageTeamDismissRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageTeamDismissRequest() {
  }

  virtual ~MessageTeamDismissRequest() throw() {}


  bool operator == (const MessageTeamDismissRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageTeamDismissRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamDismissRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamDismissRequest &a, MessageTeamDismissRequest &b);


class MessageTeamDismissResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageTeamDismissResponse() : result_(0) {
  }

  virtual ~MessageTeamDismissResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageTeamDismissResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageTeamDismissResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamDismissResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamDismissResponse &a, MessageTeamDismissResponse &b);


class MessageTeamDismissNotify {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageTeamDismissNotify() {
  }

  virtual ~MessageTeamDismissNotify() throw() {}


  bool operator == (const MessageTeamDismissNotify & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageTeamDismissNotify &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamDismissNotify & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamDismissNotify &a, MessageTeamDismissNotify &b);


class MessageTeamQuitRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageTeamQuitRequest() {
  }

  virtual ~MessageTeamQuitRequest() throw() {}


  bool operator == (const MessageTeamQuitRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageTeamQuitRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamQuitRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamQuitRequest &a, MessageTeamQuitRequest &b);


class MessageTeamQuitResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageTeamQuitResponse() : result_(0) {
  }

  virtual ~MessageTeamQuitResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageTeamQuitResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageTeamQuitResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamQuitResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamQuitResponse &a, MessageTeamQuitResponse &b);


class MessageTeamKickoutRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MessageTeamKickoutRequest() : actor_() {
  }

  virtual ~MessageTeamKickoutRequest() throw() {}

  std::string actor_;

  void __set_actor_(const std::string& val) {
    actor_ = val;
  }

  bool operator == (const MessageTeamKickoutRequest & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    return true;
  }
  bool operator != (const MessageTeamKickoutRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamKickoutRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamKickoutRequest &a, MessageTeamKickoutRequest &b);


class MessageTeamKickoutResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageTeamKickoutResponse() : result_(0) {
  }

  virtual ~MessageTeamKickoutResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageTeamKickoutResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageTeamKickoutResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamKickoutResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamKickoutResponse &a, MessageTeamKickoutResponse &b);


class MessageTeamSetCaptainRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MessageTeamSetCaptainRequest() : actor_() {
  }

  virtual ~MessageTeamSetCaptainRequest() throw() {}

  std::string actor_;

  void __set_actor_(const std::string& val) {
    actor_ = val;
  }

  bool operator == (const MessageTeamSetCaptainRequest & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    return true;
  }
  bool operator != (const MessageTeamSetCaptainRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamSetCaptainRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamSetCaptainRequest &a, MessageTeamSetCaptainRequest &b);


class MessageTeamSetCaptainResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageTeamSetCaptainResponse() : result_(0) {
  }

  virtual ~MessageTeamSetCaptainResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageTeamSetCaptainResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageTeamSetCaptainResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamSetCaptainResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamSetCaptainResponse &a, MessageTeamSetCaptainResponse &b);


class MessageTeamMapTeamsRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageTeamMapTeamsRequest() {
  }

  virtual ~MessageTeamMapTeamsRequest() throw() {}


  bool operator == (const MessageTeamMapTeamsRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageTeamMapTeamsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamMapTeamsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamMapTeamsRequest &a, MessageTeamMapTeamsRequest &b);


class TeamFields {
 public:

  static const char* ascii_fingerprint; // = "DBCF266584F629470F5AE29F351E0C4A";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xCF,0x26,0x65,0x84,0xF6,0x29,0x47,0x0F,0x5A,0xE2,0x9F,0x35,0x1E,0x0C,0x4A};

  TeamFields() : team_(), name_(), number_(0), captain_level_(0), average_level_(0) {
  }

  virtual ~TeamFields() throw() {}

  std::string team_;
  std::string name_;
  int8_t number_;
  int32_t captain_level_;
  int32_t average_level_;

  void __set_team_(const std::string& val) {
    team_ = val;
  }

  void __set_name_(const std::string& val) {
    name_ = val;
  }

  void __set_number_(const int8_t val) {
    number_ = val;
  }

  void __set_captain_level_(const int32_t val) {
    captain_level_ = val;
  }

  void __set_average_level_(const int32_t val) {
    average_level_ = val;
  }

  bool operator == (const TeamFields & rhs) const
  {
    if (!(team_ == rhs.team_))
      return false;
    if (!(name_ == rhs.name_))
      return false;
    if (!(number_ == rhs.number_))
      return false;
    if (!(captain_level_ == rhs.captain_level_))
      return false;
    if (!(average_level_ == rhs.average_level_))
      return false;
    return true;
  }
  bool operator != (const TeamFields &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TeamFields & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TeamFields &a, TeamFields &b);


class MessageTeamMapTeamsResponse {
 public:

  static const char* ascii_fingerprint; // = "D1FB9117C12EDB5B52A173654AD2D7EC";
  static const uint8_t binary_fingerprint[16]; // = {0xD1,0xFB,0x91,0x17,0xC1,0x2E,0xDB,0x5B,0x52,0xA1,0x73,0x65,0x4A,0xD2,0xD7,0xEC};

  MessageTeamMapTeamsResponse() {
  }

  virtual ~MessageTeamMapTeamsResponse() throw() {}

  std::vector<TeamFields>  teams_;

  void __set_teams_(const std::vector<TeamFields> & val) {
    teams_ = val;
  }

  bool operator == (const MessageTeamMapTeamsResponse & rhs) const
  {
    if (!(teams_ == rhs.teams_))
      return false;
    return true;
  }
  bool operator != (const MessageTeamMapTeamsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamMapTeamsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamMapTeamsResponse &a, MessageTeamMapTeamsResponse &b);


class MessageTeamMapActorsRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageTeamMapActorsRequest() {
  }

  virtual ~MessageTeamMapActorsRequest() throw() {}


  bool operator == (const MessageTeamMapActorsRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageTeamMapActorsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamMapActorsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamMapActorsRequest &a, MessageTeamMapActorsRequest &b);


class TeamActorFields {
 public:

  static const char* ascii_fingerprint; // = "9F5C717FDA774C6F62DDB8F84636D3AE";
  static const uint8_t binary_fingerprint[16]; // = {0x9F,0x5C,0x71,0x7F,0xDA,0x77,0x4C,0x6F,0x62,0xDD,0xB8,0xF8,0x46,0x36,0xD3,0xAE};

  TeamActorFields() : actor_(), name_(), level_(0), team_(), guild_() {
  }

  virtual ~TeamActorFields() throw() {}

  std::string actor_;
  std::string name_;
  int32_t level_;
  std::string team_;
  std::string guild_;

  void __set_actor_(const std::string& val) {
    actor_ = val;
  }

  void __set_name_(const std::string& val) {
    name_ = val;
  }

  void __set_level_(const int32_t val) {
    level_ = val;
  }

  void __set_team_(const std::string& val) {
    team_ = val;
  }

  void __set_guild_(const std::string& val) {
    guild_ = val;
  }

  bool operator == (const TeamActorFields & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(name_ == rhs.name_))
      return false;
    if (!(level_ == rhs.level_))
      return false;
    if (!(team_ == rhs.team_))
      return false;
    if (!(guild_ == rhs.guild_))
      return false;
    return true;
  }
  bool operator != (const TeamActorFields &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TeamActorFields & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TeamActorFields &a, TeamActorFields &b);


class MessageTeamMapActorsResponse {
 public:

  static const char* ascii_fingerprint; // = "7EF9C37A53D5CF5CF023D929A4C51952";
  static const uint8_t binary_fingerprint[16]; // = {0x7E,0xF9,0xC3,0x7A,0x53,0xD5,0xCF,0x5C,0xF0,0x23,0xD9,0x29,0xA4,0xC5,0x19,0x52};

  MessageTeamMapActorsResponse() {
  }

  virtual ~MessageTeamMapActorsResponse() throw() {}

  std::vector<TeamActorFields>  actors_;

  void __set_actors_(const std::vector<TeamActorFields> & val) {
    actors_ = val;
  }

  bool operator == (const MessageTeamMapActorsResponse & rhs) const
  {
    if (!(actors_ == rhs.actors_))
      return false;
    return true;
  }
  bool operator != (const MessageTeamMapActorsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamMapActorsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamMapActorsResponse &a, MessageTeamMapActorsResponse &b);


class MessageTeamMemberRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MessageTeamMemberRequest() : team_() {
  }

  virtual ~MessageTeamMemberRequest() throw() {}

  std::string team_;

  void __set_team_(const std::string& val) {
    team_ = val;
  }

  bool operator == (const MessageTeamMemberRequest & rhs) const
  {
    if (!(team_ == rhs.team_))
      return false;
    return true;
  }
  bool operator != (const MessageTeamMemberRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamMemberRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamMemberRequest &a, MessageTeamMemberRequest &b);


class MessageTeamMemberResponse {
 public:

  static const char* ascii_fingerprint; // = "80A05B877E002B6ED5F6561835CFD438";
  static const uint8_t binary_fingerprint[16]; // = {0x80,0xA0,0x5B,0x87,0x7E,0x00,0x2B,0x6E,0xD5,0xF6,0x56,0x18,0x35,0xCF,0xD4,0x38};

  MessageTeamMemberResponse() : team_() {
  }

  virtual ~MessageTeamMemberResponse() throw() {}

  std::string team_;
  std::vector<TeamMemberFields>  members_;

  void __set_team_(const std::string& val) {
    team_ = val;
  }

  void __set_members_(const std::vector<TeamMemberFields> & val) {
    members_ = val;
  }

  bool operator == (const MessageTeamMemberResponse & rhs) const
  {
    if (!(team_ == rhs.team_))
      return false;
    if (!(members_ == rhs.members_))
      return false;
    return true;
  }
  bool operator != (const MessageTeamMemberResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamMemberResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamMemberResponse &a, MessageTeamMemberResponse &b);


class ActorTeamFields {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  ActorTeamFields() : actor_(), team_() {
  }

  virtual ~ActorTeamFields() throw() {}

  std::string actor_;
  std::string team_;

  void __set_actor_(const std::string& val) {
    actor_ = val;
  }

  void __set_team_(const std::string& val) {
    team_ = val;
  }

  bool operator == (const ActorTeamFields & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(team_ == rhs.team_))
      return false;
    return true;
  }
  bool operator != (const ActorTeamFields &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ActorTeamFields & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ActorTeamFields &a, ActorTeamFields &b);


class MessageTeamActorsBroadcast {
 public:

  static const char* ascii_fingerprint; // = "006EFB9C0A4E436459CDFDF617590BB4";
  static const uint8_t binary_fingerprint[16]; // = {0x00,0x6E,0xFB,0x9C,0x0A,0x4E,0x43,0x64,0x59,0xCD,0xFD,0xF6,0x17,0x59,0x0B,0xB4};

  MessageTeamActorsBroadcast() {
  }

  virtual ~MessageTeamActorsBroadcast() throw() {}

  std::vector<ActorTeamFields>  actors_;

  void __set_actors_(const std::vector<ActorTeamFields> & val) {
    actors_ = val;
  }

  bool operator == (const MessageTeamActorsBroadcast & rhs) const
  {
    if (!(actors_ == rhs.actors_))
      return false;
    return true;
  }
  bool operator != (const MessageTeamActorsBroadcast &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamActorsBroadcast & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamActorsBroadcast &a, MessageTeamActorsBroadcast &b);

}} // namespace

#endif
