/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef gateway_task_protocol_TYPES_H
#define gateway_task_protocol_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "gateway_protocol_types.h"
#include "task_types.h"


namespace gateway { namespace protocol {


class TaskVar {
 public:

  static const char* ascii_fingerprint; // = "6435B39C87AB0E30F30BEDEFD7328C0D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

  TaskVar() : type_(0), id_(0), value_(0) {
  }

  virtual ~TaskVar() throw() {}

  int32_t type_;
  int32_t id_;
  int32_t value_;

  void __set_type_(const int32_t val) {
    type_ = val;
  }

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  void __set_value_(const int32_t val) {
    value_ = val;
  }

  bool operator == (const TaskVar & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(value_ == rhs.value_))
      return false;
    return true;
  }
  bool operator != (const TaskVar &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TaskVar & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TaskVar &a, TaskVar &b);


class TaskFields {
 public:

  static const char* ascii_fingerprint; // = "8C05D3B610516F9BAF763706AA2888A3";
  static const uint8_t binary_fingerprint[16]; // = {0x8C,0x05,0xD3,0xB6,0x10,0x51,0x6F,0x9B,0xAF,0x76,0x37,0x06,0xAA,0x28,0x88,0xA3};

  TaskFields() : id_(0) {
  }

  virtual ~TaskFields() throw() {}

  int32_t id_;
  std::vector<TaskVar>  variables_;

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  void __set_variables_(const std::vector<TaskVar> & val) {
    variables_ = val;
  }

  bool operator == (const TaskFields & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(variables_ == rhs.variables_))
      return false;
    return true;
  }
  bool operator != (const TaskFields &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TaskFields & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TaskFields &a, TaskFields &b);


class MessageTaskInitialize {
 public:

  static const char* ascii_fingerprint; // = "72224D3A44FE24A9299400BD198465D3";
  static const uint8_t binary_fingerprint[16]; // = {0x72,0x22,0x4D,0x3A,0x44,0xFE,0x24,0xA9,0x29,0x94,0x00,0xBD,0x19,0x84,0x65,0xD3};

  MessageTaskInitialize() {
  }

  virtual ~MessageTaskInitialize() throw() {}

  std::vector<TaskFields>  tasks_;
  std::vector<int32_t>  finish_tasks_;

  void __set_tasks_(const std::vector<TaskFields> & val) {
    tasks_ = val;
  }

  void __set_finish_tasks_(const std::vector<int32_t> & val) {
    finish_tasks_ = val;
  }

  bool operator == (const MessageTaskInitialize & rhs) const
  {
    if (!(tasks_ == rhs.tasks_))
      return false;
    if (!(finish_tasks_ == rhs.finish_tasks_))
      return false;
    return true;
  }
  bool operator != (const MessageTaskInitialize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTaskInitialize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTaskInitialize &a, MessageTaskInitialize &b);


class MessageTaskSynchronize {
 public:

  static const char* ascii_fingerprint; // = "E6D9105EB1E0E1595E4D735C0FBE4F1E";
  static const uint8_t binary_fingerprint[16]; // = {0xE6,0xD9,0x10,0x5E,0xB1,0xE0,0xE1,0x59,0x5E,0x4D,0x73,0x5C,0x0F,0xBE,0x4F,0x1E};

  MessageTaskSynchronize() : task_type_(( ::entity::TaskType::type)0) {
  }

  virtual ~MessageTaskSynchronize() throw() {}

  TaskFields task_;
   ::entity::TaskType::type task_type_;

  void __set_task_(const TaskFields& val) {
    task_ = val;
  }

  void __set_task_type_(const  ::entity::TaskType::type val) {
    task_type_ = val;
  }

  bool operator == (const MessageTaskSynchronize & rhs) const
  {
    if (!(task_ == rhs.task_))
      return false;
    if (!(task_type_ == rhs.task_type_))
      return false;
    return true;
  }
  bool operator != (const MessageTaskSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTaskSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTaskSynchronize &a, MessageTaskSynchronize &b);


class MessageTaskAccept {
 public:

  static const char* ascii_fingerprint; // = "1A63C45DA609C3DBB55D47C16D567AE7";
  static const uint8_t binary_fingerprint[16]; // = {0x1A,0x63,0xC4,0x5D,0xA6,0x09,0xC3,0xDB,0xB5,0x5D,0x47,0xC1,0x6D,0x56,0x7A,0xE7};

  MessageTaskAccept() : id_(0), npc_(), task_type_(( ::entity::TaskType::type)0) {
  }

  virtual ~MessageTaskAccept() throw() {}

  int32_t id_;
  std::string npc_;
   ::entity::TaskType::type task_type_;

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  void __set_npc_(const std::string& val) {
    npc_ = val;
  }

  void __set_task_type_(const  ::entity::TaskType::type val) {
    task_type_ = val;
  }

  bool operator == (const MessageTaskAccept & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(npc_ == rhs.npc_))
      return false;
    if (!(task_type_ == rhs.task_type_))
      return false;
    return true;
  }
  bool operator != (const MessageTaskAccept &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTaskAccept & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTaskAccept &a, MessageTaskAccept &b);


class MessageTaskFinish {
 public:

  static const char* ascii_fingerprint; // = "BFB60F9FC074323D3F4A645023B164C6";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0xB6,0x0F,0x9F,0xC0,0x74,0x32,0x3D,0x3F,0x4A,0x64,0x50,0x23,0xB1,0x64,0xC6};

  MessageTaskFinish() : id_(0), npc_(), reward_id_(0), task_type_(( ::entity::TaskType::type)0) {
  }

  virtual ~MessageTaskFinish() throw() {}

  int32_t id_;
  std::string npc_;
  int8_t reward_id_;
   ::entity::TaskType::type task_type_;

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  void __set_npc_(const std::string& val) {
    npc_ = val;
  }

  void __set_reward_id_(const int8_t val) {
    reward_id_ = val;
  }

  void __set_task_type_(const  ::entity::TaskType::type val) {
    task_type_ = val;
  }

  bool operator == (const MessageTaskFinish & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(npc_ == rhs.npc_))
      return false;
    if (!(reward_id_ == rhs.reward_id_))
      return false;
    if (!(task_type_ == rhs.task_type_))
      return false;
    return true;
  }
  bool operator != (const MessageTaskFinish &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTaskFinish & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTaskFinish &a, MessageTaskFinish &b);


class MessageTaskAbandon {
 public:

  static const char* ascii_fingerprint; // = "20FDD15CF009C5B6C703B6F2C65DFE88";
  static const uint8_t binary_fingerprint[16]; // = {0x20,0xFD,0xD1,0x5C,0xF0,0x09,0xC5,0xB6,0xC7,0x03,0xB6,0xF2,0xC6,0x5D,0xFE,0x88};

  MessageTaskAbandon() : id_(0), task_type_(( ::entity::TaskType::type)0) {
  }

  virtual ~MessageTaskAbandon() throw() {}

  int32_t id_;
   ::entity::TaskType::type task_type_;

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  void __set_task_type_(const  ::entity::TaskType::type val) {
    task_type_ = val;
  }

  bool operator == (const MessageTaskAbandon & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(task_type_ == rhs.task_type_))
      return false;
    return true;
  }
  bool operator != (const MessageTaskAbandon &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTaskAbandon & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTaskAbandon &a, MessageTaskAbandon &b);


class MessageTaskTalkNpc {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  MessageTaskTalkNpc() : npc_(), task_id_(0) {
  }

  virtual ~MessageTaskTalkNpc() throw() {}

  std::string npc_;
  int32_t task_id_;

  void __set_npc_(const std::string& val) {
    npc_ = val;
  }

  void __set_task_id_(const int32_t val) {
    task_id_ = val;
  }

  bool operator == (const MessageTaskTalkNpc & rhs) const
  {
    if (!(npc_ == rhs.npc_))
      return false;
    if (!(task_id_ == rhs.task_id_))
      return false;
    return true;
  }
  bool operator != (const MessageTaskTalkNpc &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTaskTalkNpc & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTaskTalkNpc &a, MessageTaskTalkNpc &b);


class MessageTaskSummonNpcRequest {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  MessageTaskSummonNpcRequest() : npc_(0), accept_npc_() {
  }

  virtual ~MessageTaskSummonNpcRequest() throw() {}

  int32_t npc_;
  std::string accept_npc_;

  void __set_npc_(const int32_t val) {
    npc_ = val;
  }

  void __set_accept_npc_(const std::string& val) {
    accept_npc_ = val;
  }

  bool operator == (const MessageTaskSummonNpcRequest & rhs) const
  {
    if (!(npc_ == rhs.npc_))
      return false;
    if (!(accept_npc_ == rhs.accept_npc_))
      return false;
    return true;
  }
  bool operator != (const MessageTaskSummonNpcRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTaskSummonNpcRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTaskSummonNpcRequest &a, MessageTaskSummonNpcRequest &b);


class MessageTaskSummonNpcResponse {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MessageTaskSummonNpcResponse() : npc_(0) {
  }

  virtual ~MessageTaskSummonNpcResponse() throw() {}

  int32_t npc_;

  void __set_npc_(const int32_t val) {
    npc_ = val;
  }

  bool operator == (const MessageTaskSummonNpcResponse & rhs) const
  {
    if (!(npc_ == rhs.npc_))
      return false;
    return true;
  }
  bool operator != (const MessageTaskSummonNpcResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTaskSummonNpcResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTaskSummonNpcResponse &a, MessageTaskSummonNpcResponse &b);


class MessageTaskCircleInitialize {
 public:

  static const char* ascii_fingerprint; // = "5458FA1A5AA0A8312ED0C16E57A48864";
  static const uint8_t binary_fingerprint[16]; // = {0x54,0x58,0xFA,0x1A,0x5A,0xA0,0xA8,0x31,0x2E,0xD0,0xC1,0x6E,0x57,0xA4,0x88,0x64};

  MessageTaskCircleInitialize() : current_round_(0), total_round_(0), circle_condition_id_(0), level_stage_(0), current_circle_(0), state_(( ::entity::TaskCircleRoundState::type)0) {
  }

  virtual ~MessageTaskCircleInitialize() throw() {}

  int32_t current_round_;
  int32_t total_round_;
  int32_t circle_condition_id_;
  int32_t level_stage_;
  int32_t current_circle_;
  TaskFields task_;
   ::entity::TaskCircleRoundState::type state_;

  void __set_current_round_(const int32_t val) {
    current_round_ = val;
  }

  void __set_total_round_(const int32_t val) {
    total_round_ = val;
  }

  void __set_circle_condition_id_(const int32_t val) {
    circle_condition_id_ = val;
  }

  void __set_level_stage_(const int32_t val) {
    level_stage_ = val;
  }

  void __set_current_circle_(const int32_t val) {
    current_circle_ = val;
  }

  void __set_task_(const TaskFields& val) {
    task_ = val;
  }

  void __set_state_(const  ::entity::TaskCircleRoundState::type val) {
    state_ = val;
  }

  bool operator == (const MessageTaskCircleInitialize & rhs) const
  {
    if (!(current_round_ == rhs.current_round_))
      return false;
    if (!(total_round_ == rhs.total_round_))
      return false;
    if (!(circle_condition_id_ == rhs.circle_condition_id_))
      return false;
    if (!(level_stage_ == rhs.level_stage_))
      return false;
    if (!(current_circle_ == rhs.current_circle_))
      return false;
    if (!(task_ == rhs.task_))
      return false;
    if (!(state_ == rhs.state_))
      return false;
    return true;
  }
  bool operator != (const MessageTaskCircleInitialize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTaskCircleInitialize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTaskCircleInitialize &a, MessageTaskCircleInitialize &b);


class MessageTaskCircleOptRequest {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

  MessageTaskCircleOptRequest() : type_(( ::entity::TaskCircleRefulshType::type)0) {
  }

  virtual ~MessageTaskCircleOptRequest() throw() {}

   ::entity::TaskCircleRefulshType::type type_;

  void __set_type_(const  ::entity::TaskCircleRefulshType::type val) {
    type_ = val;
  }

  bool operator == (const MessageTaskCircleOptRequest & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    return true;
  }
  bool operator != (const MessageTaskCircleOptRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTaskCircleOptRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTaskCircleOptRequest &a, MessageTaskCircleOptRequest &b);


class MessageTaskCircleOptResponse {
 public:

  static const char* ascii_fingerprint; // = "46A703A33337BED2F62F386FC66B2A5F";
  static const uint8_t binary_fingerprint[16]; // = {0x46,0xA7,0x03,0xA3,0x33,0x37,0xBE,0xD2,0xF6,0x2F,0x38,0x6F,0xC6,0x6B,0x2A,0x5F};

  MessageTaskCircleOptResponse() : type_(( ::entity::TaskCircleRefulshType::type)0), result_(0) {
  }

  virtual ~MessageTaskCircleOptResponse() throw() {}

   ::entity::TaskCircleRefulshType::type type_;
  int32_t result_;

  void __set_type_(const  ::entity::TaskCircleRefulshType::type val) {
    type_ = val;
  }

  void __set_result_(const int32_t val) {
    result_ = val;
  }

  bool operator == (const MessageTaskCircleOptResponse & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageTaskCircleOptResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTaskCircleOptResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTaskCircleOptResponse &a, MessageTaskCircleOptResponse &b);


class MessageTaskTripInitialize {
 public:

  static const char* ascii_fingerprint; // = "B6425D6F33DFC77CFDC916EB6E5B184A";
  static const uint8_t binary_fingerprint[16]; // = {0xB6,0x42,0x5D,0x6F,0x33,0xDF,0xC7,0x7C,0xFD,0xC9,0x16,0xEB,0x6E,0x5B,0x18,0x4A};

  MessageTaskTripInitialize() : task_num_(0) {
  }

  virtual ~MessageTaskTripInitialize() throw() {}

  int32_t task_num_;
  std::vector<TaskFields>  tasks_;

  void __set_task_num_(const int32_t val) {
    task_num_ = val;
  }

  void __set_tasks_(const std::vector<TaskFields> & val) {
    tasks_ = val;
  }

  bool operator == (const MessageTaskTripInitialize & rhs) const
  {
    if (!(task_num_ == rhs.task_num_))
      return false;
    if (!(tasks_ == rhs.tasks_))
      return false;
    return true;
  }
  bool operator != (const MessageTaskTripInitialize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTaskTripInitialize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTaskTripInitialize &a, MessageTaskTripInitialize &b);


class MessageTaskTripOptRequest {
 public:

  static const char* ascii_fingerprint; // = "46A703A33337BED2F62F386FC66B2A5F";
  static const uint8_t binary_fingerprint[16]; // = {0x46,0xA7,0x03,0xA3,0x33,0x37,0xBE,0xD2,0xF6,0x2F,0x38,0x6F,0xC6,0x6B,0x2A,0x5F};

  MessageTaskTripOptRequest() : type_(( ::entity::TaskTripOptType::type)0), value_(0) {
  }

  virtual ~MessageTaskTripOptRequest() throw() {}

   ::entity::TaskTripOptType::type type_;
  int32_t value_;

  void __set_type_(const  ::entity::TaskTripOptType::type val) {
    type_ = val;
  }

  void __set_value_(const int32_t val) {
    value_ = val;
  }

  bool operator == (const MessageTaskTripOptRequest & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(value_ == rhs.value_))
      return false;
    return true;
  }
  bool operator != (const MessageTaskTripOptRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTaskTripOptRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTaskTripOptRequest &a, MessageTaskTripOptRequest &b);


class MessageTaskTripResponse {
 public:

  static const char* ascii_fingerprint; // = "46A703A33337BED2F62F386FC66B2A5F";
  static const uint8_t binary_fingerprint[16]; // = {0x46,0xA7,0x03,0xA3,0x33,0x37,0xBE,0xD2,0xF6,0x2F,0x38,0x6F,0xC6,0x6B,0x2A,0x5F};

  MessageTaskTripResponse() : type_(( ::entity::TaskTripOptType::type)0), result_(0) {
  }

  virtual ~MessageTaskTripResponse() throw() {}

   ::entity::TaskTripOptType::type type_;
  int32_t result_;

  void __set_type_(const  ::entity::TaskTripOptType::type val) {
    type_ = val;
  }

  void __set_result_(const int32_t val) {
    result_ = val;
  }

  bool operator == (const MessageTaskTripResponse & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageTaskTripResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTaskTripResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTaskTripResponse &a, MessageTaskTripResponse &b);


class MessageTaskDailyInitialize {
 public:

  static const char* ascii_fingerprint; // = "A752307AC70593926A0CFFEEC5BBE32D";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0x52,0x30,0x7A,0xC7,0x05,0x93,0x92,0x6A,0x0C,0xFF,0xEE,0xC5,0xBB,0xE3,0x2D};

  MessageTaskDailyInitialize() : daily_exploit_(0) {
  }

  virtual ~MessageTaskDailyInitialize() throw() {}

  std::vector<TaskFields>  tasks_;
  std::vector<int32_t>  finish_tasks_;
  int32_t daily_exploit_;
  std::vector<bool>  exploit_awards_;

  void __set_tasks_(const std::vector<TaskFields> & val) {
    tasks_ = val;
  }

  void __set_finish_tasks_(const std::vector<int32_t> & val) {
    finish_tasks_ = val;
  }

  void __set_daily_exploit_(const int32_t val) {
    daily_exploit_ = val;
  }

  void __set_exploit_awards_(const std::vector<bool> & val) {
    exploit_awards_ = val;
  }

  bool operator == (const MessageTaskDailyInitialize & rhs) const
  {
    if (!(tasks_ == rhs.tasks_))
      return false;
    if (!(finish_tasks_ == rhs.finish_tasks_))
      return false;
    if (!(daily_exploit_ == rhs.daily_exploit_))
      return false;
    if (!(exploit_awards_ == rhs.exploit_awards_))
      return false;
    return true;
  }
  bool operator != (const MessageTaskDailyInitialize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTaskDailyInitialize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTaskDailyInitialize &a, MessageTaskDailyInitialize &b);


class MessageTaskDailyRequest {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  MessageTaskDailyRequest() : id_(0), opt_(0) {
  }

  virtual ~MessageTaskDailyRequest() throw() {}

  int32_t id_;
  int32_t opt_;

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  void __set_opt_(const int32_t val) {
    opt_ = val;
  }

  bool operator == (const MessageTaskDailyRequest & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(opt_ == rhs.opt_))
      return false;
    return true;
  }
  bool operator != (const MessageTaskDailyRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTaskDailyRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTaskDailyRequest &a, MessageTaskDailyRequest &b);


class MessageTaskDailyResponse {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  MessageTaskDailyResponse() : id_(0), opt_(0) {
  }

  virtual ~MessageTaskDailyResponse() throw() {}

  int32_t id_;
  int32_t opt_;

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  void __set_opt_(const int32_t val) {
    opt_ = val;
  }

  bool operator == (const MessageTaskDailyResponse & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(opt_ == rhs.opt_))
      return false;
    return true;
  }
  bool operator != (const MessageTaskDailyResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTaskDailyResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTaskDailyResponse &a, MessageTaskDailyResponse &b);


class MessageTaskDailyAwardRequest {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MessageTaskDailyAwardRequest() : id_(0) {
  }

  virtual ~MessageTaskDailyAwardRequest() throw() {}

  int32_t id_;

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  bool operator == (const MessageTaskDailyAwardRequest & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const MessageTaskDailyAwardRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTaskDailyAwardRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTaskDailyAwardRequest &a, MessageTaskDailyAwardRequest &b);


class MessageTaskDaliyAwardResponse {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MessageTaskDaliyAwardResponse() : id_(0) {
  }

  virtual ~MessageTaskDaliyAwardResponse() throw() {}

  int32_t id_;

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  bool operator == (const MessageTaskDaliyAwardResponse & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const MessageTaskDaliyAwardResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTaskDaliyAwardResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTaskDaliyAwardResponse &a, MessageTaskDaliyAwardResponse &b);


class MessageTaskTransportInitialize {
 public:

  static const char* ascii_fingerprint; // = "9F4DDC4CF577835CEE7E5BB2DA141011";
  static const uint8_t binary_fingerprint[16]; // = {0x9F,0x4D,0xDC,0x4C,0xF5,0x77,0x83,0x5C,0xEE,0x7E,0x5B,0xB2,0xDA,0x14,0x10,0x11};

  MessageTaskTransportInitialize() : finished_count_(0), free_refreshed_count_(0), robed_count_(0), quality_(0), status_(( ::entity::TaskTransportStatus::type)0) {
  }

  virtual ~MessageTaskTransportInitialize() throw() {}

  int32_t finished_count_;
  int32_t free_refreshed_count_;
  int32_t robed_count_;
  int32_t quality_;
   ::entity::TaskTransportStatus::type status_;

  void __set_finished_count_(const int32_t val) {
    finished_count_ = val;
  }

  void __set_free_refreshed_count_(const int32_t val) {
    free_refreshed_count_ = val;
  }

  void __set_robed_count_(const int32_t val) {
    robed_count_ = val;
  }

  void __set_quality_(const int32_t val) {
    quality_ = val;
  }

  void __set_status_(const  ::entity::TaskTransportStatus::type val) {
    status_ = val;
  }

  bool operator == (const MessageTaskTransportInitialize & rhs) const
  {
    if (!(finished_count_ == rhs.finished_count_))
      return false;
    if (!(free_refreshed_count_ == rhs.free_refreshed_count_))
      return false;
    if (!(robed_count_ == rhs.robed_count_))
      return false;
    if (!(quality_ == rhs.quality_))
      return false;
    if (!(status_ == rhs.status_))
      return false;
    return true;
  }
  bool operator != (const MessageTaskTransportInitialize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTaskTransportInitialize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTaskTransportInitialize &a, MessageTaskTransportInitialize &b);

typedef struct _MessageTaskTransportSynchronize__isset {
  _MessageTaskTransportSynchronize__isset() : finished_count_(false), refreshed_count_(false), robed_count_(false), transport_quality_(false), status_(false) {}
  bool finished_count_;
  bool refreshed_count_;
  bool robed_count_;
  bool transport_quality_;
  bool status_;
} _MessageTaskTransportSynchronize__isset;

class MessageTaskTransportSynchronize {
 public:

  static const char* ascii_fingerprint; // = "6462A86A60A51F7ACDE8DB5069721548";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x62,0xA8,0x6A,0x60,0xA5,0x1F,0x7A,0xCD,0xE8,0xDB,0x50,0x69,0x72,0x15,0x48};

  MessageTaskTransportSynchronize() : finished_count_(0), refreshed_count_(0), robed_count_(0), transport_quality_(0), status_(( ::entity::TaskTransportStatus::type)0) {
  }

  virtual ~MessageTaskTransportSynchronize() throw() {}

  int32_t finished_count_;
  int32_t refreshed_count_;
  int32_t robed_count_;
  int32_t transport_quality_;
   ::entity::TaskTransportStatus::type status_;

  _MessageTaskTransportSynchronize__isset __isset;

  void __set_finished_count_(const int32_t val) {
    finished_count_ = val;
    __isset.finished_count_ = true;
  }

  void __set_refreshed_count_(const int32_t val) {
    refreshed_count_ = val;
    __isset.refreshed_count_ = true;
  }

  void __set_robed_count_(const int32_t val) {
    robed_count_ = val;
    __isset.robed_count_ = true;
  }

  void __set_transport_quality_(const int32_t val) {
    transport_quality_ = val;
    __isset.transport_quality_ = true;
  }

  void __set_status_(const  ::entity::TaskTransportStatus::type val) {
    status_ = val;
    __isset.status_ = true;
  }

  bool operator == (const MessageTaskTransportSynchronize & rhs) const
  {
    if (__isset.finished_count_ != rhs.__isset.finished_count_)
      return false;
    else if (__isset.finished_count_ && !(finished_count_ == rhs.finished_count_))
      return false;
    if (__isset.refreshed_count_ != rhs.__isset.refreshed_count_)
      return false;
    else if (__isset.refreshed_count_ && !(refreshed_count_ == rhs.refreshed_count_))
      return false;
    if (__isset.robed_count_ != rhs.__isset.robed_count_)
      return false;
    else if (__isset.robed_count_ && !(robed_count_ == rhs.robed_count_))
      return false;
    if (__isset.transport_quality_ != rhs.__isset.transport_quality_)
      return false;
    else if (__isset.transport_quality_ && !(transport_quality_ == rhs.transport_quality_))
      return false;
    if (__isset.status_ != rhs.__isset.status_)
      return false;
    else if (__isset.status_ && !(status_ == rhs.status_))
      return false;
    return true;
  }
  bool operator != (const MessageTaskTransportSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTaskTransportSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTaskTransportSynchronize &a, MessageTaskTransportSynchronize &b);


class MessageTaskTransportRefreshQualityRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageTaskTransportRefreshQualityRequest() {
  }

  virtual ~MessageTaskTransportRefreshQualityRequest() throw() {}


  bool operator == (const MessageTaskTransportRefreshQualityRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageTaskTransportRefreshQualityRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTaskTransportRefreshQualityRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTaskTransportRefreshQualityRequest &a, MessageTaskTransportRefreshQualityRequest &b);


class MessageTaskTransportRefreshQualityResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageTaskTransportRefreshQualityResponse() : result_(0) {
  }

  virtual ~MessageTaskTransportRefreshQualityResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageTaskTransportRefreshQualityResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageTaskTransportRefreshQualityResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTaskTransportRefreshQualityResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTaskTransportRefreshQualityResponse &a, MessageTaskTransportRefreshQualityResponse &b);


class MessageTaskTransportAcceptRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MessageTaskTransportAcceptRequest() : npc_() {
  }

  virtual ~MessageTaskTransportAcceptRequest() throw() {}

  std::string npc_;

  void __set_npc_(const std::string& val) {
    npc_ = val;
  }

  bool operator == (const MessageTaskTransportAcceptRequest & rhs) const
  {
    if (!(npc_ == rhs.npc_))
      return false;
    return true;
  }
  bool operator != (const MessageTaskTransportAcceptRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTaskTransportAcceptRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTaskTransportAcceptRequest &a, MessageTaskTransportAcceptRequest &b);


class MessageTaskTransportAcceptResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageTaskTransportAcceptResponse() : result_(0) {
  }

  virtual ~MessageTaskTransportAcceptResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageTaskTransportAcceptResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageTaskTransportAcceptResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTaskTransportAcceptResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTaskTransportAcceptResponse &a, MessageTaskTransportAcceptResponse &b);


class MessageTaskTransportFinishRequest {
 public:

  static const char* ascii_fingerprint; // = "7D61C9AA00102AB4D8F72A1DA58297DC";
  static const uint8_t binary_fingerprint[16]; // = {0x7D,0x61,0xC9,0xAA,0x00,0x10,0x2A,0xB4,0xD8,0xF7,0x2A,0x1D,0xA5,0x82,0x97,0xDC};

  MessageTaskTransportFinishRequest() : npc_(), force_success_(0) {
  }

  virtual ~MessageTaskTransportFinishRequest() throw() {}

  std::string npc_;
  bool force_success_;

  void __set_npc_(const std::string& val) {
    npc_ = val;
  }

  void __set_force_success_(const bool val) {
    force_success_ = val;
  }

  bool operator == (const MessageTaskTransportFinishRequest & rhs) const
  {
    if (!(npc_ == rhs.npc_))
      return false;
    if (!(force_success_ == rhs.force_success_))
      return false;
    return true;
  }
  bool operator != (const MessageTaskTransportFinishRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTaskTransportFinishRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTaskTransportFinishRequest &a, MessageTaskTransportFinishRequest &b);


class MessageTaskTransportFinishResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageTaskTransportFinishResponse() : result_(0) {
  }

  virtual ~MessageTaskTransportFinishResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageTaskTransportFinishResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageTaskTransportFinishResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTaskTransportFinishResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTaskTransportFinishResponse &a, MessageTaskTransportFinishResponse &b);

}} // namespace

#endif
