/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef login_protocol_TYPES_H
#define login_protocol_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace login { namespace protocol {

struct MessageType {
  enum type {
    MESSAGE_MIN = 0,
    MESSAGE_CREATE_ACTOR_REQUEST = 1,
    MESSAGE_CREATE_ACTOR_RESPONSE = 2,
    MESSAGE_ACTOR_LOGIN_REQUEST = 3,
    MESSAGE_ACTOR_LOGIN_RESPONSE = 4,
    MESSAGE_CHECK_ACTOR_EXIST_REQUEST = 5,
    MESSAGE_CHECK_ACTOR_EXIST_RESPONSE = 6,
    MESSAGE_MAX = 7
  };
};

extern const std::map<int, const char*> _MessageType_VALUES_TO_NAMES;

struct CreateActorType {
  enum type {
    SUCCESS = 0,
    FAILED_ACTOR_EXIST = 1,
    FAILED_NAME_EXIST = 2,
    FAILED_NAME_LENGTH = 3,
    FAILED_NAME_INVALID = 4,
    FAILED_UNKNOWN = 5,
    MAX = 6
  };
};

extern const std::map<int, const char*> _CreateActorType_VALUES_TO_NAMES;


class Message {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  Message() : type_((MessageType::type)0), message_() {
  }

  virtual ~Message() throw() {}

  MessageType::type type_;
  std::string message_;

  void __set_type_(const MessageType::type val) {
    type_ = val;
  }

  void __set_message_(const std::string& val) {
    message_ = val;
  }

  bool operator == (const Message & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(message_ == rhs.message_))
      return false;
    return true;
  }
  bool operator != (const Message &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Message & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Message &a, Message &b);


class MessageCreateActorRequest {
 public:

  static const char* ascii_fingerprint; // = "20E299AB11A76404BA21D48395046B03";
  static const uint8_t binary_fingerprint[16]; // = {0x20,0xE2,0x99,0xAB,0x11,0xA7,0x64,0x04,0xBA,0x21,0xD4,0x83,0x95,0x04,0x6B,0x03};

  MessageCreateActorRequest() : open_id_(), open_session_(), zone_id_(0), actor_name_(), hair_(0), male_(0), vocation_(0) {
  }

  virtual ~MessageCreateActorRequest() throw() {}

  std::string open_id_;
  std::string open_session_;
  int16_t zone_id_;
  std::string actor_name_;
  int8_t hair_;
  bool male_;
  int8_t vocation_;

  void __set_open_id_(const std::string& val) {
    open_id_ = val;
  }

  void __set_open_session_(const std::string& val) {
    open_session_ = val;
  }

  void __set_zone_id_(const int16_t val) {
    zone_id_ = val;
  }

  void __set_actor_name_(const std::string& val) {
    actor_name_ = val;
  }

  void __set_hair_(const int8_t val) {
    hair_ = val;
  }

  void __set_male_(const bool val) {
    male_ = val;
  }

  void __set_vocation_(const int8_t val) {
    vocation_ = val;
  }

  bool operator == (const MessageCreateActorRequest & rhs) const
  {
    if (!(open_id_ == rhs.open_id_))
      return false;
    if (!(open_session_ == rhs.open_session_))
      return false;
    if (!(zone_id_ == rhs.zone_id_))
      return false;
    if (!(actor_name_ == rhs.actor_name_))
      return false;
    if (!(hair_ == rhs.hair_))
      return false;
    if (!(male_ == rhs.male_))
      return false;
    if (!(vocation_ == rhs.vocation_))
      return false;
    return true;
  }
  bool operator != (const MessageCreateActorRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageCreateActorRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageCreateActorRequest &a, MessageCreateActorRequest &b);


class MessageCreateActorResponse {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

  MessageCreateActorResponse() : type_((CreateActorType::type)0) {
  }

  virtual ~MessageCreateActorResponse() throw() {}

  CreateActorType::type type_;

  void __set_type_(const CreateActorType::type val) {
    type_ = val;
  }

  bool operator == (const MessageCreateActorResponse & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    return true;
  }
  bool operator != (const MessageCreateActorResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageCreateActorResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageCreateActorResponse &a, MessageCreateActorResponse &b);


class MessageActorLoginRequest {
 public:

  static const char* ascii_fingerprint; // = "3628A1EB414F66736E1B2A082E79475F";
  static const uint8_t binary_fingerprint[16]; // = {0x36,0x28,0xA1,0xEB,0x41,0x4F,0x66,0x73,0x6E,0x1B,0x2A,0x08,0x2E,0x79,0x47,0x5F};

  MessageActorLoginRequest() : open_id_(), zone_id_(0) {
  }

  virtual ~MessageActorLoginRequest() throw() {}

  std::string open_id_;
  int16_t zone_id_;

  void __set_open_id_(const std::string& val) {
    open_id_ = val;
  }

  void __set_zone_id_(const int16_t val) {
    zone_id_ = val;
  }

  bool operator == (const MessageActorLoginRequest & rhs) const
  {
    if (!(open_id_ == rhs.open_id_))
      return false;
    if (!(zone_id_ == rhs.zone_id_))
      return false;
    return true;
  }
  bool operator != (const MessageActorLoginRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageActorLoginRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageActorLoginRequest &a, MessageActorLoginRequest &b);


class MessageActorLoginResponse {
 public:

  static const char* ascii_fingerprint; // = "DD55A5009BBE5DDF9C045AB7FDC14C87";
  static const uint8_t binary_fingerprint[16]; // = {0xDD,0x55,0xA5,0x00,0x9B,0xBE,0x5D,0xDF,0x9C,0x04,0x5A,0xB7,0xFD,0xC1,0x4C,0x87};

  MessageActorLoginResponse() : success_(0), actor_id_(), game_session_(), actor_name_(), gateway_host_(), gateway_port_(0) {
  }

  virtual ~MessageActorLoginResponse() throw() {}

  bool success_;
  std::string actor_id_;
  std::string game_session_;
  std::string actor_name_;
  std::string gateway_host_;
  int16_t gateway_port_;

  void __set_success_(const bool val) {
    success_ = val;
  }

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
  }

  void __set_game_session_(const std::string& val) {
    game_session_ = val;
  }

  void __set_actor_name_(const std::string& val) {
    actor_name_ = val;
  }

  void __set_gateway_host_(const std::string& val) {
    gateway_host_ = val;
  }

  void __set_gateway_port_(const int16_t val) {
    gateway_port_ = val;
  }

  bool operator == (const MessageActorLoginResponse & rhs) const
  {
    if (!(success_ == rhs.success_))
      return false;
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(game_session_ == rhs.game_session_))
      return false;
    if (!(actor_name_ == rhs.actor_name_))
      return false;
    if (!(gateway_host_ == rhs.gateway_host_))
      return false;
    if (!(gateway_port_ == rhs.gateway_port_))
      return false;
    return true;
  }
  bool operator != (const MessageActorLoginResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageActorLoginResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageActorLoginResponse &a, MessageActorLoginResponse &b);


class MessageCheckActorExistRequest {
 public:

  static const char* ascii_fingerprint; // = "3628A1EB414F66736E1B2A082E79475F";
  static const uint8_t binary_fingerprint[16]; // = {0x36,0x28,0xA1,0xEB,0x41,0x4F,0x66,0x73,0x6E,0x1B,0x2A,0x08,0x2E,0x79,0x47,0x5F};

  MessageCheckActorExistRequest() : open_id_(), zone_id_(0) {
  }

  virtual ~MessageCheckActorExistRequest() throw() {}

  std::string open_id_;
  int16_t zone_id_;

  void __set_open_id_(const std::string& val) {
    open_id_ = val;
  }

  void __set_zone_id_(const int16_t val) {
    zone_id_ = val;
  }

  bool operator == (const MessageCheckActorExistRequest & rhs) const
  {
    if (!(open_id_ == rhs.open_id_))
      return false;
    if (!(zone_id_ == rhs.zone_id_))
      return false;
    return true;
  }
  bool operator != (const MessageCheckActorExistRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageCheckActorExistRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageCheckActorExistRequest &a, MessageCheckActorExistRequest &b);


class MessageCheckActorExistResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageCheckActorExistResponse() : exist_(0) {
  }

  virtual ~MessageCheckActorExistResponse() throw() {}

  bool exist_;

  void __set_exist_(const bool val) {
    exist_ = val;
  }

  bool operator == (const MessageCheckActorExistResponse & rhs) const
  {
    if (!(exist_ == rhs.exist_))
      return false;
    return true;
  }
  bool operator != (const MessageCheckActorExistResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageCheckActorExistResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageCheckActorExistResponse &a, MessageCheckActorExistResponse &b);

}} // namespace

#endif
