/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef game_protocol_TYPES_H
#define game_protocol_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "server_type_types.h"


namespace game { namespace protocol {

struct MessageType {
  enum type {
    MESSAGE_MIN = 0,
    MESSAGE_LOGIN_REQUEST = 0,
    MESSAGE_LOGIN_RESPONSE = 1,
    MESSAGE_LOGOUT_REQUEST = 2,
    MESSAGE_LOGOUT_RESPONSE = 3,
    MESSAGE_USER_MESSAGE_FORWARD = 4,
    MESSAGE_USER_MESSAGE_BROADCAST = 5,
    MESSAGE_USER_MESSAGE_MULTICAST = 6,
    MESSAGE_USER_LOGOUT = 7,
    MESSAGE_MAX = 8
  };
};

extern const std::map<int, const char*> _MessageType_VALUES_TO_NAMES;


class Message {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  Message() : type_((MessageType::type)0), message_() {
  }

  virtual ~Message() throw() {}

  MessageType::type type_;
  std::string message_;

  void __set_type_(const MessageType::type val) {
    type_ = val;
  }

  void __set_message_(const std::string& val) {
    message_ = val;
  }

  bool operator == (const Message & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(message_ == rhs.message_))
      return false;
    return true;
  }
  bool operator != (const Message &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Message & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Message &a, Message &b);


class MessageLoginRequest {
 public:

  static const char* ascii_fingerprint; // = "C0F29BB444E710C0575C3986968CD840";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0xF2,0x9B,0xB4,0x44,0xE7,0x10,0xC0,0x57,0x5C,0x39,0x86,0x96,0x8C,0xD8,0x40};

  MessageLoginRequest() {
  }

  virtual ~MessageLoginRequest() throw() {}

   ::global::protocol::ServerSignature signature_;

  void __set_signature_(const  ::global::protocol::ServerSignature& val) {
    signature_ = val;
  }

  bool operator == (const MessageLoginRequest & rhs) const
  {
    if (!(signature_ == rhs.signature_))
      return false;
    return true;
  }
  bool operator != (const MessageLoginRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageLoginRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageLoginRequest &a, MessageLoginRequest &b);


class MessageLoginResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageLoginResponse() : logined_(0) {
  }

  virtual ~MessageLoginResponse() throw() {}

  bool logined_;

  void __set_logined_(const bool val) {
    logined_ = val;
  }

  bool operator == (const MessageLoginResponse & rhs) const
  {
    if (!(logined_ == rhs.logined_))
      return false;
    return true;
  }
  bool operator != (const MessageLoginResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageLoginResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageLoginResponse &a, MessageLoginResponse &b);


class MessageLogoutRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageLogoutRequest() {
  }

  virtual ~MessageLogoutRequest() throw() {}


  bool operator == (const MessageLogoutRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageLogoutRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageLogoutRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageLogoutRequest &a, MessageLogoutRequest &b);


class MessageLogoutResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageLogoutResponse() : logouted_(0) {
  }

  virtual ~MessageLogoutResponse() throw() {}

  bool logouted_;

  void __set_logouted_(const bool val) {
    logouted_ = val;
  }

  bool operator == (const MessageLogoutResponse & rhs) const
  {
    if (!(logouted_ == rhs.logouted_))
      return false;
    return true;
  }
  bool operator != (const MessageLogoutResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageLogoutResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageLogoutResponse &a, MessageLogoutResponse &b);


class MessageUserMessageForward {
 public:

  static const char* ascii_fingerprint; // = "86D97BA61768267A7CE47610E95DE354";
  static const uint8_t binary_fingerprint[16]; // = {0x86,0xD9,0x7B,0xA6,0x17,0x68,0x26,0x7A,0x7C,0xE4,0x76,0x10,0xE9,0x5D,0xE3,0x54};

  MessageUserMessageForward() : message_(), type_(0), actor_(0) {
  }

  virtual ~MessageUserMessageForward() throw() {}

  std::string message_;
  int32_t type_;
  int64_t actor_;

  void __set_message_(const std::string& val) {
    message_ = val;
  }

  void __set_type_(const int32_t val) {
    type_ = val;
  }

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  bool operator == (const MessageUserMessageForward & rhs) const
  {
    if (!(message_ == rhs.message_))
      return false;
    if (!(type_ == rhs.type_))
      return false;
    if (!(actor_ == rhs.actor_))
      return false;
    return true;
  }
  bool operator != (const MessageUserMessageForward &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageUserMessageForward & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageUserMessageForward &a, MessageUserMessageForward &b);


class MessageUserMessageBroadcast {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  MessageUserMessageBroadcast() : message_(), type_(0) {
  }

  virtual ~MessageUserMessageBroadcast() throw() {}

  std::string message_;
  int32_t type_;

  void __set_message_(const std::string& val) {
    message_ = val;
  }

  void __set_type_(const int32_t val) {
    type_ = val;
  }

  bool operator == (const MessageUserMessageBroadcast & rhs) const
  {
    if (!(message_ == rhs.message_))
      return false;
    if (!(type_ == rhs.type_))
      return false;
    return true;
  }
  bool operator != (const MessageUserMessageBroadcast &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageUserMessageBroadcast & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageUserMessageBroadcast &a, MessageUserMessageBroadcast &b);


class MessageUserMessageMulticast {
 public:

  static const char* ascii_fingerprint; // = "30C610D48FF3416086E863574849F8C5";
  static const uint8_t binary_fingerprint[16]; // = {0x30,0xC6,0x10,0xD4,0x8F,0xF3,0x41,0x60,0x86,0xE8,0x63,0x57,0x48,0x49,0xF8,0xC5};

  MessageUserMessageMulticast() : message_(), type_(0) {
  }

  virtual ~MessageUserMessageMulticast() throw() {}

  std::string message_;
  int32_t type_;
  std::vector<int64_t>  actors_;

  void __set_message_(const std::string& val) {
    message_ = val;
  }

  void __set_type_(const int32_t val) {
    type_ = val;
  }

  void __set_actors_(const std::vector<int64_t> & val) {
    actors_ = val;
  }

  bool operator == (const MessageUserMessageMulticast & rhs) const
  {
    if (!(message_ == rhs.message_))
      return false;
    if (!(type_ == rhs.type_))
      return false;
    if (!(actors_ == rhs.actors_))
      return false;
    return true;
  }
  bool operator != (const MessageUserMessageMulticast &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageUserMessageMulticast & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageUserMessageMulticast &a, MessageUserMessageMulticast &b);


class MessageUserLogout {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  MessageUserLogout() : actor_id_(0) {
  }

  virtual ~MessageUserLogout() throw() {}

  int64_t actor_id_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  bool operator == (const MessageUserLogout & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    return true;
  }
  bool operator != (const MessageUserLogout &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageUserLogout & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageUserLogout &a, MessageUserLogout &b);

}} // namespace

#endif
