#include "game_server/server/extension/task/load_exploit_attr_configure.h"

#include "core/tinyxml/tinyxml.h"
#include "game_server/server/extension_manager.h"
#include "global/common_functions.h"
#include "global/logging.h"

namespace game {

namespace server {

namespace task {

LoadExploitAttrConfigure::LoadExploitAttrConfigure() {}
LoadExploitAttrConfigure::~LoadExploitAttrConfigure() {}

bool LoadExploitAttrConfigure::LoadConfigure(const std::string &file) {
  TiXmlDocument doc;
  if(doc.LoadFile(file.c_str()) == false) {
    global::LogError("%s:%d (%s) 加载配置文件(%s)出错",
        __FILE__, __LINE__, __FUNCTION__, file.c_str());
    return false;
  }

  // 加载 data 结点
  TiXmlElement *data_node = doc.FirstChildElement("data");
  if(data_node == NULL) {
    global::LogError("%s:%d (%s) 找不到结点 [data]，文件(%s)",
        __FILE__, __LINE__, __FUNCTION__, file.c_str());
    return false;
  }

  const char *str = NULL;
  TiXmlElement *cell_node = data_node->FirstChildElement("cell");
  while(cell_node) {
    ExploitAttrCell cell;
    if(cell_node->Attribute("id", (int* )&cell.id_) == false) {
      global::LogError("%s:%d (%s) 找不到属性 [cell-id]，文件(%s)",
          __FILE__, __LINE__, __FUNCTION__, file.c_str());
      return false;
    }
    if(cell_node->Attribute("num", (int *)&cell.num_) == false) {
      global::LogError("%s:%d (%s) 找不到属性 [cell-num]，文件(%s)",
          __FILE__, __LINE__, __FUNCTION__, file.c_str());
      return false;
    }

    if(cell_node->Attribute("physique", 
          (int *)&cell.physique_) == false) {
      global::LogError("%s:%d (%s) 找不到属性 [cell-physique]，文件(%s)",
          __FILE__, __LINE__, __FUNCTION__, file.c_str());
      return false;
    }
    if(cell_node->Attribute("strength", (int *)&cell.strength_) == false) {
      global::LogError("%s:%d (%s) 找不到属性 [cell-strength]，文件(%s)",
          __FILE__, __LINE__, __FUNCTION__, file.c_str());
      return false;
    }

    if(cell_node->Attribute("initelligence", 
          (int *)&cell.intelligence_) == false) {
      global::LogError("%s:%d (%s) 找不到属性 [cell-initelligence]，文件(%s)",
          __FILE__, __LINE__, __FUNCTION__, file.c_str());
      return false;
    }
    if(cell_node->Attribute("agile", (int *)&cell.agile_) == false) {
      global::LogError("%s:%d (%s) 找不到属性 [cell-agile]，文件(%s)",
          __FILE__, __LINE__, __FUNCTION__, file.c_str());
      return false;
    }

    if(cell_node->Attribute("spirit", 
          (int *)&cell.spirit_) == false) {
      global::LogError("%s:%d (%s) 找不到属性 [cell-spirit]，文件(%s)",
          __FILE__, __LINE__, __FUNCTION__, file.c_str());
      return false;
    }

    this->attrs_.push_back(cell);

    cell_node = cell_node->NextSiblingElement("cell");
  }

  return true;
}

const ExploitAttrCell *LoadExploitAttrConfigure::GetCell(core::int32 value) const {
  for(core::int32 i = this->attrs_.size()-1 ; i >= 0; --i) {
    if(this->attrs_[i].num_ <= value) {
      return &(this->attrs_[i]);
    }
  }

  return NULL;
}

}  // namespace task

}  // namespace server

}  // namespace game

