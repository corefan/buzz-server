#ifndef __GAME__SERVER__TASK__LOAD__TASK__EXPLOIT__AWARD__CONFIGURE__H
#define __GAME__SERVER__TASK__LOAD__TASK__EXPLOIT__AWARD__CONFIGURE__H

#include <map>
#include <vector>
#include <ext/hash_map>

#include "core/base/noncopyable.h"
#include "core/base/types.h"
#include "game_server/server/extension/task/task_configure.h"

namespace game {

namespace server {

namespace task {

class ExploitAwardCell {
 public:
  TaskAward award_[5];
};

class LoadTaskExploitAwardConfigure : public core::Noncopyable {
 public:
  typedef std::map<core::int32, ExploitAwardCell> AwardMap;

  LoadTaskExploitAwardConfigure();
  ~LoadTaskExploitAwardConfigure();

  bool LoadConfigure(const std::string &file);

  const ExploitAwardCell *GetCell(core::int32 id) const;

  const AwardMap &GetConfig() const{
    return this->award_maps_;
  }

 private:
  AwardMap award_maps_;
};

}  // namespace task

}  // namespace server

}  // namespace game

#endif  // __GAME__SERVER__TASK__LOAD__TASK__EXPLOIT__AWARD__CONFIGURE__H

