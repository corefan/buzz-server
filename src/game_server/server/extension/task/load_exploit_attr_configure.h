#ifndef __GAME__SERVER__TASK__LOAD__EXPLOIT__ATTR__CONFIGURE__H
#define __GAME__SERVER__TASK__LOAD__EXPLOIT__ATTR__CONFIGURE__H

#include <string>
#include <vector>

#include "core/base/noncopyable.h"
#include "core/base/types.h"
#include "game_server/server/extension/task/task_configure.h"

namespace game {

namespace server {

namespace task {

class ExploitAttrCell {
  public:
   core::uint32 id_;
   core::int32 num_;
   core::int32 physique_;
   core::int32 strength_;
   core::int32 intelligence_;
   core::int32 agile_;
   core::int32 spirit_;
};

class LoadExploitAttrConfigure : public core::Noncopyable {
 typedef std::vector<ExploitAttrCell> AttrVecs;

 public:
  LoadExploitAttrConfigure();
  ~LoadExploitAttrConfigure();

  bool LoadConfigure(const std::string &file);

  const ExploitAttrCell *GetCell(core::int32 value) const;

 private:
  AttrVecs attrs_;
};

}  // namespace task

}  // namespace server

}  // namespace game

#endif  // __GAME__SERVER__TASK__LOAD__EXPLOIT__ATTR__CONFIGURE__H

