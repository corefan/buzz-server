#include "game_server/server/extension/task/load_task_exploit_award_configure.h"

#include "core/tinyxml/tinyxml.h"
#include "game_server/server/extension_manager.h"
#include "global/common_functions.h"
#include "global/logging.h"

namespace game {

namespace server {

namespace task {

LoadTaskExploitAwardConfigure::LoadTaskExploitAwardConfigure() {}
LoadTaskExploitAwardConfigure::~LoadTaskExploitAwardConfigure() {}

bool LoadTaskExploitAwardConfigure::LoadConfigure(const std::string &file) {
  TiXmlDocument doc;
  if(doc.LoadFile(file.c_str()) == false) {
    global::LogError("%s:%d (%s) 加载配置文件(%s)出错",
        __FILE__, __LINE__, __FUNCTION__, file.c_str());
    return false;
  }

  // 加载 data 结点
  TiXmlElement *data_node = doc.FirstChildElement("data");
  if(data_node == NULL) {
    global::LogError("%s:%d (%s) 找不到结点 [data]，文件(%s)",
        __FILE__, __LINE__, __FUNCTION__, file.c_str());
    return false;
  }

  const char *str = NULL;
  TiXmlElement *cell_node = data_node->FirstChildElement("cell");
  while(cell_node) {
    ExploitAwardCell cell;
    std::vector<core::int32> awards;
    core::int32 id = 0;

    if(cell_node->Attribute("exploit", &id) == false) {
      global::LogError("%s:%d (%s) 找不到属性 [cell-exploit]，文件(%s)",
          __FILE__, __LINE__, __FUNCTION__, file.c_str());
      return false;
    }
    str = cell_node->Attribute("award1");
    if(str == NULL) {
      global::LogError("%s:%d (%s) 找不到属性 [cell-award1]，文件(%s)",
          __FILE__, __LINE__, __FUNCTION__, file.c_str());
      return false;
    }
    awards.clear();
    global::StringSplit(str, ":", awards);
    if(awards.size() == 5) {
      cell.award_[0].type_ = awards[0];
      cell.award_[0].id_ = awards[1];
      cell.award_[0].number_ = awards[2];
      cell.award_[0].bind_ = awards[3];
      cell.award_[0].intensify_level_ = awards[4];
    }

    str = cell_node->Attribute("award2");
    if(str == NULL) {
      global::LogError("%s:%d (%s) 找不到属性 [cell-award2]，文件(%s)",
          __FILE__, __LINE__, __FUNCTION__, file.c_str());
      return false;
    }
    awards.clear();
    global::StringSplit(str, ":", awards);
    if(awards.size() == 5) {
      cell.award_[1].type_ = awards[0];
      cell.award_[1].id_ = awards[1];
      cell.award_[1].number_ = awards[2];
      cell.award_[1].bind_ = awards[3];
      cell.award_[1].intensify_level_ = awards[4];
    }

    str = cell_node->Attribute("award3");
    if(str == NULL) {
      global::LogError("%s:%d (%s) 找不到属性 [cell-award3]，文件(%s)",
          __FILE__, __LINE__, __FUNCTION__, file.c_str());
      return false;
    }
    awards.clear();
    global::StringSplit(str, ":", awards);
    if(awards.size() == 5) {
      cell.award_[2].type_ = awards[0];
      cell.award_[2].id_ = awards[1];
      cell.award_[2].number_ = awards[2];
      cell.award_[2].bind_ = awards[3];
      cell.award_[2].intensify_level_ = awards[4];
    }
    str = cell_node->Attribute("award4");
    if(str == NULL) {
      global::LogError("%s:%d (%s) 找不到属性 [cell-award4]，文件(%s)",
          __FILE__, __LINE__, __FUNCTION__, file.c_str());
      return false;
    }
    awards.clear();
    global::StringSplit(str, ":", awards);
    if(awards.size() == 5) {
      cell.award_[3].type_ = awards[0];
      cell.award_[3].id_ = awards[1];
      cell.award_[3].number_ = awards[2];
      cell.award_[3].bind_ = awards[3];
      cell.award_[3].intensify_level_ = awards[4];
    }

    str = cell_node->Attribute("award5");
    if(str == NULL) {
      global::LogError("%s:%d (%s) 找不到属性 [cell-award5]，文件(%s)",
          __FILE__, __LINE__, __FUNCTION__, file.c_str());
      return false;
    }
    awards.clear();
    global::StringSplit(str, ":", awards);
    if(awards.size() == 5) {
      cell.award_[4].type_ = awards[0];
      cell.award_[4].id_ = awards[1];
      cell.award_[4].number_ = awards[2];
      cell.award_[4].bind_ = awards[3];
      cell.award_[4].intensify_level_ = awards[4];
    }

    this->award_maps_.insert(std::make_pair(id, cell));
    cell_node = cell_node->NextSiblingElement("cell");
  }
  return true;
}

const ExploitAwardCell *LoadTaskExploitAwardConfigure::GetCell(core::int32 id) const {
  AwardMap::const_iterator itr = this->award_maps_.begin();
  core::int32 i = 0;
  for(; itr != this->award_maps_.end(); ++itr) {
    if(i == id) {
      return &(itr->second);
    }
    ++i;
  }
  return  NULL;
}

}  // namespace task

}  // namespace server

}  // namespace game

