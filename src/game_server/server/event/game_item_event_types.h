/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef game_item_event_TYPES_H
#define game_item_event_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace game { namespace server { namespace event {


class EventItemUse {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  EventItemUse() : id_(0), template_id_(0) {
  }

  virtual ~EventItemUse() throw() {}

  int64_t id_;
  int32_t template_id_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_template_id_(const int32_t val) {
    template_id_ = val;
  }

  bool operator == (const EventItemUse & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(template_id_ == rhs.template_id_))
      return false;
    return true;
  }
  bool operator != (const EventItemUse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventItemUse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventItemUse &a, EventItemUse &b);


class EventItemEquipStrength {
 public:

  static const char* ascii_fingerprint; // = "3495A4F4FB8ADC7B81D6DE532D320E88";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0x95,0xA4,0xF4,0xFB,0x8A,0xDC,0x7B,0x81,0xD6,0xDE,0x53,0x2D,0x32,0x0E,0x88};

  EventItemEquipStrength() : id_(0), template_id_(0), result_(0) {
  }

  virtual ~EventItemEquipStrength() throw() {}

  int64_t id_;
  int32_t template_id_;
  bool result_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_template_id_(const int32_t val) {
    template_id_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const EventItemEquipStrength & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(template_id_ == rhs.template_id_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const EventItemEquipStrength &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventItemEquipStrength & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventItemEquipStrength &a, EventItemEquipStrength &b);


class EventItemEquipRefine {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  EventItemEquipRefine() : id_(0), template_id_(0) {
  }

  virtual ~EventItemEquipRefine() throw() {}

  int64_t id_;
  int32_t template_id_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_template_id_(const int32_t val) {
    template_id_ = val;
  }

  bool operator == (const EventItemEquipRefine & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(template_id_ == rhs.template_id_))
      return false;
    return true;
  }
  bool operator != (const EventItemEquipRefine &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventItemEquipRefine & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventItemEquipRefine &a, EventItemEquipRefine &b);


class EventItemEquipInlay {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  EventItemEquipInlay() : id_(0) {
  }

  virtual ~EventItemEquipInlay() throw() {}

  int64_t id_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  bool operator == (const EventItemEquipInlay & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const EventItemEquipInlay &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventItemEquipInlay & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventItemEquipInlay &a, EventItemEquipInlay &b);


class EventItemWearEquip {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  EventItemWearEquip() : id_(0), template_id_(0) {
  }

  virtual ~EventItemWearEquip() throw() {}

  int64_t id_;
  int32_t template_id_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_template_id_(const int32_t val) {
    template_id_ = val;
  }

  bool operator == (const EventItemWearEquip & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(template_id_ == rhs.template_id_))
      return false;
    return true;
  }
  bool operator != (const EventItemWearEquip &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventItemWearEquip & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventItemWearEquip &a, EventItemWearEquip &b);


class EventItemDivineGem {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  EventItemDivineGem() : id_(0) {
  }

  virtual ~EventItemDivineGem() throw() {}

  int64_t id_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  bool operator == (const EventItemDivineGem & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const EventItemDivineGem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventItemDivineGem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventItemDivineGem &a, EventItemDivineGem &b);

}}} // namespace

#endif
