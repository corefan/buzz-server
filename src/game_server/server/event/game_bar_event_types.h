/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef game_bar_event_TYPES_H
#define game_bar_event_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "bar_types.h"


namespace game { namespace server { namespace event {


class EventBarFinish {
 public:

  static const char* ascii_fingerprint; // = "DFA40D9D2884599F3D1E7A57578F1384";
  static const uint8_t binary_fingerprint[16]; // = {0xDF,0xA4,0x0D,0x9D,0x28,0x84,0x59,0x9F,0x3D,0x1E,0x7A,0x57,0x57,0x8F,0x13,0x84};

  EventBarFinish() : actor_id_(0), type_(( ::entity::BarModuleType::type)0) {
  }

  virtual ~EventBarFinish() throw() {}

  int64_t actor_id_;
   ::entity::BarModuleType::type type_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_type_(const  ::entity::BarModuleType::type val) {
    type_ = val;
  }

  bool operator == (const EventBarFinish & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(type_ == rhs.type_))
      return false;
    return true;
  }
  bool operator != (const EventBarFinish &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventBarFinish & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventBarFinish &a, EventBarFinish &b);

}}} // namespace

#endif
