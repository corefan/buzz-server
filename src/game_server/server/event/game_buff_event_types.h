/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef game_buff_event_TYPES_H
#define game_buff_event_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "entity_types.h"
#include "game_event_types.h"


namespace game { namespace server { namespace event {


class EventBuffStart {
 public:

  static const char* ascii_fingerprint; // = "FB4B1E9839AE4E3C2E1AD1C1ECC313EC";
  static const uint8_t binary_fingerprint[16]; // = {0xFB,0x4B,0x1E,0x98,0x39,0xAE,0x4E,0x3C,0x2E,0x1A,0xD1,0xC1,0xEC,0xC3,0x13,0xEC};

  EventBuffStart() : type_(( ::entity::EntityType::type)0), id_(0), buff_(0), stack_count_(0) {
  }

  virtual ~EventBuffStart() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
  int32_t buff_;
  int32_t stack_count_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_buff_(const int32_t val) {
    buff_ = val;
  }

  void __set_stack_count_(const int32_t val) {
    stack_count_ = val;
  }

  bool operator == (const EventBuffStart & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(buff_ == rhs.buff_))
      return false;
    if (!(stack_count_ == rhs.stack_count_))
      return false;
    return true;
  }
  bool operator != (const EventBuffStart &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventBuffStart & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventBuffStart &a, EventBuffStart &b);


class EventBuffEnd {
 public:

  static const char* ascii_fingerprint; // = "F86506F1C00011B1FAC6AB731E61400D";
  static const uint8_t binary_fingerprint[16]; // = {0xF8,0x65,0x06,0xF1,0xC0,0x00,0x11,0xB1,0xFA,0xC6,0xAB,0x73,0x1E,0x61,0x40,0x0D};

  EventBuffEnd() : type_(( ::entity::EntityType::type)0), id_(0), buff_(0) {
  }

  virtual ~EventBuffEnd() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
  int32_t buff_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_buff_(const int32_t val) {
    buff_ = val;
  }

  bool operator == (const EventBuffEnd & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(buff_ == rhs.buff_))
      return false;
    return true;
  }
  bool operator != (const EventBuffEnd &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventBuffEnd & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventBuffEnd &a, EventBuffEnd &b);

}}} // namespace

#endif
