/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef game_actor_event_TYPES_H
#define game_actor_event_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "game_event_types.h"
#include "actor_types.h"
#include "vip_types.h"
#include "resource_types.h"
#include "npc_types.h"


namespace game { namespace server { namespace event {


class EventActorLogin {
 public:

  static const char* ascii_fingerprint; // = "8E514869C1ECFE7F614E474CF68AE5A3";
  static const uint8_t binary_fingerprint[16]; // = {0x8E,0x51,0x48,0x69,0xC1,0xEC,0xFE,0x7F,0x61,0x4E,0x47,0x4C,0xF6,0x8A,0xE5,0xA3};

  EventActorLogin() : id_(0), map_(0), x_(0), y_(0) {
  }

  virtual ~EventActorLogin() throw() {}

  int64_t id_;
  int16_t map_;
  int32_t x_;
  int32_t y_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_map_(const int16_t val) {
    map_ = val;
  }

  void __set_x_(const int32_t val) {
    x_ = val;
  }

  void __set_y_(const int32_t val) {
    y_ = val;
  }

  bool operator == (const EventActorLogin & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(map_ == rhs.map_))
      return false;
    if (!(x_ == rhs.x_))
      return false;
    if (!(y_ == rhs.y_))
      return false;
    return true;
  }
  bool operator != (const EventActorLogin &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventActorLogin & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventActorLogin &a, EventActorLogin &b);


class EventActorLogout {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  EventActorLogout() : id_(0) {
  }

  virtual ~EventActorLogout() throw() {}

  int64_t id_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  bool operator == (const EventActorLogout & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const EventActorLogout &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventActorLogout & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventActorLogout &a, EventActorLogout &b);


class EventActorSave {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  EventActorSave() : id_(0) {
  }

  virtual ~EventActorSave() throw() {}

  int64_t id_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  bool operator == (const EventActorSave & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const EventActorSave &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventActorSave & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventActorSave &a, EventActorSave &b);


class EventActorExtensionLoadFinish {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  EventActorExtensionLoadFinish() : id_(0), extension_type_(0) {
  }

  virtual ~EventActorExtensionLoadFinish() throw() {}

  int64_t id_;
  int32_t extension_type_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_extension_type_(const int32_t val) {
    extension_type_ = val;
  }

  bool operator == (const EventActorExtensionLoadFinish & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(extension_type_ == rhs.extension_type_))
      return false;
    return true;
  }
  bool operator != (const EventActorExtensionLoadFinish &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventActorExtensionLoadFinish & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventActorExtensionLoadFinish &a, EventActorExtensionLoadFinish &b);


class EventActorLoadFinish {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  EventActorLoadFinish() : id_(0) {
  }

  virtual ~EventActorLoadFinish() throw() {}

  int64_t id_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  bool operator == (const EventActorLoadFinish & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const EventActorLoadFinish &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventActorLoadFinish & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventActorLoadFinish &a, EventActorLoadFinish &b);

typedef struct _EventActorDailyClean__isset {
  _EventActorDailyClean__isset() : actor_(false), days_(false) {}
  bool actor_;
  bool days_;
} _EventActorDailyClean__isset;

class EventActorDailyClean {
 public:

  static const char* ascii_fingerprint; // = "831B71D03795B84A94D50E14E5813FEC";
  static const uint8_t binary_fingerprint[16]; // = {0x83,0x1B,0x71,0xD0,0x37,0x95,0xB8,0x4A,0x94,0xD5,0x0E,0x14,0xE5,0x81,0x3F,0xEC};

  EventActorDailyClean() : actor_(0), days_(0) {
  }

  virtual ~EventActorDailyClean() throw() {}

  int64_t actor_;
  int32_t days_;

  _EventActorDailyClean__isset __isset;

  void __set_actor_(const int64_t val) {
    actor_ = val;
    __isset.actor_ = true;
  }

  void __set_days_(const int32_t val) {
    days_ = val;
    __isset.days_ = true;
  }

  bool operator == (const EventActorDailyClean & rhs) const
  {
    if (__isset.actor_ != rhs.__isset.actor_)
      return false;
    else if (__isset.actor_ && !(actor_ == rhs.actor_))
      return false;
    if (__isset.days_ != rhs.__isset.days_)
      return false;
    else if (__isset.days_ && !(days_ == rhs.days_))
      return false;
    return true;
  }
  bool operator != (const EventActorDailyClean &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventActorDailyClean & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventActorDailyClean &a, EventActorDailyClean &b);

typedef struct _EventActorWeeklyClean__isset {
  _EventActorWeeklyClean__isset() : actor_(false) {}
  bool actor_;
} _EventActorWeeklyClean__isset;

class EventActorWeeklyClean {
 public:

  static const char* ascii_fingerprint; // = "148F3AAAC1D9859963D5E800D187BF26";
  static const uint8_t binary_fingerprint[16]; // = {0x14,0x8F,0x3A,0xAA,0xC1,0xD9,0x85,0x99,0x63,0xD5,0xE8,0x00,0xD1,0x87,0xBF,0x26};

  EventActorWeeklyClean() : actor_(0) {
  }

  virtual ~EventActorWeeklyClean() throw() {}

  int64_t actor_;

  _EventActorWeeklyClean__isset __isset;

  void __set_actor_(const int64_t val) {
    actor_ = val;
    __isset.actor_ = true;
  }

  bool operator == (const EventActorWeeklyClean & rhs) const
  {
    if (__isset.actor_ != rhs.__isset.actor_)
      return false;
    else if (__isset.actor_ && !(actor_ == rhs.actor_))
      return false;
    return true;
  }
  bool operator != (const EventActorWeeklyClean &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventActorWeeklyClean & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventActorWeeklyClean &a, EventActorWeeklyClean &b);

typedef struct _EventActorTalkNpc__isset {
  _EventActorTalkNpc__isset() : task_id_(true) {}
  bool task_id_;
} _EventActorTalkNpc__isset;

class EventActorTalkNpc {
 public:

  static const char* ascii_fingerprint; // = "3A5D9EF144819D78208E9623D8261200";
  static const uint8_t binary_fingerprint[16]; // = {0x3A,0x5D,0x9E,0xF1,0x44,0x81,0x9D,0x78,0x20,0x8E,0x96,0x23,0xD8,0x26,0x12,0x00};

  EventActorTalkNpc() : actor_id_(0), npc_id_(0), task_id_(0) {
  }

  virtual ~EventActorTalkNpc() throw() {}

  int64_t actor_id_;
  int32_t npc_id_;
  int32_t task_id_;

  _EventActorTalkNpc__isset __isset;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_npc_id_(const int32_t val) {
    npc_id_ = val;
  }

  void __set_task_id_(const int32_t val) {
    task_id_ = val;
    __isset.task_id_ = true;
  }

  bool operator == (const EventActorTalkNpc & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(npc_id_ == rhs.npc_id_))
      return false;
    if (__isset.task_id_ != rhs.__isset.task_id_)
      return false;
    else if (__isset.task_id_ && !(task_id_ == rhs.task_id_))
      return false;
    return true;
  }
  bool operator != (const EventActorTalkNpc &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventActorTalkNpc & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventActorTalkNpc &a, EventActorTalkNpc &b);


class EventActorLevelUp {
 public:

  static const char* ascii_fingerprint; // = "9C4E30169AD9E0914633984FE5C16314";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x4E,0x30,0x16,0x9A,0xD9,0xE0,0x91,0x46,0x33,0x98,0x4F,0xE5,0xC1,0x63,0x14};

  EventActorLevelUp() : actor_id_(0), old_level_(0), new_level_(0) {
  }

  virtual ~EventActorLevelUp() throw() {}

  int64_t actor_id_;
  int32_t old_level_;
  int32_t new_level_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_old_level_(const int32_t val) {
    old_level_ = val;
  }

  void __set_new_level_(const int32_t val) {
    new_level_ = val;
  }

  bool operator == (const EventActorLevelUp & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(old_level_ == rhs.old_level_))
      return false;
    if (!(new_level_ == rhs.new_level_))
      return false;
    return true;
  }
  bool operator != (const EventActorLevelUp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventActorLevelUp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventActorLevelUp &a, EventActorLevelUp &b);


class EventActorFunctionalityEnable {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  EventActorFunctionalityEnable() : actor_id_(0), functionality_id_(0) {
  }

  virtual ~EventActorFunctionalityEnable() throw() {}

  int64_t actor_id_;
  int32_t functionality_id_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_functionality_id_(const int32_t val) {
    functionality_id_ = val;
  }

  bool operator == (const EventActorFunctionalityEnable & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(functionality_id_ == rhs.functionality_id_))
      return false;
    return true;
  }
  bool operator != (const EventActorFunctionalityEnable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventActorFunctionalityEnable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventActorFunctionalityEnable &a, EventActorFunctionalityEnable &b);


class EventActorKillNpc {
 public:

  static const char* ascii_fingerprint; // = "94512D98B0477CE51874C80D3FC86E3E";
  static const uint8_t binary_fingerprint[16]; // = {0x94,0x51,0x2D,0x98,0xB0,0x47,0x7C,0xE5,0x18,0x74,0xC8,0x0D,0x3F,0xC8,0x6E,0x3E};

  EventActorKillNpc() : actor_(0), npc_(0), npc_template_(0), type_(( ::entity::NpcMobType::type)0), npc_level_(0) {
  }

  virtual ~EventActorKillNpc() throw() {}

  int64_t actor_;
  int64_t npc_;
  int32_t npc_template_;
   ::entity::NpcMobType::type type_;
  int32_t npc_level_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_npc_(const int64_t val) {
    npc_ = val;
  }

  void __set_npc_template_(const int32_t val) {
    npc_template_ = val;
  }

  void __set_type_(const  ::entity::NpcMobType::type val) {
    type_ = val;
  }

  void __set_npc_level_(const int32_t val) {
    npc_level_ = val;
  }

  bool operator == (const EventActorKillNpc & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(npc_ == rhs.npc_))
      return false;
    if (!(npc_template_ == rhs.npc_template_))
      return false;
    if (!(type_ == rhs.type_))
      return false;
    if (!(npc_level_ == rhs.npc_level_))
      return false;
    return true;
  }
  bool operator != (const EventActorKillNpc &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventActorKillNpc & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventActorKillNpc &a, EventActorKillNpc &b);


class EventActorCompare {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  EventActorCompare() : actor_(0), compare_actor_(0) {
  }

  virtual ~EventActorCompare() throw() {}

  int64_t actor_;
  int64_t compare_actor_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_compare_actor_(const int64_t val) {
    compare_actor_ = val;
  }

  bool operator == (const EventActorCompare & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(compare_actor_ == rhs.compare_actor_))
      return false;
    return true;
  }
  bool operator != (const EventActorCompare &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventActorCompare & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventActorCompare &a, EventActorCompare &b);


class EventActorVipChange {
 public:

  static const char* ascii_fingerprint; // = "5CE29A28EF007283753847D663D38BF1";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0xE2,0x9A,0x28,0xEF,0x00,0x72,0x83,0x75,0x38,0x47,0xD6,0x63,0xD3,0x8B,0xF1};

  EventActorVipChange() : actor_(0), old_type_(( ::entity::VipType::type)0), new_type_(( ::entity::VipType::type)0) {
  }

  virtual ~EventActorVipChange() throw() {}

  int64_t actor_;
   ::entity::VipType::type old_type_;
   ::entity::VipType::type new_type_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_old_type_(const  ::entity::VipType::type val) {
    old_type_ = val;
  }

  void __set_new_type_(const  ::entity::VipType::type val) {
    new_type_ = val;
  }

  bool operator == (const EventActorVipChange & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(old_type_ == rhs.old_type_))
      return false;
    if (!(new_type_ == rhs.new_type_))
      return false;
    return true;
  }
  bool operator != (const EventActorVipChange &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventActorVipChange & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventActorVipChange &a, EventActorVipChange &b);


class EventActorResourceChange {
 public:

  static const char* ascii_fingerprint; // = "F9FD8E4838A319D74043CA8A3E235319";
  static const uint8_t binary_fingerprint[16]; // = {0xF9,0xFD,0x8E,0x48,0x38,0xA3,0x19,0xD7,0x40,0x43,0xCA,0x8A,0x3E,0x23,0x53,0x19};

  EventActorResourceChange() : actor_(0), type_(( ::entity::ResourceID::type)0), old_num_(0), new_num_(0) {
  }

  virtual ~EventActorResourceChange() throw() {}

  int64_t actor_;
   ::entity::ResourceID::type type_;
  int32_t old_num_;
  int32_t new_num_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_type_(const  ::entity::ResourceID::type val) {
    type_ = val;
  }

  void __set_old_num_(const int32_t val) {
    old_num_ = val;
  }

  void __set_new_num_(const int32_t val) {
    new_num_ = val;
  }

  bool operator == (const EventActorResourceChange & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(type_ == rhs.type_))
      return false;
    if (!(old_num_ == rhs.old_num_))
      return false;
    if (!(new_num_ == rhs.new_num_))
      return false;
    return true;
  }
  bool operator != (const EventActorResourceChange &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventActorResourceChange & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventActorResourceChange &a, EventActorResourceChange &b);


class EventActorRelive {
 public:

  static const char* ascii_fingerprint; // = "DFA40D9D2884599F3D1E7A57578F1384";
  static const uint8_t binary_fingerprint[16]; // = {0xDF,0xA4,0x0D,0x9D,0x28,0x84,0x59,0x9F,0x3D,0x1E,0x7A,0x57,0x57,0x8F,0x13,0x84};

  EventActorRelive() : actor_(0), type_(( ::entity::ReviveType::type)0) {
  }

  virtual ~EventActorRelive() throw() {}

  int64_t actor_;
   ::entity::ReviveType::type type_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_type_(const  ::entity::ReviveType::type val) {
    type_ = val;
  }

  bool operator == (const EventActorRelive & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(type_ == rhs.type_))
      return false;
    return true;
  }
  bool operator != (const EventActorRelive &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventActorRelive & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventActorRelive &a, EventActorRelive &b);


class EventActorFcmStatusChange {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  EventActorFcmStatusChange() : actor_(0) {
  }

  virtual ~EventActorFcmStatusChange() throw() {}

  int64_t actor_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  bool operator == (const EventActorFcmStatusChange & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    return true;
  }
  bool operator != (const EventActorFcmStatusChange &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventActorFcmStatusChange & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventActorFcmStatusChange &a, EventActorFcmStatusChange &b);

}}} // namespace

#endif
