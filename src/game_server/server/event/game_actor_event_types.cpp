/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "game_actor_event_types.h"

#include <algorithm>

namespace game { namespace server { namespace event {

const char* EventActorLogin::ascii_fingerprint = "8E514869C1ECFE7F614E474CF68AE5A3";
const uint8_t EventActorLogin::binary_fingerprint[16] = {0x8E,0x51,0x48,0x69,0xC1,0xEC,0xFE,0x7F,0x61,0x4E,0x47,0x4C,0xF6,0x8A,0xE5,0xA3};

uint32_t EventActorLogin::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;
  bool isset_map_ = false;
  bool isset_x_ = false;
  bool isset_y_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->map_);
          isset_map_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->x_);
          isset_x_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->y_);
          isset_y_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_map_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_x_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_y_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventActorLogin::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventActorLogin");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("map_", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->map_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->x_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->y_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventActorLogin &a, EventActorLogin &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.map_, b.map_);
  swap(a.x_, b.x_);
  swap(a.y_, b.y_);
}

const char* EventActorLogout::ascii_fingerprint = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
const uint8_t EventActorLogout::binary_fingerprint[16] = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

uint32_t EventActorLogout::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventActorLogout::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventActorLogout");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventActorLogout &a, EventActorLogout &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
}

const char* EventActorSave::ascii_fingerprint = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
const uint8_t EventActorSave::binary_fingerprint[16] = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

uint32_t EventActorSave::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventActorSave::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventActorSave");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventActorSave &a, EventActorSave &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
}

const char* EventActorExtensionLoadFinish::ascii_fingerprint = "AFAFBCDB9822F9D1AA4E44188E720B47";
const uint8_t EventActorExtensionLoadFinish::binary_fingerprint[16] = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

uint32_t EventActorExtensionLoadFinish::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;
  bool isset_extension_type_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->extension_type_);
          isset_extension_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_extension_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventActorExtensionLoadFinish::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventActorExtensionLoadFinish");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("extension_type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->extension_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventActorExtensionLoadFinish &a, EventActorExtensionLoadFinish &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.extension_type_, b.extension_type_);
}

const char* EventActorLoadFinish::ascii_fingerprint = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
const uint8_t EventActorLoadFinish::binary_fingerprint[16] = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

uint32_t EventActorLoadFinish::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventActorLoadFinish::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventActorLoadFinish");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventActorLoadFinish &a, EventActorLoadFinish &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
}

const char* EventActorDailyClean::ascii_fingerprint = "831B71D03795B84A94D50E14E5813FEC";
const uint8_t EventActorDailyClean::binary_fingerprint[16] = {0x83,0x1B,0x71,0xD0,0x37,0x95,0xB8,0x4A,0x94,0xD5,0x0E,0x14,0xE5,0x81,0x3F,0xEC};

uint32_t EventActorDailyClean::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          this->__isset.actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->days_);
          this->__isset.days_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EventActorDailyClean::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventActorDailyClean");

  if (this->__isset.actor_) {
    xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->actor_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.days_) {
    xfer += oprot->writeFieldBegin("days_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->days_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventActorDailyClean &a, EventActorDailyClean &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.days_, b.days_);
  swap(a.__isset, b.__isset);
}

const char* EventActorWeeklyClean::ascii_fingerprint = "148F3AAAC1D9859963D5E800D187BF26";
const uint8_t EventActorWeeklyClean::binary_fingerprint[16] = {0x14,0x8F,0x3A,0xAA,0xC1,0xD9,0x85,0x99,0x63,0xD5,0xE8,0x00,0xD1,0x87,0xBF,0x26};

uint32_t EventActorWeeklyClean::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          this->__isset.actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EventActorWeeklyClean::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventActorWeeklyClean");

  if (this->__isset.actor_) {
    xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->actor_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventActorWeeklyClean &a, EventActorWeeklyClean &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.__isset, b.__isset);
}

const char* EventActorTalkNpc::ascii_fingerprint = "3A5D9EF144819D78208E9623D8261200";
const uint8_t EventActorTalkNpc::binary_fingerprint[16] = {0x3A,0x5D,0x9E,0xF1,0x44,0x81,0x9D,0x78,0x20,0x8E,0x96,0x23,0xD8,0x26,0x12,0x00};

uint32_t EventActorTalkNpc::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_npc_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->npc_id_);
          isset_npc_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->task_id_);
          this->__isset.task_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_npc_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventActorTalkNpc::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventActorTalkNpc");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("npc_id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->npc_id_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.task_id_) {
    xfer += oprot->writeFieldBegin("task_id_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->task_id_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventActorTalkNpc &a, EventActorTalkNpc &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.npc_id_, b.npc_id_);
  swap(a.task_id_, b.task_id_);
  swap(a.__isset, b.__isset);
}

const char* EventActorLevelUp::ascii_fingerprint = "9C4E30169AD9E0914633984FE5C16314";
const uint8_t EventActorLevelUp::binary_fingerprint[16] = {0x9C,0x4E,0x30,0x16,0x9A,0xD9,0xE0,0x91,0x46,0x33,0x98,0x4F,0xE5,0xC1,0x63,0x14};

uint32_t EventActorLevelUp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_old_level_ = false;
  bool isset_new_level_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->old_level_);
          isset_old_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->new_level_);
          isset_new_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_old_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_new_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventActorLevelUp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventActorLevelUp");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("old_level_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->old_level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("new_level_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->new_level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventActorLevelUp &a, EventActorLevelUp &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.old_level_, b.old_level_);
  swap(a.new_level_, b.new_level_);
}

const char* EventActorFunctionalityEnable::ascii_fingerprint = "AFAFBCDB9822F9D1AA4E44188E720B47";
const uint8_t EventActorFunctionalityEnable::binary_fingerprint[16] = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

uint32_t EventActorFunctionalityEnable::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_functionality_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->functionality_id_);
          isset_functionality_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_functionality_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventActorFunctionalityEnable::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventActorFunctionalityEnable");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("functionality_id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->functionality_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventActorFunctionalityEnable &a, EventActorFunctionalityEnable &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.functionality_id_, b.functionality_id_);
}

const char* EventActorKillNpc::ascii_fingerprint = "94512D98B0477CE51874C80D3FC86E3E";
const uint8_t EventActorKillNpc::binary_fingerprint[16] = {0x94,0x51,0x2D,0x98,0xB0,0x47,0x7C,0xE5,0x18,0x74,0xC8,0x0D,0x3F,0xC8,0x6E,0x3E};

uint32_t EventActorKillNpc::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_npc_ = false;
  bool isset_npc_template_ = false;
  bool isset_type_ = false;
  bool isset_npc_level_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->npc_);
          isset_npc_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->npc_template_);
          isset_npc_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type_ = ( ::entity::NpcMobType::type)ecast0;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->npc_level_);
          isset_npc_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_npc_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_npc_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_npc_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventActorKillNpc::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventActorKillNpc");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("npc_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->npc_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("npc_template_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->npc_template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("npc_level_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->npc_level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventActorKillNpc &a, EventActorKillNpc &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.npc_, b.npc_);
  swap(a.npc_template_, b.npc_template_);
  swap(a.type_, b.type_);
  swap(a.npc_level_, b.npc_level_);
}

const char* EventActorCompare::ascii_fingerprint = "F33135321253DAEB67B0E79E416CA831";
const uint8_t EventActorCompare::binary_fingerprint[16] = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

uint32_t EventActorCompare::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_compare_actor_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->compare_actor_);
          isset_compare_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_compare_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventActorCompare::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventActorCompare");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("compare_actor_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->compare_actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventActorCompare &a, EventActorCompare &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.compare_actor_, b.compare_actor_);
}

const char* EventActorVipChange::ascii_fingerprint = "5CE29A28EF007283753847D663D38BF1";
const uint8_t EventActorVipChange::binary_fingerprint[16] = {0x5C,0xE2,0x9A,0x28,0xEF,0x00,0x72,0x83,0x75,0x38,0x47,0xD6,0x63,0xD3,0x8B,0xF1};

uint32_t EventActorVipChange::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_old_type_ = false;
  bool isset_new_type_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->old_type_ = ( ::entity::VipType::type)ecast1;
          isset_old_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->new_type_ = ( ::entity::VipType::type)ecast2;
          isset_new_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_old_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_new_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventActorVipChange::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventActorVipChange");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("old_type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->old_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("new_type_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->new_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventActorVipChange &a, EventActorVipChange &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.old_type_, b.old_type_);
  swap(a.new_type_, b.new_type_);
}

const char* EventActorResourceChange::ascii_fingerprint = "F9FD8E4838A319D74043CA8A3E235319";
const uint8_t EventActorResourceChange::binary_fingerprint[16] = {0xF9,0xFD,0x8E,0x48,0x38,0xA3,0x19,0xD7,0x40,0x43,0xCA,0x8A,0x3E,0x23,0x53,0x19};

uint32_t EventActorResourceChange::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_type_ = false;
  bool isset_old_num_ = false;
  bool isset_new_num_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->type_ = ( ::entity::ResourceID::type)ecast3;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->old_num_);
          isset_old_num_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->new_num_);
          isset_new_num_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_old_num_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_new_num_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventActorResourceChange::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventActorResourceChange");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("old_num_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->old_num_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("new_num_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->new_num_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventActorResourceChange &a, EventActorResourceChange &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.type_, b.type_);
  swap(a.old_num_, b.old_num_);
  swap(a.new_num_, b.new_num_);
}

const char* EventActorRelive::ascii_fingerprint = "DFA40D9D2884599F3D1E7A57578F1384";
const uint8_t EventActorRelive::binary_fingerprint[16] = {0xDF,0xA4,0x0D,0x9D,0x28,0x84,0x59,0x9F,0x3D,0x1E,0x7A,0x57,0x57,0x8F,0x13,0x84};

uint32_t EventActorRelive::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_type_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast4;
          xfer += iprot->readI32(ecast4);
          this->type_ = ( ::entity::ReviveType::type)ecast4;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventActorRelive::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventActorRelive");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventActorRelive &a, EventActorRelive &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.type_, b.type_);
}

const char* EventActorFcmStatusChange::ascii_fingerprint = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
const uint8_t EventActorFcmStatusChange::binary_fingerprint[16] = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

uint32_t EventActorFcmStatusChange::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventActorFcmStatusChange::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventActorFcmStatusChange");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventActorFcmStatusChange &a, EventActorFcmStatusChange &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
}

}}} // namespace
