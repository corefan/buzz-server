/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef game_social_event_TYPES_H
#define game_social_event_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "entity_types.h"
#include "game_event_types.h"


namespace game { namespace server { namespace event {


class EventSocialHomeLandBattleStrike {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  EventSocialHomeLandBattleStrike() : actor_(0) {
  }

  virtual ~EventSocialHomeLandBattleStrike() throw() {}

  int64_t actor_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  bool operator == (const EventSocialHomeLandBattleStrike & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    return true;
  }
  bool operator != (const EventSocialHomeLandBattleStrike &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventSocialHomeLandBattleStrike & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventSocialHomeLandBattleStrike &a, EventSocialHomeLandBattleStrike &b);


class EventSocialHomeLandTreeWater {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  EventSocialHomeLandTreeWater() : id_(0), watered_id_(0) {
  }

  virtual ~EventSocialHomeLandTreeWater() throw() {}

  int64_t id_;
  int64_t watered_id_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_watered_id_(const int64_t val) {
    watered_id_ = val;
  }

  bool operator == (const EventSocialHomeLandTreeWater & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(watered_id_ == rhs.watered_id_))
      return false;
    return true;
  }
  bool operator != (const EventSocialHomeLandTreeWater &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventSocialHomeLandTreeWater & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventSocialHomeLandTreeWater &a, EventSocialHomeLandTreeWater &b);

}}} // namespace

#endif
