/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef game_task_event_TYPES_H
#define game_task_event_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "task_types.h"


namespace game { namespace server { namespace event {


class EventTaskFinish {
 public:

  static const char* ascii_fingerprint; // = "1436097DE98403ECF290FF7F19A88437";
  static const uint8_t binary_fingerprint[16]; // = {0x14,0x36,0x09,0x7D,0xE9,0x84,0x03,0xEC,0xF2,0x90,0xFF,0x7F,0x19,0xA8,0x84,0x37};

  EventTaskFinish() : actor_id_(0), task_id_(0), type_(( ::entity::TaskType::type)0) {
  }

  virtual ~EventTaskFinish() throw() {}

  int64_t actor_id_;
  int32_t task_id_;
   ::entity::TaskType::type type_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_task_id_(const int32_t val) {
    task_id_ = val;
  }

  void __set_type_(const  ::entity::TaskType::type val) {
    type_ = val;
  }

  bool operator == (const EventTaskFinish & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(task_id_ == rhs.task_id_))
      return false;
    if (!(type_ == rhs.type_))
      return false;
    return true;
  }
  bool operator != (const EventTaskFinish &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventTaskFinish & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventTaskFinish &a, EventTaskFinish &b);


class EventTaskAccept {
 public:

  static const char* ascii_fingerprint; // = "1436097DE98403ECF290FF7F19A88437";
  static const uint8_t binary_fingerprint[16]; // = {0x14,0x36,0x09,0x7D,0xE9,0x84,0x03,0xEC,0xF2,0x90,0xFF,0x7F,0x19,0xA8,0x84,0x37};

  EventTaskAccept() : actor_id_(0), task_id_(0), type_(( ::entity::TaskType::type)0) {
  }

  virtual ~EventTaskAccept() throw() {}

  int64_t actor_id_;
  int32_t task_id_;
   ::entity::TaskType::type type_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_task_id_(const int32_t val) {
    task_id_ = val;
  }

  void __set_type_(const  ::entity::TaskType::type val) {
    type_ = val;
  }

  bool operator == (const EventTaskAccept & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(task_id_ == rhs.task_id_))
      return false;
    if (!(type_ == rhs.type_))
      return false;
    return true;
  }
  bool operator != (const EventTaskAccept &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventTaskAccept & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventTaskAccept &a, EventTaskAccept &b);

}}} // namespace

#endif
