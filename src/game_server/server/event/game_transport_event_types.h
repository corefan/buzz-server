/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef game_transport_event_TYPES_H
#define game_transport_event_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace game { namespace server { namespace event {

typedef struct _EventTransportFailure__isset {
  _EventTransportFailure__isset() : rob_actor_(false) {}
  bool rob_actor_;
} _EventTransportFailure__isset;

class EventTransportFailure {
 public:

  static const char* ascii_fingerprint; // = "127CA201228927544DE1E565473E4836";
  static const uint8_t binary_fingerprint[16]; // = {0x12,0x7C,0xA2,0x01,0x22,0x89,0x27,0x54,0x4D,0xE1,0xE5,0x65,0x47,0x3E,0x48,0x36};

  EventTransportFailure() : actor_(0), rob_actor_(0) {
  }

  virtual ~EventTransportFailure() throw() {}

  int64_t actor_;
  int64_t rob_actor_;

  _EventTransportFailure__isset __isset;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_rob_actor_(const int64_t val) {
    rob_actor_ = val;
    __isset.rob_actor_ = true;
  }

  bool operator == (const EventTransportFailure & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (__isset.rob_actor_ != rhs.__isset.rob_actor_)
      return false;
    else if (__isset.rob_actor_ && !(rob_actor_ == rhs.rob_actor_))
      return false;
    return true;
  }
  bool operator != (const EventTransportFailure &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventTransportFailure & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventTransportFailure &a, EventTransportFailure &b);

}}} // namespace

#endif
