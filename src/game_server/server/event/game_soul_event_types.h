/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef game_soul_event_TYPES_H
#define game_soul_event_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "game_event_types.h"


namespace game { namespace server { namespace event {


class EventSoulAdd {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  EventSoulAdd() : actor_(0), soul_(0) {
  }

  virtual ~EventSoulAdd() throw() {}

  int64_t actor_;
  int32_t soul_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_soul_(const int32_t val) {
    soul_ = val;
  }

  bool operator == (const EventSoulAdd & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(soul_ == rhs.soul_))
      return false;
    return true;
  }
  bool operator != (const EventSoulAdd &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventSoulAdd & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventSoulAdd &a, EventSoulAdd &b);


class EventSoulSet {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  EventSoulSet() : actor_(0), soul_(0) {
  }

  virtual ~EventSoulSet() throw() {}

  int64_t actor_;
  int32_t soul_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_soul_(const int32_t val) {
    soul_ = val;
  }

  bool operator == (const EventSoulSet & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(soul_ == rhs.soul_))
      return false;
    return true;
  }
  bool operator != (const EventSoulSet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventSoulSet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventSoulSet &a, EventSoulSet &b);


class EventSoulUpgradeStep {
 public:

  static const char* ascii_fingerprint; // = "9C4E30169AD9E0914633984FE5C16314";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x4E,0x30,0x16,0x9A,0xD9,0xE0,0x91,0x46,0x33,0x98,0x4F,0xE5,0xC1,0x63,0x14};

  EventSoulUpgradeStep() : actor_(0), soul_(0), step_(0) {
  }

  virtual ~EventSoulUpgradeStep() throw() {}

  int64_t actor_;
  int32_t soul_;
  int32_t step_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_soul_(const int32_t val) {
    soul_ = val;
  }

  void __set_step_(const int32_t val) {
    step_ = val;
  }

  bool operator == (const EventSoulUpgradeStep & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(soul_ == rhs.soul_))
      return false;
    if (!(step_ == rhs.step_))
      return false;
    return true;
  }
  bool operator != (const EventSoulUpgradeStep &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventSoulUpgradeStep & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventSoulUpgradeStep &a, EventSoulUpgradeStep &b);


class EventSoulUpgradeLevel {
 public:

  static const char* ascii_fingerprint; // = "9C4E30169AD9E0914633984FE5C16314";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x4E,0x30,0x16,0x9A,0xD9,0xE0,0x91,0x46,0x33,0x98,0x4F,0xE5,0xC1,0x63,0x14};

  EventSoulUpgradeLevel() : actor_(0), soul_(0), level_(0) {
  }

  virtual ~EventSoulUpgradeLevel() throw() {}

  int64_t actor_;
  int32_t soul_;
  int32_t level_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_soul_(const int32_t val) {
    soul_ = val;
  }

  void __set_level_(const int32_t val) {
    level_ = val;
  }

  bool operator == (const EventSoulUpgradeLevel & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(soul_ == rhs.soul_))
      return false;
    if (!(level_ == rhs.level_))
      return false;
    return true;
  }
  bool operator != (const EventSoulUpgradeLevel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventSoulUpgradeLevel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventSoulUpgradeLevel &a, EventSoulUpgradeLevel &b);

}}} // namespace

#endif
