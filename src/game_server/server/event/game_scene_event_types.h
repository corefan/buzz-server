/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef game_scene_event_TYPES_H
#define game_scene_event_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "entity_types.h"
#include "game_event_types.h"


namespace game { namespace server { namespace event {


class EventSceneBroadcastCreateRole {
 public:

  static const char* ascii_fingerprint; // = "504072AAD822AA6071017C57066A9473";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0x40,0x72,0xAA,0xD8,0x22,0xAA,0x60,0x71,0x01,0x7C,0x57,0x06,0x6A,0x94,0x73};

  EventSceneBroadcastCreateRole() : type_(( ::entity::EntityType::type)0), id_(0) {
  }

  virtual ~EventSceneBroadcastCreateRole() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
  std::vector<int64_t>  actors_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_actors_(const std::vector<int64_t> & val) {
    actors_ = val;
  }

  bool operator == (const EventSceneBroadcastCreateRole & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(actors_ == rhs.actors_))
      return false;
    return true;
  }
  bool operator != (const EventSceneBroadcastCreateRole &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventSceneBroadcastCreateRole & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventSceneBroadcastCreateRole &a, EventSceneBroadcastCreateRole &b);


class SceneRolePair {
 public:

  static const char* ascii_fingerprint; // = "6E7DD25E88B43484CFC93FCB15DCA1AF";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0x7D,0xD2,0x5E,0x88,0xB4,0x34,0x84,0xCF,0xC9,0x3F,0xCB,0x15,0xDC,0xA1,0xAF};

  SceneRolePair() : type_(( ::entity::EntityType::type)0), id_(0) {
  }

  virtual ~SceneRolePair() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  bool operator == (const SceneRolePair & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const SceneRolePair &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SceneRolePair & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SceneRolePair &a, SceneRolePair &b);


class EventSceneCreateAoiRoles {
 public:

  static const char* ascii_fingerprint; // = "DDCB5019D2C21D870720D6E9535D85EA";
  static const uint8_t binary_fingerprint[16]; // = {0xDD,0xCB,0x50,0x19,0xD2,0xC2,0x1D,0x87,0x07,0x20,0xD6,0xE9,0x53,0x5D,0x85,0xEA};

  EventSceneCreateAoiRoles() : actor_(0) {
  }

  virtual ~EventSceneCreateAoiRoles() throw() {}

  std::vector<SceneRolePair>  roles_;
  int64_t actor_;

  void __set_roles_(const std::vector<SceneRolePair> & val) {
    roles_ = val;
  }

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  bool operator == (const EventSceneCreateAoiRoles & rhs) const
  {
    if (!(roles_ == rhs.roles_))
      return false;
    if (!(actor_ == rhs.actor_))
      return false;
    return true;
  }
  bool operator != (const EventSceneCreateAoiRoles &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventSceneCreateAoiRoles & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventSceneCreateAoiRoles &a, EventSceneCreateAoiRoles &b);


class EventSceneRoleComing {
 public:

  static const char* ascii_fingerprint; // = "79B9F4DDD97C8B0F24FC57177DEF0AE2";
  static const uint8_t binary_fingerprint[16]; // = {0x79,0xB9,0xF4,0xDD,0xD9,0x7C,0x8B,0x0F,0x24,0xFC,0x57,0x17,0x7D,0xEF,0x0A,0xE2};

  EventSceneRoleComing() : type_(( ::entity::EntityType::type)0), id_(0) {
  }

  virtual ~EventSceneRoleComing() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
  std::vector<SceneRolePair>  roles_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_roles_(const std::vector<SceneRolePair> & val) {
    roles_ = val;
  }

  bool operator == (const EventSceneRoleComing & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(roles_ == rhs.roles_))
      return false;
    return true;
  }
  bool operator != (const EventSceneRoleComing &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventSceneRoleComing & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventSceneRoleComing &a, EventSceneRoleComing &b);


class EventSceneRoleLeaving {
 public:

  static const char* ascii_fingerprint; // = "79B9F4DDD97C8B0F24FC57177DEF0AE2";
  static const uint8_t binary_fingerprint[16]; // = {0x79,0xB9,0xF4,0xDD,0xD9,0x7C,0x8B,0x0F,0x24,0xFC,0x57,0x17,0x7D,0xEF,0x0A,0xE2};

  EventSceneRoleLeaving() : type_(( ::entity::EntityType::type)0), id_(0) {
  }

  virtual ~EventSceneRoleLeaving() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
  std::vector<SceneRolePair>  roles_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_roles_(const std::vector<SceneRolePair> & val) {
    roles_ = val;
  }

  bool operator == (const EventSceneRoleLeaving & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(roles_ == rhs.roles_))
      return false;
    return true;
  }
  bool operator != (const EventSceneRoleLeaving &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventSceneRoleLeaving & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventSceneRoleLeaving &a, EventSceneRoleLeaving &b);


class EventSceneRoleChangeLocation {
 public:

  static const char* ascii_fingerprint; // = "7039E9DA216F6674F49D39AC0E7480DE";
  static const uint8_t binary_fingerprint[16]; // = {0x70,0x39,0xE9,0xDA,0x21,0x6F,0x66,0x74,0xF4,0x9D,0x39,0xAC,0x0E,0x74,0x80,0xDE};

  EventSceneRoleChangeLocation() : type_(( ::entity::EntityType::type)0), id_(0), src_scene_(0), src_x_(0), src_y_(0), dest_scene_(0), dest_x_(0), dest_y_(0) {
  }

  virtual ~EventSceneRoleChangeLocation() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
  int64_t src_scene_;
  int32_t src_x_;
  int32_t src_y_;
  int64_t dest_scene_;
  int32_t dest_x_;
  int32_t dest_y_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_src_scene_(const int64_t val) {
    src_scene_ = val;
  }

  void __set_src_x_(const int32_t val) {
    src_x_ = val;
  }

  void __set_src_y_(const int32_t val) {
    src_y_ = val;
  }

  void __set_dest_scene_(const int64_t val) {
    dest_scene_ = val;
  }

  void __set_dest_x_(const int32_t val) {
    dest_x_ = val;
  }

  void __set_dest_y_(const int32_t val) {
    dest_y_ = val;
  }

  bool operator == (const EventSceneRoleChangeLocation & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(src_scene_ == rhs.src_scene_))
      return false;
    if (!(src_x_ == rhs.src_x_))
      return false;
    if (!(src_y_ == rhs.src_y_))
      return false;
    if (!(dest_scene_ == rhs.dest_scene_))
      return false;
    if (!(dest_x_ == rhs.dest_x_))
      return false;
    if (!(dest_y_ == rhs.dest_y_))
      return false;
    return true;
  }
  bool operator != (const EventSceneRoleChangeLocation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventSceneRoleChangeLocation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventSceneRoleChangeLocation &a, EventSceneRoleChangeLocation &b);


class EventSceneJumpMap {
 public:

  static const char* ascii_fingerprint; // = "8DE584F4CE5BDFCF32B8129BDA46B7DF";
  static const uint8_t binary_fingerprint[16]; // = {0x8D,0xE5,0x84,0xF4,0xCE,0x5B,0xDF,0xCF,0x32,0xB8,0x12,0x9B,0xDA,0x46,0xB7,0xDF};

  EventSceneJumpMap() : type_(( ::entity::EntityType::type)0), id_(0), src_scene_(0), dest_scene_(0), dest_x_(0), dest_y_(0) {
  }

  virtual ~EventSceneJumpMap() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
  int64_t src_scene_;
  int64_t dest_scene_;
  int32_t dest_x_;
  int32_t dest_y_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_src_scene_(const int64_t val) {
    src_scene_ = val;
  }

  void __set_dest_scene_(const int64_t val) {
    dest_scene_ = val;
  }

  void __set_dest_x_(const int32_t val) {
    dest_x_ = val;
  }

  void __set_dest_y_(const int32_t val) {
    dest_y_ = val;
  }

  bool operator == (const EventSceneJumpMap & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(src_scene_ == rhs.src_scene_))
      return false;
    if (!(dest_scene_ == rhs.dest_scene_))
      return false;
    if (!(dest_x_ == rhs.dest_x_))
      return false;
    if (!(dest_y_ == rhs.dest_y_))
      return false;
    return true;
  }
  bool operator != (const EventSceneJumpMap &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventSceneJumpMap & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventSceneJumpMap &a, EventSceneJumpMap &b);


class EventSceneGather {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  EventSceneGather() : npc_template_id_(0), id_(0) {
  }

  virtual ~EventSceneGather() throw() {}

  int64_t npc_template_id_;
  int64_t id_;

  void __set_npc_template_id_(const int64_t val) {
    npc_template_id_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  bool operator == (const EventSceneGather & rhs) const
  {
    if (!(npc_template_id_ == rhs.npc_template_id_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const EventSceneGather &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventSceneGather & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventSceneGather &a, EventSceneGather &b);

}}} // namespace

#endif
