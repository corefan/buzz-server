/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "game_soul_event_types.h"

#include <algorithm>

namespace game { namespace server { namespace event {

const char* EventSoulAdd::ascii_fingerprint = "AFAFBCDB9822F9D1AA4E44188E720B47";
const uint8_t EventSoulAdd::binary_fingerprint[16] = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

uint32_t EventSoulAdd::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_soul_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->soul_);
          isset_soul_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_soul_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventSoulAdd::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventSoulAdd");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("soul_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->soul_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventSoulAdd &a, EventSoulAdd &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.soul_, b.soul_);
}

const char* EventSoulSet::ascii_fingerprint = "AFAFBCDB9822F9D1AA4E44188E720B47";
const uint8_t EventSoulSet::binary_fingerprint[16] = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

uint32_t EventSoulSet::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_soul_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->soul_);
          isset_soul_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_soul_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventSoulSet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventSoulSet");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("soul_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->soul_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventSoulSet &a, EventSoulSet &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.soul_, b.soul_);
}

const char* EventSoulUpgradeStep::ascii_fingerprint = "9C4E30169AD9E0914633984FE5C16314";
const uint8_t EventSoulUpgradeStep::binary_fingerprint[16] = {0x9C,0x4E,0x30,0x16,0x9A,0xD9,0xE0,0x91,0x46,0x33,0x98,0x4F,0xE5,0xC1,0x63,0x14};

uint32_t EventSoulUpgradeStep::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_soul_ = false;
  bool isset_step_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->soul_);
          isset_soul_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->step_);
          isset_step_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_soul_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_step_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventSoulUpgradeStep::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventSoulUpgradeStep");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("soul_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->soul_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("step_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->step_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventSoulUpgradeStep &a, EventSoulUpgradeStep &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.soul_, b.soul_);
  swap(a.step_, b.step_);
}

const char* EventSoulUpgradeLevel::ascii_fingerprint = "9C4E30169AD9E0914633984FE5C16314";
const uint8_t EventSoulUpgradeLevel::binary_fingerprint[16] = {0x9C,0x4E,0x30,0x16,0x9A,0xD9,0xE0,0x91,0x46,0x33,0x98,0x4F,0xE5,0xC1,0x63,0x14};

uint32_t EventSoulUpgradeLevel::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_soul_ = false;
  bool isset_level_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->soul_);
          isset_soul_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level_);
          isset_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_soul_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventSoulUpgradeLevel::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventSoulUpgradeLevel");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("soul_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->soul_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("level_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventSoulUpgradeLevel &a, EventSoulUpgradeLevel &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.soul_, b.soul_);
  swap(a.level_, b.level_);
}

}}} // namespace
