/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef game_npc_event_TYPES_H
#define game_npc_event_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "game_event_types.h"


namespace game { namespace server { namespace event {

typedef struct _EventNpcCreate__isset {
  _EventNpcCreate__isset() : reborn_secs_(false) {}
  bool reborn_secs_;
} _EventNpcCreate__isset;

class EventNpcCreate {
 public:

  static const char* ascii_fingerprint; // = "5A45E85EA6F562454AF8551579601C4B";
  static const uint8_t binary_fingerprint[16]; // = {0x5A,0x45,0xE8,0x5E,0xA6,0xF5,0x62,0x45,0x4A,0xF8,0x55,0x15,0x79,0x60,0x1C,0x4B};

  EventNpcCreate() : id_(0), reborn_(0), reborn_secs_(0) {
  }

  virtual ~EventNpcCreate() throw() {}

  int64_t id_;
  bool reborn_;
  int32_t reborn_secs_;

  _EventNpcCreate__isset __isset;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_reborn_(const bool val) {
    reborn_ = val;
  }

  void __set_reborn_secs_(const int32_t val) {
    reborn_secs_ = val;
    __isset.reborn_secs_ = true;
  }

  bool operator == (const EventNpcCreate & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(reborn_ == rhs.reborn_))
      return false;
    if (__isset.reborn_secs_ != rhs.__isset.reborn_secs_)
      return false;
    else if (__isset.reborn_secs_ && !(reborn_secs_ == rhs.reborn_secs_))
      return false;
    return true;
  }
  bool operator != (const EventNpcCreate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventNpcCreate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventNpcCreate &a, EventNpcCreate &b);


class EventNpcDestory {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  EventNpcDestory() : id_(0) {
  }

  virtual ~EventNpcDestory() throw() {}

  int64_t id_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  bool operator == (const EventNpcDestory & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const EventNpcDestory &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventNpcDestory & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventNpcDestory &a, EventNpcDestory &b);

}}} // namespace

#endif
