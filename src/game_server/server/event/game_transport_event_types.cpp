/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "game_transport_event_types.h"

#include <algorithm>

namespace game { namespace server { namespace event {

const char* EventTransportFailure::ascii_fingerprint = "127CA201228927544DE1E565473E4836";
const uint8_t EventTransportFailure::binary_fingerprint[16] = {0x12,0x7C,0xA2,0x01,0x22,0x89,0x27,0x54,0x4D,0xE1,0xE5,0x65,0x47,0x3E,0x48,0x36};

uint32_t EventTransportFailure::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->rob_actor_);
          this->__isset.rob_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventTransportFailure::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventTransportFailure");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.rob_actor_) {
    xfer += oprot->writeFieldBegin("rob_actor_", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->rob_actor_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventTransportFailure &a, EventTransportFailure &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.rob_actor_, b.rob_actor_);
  swap(a.__isset, b.__isset);
}

}}} // namespace
