/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef game_playing_event_TYPES_H
#define game_playing_event_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "game_event_types.h"
#include "playing_types.h"


namespace game { namespace server { namespace event {


class EventPlayingCreate {
 public:

  static const char* ascii_fingerprint; // = "C2C41E587DAC84A77A5056A1DC94ED73";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0xC4,0x1E,0x58,0x7D,0xAC,0x84,0xA7,0x7A,0x50,0x56,0xA1,0xDC,0x94,0xED,0x73};

  EventPlayingCreate() : playing_(0), template_(0), scene_(0) {
  }

  virtual ~EventPlayingCreate() throw() {}

  int64_t playing_;
  int32_t template_;
  int64_t scene_;

  void __set_playing_(const int64_t val) {
    playing_ = val;
  }

  void __set_template_(const int32_t val) {
    template_ = val;
  }

  void __set_scene_(const int64_t val) {
    scene_ = val;
  }

  bool operator == (const EventPlayingCreate & rhs) const
  {
    if (!(playing_ == rhs.playing_))
      return false;
    if (!(template_ == rhs.template_))
      return false;
    if (!(scene_ == rhs.scene_))
      return false;
    return true;
  }
  bool operator != (const EventPlayingCreate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventPlayingCreate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventPlayingCreate &a, EventPlayingCreate &b);


class EventPlayingDestory {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  EventPlayingDestory() : playing_(0), template_(0) {
  }

  virtual ~EventPlayingDestory() throw() {}

  int64_t playing_;
  int32_t template_;

  void __set_playing_(const int64_t val) {
    playing_ = val;
  }

  void __set_template_(const int32_t val) {
    template_ = val;
  }

  bool operator == (const EventPlayingDestory & rhs) const
  {
    if (!(playing_ == rhs.playing_))
      return false;
    if (!(template_ == rhs.template_))
      return false;
    return true;
  }
  bool operator != (const EventPlayingDestory &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventPlayingDestory & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventPlayingDestory &a, EventPlayingDestory &b);


class EventPlayingActorEnter {
 public:

  static const char* ascii_fingerprint; // = "9763B9D124C8339490EA9AA9EB582188";
  static const uint8_t binary_fingerprint[16]; // = {0x97,0x63,0xB9,0xD1,0x24,0xC8,0x33,0x94,0x90,0xEA,0x9A,0xA9,0xEB,0x58,0x21,0x88};

  EventPlayingActorEnter() : actor_(0), playing_(0), template_(0) {
  }

  virtual ~EventPlayingActorEnter() throw() {}

  int64_t actor_;
  int64_t playing_;
  int32_t template_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_playing_(const int64_t val) {
    playing_ = val;
  }

  void __set_template_(const int32_t val) {
    template_ = val;
  }

  bool operator == (const EventPlayingActorEnter & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(playing_ == rhs.playing_))
      return false;
    if (!(template_ == rhs.template_))
      return false;
    return true;
  }
  bool operator != (const EventPlayingActorEnter &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventPlayingActorEnter & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventPlayingActorEnter &a, EventPlayingActorEnter &b);


class EventPlayingActorLeave {
 public:

  static const char* ascii_fingerprint; // = "9763B9D124C8339490EA9AA9EB582188";
  static const uint8_t binary_fingerprint[16]; // = {0x97,0x63,0xB9,0xD1,0x24,0xC8,0x33,0x94,0x90,0xEA,0x9A,0xA9,0xEB,0x58,0x21,0x88};

  EventPlayingActorLeave() : actor_(0), playing_(0), template_(0) {
  }

  virtual ~EventPlayingActorLeave() throw() {}

  int64_t actor_;
  int64_t playing_;
  int32_t template_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_playing_(const int64_t val) {
    playing_ = val;
  }

  void __set_template_(const int32_t val) {
    template_ = val;
  }

  bool operator == (const EventPlayingActorLeave & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(playing_ == rhs.playing_))
      return false;
    if (!(template_ == rhs.template_))
      return false;
    return true;
  }
  bool operator != (const EventPlayingActorLeave &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventPlayingActorLeave & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventPlayingActorLeave &a, EventPlayingActorLeave &b);


class EventPlayingActorRequestFinish {
 public:

  static const char* ascii_fingerprint; // = "9763B9D124C8339490EA9AA9EB582188";
  static const uint8_t binary_fingerprint[16]; // = {0x97,0x63,0xB9,0xD1,0x24,0xC8,0x33,0x94,0x90,0xEA,0x9A,0xA9,0xEB,0x58,0x21,0x88};

  EventPlayingActorRequestFinish() : actor_(0), playing_(0), template_(0) {
  }

  virtual ~EventPlayingActorRequestFinish() throw() {}

  int64_t actor_;
  int64_t playing_;
  int32_t template_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_playing_(const int64_t val) {
    playing_ = val;
  }

  void __set_template_(const int32_t val) {
    template_ = val;
  }

  bool operator == (const EventPlayingActorRequestFinish & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(playing_ == rhs.playing_))
      return false;
    if (!(template_ == rhs.template_))
      return false;
    return true;
  }
  bool operator != (const EventPlayingActorRequestFinish &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventPlayingActorRequestFinish & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventPlayingActorRequestFinish &a, EventPlayingActorRequestFinish &b);


class EventPlayingActorRequestComplete {
 public:

  static const char* ascii_fingerprint; // = "9763B9D124C8339490EA9AA9EB582188";
  static const uint8_t binary_fingerprint[16]; // = {0x97,0x63,0xB9,0xD1,0x24,0xC8,0x33,0x94,0x90,0xEA,0x9A,0xA9,0xEB,0x58,0x21,0x88};

  EventPlayingActorRequestComplete() : actor_(0), playing_(0), template_(0) {
  }

  virtual ~EventPlayingActorRequestComplete() throw() {}

  int64_t actor_;
  int64_t playing_;
  int32_t template_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_playing_(const int64_t val) {
    playing_ = val;
  }

  void __set_template_(const int32_t val) {
    template_ = val;
  }

  bool operator == (const EventPlayingActorRequestComplete & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(playing_ == rhs.playing_))
      return false;
    if (!(template_ == rhs.template_))
      return false;
    return true;
  }
  bool operator != (const EventPlayingActorRequestComplete &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventPlayingActorRequestComplete & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventPlayingActorRequestComplete &a, EventPlayingActorRequestComplete &b);


class EventPlayingRequestUpdateRecord {
 public:

  static const char* ascii_fingerprint; // = "B364A9AC18563D0F06875CBF62AC197D";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0x64,0xA9,0xAC,0x18,0x56,0x3D,0x0F,0x06,0x87,0x5C,0xBF,0x62,0xAC,0x19,0x7D};

  EventPlayingRequestUpdateRecord() : actor_(0), template_(0) {
  }

  virtual ~EventPlayingRequestUpdateRecord() throw() {}

  int64_t actor_;
  int32_t template_;
   ::entity::PlayingResultField result_;
   ::entity::PlayingRecordField record_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_template_(const int32_t val) {
    template_ = val;
  }

  void __set_result_(const  ::entity::PlayingResultField& val) {
    result_ = val;
  }

  void __set_record_(const  ::entity::PlayingRecordField& val) {
    record_ = val;
  }

  bool operator == (const EventPlayingRequestUpdateRecord & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(template_ == rhs.template_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    if (!(record_ == rhs.record_))
      return false;
    return true;
  }
  bool operator != (const EventPlayingRequestUpdateRecord &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventPlayingRequestUpdateRecord & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventPlayingRequestUpdateRecord &a, EventPlayingRequestUpdateRecord &b);


class EventPlayingRequestAutoFinish {
 public:

  static const char* ascii_fingerprint; // = "A2A9764C3A346BD29099CBFF5B20D38B";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xA9,0x76,0x4C,0x3A,0x34,0x6B,0xD2,0x90,0x99,0xCB,0xFF,0x5B,0x20,0xD3,0x8B};

  EventPlayingRequestAutoFinish() : actor_(0), template_(0), finish_count_(0) {
  }

  virtual ~EventPlayingRequestAutoFinish() throw() {}

  int64_t actor_;
  int32_t template_;
   ::entity::PlayingRecordField record_;
   ::entity::PlayingResultField result_;
  int32_t finish_count_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_template_(const int32_t val) {
    template_ = val;
  }

  void __set_record_(const  ::entity::PlayingRecordField& val) {
    record_ = val;
  }

  void __set_result_(const  ::entity::PlayingResultField& val) {
    result_ = val;
  }

  void __set_finish_count_(const int32_t val) {
    finish_count_ = val;
  }

  bool operator == (const EventPlayingRequestAutoFinish & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(template_ == rhs.template_))
      return false;
    if (!(record_ == rhs.record_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    if (!(finish_count_ == rhs.finish_count_))
      return false;
    return true;
  }
  bool operator != (const EventPlayingRequestAutoFinish &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventPlayingRequestAutoFinish & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventPlayingRequestAutoFinish &a, EventPlayingRequestAutoFinish &b);


class EventPlayingRequestAddAward {
 public:

  static const char* ascii_fingerprint; // = "9C4E30169AD9E0914633984FE5C16314";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x4E,0x30,0x16,0x9A,0xD9,0xE0,0x91,0x46,0x33,0x98,0x4F,0xE5,0xC1,0x63,0x14};

  EventPlayingRequestAddAward() : actor_(0), template_(0), score_(0) {
  }

  virtual ~EventPlayingRequestAddAward() throw() {}

  int64_t actor_;
  int32_t template_;
  int32_t score_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_template_(const int32_t val) {
    template_ = val;
  }

  void __set_score_(const int32_t val) {
    score_ = val;
  }

  bool operator == (const EventPlayingRequestAddAward & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(template_ == rhs.template_))
      return false;
    if (!(score_ == rhs.score_))
      return false;
    return true;
  }
  bool operator != (const EventPlayingRequestAddAward &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventPlayingRequestAddAward & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventPlayingRequestAddAward &a, EventPlayingRequestAddAward &b);


class EventPlayingActorFinish {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  EventPlayingActorFinish() : actor_(0), template_(0) {
  }

  virtual ~EventPlayingActorFinish() throw() {}

  int64_t actor_;
  int32_t template_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_template_(const int32_t val) {
    template_ = val;
  }

  bool operator == (const EventPlayingActorFinish & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(template_ == rhs.template_))
      return false;
    return true;
  }
  bool operator != (const EventPlayingActorFinish &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventPlayingActorFinish & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventPlayingActorFinish &a, EventPlayingActorFinish &b);


class EventPlayingActorRequestAward {
 public:

  static const char* ascii_fingerprint; // = "B364A9AC18563D0F06875CBF62AC197D";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0x64,0xA9,0xAC,0x18,0x56,0x3D,0x0F,0x06,0x87,0x5C,0xBF,0x62,0xAC,0x19,0x7D};

  EventPlayingActorRequestAward() : actor_(0), template_(0) {
  }

  virtual ~EventPlayingActorRequestAward() throw() {}

  int64_t actor_;
  int32_t template_;
   ::entity::PlayingResultField result_;
   ::entity::PlayingRecordField record_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_template_(const int32_t val) {
    template_ = val;
  }

  void __set_result_(const  ::entity::PlayingResultField& val) {
    result_ = val;
  }

  void __set_record_(const  ::entity::PlayingRecordField& val) {
    record_ = val;
  }

  bool operator == (const EventPlayingActorRequestAward & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(template_ == rhs.template_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    if (!(record_ == rhs.record_))
      return false;
    return true;
  }
  bool operator != (const EventPlayingActorRequestAward &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventPlayingActorRequestAward & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventPlayingActorRequestAward &a, EventPlayingActorRequestAward &b);

}}} // namespace

#endif
