/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "game_ai_event_types.h"

#include <algorithm>

namespace game { namespace server { namespace event {

const char* EventAiThreatStart::ascii_fingerprint = "1AB3A1CF9912FDEF32C4878AE56EE1B0";
const uint8_t EventAiThreatStart::binary_fingerprint[16] = {0x1A,0xB3,0xA1,0xCF,0x99,0x12,0xFD,0xEF,0x32,0xC4,0x87,0x8A,0xE5,0x6E,0xE1,0xB0};

uint32_t EventAiThreatStart::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_threat_role_type_ = false;
  bool isset_threat_role_id_ = false;
  bool isset_npc_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->threat_role_type_ = ( ::entity::EntityType::type)ecast0;
          isset_threat_role_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->threat_role_id_);
          isset_threat_role_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->npc_);
          isset_npc_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_threat_role_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_threat_role_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_npc_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventAiThreatStart::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventAiThreatStart");

  xfer += oprot->writeFieldBegin("threat_role_type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->threat_role_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("threat_role_id_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->threat_role_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("npc_", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->npc_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventAiThreatStart &a, EventAiThreatStart &b) {
  using ::std::swap;
  swap(a.threat_role_type_, b.threat_role_type_);
  swap(a.threat_role_id_, b.threat_role_id_);
  swap(a.npc_, b.npc_);
}

const char* EventAiThreatEnd::ascii_fingerprint = "1AB3A1CF9912FDEF32C4878AE56EE1B0";
const uint8_t EventAiThreatEnd::binary_fingerprint[16] = {0x1A,0xB3,0xA1,0xCF,0x99,0x12,0xFD,0xEF,0x32,0xC4,0x87,0x8A,0xE5,0x6E,0xE1,0xB0};

uint32_t EventAiThreatEnd::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_threat_role_type_ = false;
  bool isset_threat_role_id_ = false;
  bool isset_npc_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->threat_role_type_ = ( ::entity::EntityType::type)ecast1;
          isset_threat_role_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->threat_role_id_);
          isset_threat_role_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->npc_);
          isset_npc_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_threat_role_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_threat_role_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_npc_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventAiThreatEnd::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventAiThreatEnd");

  xfer += oprot->writeFieldBegin("threat_role_type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->threat_role_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("threat_role_id_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->threat_role_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("npc_", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->npc_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventAiThreatEnd &a, EventAiThreatEnd &b) {
  using ::std::swap;
  swap(a.threat_role_type_, b.threat_role_type_);
  swap(a.threat_role_id_, b.threat_role_id_);
  swap(a.npc_, b.npc_);
}

}}} // namespace
