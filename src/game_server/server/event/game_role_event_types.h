/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef game_role_event_TYPES_H
#define game_role_event_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "entity_types.h"
#include "game_event_types.h"
#include "role_types.h"
#include "vocation_types.h"
#include "npc_types.h"


namespace game { namespace server { namespace event {


class EventBasicStatusChange {
 public:

  static const char* ascii_fingerprint; // = "B4440F8A270382EF1F173F7EA5D25CE6";
  static const uint8_t binary_fingerprint[16]; // = {0xB4,0x44,0x0F,0x8A,0x27,0x03,0x82,0xEF,0x1F,0x17,0x3F,0x7E,0xA5,0xD2,0x5C,0xE6};

  EventBasicStatusChange() : type_(( ::entity::EntityType::type)0), id_(0), from_(( ::entity::RoleBasicStatus::type)0), to_(( ::entity::RoleBasicStatus::type)0) {
  }

  virtual ~EventBasicStatusChange() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
   ::entity::RoleBasicStatus::type from_;
   ::entity::RoleBasicStatus::type to_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_from_(const  ::entity::RoleBasicStatus::type val) {
    from_ = val;
  }

  void __set_to_(const  ::entity::RoleBasicStatus::type val) {
    to_ = val;
  }

  bool operator == (const EventBasicStatusChange & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(from_ == rhs.from_))
      return false;
    if (!(to_ == rhs.to_))
      return false;
    return true;
  }
  bool operator != (const EventBasicStatusChange &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventBasicStatusChange & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventBasicStatusChange &a, EventBasicStatusChange &b);


class EventRoleCommonStatusChange {
 public:

  static const char* ascii_fingerprint; // = "FB4B1E9839AE4E3C2E1AD1C1ECC313EC";
  static const uint8_t binary_fingerprint[16]; // = {0xFB,0x4B,0x1E,0x98,0x39,0xAE,0x4E,0x3C,0x2E,0x1A,0xD1,0xC1,0xEC,0xC3,0x13,0xEC};

  EventRoleCommonStatusChange() : type_(( ::entity::EntityType::type)0), id_(0), from_(0), to_(0) {
  }

  virtual ~EventRoleCommonStatusChange() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
  int32_t from_;
  int32_t to_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_from_(const int32_t val) {
    from_ = val;
  }

  void __set_to_(const int32_t val) {
    to_ = val;
  }

  bool operator == (const EventRoleCommonStatusChange & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(from_ == rhs.from_))
      return false;
    if (!(to_ == rhs.to_))
      return false;
    return true;
  }
  bool operator != (const EventRoleCommonStatusChange &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventRoleCommonStatusChange & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventRoleCommonStatusChange &a, EventRoleCommonStatusChange &b);


class EventRoleKilled {
 public:

  static const char* ascii_fingerprint; // = "6E21708742A4726ED960FDBCFB610570";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0x21,0x70,0x87,0x42,0xA4,0x72,0x6E,0xD9,0x60,0xFD,0xBC,0xFB,0x61,0x05,0x70};

  EventRoleKilled() : type_(( ::entity::EntityType::type)0), id_(0), attacker_type_(( ::entity::EntityType::type)0), attacker_id_(0), skill_id_(0) {
  }

  virtual ~EventRoleKilled() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
   ::entity::EntityType::type attacker_type_;
  int64_t attacker_id_;
  int32_t skill_id_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_attacker_type_(const  ::entity::EntityType::type val) {
    attacker_type_ = val;
  }

  void __set_attacker_id_(const int64_t val) {
    attacker_id_ = val;
  }

  void __set_skill_id_(const int32_t val) {
    skill_id_ = val;
  }

  bool operator == (const EventRoleKilled & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(attacker_type_ == rhs.attacker_type_))
      return false;
    if (!(attacker_id_ == rhs.attacker_id_))
      return false;
    if (!(skill_id_ == rhs.skill_id_))
      return false;
    return true;
  }
  bool operator != (const EventRoleKilled &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventRoleKilled & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventRoleKilled &a, EventRoleKilled &b);


class EventRoleChangeHp {
 public:

  static const char* ascii_fingerprint; // = "F86506F1C00011B1FAC6AB731E61400D";
  static const uint8_t binary_fingerprint[16]; // = {0xF8,0x65,0x06,0xF1,0xC0,0x00,0x11,0xB1,0xFA,0xC6,0xAB,0x73,0x1E,0x61,0x40,0x0D};

  EventRoleChangeHp() : type_(( ::entity::EntityType::type)0), id_(0), value_(0) {
  }

  virtual ~EventRoleChangeHp() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
  int32_t value_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_value_(const int32_t val) {
    value_ = val;
  }

  bool operator == (const EventRoleChangeHp & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(value_ == rhs.value_))
      return false;
    return true;
  }
  bool operator != (const EventRoleChangeHp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventRoleChangeHp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventRoleChangeHp &a, EventRoleChangeHp &b);


class EventRoleChangeMaxHp {
 public:

  static const char* ascii_fingerprint; // = "F86506F1C00011B1FAC6AB731E61400D";
  static const uint8_t binary_fingerprint[16]; // = {0xF8,0x65,0x06,0xF1,0xC0,0x00,0x11,0xB1,0xFA,0xC6,0xAB,0x73,0x1E,0x61,0x40,0x0D};

  EventRoleChangeMaxHp() : type_(( ::entity::EntityType::type)0), id_(0), value_(0) {
  }

  virtual ~EventRoleChangeMaxHp() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
  int32_t value_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_value_(const int32_t val) {
    value_ = val;
  }

  bool operator == (const EventRoleChangeMaxHp & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(value_ == rhs.value_))
      return false;
    return true;
  }
  bool operator != (const EventRoleChangeMaxHp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventRoleChangeMaxHp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventRoleChangeMaxHp &a, EventRoleChangeMaxHp &b);


class EventRoleChangeMp {
 public:

  static const char* ascii_fingerprint; // = "F86506F1C00011B1FAC6AB731E61400D";
  static const uint8_t binary_fingerprint[16]; // = {0xF8,0x65,0x06,0xF1,0xC0,0x00,0x11,0xB1,0xFA,0xC6,0xAB,0x73,0x1E,0x61,0x40,0x0D};

  EventRoleChangeMp() : type_(( ::entity::EntityType::type)0), id_(0), value_(0) {
  }

  virtual ~EventRoleChangeMp() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
  int32_t value_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_value_(const int32_t val) {
    value_ = val;
  }

  bool operator == (const EventRoleChangeMp & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(value_ == rhs.value_))
      return false;
    return true;
  }
  bool operator != (const EventRoleChangeMp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventRoleChangeMp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventRoleChangeMp &a, EventRoleChangeMp &b);


class EventRoleChangeMaxMp {
 public:

  static const char* ascii_fingerprint; // = "F86506F1C00011B1FAC6AB731E61400D";
  static const uint8_t binary_fingerprint[16]; // = {0xF8,0x65,0x06,0xF1,0xC0,0x00,0x11,0xB1,0xFA,0xC6,0xAB,0x73,0x1E,0x61,0x40,0x0D};

  EventRoleChangeMaxMp() : type_(( ::entity::EntityType::type)0), id_(0), value_(0) {
  }

  virtual ~EventRoleChangeMaxMp() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
  int32_t value_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_value_(const int32_t val) {
    value_ = val;
  }

  bool operator == (const EventRoleChangeMaxMp & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(value_ == rhs.value_))
      return false;
    return true;
  }
  bool operator != (const EventRoleChangeMaxMp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventRoleChangeMaxMp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventRoleChangeMaxMp &a, EventRoleChangeMaxMp &b);


class EventRoleEnterFightingStatus {
 public:

  static const char* ascii_fingerprint; // = "6E7DD25E88B43484CFC93FCB15DCA1AF";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0x7D,0xD2,0x5E,0x88,0xB4,0x34,0x84,0xCF,0xC9,0x3F,0xCB,0x15,0xDC,0xA1,0xAF};

  EventRoleEnterFightingStatus() : type_(( ::entity::EntityType::type)0), id_(0) {
  }

  virtual ~EventRoleEnterFightingStatus() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  bool operator == (const EventRoleEnterFightingStatus & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const EventRoleEnterFightingStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventRoleEnterFightingStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventRoleEnterFightingStatus &a, EventRoleEnterFightingStatus &b);


class EventRoleLeaveFightingStatus {
 public:

  static const char* ascii_fingerprint; // = "6E7DD25E88B43484CFC93FCB15DCA1AF";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0x7D,0xD2,0x5E,0x88,0xB4,0x34,0x84,0xCF,0xC9,0x3F,0xCB,0x15,0xDC,0xA1,0xAF};

  EventRoleLeaveFightingStatus() : type_(( ::entity::EntityType::type)0), id_(0) {
  }

  virtual ~EventRoleLeaveFightingStatus() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  bool operator == (const EventRoleLeaveFightingStatus & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const EventRoleLeaveFightingStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventRoleLeaveFightingStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventRoleLeaveFightingStatus &a, EventRoleLeaveFightingStatus &b);


class EventRoleEnterPvpStatus {
 public:

  static const char* ascii_fingerprint; // = "6E7DD25E88B43484CFC93FCB15DCA1AF";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0x7D,0xD2,0x5E,0x88,0xB4,0x34,0x84,0xCF,0xC9,0x3F,0xCB,0x15,0xDC,0xA1,0xAF};

  EventRoleEnterPvpStatus() : type_(( ::entity::EntityType::type)0), id_(0) {
  }

  virtual ~EventRoleEnterPvpStatus() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  bool operator == (const EventRoleEnterPvpStatus & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const EventRoleEnterPvpStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventRoleEnterPvpStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventRoleEnterPvpStatus &a, EventRoleEnterPvpStatus &b);


class EventRoleLeavePvpStatus {
 public:

  static const char* ascii_fingerprint; // = "6E7DD25E88B43484CFC93FCB15DCA1AF";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0x7D,0xD2,0x5E,0x88,0xB4,0x34,0x84,0xCF,0xC9,0x3F,0xCB,0x15,0xDC,0xA1,0xAF};

  EventRoleLeavePvpStatus() : type_(( ::entity::EntityType::type)0), id_(0) {
  }

  virtual ~EventRoleLeavePvpStatus() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  bool operator == (const EventRoleLeavePvpStatus & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const EventRoleLeavePvpStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventRoleLeavePvpStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventRoleLeavePvpStatus &a, EventRoleLeavePvpStatus &b);


class EventRoleChangeVocation {
 public:

  static const char* ascii_fingerprint; // = "CE32BB94C874B04D87FCD98C40E325E6";
  static const uint8_t binary_fingerprint[16]; // = {0xCE,0x32,0xBB,0x94,0xC8,0x74,0xB0,0x4D,0x87,0xFC,0xD9,0x8C,0x40,0xE3,0x25,0xE6};

  EventRoleChangeVocation() : type_(( ::entity::EntityType::type)0), id_(0), src_vocation_(( ::entity::VocationType::type)0) {
  }

  virtual ~EventRoleChangeVocation() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
   ::entity::VocationType::type src_vocation_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_src_vocation_(const  ::entity::VocationType::type val) {
    src_vocation_ = val;
  }

  bool operator == (const EventRoleChangeVocation & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(src_vocation_ == rhs.src_vocation_))
      return false;
    return true;
  }
  bool operator != (const EventRoleChangeVocation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventRoleChangeVocation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventRoleChangeVocation &a, EventRoleChangeVocation &b);


class EventRoleChangeCurrentEnergy {
 public:

  static const char* ascii_fingerprint; // = "F86506F1C00011B1FAC6AB731E61400D";
  static const uint8_t binary_fingerprint[16]; // = {0xF8,0x65,0x06,0xF1,0xC0,0x00,0x11,0xB1,0xFA,0xC6,0xAB,0x73,0x1E,0x61,0x40,0x0D};

  EventRoleChangeCurrentEnergy() : type_(( ::entity::EntityType::type)0), id_(0), value_(0) {
  }

  virtual ~EventRoleChangeCurrentEnergy() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
  int32_t value_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_value_(const int32_t val) {
    value_ = val;
  }

  bool operator == (const EventRoleChangeCurrentEnergy & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(value_ == rhs.value_))
      return false;
    return true;
  }
  bool operator != (const EventRoleChangeCurrentEnergy &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventRoleChangeCurrentEnergy & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventRoleChangeCurrentEnergy &a, EventRoleChangeCurrentEnergy &b);


class EventRoleChangeMaxEnergy {
 public:

  static const char* ascii_fingerprint; // = "F86506F1C00011B1FAC6AB731E61400D";
  static const uint8_t binary_fingerprint[16]; // = {0xF8,0x65,0x06,0xF1,0xC0,0x00,0x11,0xB1,0xFA,0xC6,0xAB,0x73,0x1E,0x61,0x40,0x0D};

  EventRoleChangeMaxEnergy() : type_(( ::entity::EntityType::type)0), id_(0), value_(0) {
  }

  virtual ~EventRoleChangeMaxEnergy() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
  int32_t value_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_value_(const int32_t val) {
    value_ = val;
  }

  bool operator == (const EventRoleChangeMaxEnergy & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(value_ == rhs.value_))
      return false;
    return true;
  }
  bool operator != (const EventRoleChangeMaxEnergy &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventRoleChangeMaxEnergy & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventRoleChangeMaxEnergy &a, EventRoleChangeMaxEnergy &b);

}}} // namespace

#endif
