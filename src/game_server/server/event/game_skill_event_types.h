/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef game_skill_event_TYPES_H
#define game_skill_event_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "entity_types.h"
#include "game_event_types.h"
#include "skill_types.h"


namespace game { namespace server { namespace event {


class EventUseSkill {
 public:

  static const char* ascii_fingerprint; // = "AE3264C565469D137B90361664AF682F";
  static const uint8_t binary_fingerprint[16]; // = {0xAE,0x32,0x64,0xC5,0x65,0x46,0x9D,0x13,0x7B,0x90,0x36,0x16,0x64,0xAF,0x68,0x2F};

  EventUseSkill() : type_(( ::entity::EntityType::type)0), id_(0), skill_id_(0), skill_group_(0), skill_type_(0) {
  }

  virtual ~EventUseSkill() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
  int32_t skill_id_;
  int32_t skill_group_;
  int32_t skill_type_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_skill_id_(const int32_t val) {
    skill_id_ = val;
  }

  void __set_skill_group_(const int32_t val) {
    skill_group_ = val;
  }

  void __set_skill_type_(const int32_t val) {
    skill_type_ = val;
  }

  bool operator == (const EventUseSkill & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(skill_id_ == rhs.skill_id_))
      return false;
    if (!(skill_group_ == rhs.skill_group_))
      return false;
    if (!(skill_type_ == rhs.skill_type_))
      return false;
    return true;
  }
  bool operator != (const EventUseSkill &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventUseSkill & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventUseSkill &a, EventUseSkill &b);


class EventAttackedSkill {
 public:

  static const char* ascii_fingerprint; // = "FB4B1E9839AE4E3C2E1AD1C1ECC313EC";
  static const uint8_t binary_fingerprint[16]; // = {0xFB,0x4B,0x1E,0x98,0x39,0xAE,0x4E,0x3C,0x2E,0x1A,0xD1,0xC1,0xEC,0xC3,0x13,0xEC};

  EventAttackedSkill() : type_(( ::entity::EntityType::type)0), id_(0), skill_id_(0), friend_type_(0) {
  }

  virtual ~EventAttackedSkill() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
  int32_t skill_id_;
  int32_t friend_type_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_skill_id_(const int32_t val) {
    skill_id_ = val;
  }

  void __set_friend_type_(const int32_t val) {
    friend_type_ = val;
  }

  bool operator == (const EventAttackedSkill & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(skill_id_ == rhs.skill_id_))
      return false;
    if (!(friend_type_ == rhs.friend_type_))
      return false;
    return true;
  }
  bool operator != (const EventAttackedSkill &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventAttackedSkill & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventAttackedSkill &a, EventAttackedSkill &b);


class EventUseAppearSkill {
 public:

  static const char* ascii_fingerprint; // = "6E7DD25E88B43484CFC93FCB15DCA1AF";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0x7D,0xD2,0x5E,0x88,0xB4,0x34,0x84,0xCF,0xC9,0x3F,0xCB,0x15,0xDC,0xA1,0xAF};

  EventUseAppearSkill() : type_(( ::entity::EntityType::type)0), id_(0) {
  }

  virtual ~EventUseAppearSkill() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  bool operator == (const EventUseAppearSkill & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const EventUseAppearSkill &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventUseAppearSkill & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventUseAppearSkill &a, EventUseAppearSkill &b);


class EventSkillAttackHit {
 public:

  static const char* ascii_fingerprint; // = "BFFB283CDC32F240F6AB6100A1DF304B";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0xFB,0x28,0x3C,0xDC,0x32,0xF2,0x40,0xF6,0xAB,0x61,0x00,0xA1,0xDF,0x30,0x4B};

  EventSkillAttackHit() : type_(( ::entity::EntityType::type)0), id_(0), dest_type_(( ::entity::EntityType::type)0), dest_id_(0), hit_type_(( ::entity::SkillHitType::type)0), hurt_type_(( ::entity::SkillHurtType::type)0), value_(0) {
  }

  virtual ~EventSkillAttackHit() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
   ::entity::EntityType::type dest_type_;
  int64_t dest_id_;
   ::entity::SkillHitType::type hit_type_;
   ::entity::SkillHurtType::type hurt_type_;
  int32_t value_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_dest_type_(const  ::entity::EntityType::type val) {
    dest_type_ = val;
  }

  void __set_dest_id_(const int64_t val) {
    dest_id_ = val;
  }

  void __set_hit_type_(const  ::entity::SkillHitType::type val) {
    hit_type_ = val;
  }

  void __set_hurt_type_(const  ::entity::SkillHurtType::type val) {
    hurt_type_ = val;
  }

  void __set_value_(const int32_t val) {
    value_ = val;
  }

  bool operator == (const EventSkillAttackHit & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(dest_type_ == rhs.dest_type_))
      return false;
    if (!(dest_id_ == rhs.dest_id_))
      return false;
    if (!(hit_type_ == rhs.hit_type_))
      return false;
    if (!(hurt_type_ == rhs.hurt_type_))
      return false;
    if (!(value_ == rhs.value_))
      return false;
    return true;
  }
  bool operator != (const EventSkillAttackHit &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventSkillAttackHit & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventSkillAttackHit &a, EventSkillAttackHit &b);


class EventSkillAttackedHit {
 public:

  static const char* ascii_fingerprint; // = "BFFB283CDC32F240F6AB6100A1DF304B";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0xFB,0x28,0x3C,0xDC,0x32,0xF2,0x40,0xF6,0xAB,0x61,0x00,0xA1,0xDF,0x30,0x4B};

  EventSkillAttackedHit() : type_(( ::entity::EntityType::type)0), id_(0), src_type_(( ::entity::EntityType::type)0), src_id_(0), hit_type_(( ::entity::SkillHitType::type)0), hurt_type_(( ::entity::SkillHurtType::type)0), value_(0) {
  }

  virtual ~EventSkillAttackedHit() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
   ::entity::EntityType::type src_type_;
  int64_t src_id_;
   ::entity::SkillHitType::type hit_type_;
   ::entity::SkillHurtType::type hurt_type_;
  int32_t value_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_src_type_(const  ::entity::EntityType::type val) {
    src_type_ = val;
  }

  void __set_src_id_(const int64_t val) {
    src_id_ = val;
  }

  void __set_hit_type_(const  ::entity::SkillHitType::type val) {
    hit_type_ = val;
  }

  void __set_hurt_type_(const  ::entity::SkillHurtType::type val) {
    hurt_type_ = val;
  }

  void __set_value_(const int32_t val) {
    value_ = val;
  }

  bool operator == (const EventSkillAttackedHit & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(src_type_ == rhs.src_type_))
      return false;
    if (!(src_id_ == rhs.src_id_))
      return false;
    if (!(hit_type_ == rhs.hit_type_))
      return false;
    if (!(hurt_type_ == rhs.hurt_type_))
      return false;
    if (!(value_ == rhs.value_))
      return false;
    return true;
  }
  bool operator != (const EventSkillAttackedHit &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventSkillAttackedHit & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventSkillAttackedHit &a, EventSkillAttackedHit &b);

}}} // namespace

#endif
