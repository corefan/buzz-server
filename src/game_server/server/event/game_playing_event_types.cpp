/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "game_playing_event_types.h"

#include <algorithm>

namespace game { namespace server { namespace event {

const char* EventPlayingCreate::ascii_fingerprint = "C2C41E587DAC84A77A5056A1DC94ED73";
const uint8_t EventPlayingCreate::binary_fingerprint[16] = {0xC2,0xC4,0x1E,0x58,0x7D,0xAC,0x84,0xA7,0x7A,0x50,0x56,0xA1,0xDC,0x94,0xED,0x73};

uint32_t EventPlayingCreate::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_playing_ = false;
  bool isset_template_ = false;
  bool isset_scene_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->playing_);
          isset_playing_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->template_);
          isset_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->scene_);
          isset_scene_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_playing_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_scene_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventPlayingCreate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventPlayingCreate");

  xfer += oprot->writeFieldBegin("playing_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->playing_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("template_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scene_", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->scene_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventPlayingCreate &a, EventPlayingCreate &b) {
  using ::std::swap;
  swap(a.playing_, b.playing_);
  swap(a.template_, b.template_);
  swap(a.scene_, b.scene_);
}

const char* EventPlayingDestory::ascii_fingerprint = "AFAFBCDB9822F9D1AA4E44188E720B47";
const uint8_t EventPlayingDestory::binary_fingerprint[16] = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

uint32_t EventPlayingDestory::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_playing_ = false;
  bool isset_template_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->playing_);
          isset_playing_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->template_);
          isset_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_playing_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventPlayingDestory::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventPlayingDestory");

  xfer += oprot->writeFieldBegin("playing_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->playing_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("template_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventPlayingDestory &a, EventPlayingDestory &b) {
  using ::std::swap;
  swap(a.playing_, b.playing_);
  swap(a.template_, b.template_);
}

const char* EventPlayingActorEnter::ascii_fingerprint = "9763B9D124C8339490EA9AA9EB582188";
const uint8_t EventPlayingActorEnter::binary_fingerprint[16] = {0x97,0x63,0xB9,0xD1,0x24,0xC8,0x33,0x94,0x90,0xEA,0x9A,0xA9,0xEB,0x58,0x21,0x88};

uint32_t EventPlayingActorEnter::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_playing_ = false;
  bool isset_template_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->playing_);
          isset_playing_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->template_);
          isset_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_playing_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventPlayingActorEnter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventPlayingActorEnter");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("playing_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->playing_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("template_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventPlayingActorEnter &a, EventPlayingActorEnter &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.playing_, b.playing_);
  swap(a.template_, b.template_);
}

const char* EventPlayingActorLeave::ascii_fingerprint = "9763B9D124C8339490EA9AA9EB582188";
const uint8_t EventPlayingActorLeave::binary_fingerprint[16] = {0x97,0x63,0xB9,0xD1,0x24,0xC8,0x33,0x94,0x90,0xEA,0x9A,0xA9,0xEB,0x58,0x21,0x88};

uint32_t EventPlayingActorLeave::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_playing_ = false;
  bool isset_template_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->playing_);
          isset_playing_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->template_);
          isset_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_playing_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventPlayingActorLeave::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventPlayingActorLeave");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("playing_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->playing_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("template_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventPlayingActorLeave &a, EventPlayingActorLeave &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.playing_, b.playing_);
  swap(a.template_, b.template_);
}

const char* EventPlayingActorRequestFinish::ascii_fingerprint = "9763B9D124C8339490EA9AA9EB582188";
const uint8_t EventPlayingActorRequestFinish::binary_fingerprint[16] = {0x97,0x63,0xB9,0xD1,0x24,0xC8,0x33,0x94,0x90,0xEA,0x9A,0xA9,0xEB,0x58,0x21,0x88};

uint32_t EventPlayingActorRequestFinish::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_playing_ = false;
  bool isset_template_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->playing_);
          isset_playing_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->template_);
          isset_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_playing_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventPlayingActorRequestFinish::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventPlayingActorRequestFinish");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("playing_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->playing_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("template_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventPlayingActorRequestFinish &a, EventPlayingActorRequestFinish &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.playing_, b.playing_);
  swap(a.template_, b.template_);
}

const char* EventPlayingActorRequestComplete::ascii_fingerprint = "9763B9D124C8339490EA9AA9EB582188";
const uint8_t EventPlayingActorRequestComplete::binary_fingerprint[16] = {0x97,0x63,0xB9,0xD1,0x24,0xC8,0x33,0x94,0x90,0xEA,0x9A,0xA9,0xEB,0x58,0x21,0x88};

uint32_t EventPlayingActorRequestComplete::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_playing_ = false;
  bool isset_template_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->playing_);
          isset_playing_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->template_);
          isset_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_playing_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventPlayingActorRequestComplete::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventPlayingActorRequestComplete");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("playing_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->playing_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("template_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventPlayingActorRequestComplete &a, EventPlayingActorRequestComplete &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.playing_, b.playing_);
  swap(a.template_, b.template_);
}

const char* EventPlayingRequestUpdateRecord::ascii_fingerprint = "B364A9AC18563D0F06875CBF62AC197D";
const uint8_t EventPlayingRequestUpdateRecord::binary_fingerprint[16] = {0xB3,0x64,0xA9,0xAC,0x18,0x56,0x3D,0x0F,0x06,0x87,0x5C,0xBF,0x62,0xAC,0x19,0x7D};

uint32_t EventPlayingRequestUpdateRecord::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_template_ = false;
  bool isset_result_ = false;
  bool isset_record_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->template_);
          isset_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->result_.read(iprot);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->record_.read(iprot);
          isset_record_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_record_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventPlayingRequestUpdateRecord::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventPlayingRequestUpdateRecord");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("template_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->result_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("record_", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->record_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventPlayingRequestUpdateRecord &a, EventPlayingRequestUpdateRecord &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.template_, b.template_);
  swap(a.result_, b.result_);
  swap(a.record_, b.record_);
}

const char* EventPlayingRequestAutoFinish::ascii_fingerprint = "A2A9764C3A346BD29099CBFF5B20D38B";
const uint8_t EventPlayingRequestAutoFinish::binary_fingerprint[16] = {0xA2,0xA9,0x76,0x4C,0x3A,0x34,0x6B,0xD2,0x90,0x99,0xCB,0xFF,0x5B,0x20,0xD3,0x8B};

uint32_t EventPlayingRequestAutoFinish::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_template_ = false;
  bool isset_record_ = false;
  bool isset_result_ = false;
  bool isset_finish_count_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->template_);
          isset_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->record_.read(iprot);
          isset_record_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->result_.read(iprot);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->finish_count_);
          isset_finish_count_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_record_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_finish_count_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventPlayingRequestAutoFinish::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventPlayingRequestAutoFinish");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("template_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("record_", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->record_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->result_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("finish_count_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->finish_count_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventPlayingRequestAutoFinish &a, EventPlayingRequestAutoFinish &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.template_, b.template_);
  swap(a.record_, b.record_);
  swap(a.result_, b.result_);
  swap(a.finish_count_, b.finish_count_);
}

const char* EventPlayingRequestAddAward::ascii_fingerprint = "9C4E30169AD9E0914633984FE5C16314";
const uint8_t EventPlayingRequestAddAward::binary_fingerprint[16] = {0x9C,0x4E,0x30,0x16,0x9A,0xD9,0xE0,0x91,0x46,0x33,0x98,0x4F,0xE5,0xC1,0x63,0x14};

uint32_t EventPlayingRequestAddAward::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_template_ = false;
  bool isset_score_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->template_);
          isset_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->score_);
          isset_score_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_score_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventPlayingRequestAddAward::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventPlayingRequestAddAward");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("template_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("score_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->score_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventPlayingRequestAddAward &a, EventPlayingRequestAddAward &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.template_, b.template_);
  swap(a.score_, b.score_);
}

const char* EventPlayingActorFinish::ascii_fingerprint = "AFAFBCDB9822F9D1AA4E44188E720B47";
const uint8_t EventPlayingActorFinish::binary_fingerprint[16] = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

uint32_t EventPlayingActorFinish::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_template_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->template_);
          isset_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventPlayingActorFinish::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventPlayingActorFinish");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("template_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventPlayingActorFinish &a, EventPlayingActorFinish &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.template_, b.template_);
}

const char* EventPlayingActorRequestAward::ascii_fingerprint = "B364A9AC18563D0F06875CBF62AC197D";
const uint8_t EventPlayingActorRequestAward::binary_fingerprint[16] = {0xB3,0x64,0xA9,0xAC,0x18,0x56,0x3D,0x0F,0x06,0x87,0x5C,0xBF,0x62,0xAC,0x19,0x7D};

uint32_t EventPlayingActorRequestAward::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_template_ = false;
  bool isset_result_ = false;
  bool isset_record_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->template_);
          isset_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->result_.read(iprot);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->record_.read(iprot);
          isset_record_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_record_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventPlayingActorRequestAward::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventPlayingActorRequestAward");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("template_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->result_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("record_", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->record_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventPlayingActorRequestAward &a, EventPlayingActorRequestAward &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.template_, b.template_);
  swap(a.result_, b.result_);
  swap(a.record_, b.record_);
}

}}} // namespace
