/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef game_mail_request_TYPES_H
#define game_mail_request_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "game_request_types.h"
#include "mail_types.h"
#include "mail_system_types.h"


namespace game { namespace server { namespace request {

typedef struct _RequestMailSend__isset {
  _RequestMailSend__isset() : type_(false), affix_(false), context_(false) {}
  bool type_;
  bool affix_;
  bool context_;
} _RequestMailSend__isset;

class RequestMailSend {
 public:

  static const char* ascii_fingerprint; // = "BDD6359A93867DA942883CC19D6336D9";
  static const uint8_t binary_fingerprint[16]; // = {0xBD,0xD6,0x35,0x9A,0x93,0x86,0x7D,0xA9,0x42,0x88,0x3C,0xC1,0x9D,0x63,0x36,0xD9};

  RequestMailSend() : id_(0), type_(( ::entity::MailType::type)0), child_type_(( ::entity::SystemMailChildType::type)0), context_() {
  }

  virtual ~RequestMailSend() throw() {}

  int64_t id_;
   ::entity::MailType::type type_;
   ::entity::SystemMailChildType::type child_type_;
  std::vector<std::string>  params_;
   ::entity::MailAffix affix_;
  std::string context_;

  _RequestMailSend__isset __isset;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_type_(const  ::entity::MailType::type val) {
    type_ = val;
    __isset.type_ = true;
  }

  void __set_child_type_(const  ::entity::SystemMailChildType::type val) {
    child_type_ = val;
  }

  void __set_params_(const std::vector<std::string> & val) {
    params_ = val;
  }

  void __set_affix_(const  ::entity::MailAffix& val) {
    affix_ = val;
    __isset.affix_ = true;
  }

  void __set_context_(const std::string& val) {
    context_ = val;
    __isset.context_ = true;
  }

  bool operator == (const RequestMailSend & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (__isset.type_ != rhs.__isset.type_)
      return false;
    else if (__isset.type_ && !(type_ == rhs.type_))
      return false;
    if (!(child_type_ == rhs.child_type_))
      return false;
    if (!(params_ == rhs.params_))
      return false;
    if (__isset.affix_ != rhs.__isset.affix_)
      return false;
    else if (__isset.affix_ && !(affix_ == rhs.affix_))
      return false;
    if (__isset.context_ != rhs.__isset.context_)
      return false;
    else if (__isset.context_ && !(context_ == rhs.context_))
      return false;
    return true;
  }
  bool operator != (const RequestMailSend &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestMailSend & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestMailSend &a, RequestMailSend &b);

}}} // namespace

#endif
