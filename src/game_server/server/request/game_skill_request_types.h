/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef game_skill_request_TYPES_H
#define game_skill_request_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "game_request_types.h"
#include "entity_types.h"
#include "direction_types.h"
#include "skill_types.h"


namespace game { namespace server { namespace request {

struct SkillResultType {
  enum type {
    MIN = 0,
    SUCCESS = 0,
    ERROR_ARGS = 1,
    ERROR_SKILL_ID = 2,
    ERROR_SKILL_TYPE = 3,
    ERROR_SKILL_LEVEL = 4,
    ERROR_SKILL_MASTER = 5,
    ERROR_SKILL_SIT = 6,
    ERROR_HP = 7,
    ERROR_MP = 8,
    ERROR_DISTANCE = 9,
    ERROR_TARGET = 10,
    ERROR_COOLING = 11,
    ERROR_SOUL_STATUS = 12,
    ERROR_BUFF_STATUS = 13,
    ERROR_SAFEAREA = 14,
    ERROR_ROOKIE_PROTECT = 15,
    ERROR_DIE_PROTECT_TIME = 16,
    ERROR_PK_MODE = 17,
    ERROR_FORBID_SKILL = 18,
    ERROR_UNKNOWN = 19,
    MAX = 20
  };
};

extern const std::map<int, const char*> _SkillResultType_VALUES_TO_NAMES;


class RequestUseSkill {
 public:

  static const char* ascii_fingerprint; // = "82EF4A1F71F7D15A6F971607418B8B71";
  static const uint8_t binary_fingerprint[16]; // = {0x82,0xEF,0x4A,0x1F,0x71,0xF7,0xD1,0x5A,0x6F,0x97,0x16,0x07,0x41,0x8B,0x8B,0x71};

  RequestUseSkill() : type_(( ::entity::EntityType::type)0), id_(0), skill_id_(0), target_type_(( ::entity::EntityType::type)0), target_id_(0), x_(0), y_(0), direction_(0), result_(0) {
  }

  virtual ~RequestUseSkill() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
  int32_t skill_id_;
   ::entity::EntityType::type target_type_;
  int64_t target_id_;
  int32_t x_;
  int32_t y_;
  int16_t direction_;
  int32_t result_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_skill_id_(const int32_t val) {
    skill_id_ = val;
  }

  void __set_target_type_(const  ::entity::EntityType::type val) {
    target_type_ = val;
  }

  void __set_target_id_(const int64_t val) {
    target_id_ = val;
  }

  void __set_x_(const int32_t val) {
    x_ = val;
  }

  void __set_y_(const int32_t val) {
    y_ = val;
  }

  void __set_direction_(const int16_t val) {
    direction_ = val;
  }

  void __set_result_(const int32_t val) {
    result_ = val;
  }

  bool operator == (const RequestUseSkill & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(skill_id_ == rhs.skill_id_))
      return false;
    if (!(target_type_ == rhs.target_type_))
      return false;
    if (!(target_id_ == rhs.target_id_))
      return false;
    if (!(x_ == rhs.x_))
      return false;
    if (!(y_ == rhs.y_))
      return false;
    if (!(direction_ == rhs.direction_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const RequestUseSkill &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestUseSkill & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestUseSkill &a, RequestUseSkill &b);


class RequestAddSkill {
 public:

  static const char* ascii_fingerprint; // = "3E0A6E2C514E157D895204610C790183";
  static const uint8_t binary_fingerprint[16]; // = {0x3E,0x0A,0x6E,0x2C,0x51,0x4E,0x15,0x7D,0x89,0x52,0x04,0x61,0x0C,0x79,0x01,0x83};

  RequestAddSkill() : type_(( ::entity::EntityType::type)0), id_(0), skill_id_(0), level_(0), stand_(0), result_(0) {
  }

  virtual ~RequestAddSkill() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
  int32_t skill_id_;
  int32_t level_;
  bool stand_;
  int32_t result_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_skill_id_(const int32_t val) {
    skill_id_ = val;
  }

  void __set_level_(const int32_t val) {
    level_ = val;
  }

  void __set_stand_(const bool val) {
    stand_ = val;
  }

  void __set_result_(const int32_t val) {
    result_ = val;
  }

  bool operator == (const RequestAddSkill & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(skill_id_ == rhs.skill_id_))
      return false;
    if (!(level_ == rhs.level_))
      return false;
    if (!(stand_ == rhs.stand_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const RequestAddSkill &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestAddSkill & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestAddSkill &a, RequestAddSkill &b);


class RequestRemoveSkill {
 public:

  static const char* ascii_fingerprint; // = "FB4B1E9839AE4E3C2E1AD1C1ECC313EC";
  static const uint8_t binary_fingerprint[16]; // = {0xFB,0x4B,0x1E,0x98,0x39,0xAE,0x4E,0x3C,0x2E,0x1A,0xD1,0xC1,0xEC,0xC3,0x13,0xEC};

  RequestRemoveSkill() : type_(( ::entity::EntityType::type)0), id_(0), skill_id_(0), result_(0) {
  }

  virtual ~RequestRemoveSkill() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
  int32_t skill_id_;
  int32_t result_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_skill_id_(const int32_t val) {
    skill_id_ = val;
  }

  void __set_result_(const int32_t val) {
    result_ = val;
  }

  bool operator == (const RequestRemoveSkill & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(skill_id_ == rhs.skill_id_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const RequestRemoveSkill &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestRemoveSkill & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestRemoveSkill &a, RequestRemoveSkill &b);


class RequestUpgradeSkill {
 public:

  static const char* ascii_fingerprint; // = "AE3264C565469D137B90361664AF682F";
  static const uint8_t binary_fingerprint[16]; // = {0xAE,0x32,0x64,0xC5,0x65,0x46,0x9D,0x13,0x7B,0x90,0x36,0x16,0x64,0xAF,0x68,0x2F};

  RequestUpgradeSkill() : type_(( ::entity::EntityType::type)0), id_(0), skill_id_(0), upgrade_(0), result_(0) {
  }

  virtual ~RequestUpgradeSkill() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
  int32_t skill_id_;
  int32_t upgrade_;
  int32_t result_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_skill_id_(const int32_t val) {
    skill_id_ = val;
  }

  void __set_upgrade_(const int32_t val) {
    upgrade_ = val;
  }

  void __set_result_(const int32_t val) {
    result_ = val;
  }

  bool operator == (const RequestUpgradeSkill & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(skill_id_ == rhs.skill_id_))
      return false;
    if (!(upgrade_ == rhs.upgrade_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const RequestUpgradeSkill &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestUpgradeSkill & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestUpgradeSkill &a, RequestUpgradeSkill &b);


class RequestSkillStand {
 public:

  static const char* ascii_fingerprint; // = "FB4B1E9839AE4E3C2E1AD1C1ECC313EC";
  static const uint8_t binary_fingerprint[16]; // = {0xFB,0x4B,0x1E,0x98,0x39,0xAE,0x4E,0x3C,0x2E,0x1A,0xD1,0xC1,0xEC,0xC3,0x13,0xEC};

  RequestSkillStand() : type_(( ::entity::EntityType::type)0), id_(0), skill_id_(0), result_(0) {
  }

  virtual ~RequestSkillStand() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
  int32_t skill_id_;
  int32_t result_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_skill_id_(const int32_t val) {
    skill_id_ = val;
  }

  void __set_result_(const int32_t val) {
    result_ = val;
  }

  bool operator == (const RequestSkillStand & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(skill_id_ == rhs.skill_id_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const RequestSkillStand &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestSkillStand & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestSkillStand &a, RequestSkillStand &b);


class RequestSkillSit {
 public:

  static const char* ascii_fingerprint; // = "FB4B1E9839AE4E3C2E1AD1C1ECC313EC";
  static const uint8_t binary_fingerprint[16]; // = {0xFB,0x4B,0x1E,0x98,0x39,0xAE,0x4E,0x3C,0x2E,0x1A,0xD1,0xC1,0xEC,0xC3,0x13,0xEC};

  RequestSkillSit() : type_(( ::entity::EntityType::type)0), id_(0), skill_id_(0), result_(0) {
  }

  virtual ~RequestSkillSit() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
  int32_t skill_id_;
  int32_t result_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_skill_id_(const int32_t val) {
    skill_id_ = val;
  }

  void __set_result_(const int32_t val) {
    result_ = val;
  }

  bool operator == (const RequestSkillSit & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(skill_id_ == rhs.skill_id_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const RequestSkillSit &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestSkillSit & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestSkillSit &a, RequestSkillSit &b);


class SkillBuff {
 public:

  static const char* ascii_fingerprint; // = "411E004D9342478F1AEED08196AE774E";
  static const uint8_t binary_fingerprint[16]; // = {0x41,0x1E,0x00,0x4D,0x93,0x42,0x47,0x8F,0x1A,0xEE,0xD0,0x81,0x96,0xAE,0x77,0x4E};

  SkillBuff() : buff_(0), odds_(0), cooling_(0), target_type_(( ::entity::BuffTargetType::type)0) {
  }

  virtual ~SkillBuff() throw() {}

  int32_t buff_;
  int32_t odds_;
  int32_t cooling_;
   ::entity::BuffTargetType::type target_type_;

  void __set_buff_(const int32_t val) {
    buff_ = val;
  }

  void __set_odds_(const int32_t val) {
    odds_ = val;
  }

  void __set_cooling_(const int32_t val) {
    cooling_ = val;
  }

  void __set_target_type_(const  ::entity::BuffTargetType::type val) {
    target_type_ = val;
  }

  bool operator == (const SkillBuff & rhs) const
  {
    if (!(buff_ == rhs.buff_))
      return false;
    if (!(odds_ == rhs.odds_))
      return false;
    if (!(cooling_ == rhs.cooling_))
      return false;
    if (!(target_type_ == rhs.target_type_))
      return false;
    return true;
  }
  bool operator != (const SkillBuff &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SkillBuff & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SkillBuff &a, SkillBuff &b);


class RequestAddSkillGlobalBuff {
 public:

  static const char* ascii_fingerprint; // = "9A26B3D24570CE01C434367200B44F41";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x26,0xB3,0xD2,0x45,0x70,0xCE,0x01,0xC4,0x34,0x36,0x72,0x00,0xB4,0x4F,0x41};

  RequestAddSkillGlobalBuff() : type_(( ::entity::EntityType::type)0), id_(0) {
  }

  virtual ~RequestAddSkillGlobalBuff() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
  std::vector<SkillBuff>  buffs_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_buffs_(const std::vector<SkillBuff> & val) {
    buffs_ = val;
  }

  bool operator == (const RequestAddSkillGlobalBuff & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(buffs_ == rhs.buffs_))
      return false;
    return true;
  }
  bool operator != (const RequestAddSkillGlobalBuff &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestAddSkillGlobalBuff & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestAddSkillGlobalBuff &a, RequestAddSkillGlobalBuff &b);


class RequestRemoveSkillGlobalBuff {
 public:

  static const char* ascii_fingerprint; // = "9A26B3D24570CE01C434367200B44F41";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x26,0xB3,0xD2,0x45,0x70,0xCE,0x01,0xC4,0x34,0x36,0x72,0x00,0xB4,0x4F,0x41};

  RequestRemoveSkillGlobalBuff() : type_(( ::entity::EntityType::type)0), id_(0) {
  }

  virtual ~RequestRemoveSkillGlobalBuff() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
  std::vector<SkillBuff>  buffs_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_buffs_(const std::vector<SkillBuff> & val) {
    buffs_ = val;
  }

  bool operator == (const RequestRemoveSkillGlobalBuff & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(buffs_ == rhs.buffs_))
      return false;
    return true;
  }
  bool operator != (const RequestRemoveSkillGlobalBuff &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestRemoveSkillGlobalBuff & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestRemoveSkillGlobalBuff &a, RequestRemoveSkillGlobalBuff &b);


class RequestSkillHurt {
 public:

  static const char* ascii_fingerprint; // = "6E21708742A4726ED960FDBCFB610570";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0x21,0x70,0x87,0x42,0xA4,0x72,0x6E,0xD9,0x60,0xFD,0xBC,0xFB,0x61,0x05,0x70};

  RequestSkillHurt() : type_(( ::entity::EntityType::type)0), id_(0), src_type_(( ::entity::EntityType::type)0), src_id_(0), hurt_id_(0) {
  }

  virtual ~RequestSkillHurt() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
   ::entity::EntityType::type src_type_;
  int64_t src_id_;
  int32_t hurt_id_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_src_type_(const  ::entity::EntityType::type val) {
    src_type_ = val;
  }

  void __set_src_id_(const int64_t val) {
    src_id_ = val;
  }

  void __set_hurt_id_(const int32_t val) {
    hurt_id_ = val;
  }

  bool operator == (const RequestSkillHurt & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(src_type_ == rhs.src_type_))
      return false;
    if (!(src_id_ == rhs.src_id_))
      return false;
    if (!(hurt_id_ == rhs.hurt_id_))
      return false;
    return true;
  }
  bool operator != (const RequestSkillHurt &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestSkillHurt & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestSkillHurt &a, RequestSkillHurt &b);


class RequestSkillAddTempSkill {
 public:

  static const char* ascii_fingerprint; // = "9528C069007D1F03D56E8EFB8CB3B337";
  static const uint8_t binary_fingerprint[16]; // = {0x95,0x28,0xC0,0x69,0x00,0x7D,0x1F,0x03,0xD5,0x6E,0x8E,0xFB,0x8C,0xB3,0xB3,0x37};

  RequestSkillAddTempSkill() : type_(( ::entity::EntityType::type)0), id_(0), skill_id_(0), skill_level_(0), result_(0) {
  }

  virtual ~RequestSkillAddTempSkill() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
  int32_t skill_id_;
  int32_t skill_level_;
  bool result_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_skill_id_(const int32_t val) {
    skill_id_ = val;
  }

  void __set_skill_level_(const int32_t val) {
    skill_level_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const RequestSkillAddTempSkill & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(skill_id_ == rhs.skill_id_))
      return false;
    if (!(skill_level_ == rhs.skill_level_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const RequestSkillAddTempSkill &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestSkillAddTempSkill & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestSkillAddTempSkill &a, RequestSkillAddTempSkill &b);


class RequestSkillRemoveTempSkill {
 public:

  static const char* ascii_fingerprint; // = "729E45C97A0E730BDEEBC207E4F729D3";
  static const uint8_t binary_fingerprint[16]; // = {0x72,0x9E,0x45,0xC9,0x7A,0x0E,0x73,0x0B,0xDE,0xEB,0xC2,0x07,0xE4,0xF7,0x29,0xD3};

  RequestSkillRemoveTempSkill() : type_(( ::entity::EntityType::type)0), id_(0), skill_id_(0), result_(0) {
  }

  virtual ~RequestSkillRemoveTempSkill() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
  int32_t skill_id_;
  bool result_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_skill_id_(const int32_t val) {
    skill_id_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const RequestSkillRemoveTempSkill & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(skill_id_ == rhs.skill_id_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const RequestSkillRemoveTempSkill &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestSkillRemoveTempSkill & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestSkillRemoveTempSkill &a, RequestSkillRemoveTempSkill &b);


class RequestSkillChangeSkillForm {
 public:

  static const char* ascii_fingerprint; // = "0B404843D363CA575114065309EF6552";
  static const uint8_t binary_fingerprint[16]; // = {0x0B,0x40,0x48,0x43,0xD3,0x63,0xCA,0x57,0x51,0x14,0x06,0x53,0x09,0xEF,0x65,0x52};

  RequestSkillChangeSkillForm() : type_(( ::entity::EntityType::type)0), id_(0), form_(( ::entity::SkillFormType::type)0), result_(0) {
  }

  virtual ~RequestSkillChangeSkillForm() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
   ::entity::SkillFormType::type form_;
  bool result_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_form_(const  ::entity::SkillFormType::type val) {
    form_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const RequestSkillChangeSkillForm & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(form_ == rhs.form_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const RequestSkillChangeSkillForm &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestSkillChangeSkillForm & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestSkillChangeSkillForm &a, RequestSkillChangeSkillForm &b);


class RequestSkillIncreaseAttribute {
 public:

  static const char* ascii_fingerprint; // = "23D14CC7E3D7126CD29C9E443A919BD2";
  static const uint8_t binary_fingerprint[16]; // = {0x23,0xD1,0x4C,0xC7,0xE3,0xD7,0x12,0x6C,0xD2,0x9C,0x9E,0x44,0x3A,0x91,0x9B,0xD2};

  RequestSkillIncreaseAttribute() : type_(( ::entity::EntityType::type)0), id_(0), skill_id_(0), attribute_(( ::entity::SkillVarFields::type)0), increment_(0) {
  }

  virtual ~RequestSkillIncreaseAttribute() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
  int32_t skill_id_;
   ::entity::SkillVarFields::type attribute_;
  int32_t increment_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_skill_id_(const int32_t val) {
    skill_id_ = val;
  }

  void __set_attribute_(const  ::entity::SkillVarFields::type val) {
    attribute_ = val;
  }

  void __set_increment_(const int32_t val) {
    increment_ = val;
  }

  bool operator == (const RequestSkillIncreaseAttribute & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(skill_id_ == rhs.skill_id_))
      return false;
    if (!(attribute_ == rhs.attribute_))
      return false;
    if (!(increment_ == rhs.increment_))
      return false;
    return true;
  }
  bool operator != (const RequestSkillIncreaseAttribute &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestSkillIncreaseAttribute & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestSkillIncreaseAttribute &a, RequestSkillIncreaseAttribute &b);


class RequestSkillSetFightingStatus {
 public:

  static const char* ascii_fingerprint; // = "F21E28181131EC195FD41B074C47AFBF";
  static const uint8_t binary_fingerprint[16]; // = {0xF2,0x1E,0x28,0x18,0x11,0x31,0xEC,0x19,0x5F,0xD4,0x1B,0x07,0x4C,0x47,0xAF,0xBF};

  RequestSkillSetFightingStatus() : type_(( ::entity::EntityType::type)0), id_(0), status_(0) {
  }

  virtual ~RequestSkillSetFightingStatus() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
  bool status_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_status_(const bool val) {
    status_ = val;
  }

  bool operator == (const RequestSkillSetFightingStatus & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(status_ == rhs.status_))
      return false;
    return true;
  }
  bool operator != (const RequestSkillSetFightingStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestSkillSetFightingStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestSkillSetFightingStatus &a, RequestSkillSetFightingStatus &b);

}}} // namespace

#endif
