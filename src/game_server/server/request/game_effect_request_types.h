/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef game_effect_request_TYPES_H
#define game_effect_request_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "game_request_types.h"
#include "role_types.h"
#include "entity_types.h"


namespace game { namespace server { namespace request {


class RequestEffectStart {
 public:

  static const char* ascii_fingerprint; // = "729E45C97A0E730BDEEBC207E4F729D3";
  static const uint8_t binary_fingerprint[16]; // = {0x72,0x9E,0x45,0xC9,0x7A,0x0E,0x73,0x0B,0xDE,0xEB,0xC2,0x07,0xE4,0xF7,0x29,0xD3};

  RequestEffectStart() : entity_type_(( ::entity::EntityType::type)0), entity_id_(0), effect_id_(0), succeed_(0) {
  }

  virtual ~RequestEffectStart() throw() {}

   ::entity::EntityType::type entity_type_;
  int64_t entity_id_;
  int32_t effect_id_;
  bool succeed_;

  void __set_entity_type_(const  ::entity::EntityType::type val) {
    entity_type_ = val;
  }

  void __set_entity_id_(const int64_t val) {
    entity_id_ = val;
  }

  void __set_effect_id_(const int32_t val) {
    effect_id_ = val;
  }

  void __set_succeed_(const bool val) {
    succeed_ = val;
  }

  bool operator == (const RequestEffectStart & rhs) const
  {
    if (!(entity_type_ == rhs.entity_type_))
      return false;
    if (!(entity_id_ == rhs.entity_id_))
      return false;
    if (!(effect_id_ == rhs.effect_id_))
      return false;
    if (!(succeed_ == rhs.succeed_))
      return false;
    return true;
  }
  bool operator != (const RequestEffectStart &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestEffectStart & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestEffectStart &a, RequestEffectStart &b);


class RequestEffectEnd {
 public:

  static const char* ascii_fingerprint; // = "729E45C97A0E730BDEEBC207E4F729D3";
  static const uint8_t binary_fingerprint[16]; // = {0x72,0x9E,0x45,0xC9,0x7A,0x0E,0x73,0x0B,0xDE,0xEB,0xC2,0x07,0xE4,0xF7,0x29,0xD3};

  RequestEffectEnd() : entity_type_(( ::entity::EntityType::type)0), entity_id_(0), effect_id_(0), succeed_(0) {
  }

  virtual ~RequestEffectEnd() throw() {}

   ::entity::EntityType::type entity_type_;
  int64_t entity_id_;
  int32_t effect_id_;
  bool succeed_;

  void __set_entity_type_(const  ::entity::EntityType::type val) {
    entity_type_ = val;
  }

  void __set_entity_id_(const int64_t val) {
    entity_id_ = val;
  }

  void __set_effect_id_(const int32_t val) {
    effect_id_ = val;
  }

  void __set_succeed_(const bool val) {
    succeed_ = val;
  }

  bool operator == (const RequestEffectEnd & rhs) const
  {
    if (!(entity_type_ == rhs.entity_type_))
      return false;
    if (!(entity_id_ == rhs.entity_id_))
      return false;
    if (!(effect_id_ == rhs.effect_id_))
      return false;
    if (!(succeed_ == rhs.succeed_))
      return false;
    return true;
  }
  bool operator != (const RequestEffectEnd &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestEffectEnd & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestEffectEnd &a, RequestEffectEnd &b);


class RequestEffectCommonStatusStart {
 public:

  static const char* ascii_fingerprint; // = "0B404843D363CA575114065309EF6552";
  static const uint8_t binary_fingerprint[16]; // = {0x0B,0x40,0x48,0x43,0xD3,0x63,0xCA,0x57,0x51,0x14,0x06,0x53,0x09,0xEF,0x65,0x52};

  RequestEffectCommonStatusStart() : entity_type_(( ::entity::EntityType::type)0), entity_id_(0), status_(( ::entity::RoleCommonStatus::type)0), succeed_(0) {
  }

  virtual ~RequestEffectCommonStatusStart() throw() {}

   ::entity::EntityType::type entity_type_;
  int64_t entity_id_;
   ::entity::RoleCommonStatus::type status_;
  bool succeed_;

  void __set_entity_type_(const  ::entity::EntityType::type val) {
    entity_type_ = val;
  }

  void __set_entity_id_(const int64_t val) {
    entity_id_ = val;
  }

  void __set_status_(const  ::entity::RoleCommonStatus::type val) {
    status_ = val;
  }

  void __set_succeed_(const bool val) {
    succeed_ = val;
  }

  bool operator == (const RequestEffectCommonStatusStart & rhs) const
  {
    if (!(entity_type_ == rhs.entity_type_))
      return false;
    if (!(entity_id_ == rhs.entity_id_))
      return false;
    if (!(status_ == rhs.status_))
      return false;
    if (!(succeed_ == rhs.succeed_))
      return false;
    return true;
  }
  bool operator != (const RequestEffectCommonStatusStart &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestEffectCommonStatusStart & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestEffectCommonStatusStart &a, RequestEffectCommonStatusStart &b);


class RequestEffectCommonStatusEnd {
 public:

  static const char* ascii_fingerprint; // = "0B404843D363CA575114065309EF6552";
  static const uint8_t binary_fingerprint[16]; // = {0x0B,0x40,0x48,0x43,0xD3,0x63,0xCA,0x57,0x51,0x14,0x06,0x53,0x09,0xEF,0x65,0x52};

  RequestEffectCommonStatusEnd() : entity_type_(( ::entity::EntityType::type)0), entity_id_(0), status_(( ::entity::RoleCommonStatus::type)0), succeed_(0) {
  }

  virtual ~RequestEffectCommonStatusEnd() throw() {}

   ::entity::EntityType::type entity_type_;
  int64_t entity_id_;
   ::entity::RoleCommonStatus::type status_;
  bool succeed_;

  void __set_entity_type_(const  ::entity::EntityType::type val) {
    entity_type_ = val;
  }

  void __set_entity_id_(const int64_t val) {
    entity_id_ = val;
  }

  void __set_status_(const  ::entity::RoleCommonStatus::type val) {
    status_ = val;
  }

  void __set_succeed_(const bool val) {
    succeed_ = val;
  }

  bool operator == (const RequestEffectCommonStatusEnd & rhs) const
  {
    if (!(entity_type_ == rhs.entity_type_))
      return false;
    if (!(entity_id_ == rhs.entity_id_))
      return false;
    if (!(status_ == rhs.status_))
      return false;
    if (!(succeed_ == rhs.succeed_))
      return false;
    return true;
  }
  bool operator != (const RequestEffectCommonStatusEnd &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestEffectCommonStatusEnd & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestEffectCommonStatusEnd &a, RequestEffectCommonStatusEnd &b);

}}} // namespace

#endif
