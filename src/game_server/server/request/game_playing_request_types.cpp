/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "game_playing_request_types.h"

#include <algorithm>

namespace game { namespace server { namespace request {

const char* RequestPlayingSetActorVariables::ascii_fingerprint = "B1CF74E1455F7B63B19CEBEBEAF7C304";
const uint8_t RequestPlayingSetActorVariables::binary_fingerprint[16] = {0xB1,0xCF,0x74,0xE1,0x45,0x5F,0x7B,0x63,0xB1,0x9C,0xEB,0xEB,0xEA,0xF7,0xC3,0x04};

uint32_t RequestPlayingSetActorVariables::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_keys_ = false;
  bool isset_values_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->keys_.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->keys_.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readString(this->keys_[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          isset_keys_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->values_.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->values_.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += iprot->readI64(this->values_[_i9]);
            }
            xfer += iprot->readListEnd();
          }
          isset_values_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_keys_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_values_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestPlayingSetActorVariables::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestPlayingSetActorVariables");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keys_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->keys_.size()));
    std::vector<std::string> ::const_iterator _iter10;
    for (_iter10 = this->keys_.begin(); _iter10 != this->keys_.end(); ++_iter10)
    {
      xfer += oprot->writeString((*_iter10));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("values_", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->values_.size()));
    std::vector<int64_t> ::const_iterator _iter11;
    for (_iter11 = this->values_.begin(); _iter11 != this->values_.end(); ++_iter11)
    {
      xfer += oprot->writeI64((*_iter11));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestPlayingSetActorVariables &a, RequestPlayingSetActorVariables &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.keys_, b.keys_);
  swap(a.values_, b.values_);
  swap(a.result_, b.result_);
}

const char* RequestPlayingGetActorVariables::ascii_fingerprint = "B1CF74E1455F7B63B19CEBEBEAF7C304";
const uint8_t RequestPlayingGetActorVariables::binary_fingerprint[16] = {0xB1,0xCF,0x74,0xE1,0x45,0x5F,0x7B,0x63,0xB1,0x9C,0xEB,0xEB,0xEA,0xF7,0xC3,0x04};

uint32_t RequestPlayingGetActorVariables::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_keys_ = false;
  bool isset_values_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->keys_.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->keys_.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += iprot->readString(this->keys_[_i16]);
            }
            xfer += iprot->readListEnd();
          }
          isset_keys_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->values_.clear();
            uint32_t _size17;
            ::apache::thrift::protocol::TType _etype20;
            xfer += iprot->readListBegin(_etype20, _size17);
            this->values_.resize(_size17);
            uint32_t _i21;
            for (_i21 = 0; _i21 < _size17; ++_i21)
            {
              xfer += iprot->readI64(this->values_[_i21]);
            }
            xfer += iprot->readListEnd();
          }
          isset_values_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_keys_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_values_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestPlayingGetActorVariables::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestPlayingGetActorVariables");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keys_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->keys_.size()));
    std::vector<std::string> ::const_iterator _iter22;
    for (_iter22 = this->keys_.begin(); _iter22 != this->keys_.end(); ++_iter22)
    {
      xfer += oprot->writeString((*_iter22));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("values_", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->values_.size()));
    std::vector<int64_t> ::const_iterator _iter23;
    for (_iter23 = this->values_.begin(); _iter23 != this->values_.end(); ++_iter23)
    {
      xfer += oprot->writeI64((*_iter23));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestPlayingGetActorVariables &a, RequestPlayingGetActorVariables &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.keys_, b.keys_);
  swap(a.values_, b.values_);
  swap(a.result_, b.result_);
}

const char* RequestPlayingIncreaseActorVariables::ascii_fingerprint = "32415F6D53BD65AAFE7533A546FD5B3C";
const uint8_t RequestPlayingIncreaseActorVariables::binary_fingerprint[16] = {0x32,0x41,0x5F,0x6D,0x53,0xBD,0x65,0xAA,0xFE,0x75,0x33,0xA5,0x46,0xFD,0x5B,0x3C};

uint32_t RequestPlayingIncreaseActorVariables::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_keys_ = false;
  bool isset_increments_ = false;
  bool isset_values_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->keys_.clear();
            uint32_t _size24;
            ::apache::thrift::protocol::TType _etype27;
            xfer += iprot->readListBegin(_etype27, _size24);
            this->keys_.resize(_size24);
            uint32_t _i28;
            for (_i28 = 0; _i28 < _size24; ++_i28)
            {
              xfer += iprot->readString(this->keys_[_i28]);
            }
            xfer += iprot->readListEnd();
          }
          isset_keys_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->increments_.clear();
            uint32_t _size29;
            ::apache::thrift::protocol::TType _etype32;
            xfer += iprot->readListBegin(_etype32, _size29);
            this->increments_.resize(_size29);
            uint32_t _i33;
            for (_i33 = 0; _i33 < _size29; ++_i33)
            {
              xfer += iprot->readI64(this->increments_[_i33]);
            }
            xfer += iprot->readListEnd();
          }
          isset_increments_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->values_.clear();
            uint32_t _size34;
            ::apache::thrift::protocol::TType _etype37;
            xfer += iprot->readListBegin(_etype37, _size34);
            this->values_.resize(_size34);
            uint32_t _i38;
            for (_i38 = 0; _i38 < _size34; ++_i38)
            {
              xfer += iprot->readI64(this->values_[_i38]);
            }
            xfer += iprot->readListEnd();
          }
          isset_values_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_keys_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_increments_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_values_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestPlayingIncreaseActorVariables::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestPlayingIncreaseActorVariables");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keys_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->keys_.size()));
    std::vector<std::string> ::const_iterator _iter39;
    for (_iter39 = this->keys_.begin(); _iter39 != this->keys_.end(); ++_iter39)
    {
      xfer += oprot->writeString((*_iter39));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("increments_", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->increments_.size()));
    std::vector<int64_t> ::const_iterator _iter40;
    for (_iter40 = this->increments_.begin(); _iter40 != this->increments_.end(); ++_iter40)
    {
      xfer += oprot->writeI64((*_iter40));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("values_", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->values_.size()));
    std::vector<int64_t> ::const_iterator _iter41;
    for (_iter41 = this->values_.begin(); _iter41 != this->values_.end(); ++_iter41)
    {
      xfer += oprot->writeI64((*_iter41));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestPlayingIncreaseActorVariables &a, RequestPlayingIncreaseActorVariables &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.keys_, b.keys_);
  swap(a.increments_, b.increments_);
  swap(a.values_, b.values_);
  swap(a.result_, b.result_);
}

const char* RequestPlayingDecreaseActorVariables::ascii_fingerprint = "32415F6D53BD65AAFE7533A546FD5B3C";
const uint8_t RequestPlayingDecreaseActorVariables::binary_fingerprint[16] = {0x32,0x41,0x5F,0x6D,0x53,0xBD,0x65,0xAA,0xFE,0x75,0x33,0xA5,0x46,0xFD,0x5B,0x3C};

uint32_t RequestPlayingDecreaseActorVariables::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_keys_ = false;
  bool isset_decrements_ = false;
  bool isset_values_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->keys_.clear();
            uint32_t _size42;
            ::apache::thrift::protocol::TType _etype45;
            xfer += iprot->readListBegin(_etype45, _size42);
            this->keys_.resize(_size42);
            uint32_t _i46;
            for (_i46 = 0; _i46 < _size42; ++_i46)
            {
              xfer += iprot->readString(this->keys_[_i46]);
            }
            xfer += iprot->readListEnd();
          }
          isset_keys_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->decrements_.clear();
            uint32_t _size47;
            ::apache::thrift::protocol::TType _etype50;
            xfer += iprot->readListBegin(_etype50, _size47);
            this->decrements_.resize(_size47);
            uint32_t _i51;
            for (_i51 = 0; _i51 < _size47; ++_i51)
            {
              xfer += iprot->readI64(this->decrements_[_i51]);
            }
            xfer += iprot->readListEnd();
          }
          isset_decrements_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->values_.clear();
            uint32_t _size52;
            ::apache::thrift::protocol::TType _etype55;
            xfer += iprot->readListBegin(_etype55, _size52);
            this->values_.resize(_size52);
            uint32_t _i56;
            for (_i56 = 0; _i56 < _size52; ++_i56)
            {
              xfer += iprot->readI64(this->values_[_i56]);
            }
            xfer += iprot->readListEnd();
          }
          isset_values_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_keys_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_decrements_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_values_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestPlayingDecreaseActorVariables::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestPlayingDecreaseActorVariables");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keys_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->keys_.size()));
    std::vector<std::string> ::const_iterator _iter57;
    for (_iter57 = this->keys_.begin(); _iter57 != this->keys_.end(); ++_iter57)
    {
      xfer += oprot->writeString((*_iter57));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("decrements_", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->decrements_.size()));
    std::vector<int64_t> ::const_iterator _iter58;
    for (_iter58 = this->decrements_.begin(); _iter58 != this->decrements_.end(); ++_iter58)
    {
      xfer += oprot->writeI64((*_iter58));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("values_", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->values_.size()));
    std::vector<int64_t> ::const_iterator _iter59;
    for (_iter59 = this->values_.begin(); _iter59 != this->values_.end(); ++_iter59)
    {
      xfer += oprot->writeI64((*_iter59));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestPlayingDecreaseActorVariables &a, RequestPlayingDecreaseActorVariables &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.keys_, b.keys_);
  swap(a.decrements_, b.decrements_);
  swap(a.values_, b.values_);
  swap(a.result_, b.result_);
}

const char* RequestPlayingInitializeActor::ascii_fingerprint = "E6B268EC1DCCC912680C96518492461B";
const uint8_t RequestPlayingInitializeActor::binary_fingerprint[16] = {0xE6,0xB2,0x68,0xEC,0x1D,0xCC,0xC9,0x12,0x68,0x0C,0x96,0x51,0x84,0x92,0x46,0x1B};

uint32_t RequestPlayingInitializeActor::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_spend_time_ = false;
  bool isset_scores_ = false;
  bool isset_datas_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->spend_time_);
          isset_spend_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->scores_.clear();
            uint32_t _size60;
            ::apache::thrift::protocol::TType _etype63;
            xfer += iprot->readListBegin(_etype63, _size60);
            this->scores_.resize(_size60);
            uint32_t _i64;
            for (_i64 = 0; _i64 < _size60; ++_i64)
            {
              xfer += this->scores_[_i64].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_scores_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->datas_.clear();
            uint32_t _size65;
            ::apache::thrift::protocol::TType _etype68;
            xfer += iprot->readListBegin(_etype68, _size65);
            this->datas_.resize(_size65);
            uint32_t _i69;
            for (_i69 = 0; _i69 < _size65; ++_i69)
            {
              xfer += iprot->readI32(this->datas_[_i69]);
            }
            xfer += iprot->readListEnd();
          }
          isset_datas_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_spend_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_scores_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_datas_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestPlayingInitializeActor::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestPlayingInitializeActor");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("spend_time_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->spend_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scores_", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->scores_.size()));
    std::vector< ::entity::PlayingScoreField> ::const_iterator _iter70;
    for (_iter70 = this->scores_.begin(); _iter70 != this->scores_.end(); ++_iter70)
    {
      xfer += (*_iter70).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("datas_", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->datas_.size()));
    std::vector<int32_t> ::const_iterator _iter71;
    for (_iter71 = this->datas_.begin(); _iter71 != this->datas_.end(); ++_iter71)
    {
      xfer += oprot->writeI32((*_iter71));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestPlayingInitializeActor &a, RequestPlayingInitializeActor &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.spend_time_, b.spend_time_);
  swap(a.scores_, b.scores_);
  swap(a.datas_, b.datas_);
}

const char* RequestPlayingSynchronizeScore::ascii_fingerprint = "494E08EEB1EB1A5B6421F6C9547E5F8F";
const uint8_t RequestPlayingSynchronizeScore::binary_fingerprint[16] = {0x49,0x4E,0x08,0xEE,0xB1,0xEB,0x1A,0x5B,0x64,0x21,0xF6,0xC9,0x54,0x7E,0x5F,0x8F};

uint32_t RequestPlayingSynchronizeScore::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_score_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->score_.read(iprot);
          isset_score_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_score_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestPlayingSynchronizeScore::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestPlayingSynchronizeScore");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("score_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->score_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestPlayingSynchronizeScore &a, RequestPlayingSynchronizeScore &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.score_, b.score_);
}

const char* RequestPlayingSynchronizeRanking::ascii_fingerprint = "AA4F527100A418E488E7EBFE2AF9DDD3";
const uint8_t RequestPlayingSynchronizeRanking::binary_fingerprint[16] = {0xAA,0x4F,0x52,0x71,0x00,0xA4,0x18,0xE4,0x88,0xE7,0xEB,0xFE,0x2A,0xF9,0xDD,0xD3};

uint32_t RequestPlayingSynchronizeRanking::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_ranking_ = false;
  bool isset_actors_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ranking_.clear();
            uint32_t _size72;
            ::apache::thrift::protocol::TType _etype75;
            xfer += iprot->readListBegin(_etype75, _size72);
            this->ranking_.resize(_size72);
            uint32_t _i76;
            for (_i76 = 0; _i76 < _size72; ++_i76)
            {
              xfer += this->ranking_[_i76].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_ranking_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->actors_.clear();
            uint32_t _size77;
            ::apache::thrift::protocol::TType _etype80;
            xfer += iprot->readListBegin(_etype80, _size77);
            this->actors_.resize(_size77);
            uint32_t _i81;
            for (_i81 = 0; _i81 < _size77; ++_i81)
            {
              xfer += iprot->readI64(this->actors_[_i81]);
            }
            xfer += iprot->readListEnd();
          }
          isset_actors_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_ranking_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_actors_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestPlayingSynchronizeRanking::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestPlayingSynchronizeRanking");

  xfer += oprot->writeFieldBegin("ranking_", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ranking_.size()));
    std::vector< ::entity::PlayingRankingField> ::const_iterator _iter82;
    for (_iter82 = this->ranking_.begin(); _iter82 != this->ranking_.end(); ++_iter82)
    {
      xfer += (*_iter82).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("actors_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->actors_.size()));
    std::vector<int64_t> ::const_iterator _iter83;
    for (_iter83 = this->actors_.begin(); _iter83 != this->actors_.end(); ++_iter83)
    {
      xfer += oprot->writeI64((*_iter83));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestPlayingSynchronizeRanking &a, RequestPlayingSynchronizeRanking &b) {
  using ::std::swap;
  swap(a.ranking_, b.ranking_);
  swap(a.actors_, b.actors_);
}

const char* RequestPlayingComplete::ascii_fingerprint = "640FC39CA26580A91DA36AFC5883263D";
const uint8_t RequestPlayingComplete::binary_fingerprint[16] = {0x64,0x0F,0xC3,0x9C,0xA2,0x65,0x80,0xA9,0x1D,0xA3,0x6A,0xFC,0x58,0x83,0x26,0x3D};

uint32_t RequestPlayingComplete::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_playing_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->playing_);
          isset_playing_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->result_.read(iprot);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->awards_.clear();
            uint32_t _size84;
            ::apache::thrift::protocol::TType _etype87;
            xfer += iprot->readListBegin(_etype87, _size84);
            this->awards_.resize(_size84);
            uint32_t _i88;
            for (_i88 = 0; _i88 < _size84; ++_i88)
            {
              xfer += this->awards_[_i88].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.awards_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->draw_award_.read(iprot);
          this->__isset.draw_award_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_playing_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestPlayingComplete::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestPlayingComplete");

  xfer += oprot->writeFieldBegin("playing_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->playing_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->result_.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.awards_) {
    xfer += oprot->writeFieldBegin("awards_", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->awards_.size()));
      std::vector< ::entity::PlayingAwardField> ::const_iterator _iter89;
      for (_iter89 = this->awards_.begin(); _iter89 != this->awards_.end(); ++_iter89)
      {
        xfer += (*_iter89).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.draw_award_) {
    xfer += oprot->writeFieldBegin("draw_award_", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->draw_award_.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestPlayingComplete &a, RequestPlayingComplete &b) {
  using ::std::swap;
  swap(a.playing_, b.playing_);
  swap(a.result_, b.result_);
  swap(a.awards_, b.awards_);
  swap(a.draw_award_, b.draw_award_);
  swap(a.__isset, b.__isset);
}

const char* RequestPlayingActorComplete::ascii_fingerprint = "84EF0604541B0EB5D7EE42C1998BE18D";
const uint8_t RequestPlayingActorComplete::binary_fingerprint[16] = {0x84,0xEF,0x06,0x04,0x54,0x1B,0x0E,0xB5,0xD7,0xEE,0x42,0xC1,0x99,0x8B,0xE1,0x8D};

uint32_t RequestPlayingActorComplete::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_playing_ = false;
  bool isset_actor_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->playing_);
          isset_playing_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->result_.read(iprot);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->awards_.clear();
            uint32_t _size90;
            ::apache::thrift::protocol::TType _etype93;
            xfer += iprot->readListBegin(_etype93, _size90);
            this->awards_.resize(_size90);
            uint32_t _i94;
            for (_i94 = 0; _i94 < _size90; ++_i94)
            {
              xfer += this->awards_[_i94].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.awards_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->draw_award_.read(iprot);
          this->__isset.draw_award_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_playing_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestPlayingActorComplete::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestPlayingActorComplete");

  xfer += oprot->writeFieldBegin("playing_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->playing_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->result_.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.awards_) {
    xfer += oprot->writeFieldBegin("awards_", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->awards_.size()));
      std::vector< ::entity::PlayingAwardField> ::const_iterator _iter95;
      for (_iter95 = this->awards_.begin(); _iter95 != this->awards_.end(); ++_iter95)
      {
        xfer += (*_iter95).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.draw_award_) {
    xfer += oprot->writeFieldBegin("draw_award_", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->draw_award_.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestPlayingActorComplete &a, RequestPlayingActorComplete &b) {
  using ::std::swap;
  swap(a.playing_, b.playing_);
  swap(a.actor_, b.actor_);
  swap(a.result_, b.result_);
  swap(a.awards_, b.awards_);
  swap(a.draw_award_, b.draw_award_);
  swap(a.__isset, b.__isset);
}

const char* RequestPlayingFailure::ascii_fingerprint = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
const uint8_t RequestPlayingFailure::binary_fingerprint[16] = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

uint32_t RequestPlayingFailure::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_playing_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->playing_);
          isset_playing_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_playing_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestPlayingFailure::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestPlayingFailure");

  xfer += oprot->writeFieldBegin("playing_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->playing_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestPlayingFailure &a, RequestPlayingFailure &b) {
  using ::std::swap;
  swap(a.playing_, b.playing_);
}

const char* RequestPlayingUpdateRecord::ascii_fingerprint = "DCE91D5C0B77961ECDD3233260ADA22F";
const uint8_t RequestPlayingUpdateRecord::binary_fingerprint[16] = {0xDC,0xE9,0x1D,0x5C,0x0B,0x77,0x96,0x1E,0xCD,0xD3,0x23,0x32,0x60,0xAD,0xA2,0x2F};

uint32_t RequestPlayingUpdateRecord::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_playing_template_ = false;
  bool isset_record_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_template_);
          isset_playing_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->record_.read(iprot);
          isset_record_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_playing_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_record_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestPlayingUpdateRecord::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestPlayingUpdateRecord");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("playing_template_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->playing_template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("record_", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->record_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestPlayingUpdateRecord &a, RequestPlayingUpdateRecord &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.playing_template_, b.playing_template_);
  swap(a.record_, b.record_);
}

const char* RequestPlayingUpdateResult::ascii_fingerprint = "EA075559887FE5B713CBE3869BC48BF9";
const uint8_t RequestPlayingUpdateResult::binary_fingerprint[16] = {0xEA,0x07,0x55,0x59,0x88,0x7F,0xE5,0xB7,0x13,0xCB,0xE3,0x86,0x9B,0xC4,0x8B,0xF9};

uint32_t RequestPlayingUpdateResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_playing_template_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_template_);
          isset_playing_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->result_.read(iprot);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_playing_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestPlayingUpdateResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestPlayingUpdateResult");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("playing_template_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->playing_template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->result_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestPlayingUpdateResult &a, RequestPlayingUpdateResult &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.playing_template_, b.playing_template_);
  swap(a.result_, b.result_);
}

const char* RequestPlayingAddAward::ascii_fingerprint = "44B5A269FCC223FF1D9925EAF80B5E45";
const uint8_t RequestPlayingAddAward::binary_fingerprint[16] = {0x44,0xB5,0xA2,0x69,0xFC,0xC2,0x23,0xFF,0x1D,0x99,0x25,0xEA,0xF8,0x0B,0x5E,0x45};

uint32_t RequestPlayingAddAward::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_playing_template_ = false;
  bool isset_awards_ = false;
  bool isset_draw_award_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_template_);
          isset_playing_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->awards_.clear();
            uint32_t _size96;
            ::apache::thrift::protocol::TType _etype99;
            xfer += iprot->readListBegin(_etype99, _size96);
            this->awards_.resize(_size96);
            uint32_t _i100;
            for (_i100 = 0; _i100 < _size96; ++_i100)
            {
              xfer += this->awards_[_i100].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_awards_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->draw_award_.read(iprot);
          isset_draw_award_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_playing_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_awards_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_draw_award_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestPlayingAddAward::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestPlayingAddAward");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("playing_template_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->playing_template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("awards_", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->awards_.size()));
    std::vector< ::entity::PlayingAwardField> ::const_iterator _iter101;
    for (_iter101 = this->awards_.begin(); _iter101 != this->awards_.end(); ++_iter101)
    {
      xfer += (*_iter101).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("draw_award_", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->draw_award_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestPlayingAddAward &a, RequestPlayingAddAward &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.playing_template_, b.playing_template_);
  swap(a.awards_, b.awards_);
  swap(a.draw_award_, b.draw_award_);
}

const char* RequestPlayingClearComplete::ascii_fingerprint = "AFAFBCDB9822F9D1AA4E44188E720B47";
const uint8_t RequestPlayingClearComplete::binary_fingerprint[16] = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

uint32_t RequestPlayingClearComplete::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_playing_template_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_template_);
          isset_playing_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_playing_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestPlayingClearComplete::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestPlayingClearComplete");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("playing_template_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->playing_template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestPlayingClearComplete &a, RequestPlayingClearComplete &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.playing_template_, b.playing_template_);
}

const char* RequestPlayingIncreaseComplete::ascii_fingerprint = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
const uint8_t RequestPlayingIncreaseComplete::binary_fingerprint[16] = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

uint32_t RequestPlayingIncreaseComplete::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_playing_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->playing_);
          isset_playing_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_playing_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestPlayingIncreaseComplete::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestPlayingIncreaseComplete");

  xfer += oprot->writeFieldBegin("playing_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->playing_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestPlayingIncreaseComplete &a, RequestPlayingIncreaseComplete &b) {
  using ::std::swap;
  swap(a.playing_, b.playing_);
}

const char* RequestPlayingActorIncreaseComplete::ascii_fingerprint = "AFAFBCDB9822F9D1AA4E44188E720B47";
const uint8_t RequestPlayingActorIncreaseComplete::binary_fingerprint[16] = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

uint32_t RequestPlayingActorIncreaseComplete::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_playing_template_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_template_);
          isset_playing_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_playing_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestPlayingActorIncreaseComplete::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestPlayingActorIncreaseComplete");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("playing_template_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->playing_template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestPlayingActorIncreaseComplete &a, RequestPlayingActorIncreaseComplete &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.playing_template_, b.playing_template_);
}

const char* RequestPlayingAwardActor::ascii_fingerprint = "0C683EEB55C2B9ADA938AAF50F89DF74";
const uint8_t RequestPlayingAwardActor::binary_fingerprint[16] = {0x0C,0x68,0x3E,0xEB,0x55,0xC2,0xB9,0xAD,0xA9,0x38,0xAA,0xF5,0x0F,0x89,0xDF,0x74};

uint32_t RequestPlayingAwardActor::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_playing_template_ = false;
  bool isset_first_pass_award_ = false;
  bool isset_awards_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_template_);
          isset_playing_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->first_pass_award_);
          isset_first_pass_award_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->awards_.clear();
            uint32_t _size102;
            ::apache::thrift::protocol::TType _etype105;
            xfer += iprot->readListBegin(_etype105, _size102);
            this->awards_.resize(_size102);
            uint32_t _i106;
            for (_i106 = 0; _i106 < _size102; ++_i106)
            {
              xfer += this->awards_[_i106].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_awards_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_playing_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_first_pass_award_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_awards_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestPlayingAwardActor::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestPlayingAwardActor");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("playing_template_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->playing_template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("first_pass_award_", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->first_pass_award_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("awards_", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->awards_.size()));
    std::vector< ::entity::PlayingAwardField> ::const_iterator _iter107;
    for (_iter107 = this->awards_.begin(); _iter107 != this->awards_.end(); ++_iter107)
    {
      xfer += (*_iter107).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestPlayingAwardActor &a, RequestPlayingAwardActor &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.playing_template_, b.playing_template_);
  swap(a.first_pass_award_, b.first_pass_award_);
  swap(a.awards_, b.awards_);
}

const char* RequestPlayingActorPlayingID::ascii_fingerprint = "AFAFBCDB9822F9D1AA4E44188E720B47";
const uint8_t RequestPlayingActorPlayingID::binary_fingerprint[16] = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

uint32_t RequestPlayingActorPlayingID::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_playing_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_id_);
          isset_playing_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_playing_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestPlayingActorPlayingID::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestPlayingActorPlayingID");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("playing_id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->playing_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestPlayingActorPlayingID &a, RequestPlayingActorPlayingID &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.playing_id_, b.playing_id_);
}

}}} // namespace
