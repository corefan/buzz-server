/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef game_soul_request_TYPES_H
#define game_soul_request_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "game_request_types.h"
#include "soul_types.h"


namespace game { namespace server { namespace request {

struct SoulResultType {
  enum type {
    MIN = 0,
    SUCCESS = 0,
    ERROR_EXIST = 1,
    ERROR_NOT_EXIST = 2,
    ERROR_MAX_LEVEL = 3,
    ERROR_ACTOR_LEVEL = 4,
    ERROR_UNKNOWN = 5,
    MAX = 6
  };
};

extern const std::map<int, const char*> _SoulResultType_VALUES_TO_NAMES;


class RequestCheckSoulExit {
 public:

  static const char* ascii_fingerprint; // = "3495A4F4FB8ADC7B81D6DE532D320E88";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0x95,0xA4,0xF4,0xFB,0x8A,0xDC,0x7B,0x81,0xD6,0xDE,0x53,0x2D,0x32,0x0E,0x88};

  RequestCheckSoulExit() : actor_(0), soul_id_(0), result_(0) {
  }

  virtual ~RequestCheckSoulExit() throw() {}

  int64_t actor_;
  int32_t soul_id_;
  bool result_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_soul_id_(const int32_t val) {
    soul_id_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const RequestCheckSoulExit & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(soul_id_ == rhs.soul_id_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const RequestCheckSoulExit &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestCheckSoulExit & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestCheckSoulExit &a, RequestCheckSoulExit &b);


class RequestAddSoul {
 public:

  static const char* ascii_fingerprint; // = "1436097DE98403ECF290FF7F19A88437";
  static const uint8_t binary_fingerprint[16]; // = {0x14,0x36,0x09,0x7D,0xE9,0x84,0x03,0xEC,0xF2,0x90,0xFF,0x7F,0x19,0xA8,0x84,0x37};

  RequestAddSoul() : actor_(0), soul_id_(0), result_((SoulResultType::type)0) {
  }

  virtual ~RequestAddSoul() throw() {}

  int64_t actor_;
  int32_t soul_id_;
  SoulResultType::type result_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_soul_id_(const int32_t val) {
    soul_id_ = val;
  }

  void __set_result_(const SoulResultType::type val) {
    result_ = val;
  }

  bool operator == (const RequestAddSoul & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(soul_id_ == rhs.soul_id_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const RequestAddSoul &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestAddSoul & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestAddSoul &a, RequestAddSoul &b);


class SoulFields {
 public:

  static const char* ascii_fingerprint; // = "E0991C843E3F9D01A30FF59D9FBC2CAF";
  static const uint8_t binary_fingerprint[16]; // = {0xE0,0x99,0x1C,0x84,0x3E,0x3F,0x9D,0x01,0xA3,0x0F,0xF5,0x9D,0x9F,0xBC,0x2C,0xAF};

  SoulFields() : id_(0), level_(0), appear_(0) {
  }

  virtual ~SoulFields() throw() {}

  int32_t id_;
  int32_t level_;
  bool appear_;

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  void __set_level_(const int32_t val) {
    level_ = val;
  }

  void __set_appear_(const bool val) {
    appear_ = val;
  }

  bool operator == (const SoulFields & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(level_ == rhs.level_))
      return false;
    if (!(appear_ == rhs.appear_))
      return false;
    return true;
  }
  bool operator != (const SoulFields &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SoulFields & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SoulFields &a, SoulFields &b);

typedef struct _RequestSoulGet__isset {
  _RequestSoulGet__isset() : soul_id_(false), appear_(false) {}
  bool soul_id_;
  bool appear_;
} _RequestSoulGet__isset;

class RequestSoulGet {
 public:

  static const char* ascii_fingerprint; // = "19EF033F1A3952BCB1F273852B337163";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xEF,0x03,0x3F,0x1A,0x39,0x52,0xBC,0xB1,0xF2,0x73,0x85,0x2B,0x33,0x71,0x63};

  RequestSoulGet() : actor_(0), soul_id_(0), appear_(0) {
  }

  virtual ~RequestSoulGet() throw() {}

  int64_t actor_;
  int32_t soul_id_;
  bool appear_;
  std::vector<SoulFields>  souls_;

  _RequestSoulGet__isset __isset;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_soul_id_(const int32_t val) {
    soul_id_ = val;
    __isset.soul_id_ = true;
  }

  void __set_appear_(const bool val) {
    appear_ = val;
    __isset.appear_ = true;
  }

  void __set_souls_(const std::vector<SoulFields> & val) {
    souls_ = val;
  }

  bool operator == (const RequestSoulGet & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (__isset.soul_id_ != rhs.__isset.soul_id_)
      return false;
    else if (__isset.soul_id_ && !(soul_id_ == rhs.soul_id_))
      return false;
    if (__isset.appear_ != rhs.__isset.appear_)
      return false;
    else if (__isset.appear_ && !(appear_ == rhs.appear_))
      return false;
    if (!(souls_ == rhs.souls_))
      return false;
    return true;
  }
  bool operator != (const RequestSoulGet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestSoulGet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestSoulGet &a, RequestSoulGet &b);

typedef struct _RequestSoulGetEnergyStatus__isset {
  _RequestSoulGetEnergyStatus__isset() : status_(false) {}
  bool status_;
} _RequestSoulGetEnergyStatus__isset;

class RequestSoulGetEnergyStatus {
 public:

  static const char* ascii_fingerprint; // = "DFA40D9D2884599F3D1E7A57578F1384";
  static const uint8_t binary_fingerprint[16]; // = {0xDF,0xA4,0x0D,0x9D,0x28,0x84,0x59,0x9F,0x3D,0x1E,0x7A,0x57,0x57,0x8F,0x13,0x84};

  RequestSoulGetEnergyStatus() : actor_(0), status_(( ::entity::SoulEnergyStatus::type)0) {
  }

  virtual ~RequestSoulGetEnergyStatus() throw() {}

  int64_t actor_;
   ::entity::SoulEnergyStatus::type status_;

  _RequestSoulGetEnergyStatus__isset __isset;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_status_(const  ::entity::SoulEnergyStatus::type val) {
    status_ = val;
  }

  bool operator == (const RequestSoulGetEnergyStatus & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(status_ == rhs.status_))
      return false;
    return true;
  }
  bool operator != (const RequestSoulGetEnergyStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestSoulGetEnergyStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestSoulGetEnergyStatus &a, RequestSoulGetEnergyStatus &b);

}}} // namespace

#endif
