/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "game_item_request_types.h"

#include <algorithm>

namespace game { namespace server { namespace request {

int _kAddItemResultValues[] = {
  AddItemResult::SUCCESS,
  AddItemResult::PACKET_FULL,
  AddItemResult::ERROR_UNKNOWN
};
const char* _kAddItemResultNames[] = {
  "SUCCESS",
  "PACKET_FULL",
  "ERROR_UNKNOWN"
};
const std::map<int, const char*> _AddItemResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kAddItemResultValues, _kAddItemResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRemoveResultValues[] = {
  RemoveResult::SUCCESS,
  RemoveResult::ERROR_UNKNOWN
};
const char* _kRemoveResultNames[] = {
  "SUCCESS",
  "ERROR_UNKNOWN"
};
const std::map<int, const char*> _RemoveResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kRemoveResultValues, _kRemoveResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* RequestAddItem::ascii_fingerprint = "5B79CD68F6E79B331BEB595E39DC4732";
const uint8_t RequestAddItem::binary_fingerprint[16] = {0x5B,0x79,0xCD,0x68,0xF6,0xE7,0x9B,0x33,0x1B,0xEB,0x59,0x5E,0x39,0xDC,0x47,0x32};

uint32_t RequestAddItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_item_template_ = false;
  bool isset_number_ = false;
  bool isset_bind_ = false;
  bool isset_intensify_level_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item_template_);
          isset_item_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->number_);
          isset_number_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->bind_ = ( ::entity::BindRequireType::type)ecast0;
          isset_bind_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->location_);
          this->__isset.location_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->item_extra_info_);
          this->__isset.item_extra_info_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->simulate_);
          this->__isset.simulate_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->intensify_level_);
          isset_intensify_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->result_ = (AddItemResult::type)ecast1;
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_number_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_bind_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_intensify_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestAddItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestAddItem");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item_template_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->item_template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->number_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bind_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->bind_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.location_) {
    xfer += oprot->writeFieldBegin("location_", ::apache::thrift::protocol::T_I16, 5);
    xfer += oprot->writeI16(this->location_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.item_extra_info_) {
    xfer += oprot->writeFieldBegin("item_extra_info_", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->item_extra_info_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.simulate_) {
    xfer += oprot->writeFieldBegin("simulate_", ::apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->simulate_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("intensify_level_", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->intensify_level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32((int32_t)this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestAddItem &a, RequestAddItem &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.item_template_, b.item_template_);
  swap(a.number_, b.number_);
  swap(a.bind_, b.bind_);
  swap(a.location_, b.location_);
  swap(a.item_extra_info_, b.item_extra_info_);
  swap(a.simulate_, b.simulate_);
  swap(a.intensify_level_, b.intensify_level_);
  swap(a.result_, b.result_);
  swap(a.__isset, b.__isset);
}

const char* RequestAddItems::ascii_fingerprint = "F69432F471B0D6B2A2143540EE154A16";
const uint8_t RequestAddItems::binary_fingerprint[16] = {0xF6,0x94,0x32,0xF4,0x71,0xB0,0xD6,0xB2,0xA2,0x14,0x35,0x40,0xEE,0x15,0x4A,0x16};

uint32_t RequestAddItems::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_items_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->items_.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->items_.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += this->items_[_i6].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_items_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->simulate_);
          this->__isset.simulate_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast7;
          xfer += iprot->readI32(ecast7);
          this->result_ = (AddItemResult::type)ecast7;
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_items_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestAddItems::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestAddItems");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("items_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->items_.size()));
    std::vector< ::entity::AddItemFields> ::const_iterator _iter8;
    for (_iter8 = this->items_.begin(); _iter8 != this->items_.end(); ++_iter8)
    {
      xfer += (*_iter8).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.simulate_) {
    xfer += oprot->writeFieldBegin("simulate_", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->simulate_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestAddItems &a, RequestAddItems &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.items_, b.items_);
  swap(a.simulate_, b.simulate_);
  swap(a.result_, b.result_);
  swap(a.__isset, b.__isset);
}

const char* RequestGetPacketItemNumber::ascii_fingerprint = "32982958BFF8E8E004F8D868E75FBAE3";
const uint8_t RequestGetPacketItemNumber::binary_fingerprint[16] = {0x32,0x98,0x29,0x58,0xBF,0xF8,0xE8,0xE0,0x04,0xF8,0xD8,0x68,0xE7,0x5F,0xBA,0xE3};

uint32_t RequestGetPacketItemNumber::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_item_template_ = false;
  bool isset_bind_ = false;
  bool isset_number_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item_template_);
          isset_item_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast9;
          xfer += iprot->readI32(ecast9);
          this->bind_ = ( ::entity::BindRequireType::type)ecast9;
          isset_bind_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->number_);
          isset_number_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_bind_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_number_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestGetPacketItemNumber::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestGetPacketItemNumber");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item_template_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->item_template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bind_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->bind_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->number_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestGetPacketItemNumber &a, RequestGetPacketItemNumber &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.item_template_, b.item_template_);
  swap(a.bind_, b.bind_);
  swap(a.number_, b.number_);
}

const char* RequestGetPacketItemTemplate::ascii_fingerprint = "982116FC9CF1630F633DD75459E43ACD";
const uint8_t RequestGetPacketItemTemplate::binary_fingerprint[16] = {0x98,0x21,0x16,0xFC,0x9C,0xF1,0x63,0x0F,0x63,0x3D,0xD7,0x54,0x59,0xE4,0x3A,0xCD};

uint32_t RequestGetPacketItemTemplate::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_item_template_ = false;
  bool isset_bind_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->item_id_);
          this->__isset.item_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->location_);
          this->__isset.location_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item_template_);
          isset_item_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->bind_);
          isset_bind_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->item_extra_info_);
          this->__isset.item_extra_info_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_bind_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestGetPacketItemTemplate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestGetPacketItemTemplate");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.item_id_) {
    xfer += oprot->writeFieldBegin("item_id_", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->item_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.location_) {
    xfer += oprot->writeFieldBegin("location_", ::apache::thrift::protocol::T_I16, 3);
    xfer += oprot->writeI16(this->location_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("item_template_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->item_template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bind_", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->bind_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.item_extra_info_) {
    xfer += oprot->writeFieldBegin("item_extra_info_", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->item_extra_info_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestGetPacketItemTemplate &a, RequestGetPacketItemTemplate &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.item_id_, b.item_id_);
  swap(a.location_, b.location_);
  swap(a.item_template_, b.item_template_);
  swap(a.bind_, b.bind_);
  swap(a.item_extra_info_, b.item_extra_info_);
  swap(a.__isset, b.__isset);
}

const char* RequestRemoveItem::ascii_fingerprint = "755E00EEF0372395CE2405CA966A38AF";
const uint8_t RequestRemoveItem::binary_fingerprint[16] = {0x75,0x5E,0x00,0xEE,0xF0,0x37,0x23,0x95,0xCE,0x24,0x05,0xCA,0x96,0x6A,0x38,0xAF};

uint32_t RequestRemoveItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_item_template_ = false;
  bool isset_number_ = false;
  bool isset_bind_ = false;
  bool isset_remove_number_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item_template_);
          isset_item_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->number_);
          isset_number_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast10;
          xfer += iprot->readI32(ecast10);
          this->bind_ = ( ::entity::BindRequireType::type)ecast10;
          isset_bind_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->remove_number_);
          isset_remove_number_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_number_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_bind_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_remove_number_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestRemoveItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestRemoveItem");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item_template_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->item_template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->number_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bind_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->bind_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("remove_number_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->remove_number_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestRemoveItem &a, RequestRemoveItem &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.item_template_, b.item_template_);
  swap(a.number_, b.number_);
  swap(a.bind_, b.bind_);
  swap(a.remove_number_, b.remove_number_);
}

const char* RequestRemoveItemLocationID::ascii_fingerprint = "6514521A7C0040B34EBE34E8A06A705E";
const uint8_t RequestRemoveItemLocationID::binary_fingerprint[16] = {0x65,0x14,0x52,0x1A,0x7C,0x00,0x40,0xB3,0x4E,0xBE,0x34,0xE8,0xA0,0x6A,0x70,0x5E};

uint32_t RequestRemoveItemLocationID::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_number_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->item_id_);
          this->__isset.item_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->location_);
          this->__isset.location_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->number_);
          isset_number_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast11;
          xfer += iprot->readI32(ecast11);
          this->result_ = (RemoveResult::type)ecast11;
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_number_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestRemoveItemLocationID::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestRemoveItemLocationID");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.item_id_) {
    xfer += oprot->writeFieldBegin("item_id_", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->item_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.location_) {
    xfer += oprot->writeFieldBegin("location_", ::apache::thrift::protocol::T_I16, 3);
    xfer += oprot->writeI16(this->location_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("number_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->number_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestRemoveItemLocationID &a, RequestRemoveItemLocationID &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.item_id_, b.item_id_);
  swap(a.location_, b.location_);
  swap(a.number_, b.number_);
  swap(a.result_, b.result_);
  swap(a.__isset, b.__isset);
}

const char* RequestItemWearedEquipInfo::ascii_fingerprint = "F9FD8E4838A319D74043CA8A3E235319";
const uint8_t RequestItemWearedEquipInfo::binary_fingerprint[16] = {0xF9,0xFD,0x8E,0x48,0x38,0xA3,0x19,0xD7,0x40,0x43,0xCA,0x8A,0x3E,0x23,0x53,0x19};

uint32_t RequestItemWearedEquipInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_type_ = false;
  bool isset_num_ = false;
  bool isset_param1_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast12;
          xfer += iprot->readI32(ecast12);
          this->type_ = ( ::entity::AchieveWearEquipType::type)ecast12;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num_);
          isset_num_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->param1_);
          isset_param1_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_num_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_param1_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestItemWearedEquipInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestItemWearedEquipInfo");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->num_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param1_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->param1_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestItemWearedEquipInfo &a, RequestItemWearedEquipInfo &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.type_, b.type_);
  swap(a.num_, b.num_);
  swap(a.param1_, b.param1_);
}

}}} // namespace
