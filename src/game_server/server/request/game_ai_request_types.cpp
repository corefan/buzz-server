/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "game_ai_request_types.h"

#include <algorithm>

namespace game { namespace server { namespace request {

const char* RequestAiAddThreat::ascii_fingerprint = "0B887E647C78CD577B5D44BA55C2679A";
const uint8_t RequestAiAddThreat::binary_fingerprint[16] = {0x0B,0x88,0x7E,0x64,0x7C,0x78,0xCD,0x57,0x7B,0x5D,0x44,0xBA,0x55,0xC2,0x67,0x9A};

uint32_t RequestAiAddThreat::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_src_id_ = false;
  bool isset_src_type_ = false;
  bool isset_target_id_ = false;
  bool isset_target_type_ = false;
  bool isset_threat_value_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->src_id_);
          isset_src_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->src_type_ = ( ::entity::EntityType::type)ecast0;
          isset_src_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->target_id_);
          isset_target_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->target_type_ = ( ::entity::EntityType::type)ecast1;
          isset_target_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->threat_value_);
          isset_threat_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_src_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_src_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_target_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_target_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_threat_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestAiAddThreat::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestAiAddThreat");

  xfer += oprot->writeFieldBegin("src_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->src_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("src_type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->src_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target_id_", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->target_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target_type_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->target_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("threat_value_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->threat_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestAiAddThreat &a, RequestAiAddThreat &b) {
  using ::std::swap;
  swap(a.src_id_, b.src_id_);
  swap(a.src_type_, b.src_type_);
  swap(a.target_id_, b.target_id_);
  swap(a.target_type_, b.target_type_);
  swap(a.threat_value_, b.threat_value_);
}

const char* RequestAiSetTarget::ascii_fingerprint = "4CB61584F69EAA894D96370790D2AF6F";
const uint8_t RequestAiSetTarget::binary_fingerprint[16] = {0x4C,0xB6,0x15,0x84,0xF6,0x9E,0xAA,0x89,0x4D,0x96,0x37,0x07,0x90,0xD2,0xAF,0x6F};

uint32_t RequestAiSetTarget::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;
  bool isset_type_ = false;
  bool isset_target_id_ = false;
  bool isset_target_type_ = false;
  bool isset_force_lock_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->type_ = ( ::entity::EntityType::type)ecast2;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->target_id_);
          isset_target_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->target_type_ = ( ::entity::EntityType::type)ecast3;
          isset_target_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->force_lock_);
          isset_force_lock_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_target_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_target_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_force_lock_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestAiSetTarget::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestAiSetTarget");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target_id_", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->target_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target_type_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->target_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("force_lock_", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->force_lock_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestAiSetTarget &a, RequestAiSetTarget &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.type_, b.type_);
  swap(a.target_id_, b.target_id_);
  swap(a.target_type_, b.target_type_);
  swap(a.force_lock_, b.force_lock_);
}

const char* RequestAiSetAi::ascii_fingerprint = "DF2FE2E4EB425A90BF93B80E73230790";
const uint8_t RequestAiSetAi::binary_fingerprint[16] = {0xDF,0x2F,0xE2,0xE4,0xEB,0x42,0x5A,0x90,0xBF,0x93,0xB8,0x0E,0x73,0x23,0x07,0x90};

uint32_t RequestAiSetAi::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;
  bool isset_type_ = false;
  bool isset_ai_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast4;
          xfer += iprot->readI32(ecast4);
          this->type_ = ( ::entity::EntityType::type)ecast4;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ai_);
          isset_ai_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ai_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestAiSetAi::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestAiSetAi");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ai_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->ai_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestAiSetAi &a, RequestAiSetAi &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.type_, b.type_);
  swap(a.ai_, b.ai_);
}

}}} // namespace
