/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "game_scene_request_types.h"

#include <algorithm>

namespace game { namespace server { namespace request {

int _kAreaTypeValues[] = {
  AreaType::AREA_CIRCLE,
  AreaType::AREA_SECTOR_QUARTER,
  AreaType::AREA_RAY,
  AreaType::AREA_MAX
};
const char* _kAreaTypeNames[] = {
  "AREA_CIRCLE",
  "AREA_SECTOR_QUARTER",
  "AREA_RAY",
  "AREA_MAX"
};
const std::map<int, const char*> _AreaType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kAreaTypeValues, _kAreaTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSectorRadianTypeValues[] = {
  SectorRadianType::MIN,
  SectorRadianType::QUARTER,
  SectorRadianType::HALF,
  SectorRadianType::MAX
};
const char* _kSectorRadianTypeNames[] = {
  "MIN",
  "QUARTER",
  "HALF",
  "MAX"
};
const std::map<int, const char*> _SectorRadianType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kSectorRadianTypeValues, _kSectorRadianTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSceneEntityTypeValues[] = {
  SceneEntityType::ACTOR,
  SceneEntityType::NPC
};
const char* _kSceneEntityTypeNames[] = {
  "ACTOR",
  "NPC"
};
const std::map<int, const char*> _SceneEntityType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kSceneEntityTypeValues, _kSceneEntityTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSelectMaskTypeValues[] = {
  SelectMaskType::SELF,
  SelectMaskType::NOT_SELF,
  SelectMaskType::NPC,
  SelectMaskType::ACTOR,
  SelectMaskType::ALIVE,
  SelectMaskType::DEAD,
  SelectMaskType::CAMP_ENEMY,
  SelectMaskType::CAMP_FRIEND,
  SelectMaskType::CAMP_NEUTRAL,
  SelectMaskType::CAMP_NONE,
  SelectMaskType::TEAM,
  SelectMaskType::OTHER_TEAM,
  SelectMaskType::PK_CHECK
};
const char* _kSelectMaskTypeNames[] = {
  "SELF",
  "NOT_SELF",
  "NPC",
  "ACTOR",
  "ALIVE",
  "DEAD",
  "CAMP_ENEMY",
  "CAMP_FRIEND",
  "CAMP_NEUTRAL",
  "CAMP_NONE",
  "TEAM",
  "OTHER_TEAM",
  "PK_CHECK"
};
const std::map<int, const char*> _SelectMaskType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(13, _kSelectMaskTypeValues, _kSelectMaskTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMoveResultTypeValues[] = {
  MoveResultType::SUCCESS,
  MoveResultType::FAILURE_BLOCK,
  MoveResultType::FAILURE_ERROR
};
const char* _kMoveResultTypeNames[] = {
  "SUCCESS",
  "FAILURE_BLOCK",
  "FAILURE_ERROR"
};
const std::map<int, const char*> _MoveResultType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kMoveResultTypeValues, _kMoveResultTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDayNightStatusTypeValues[] = {
  DayNightStatusType::STATUS_MORNING,
  DayNightStatusType::STATUS_DAYTIME,
  DayNightStatusType::STATUS_EVENING,
  DayNightStatusType::STATUS_NIGHT
};
const char* _kDayNightStatusTypeNames[] = {
  "STATUS_MORNING",
  "STATUS_DAYTIME",
  "STATUS_EVENING",
  "STATUS_NIGHT"
};
const std::map<int, const char*> _DayNightStatusType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kDayNightStatusTypeValues, _kDayNightStatusTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPKCheckResultTypeValues[] = {
  PKCheckResultType::SUCCESS,
  PKCheckResultType::ERROR_SAFE_AREA,
  PKCheckResultType::ERROR_PK_MODE,
  PKCheckResultType::ERROR_ROOKIE_PROTECT,
  PKCheckResultType::ERROR_DIE_PROTECT_TIME,
  PKCheckResultType::ERROR_ARGS
};
const char* _kPKCheckResultTypeNames[] = {
  "SUCCESS",
  "ERROR_SAFE_AREA",
  "ERROR_PK_MODE",
  "ERROR_ROOKIE_PROTECT",
  "ERROR_DIE_PROTECT_TIME",
  "ERROR_ARGS"
};
const std::map<int, const char*> _PKCheckResultType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kPKCheckResultTypeValues, _kPKCheckResultTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* RequestSceneGetAroundActors::ascii_fingerprint = "504072AAD822AA6071017C57066A9473";
const uint8_t RequestSceneGetAroundActors::binary_fingerprint[16] = {0x50,0x40,0x72,0xAA,0xD8,0x22,0xAA,0x60,0x71,0x01,0x7C,0x57,0x06,0x6A,0x94,0x73};

uint32_t RequestSceneGetAroundActors::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_id_ = false;
  bool isset_actors_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type_ = ( ::entity::EntityType::type)ecast0;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->actors_.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readListBegin(_etype4, _size1);
            this->actors_.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += iprot->readI64(this->actors_[_i5]);
            }
            xfer += iprot->readListEnd();
          }
          isset_actors_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_actors_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestSceneGetAroundActors::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestSceneGetAroundActors");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("actors_", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->actors_.size()));
    std::vector<int64_t> ::const_iterator _iter6;
    for (_iter6 = this->actors_.begin(); _iter6 != this->actors_.end(); ++_iter6)
    {
      xfer += oprot->writeI64((*_iter6));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestSceneGetAroundActors &a, RequestSceneGetAroundActors &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.id_, b.id_);
  swap(a.actors_, b.actors_);
}

const char* RequestSceneSummonNpc::ascii_fingerprint = "89882B9BE51BBCFB502B89E94304A2A2";
const uint8_t RequestSceneSummonNpc::binary_fingerprint[16] = {0x89,0x88,0x2B,0x9B,0xE5,0x1B,0xBC,0xFB,0x50,0x2B,0x89,0xE9,0x43,0x04,0xA2,0xA2};

uint32_t RequestSceneSummonNpc::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_scene_ = false;
  bool isset_template_id_ = false;
  bool isset_x_ = false;
  bool isset_y_ = false;
  bool isset_dir_ = false;
  bool isset_delay_secs_ = false;
  bool isset_npc_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->scene_);
          isset_scene_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->template_id_);
          isset_template_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->x_);
          isset_x_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->y_);
          isset_y_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->width_);
          this->__isset.width_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->heigth_);
          this->__isset.heigth_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast7;
          xfer += iprot->readI32(ecast7);
          this->dir_ = ( ::entity::DirectionType::type)ecast7;
          isset_dir_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->delay_secs_);
          isset_delay_secs_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->npc_id_);
          isset_npc_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_scene_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_template_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_x_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_y_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dir_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_delay_secs_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_npc_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestSceneSummonNpc::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestSceneSummonNpc");

  xfer += oprot->writeFieldBegin("scene_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->scene_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("template_id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->template_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->x_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->y_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.width_) {
    xfer += oprot->writeFieldBegin("width_", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->width_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.heigth_) {
    xfer += oprot->writeFieldBegin("heigth_", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->heigth_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("dir_", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->dir_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("delay_secs_", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->delay_secs_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("npc_id_", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->npc_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestSceneSummonNpc &a, RequestSceneSummonNpc &b) {
  using ::std::swap;
  swap(a.scene_, b.scene_);
  swap(a.template_id_, b.template_id_);
  swap(a.x_, b.x_);
  swap(a.y_, b.y_);
  swap(a.width_, b.width_);
  swap(a.heigth_, b.heigth_);
  swap(a.dir_, b.dir_);
  swap(a.delay_secs_, b.delay_secs_);
  swap(a.npc_id_, b.npc_id_);
  swap(a.__isset, b.__isset);
}

const char* RequestSceneClearNpc::ascii_fingerprint = "6E578DA8AB10EED824A75534350EBAEF";
const uint8_t RequestSceneClearNpc::binary_fingerprint[16] = {0x6E,0x57,0x8D,0xA8,0xAB,0x10,0xEE,0xD8,0x24,0xA7,0x55,0x34,0x35,0x0E,0xBA,0xEF};

uint32_t RequestSceneClearNpc::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->delay_secs_);
          this->__isset.delay_secs_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestSceneClearNpc::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestSceneClearNpc");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.delay_secs_) {
    xfer += oprot->writeFieldBegin("delay_secs_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->delay_secs_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestSceneClearNpc &a, RequestSceneClearNpc &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.delay_secs_, b.delay_secs_);
  swap(a.__isset, b.__isset);
}

const char* CircleAreaCondition::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t CircleAreaCondition::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t CircleAreaCondition::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_radius_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->radius_);
          isset_radius_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_radius_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CircleAreaCondition::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CircleAreaCondition");

  xfer += oprot->writeFieldBegin("radius_", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->radius_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CircleAreaCondition &a, CircleAreaCondition &b) {
  using ::std::swap;
  swap(a.radius_, b.radius_);
}

const char* SectorAreaCondition::ascii_fingerprint = "2091843F2ECF33E852FE40B57EEC9928";
const uint8_t SectorAreaCondition::binary_fingerprint[16] = {0x20,0x91,0x84,0x3F,0x2E,0xCF,0x33,0xE8,0x52,0xFE,0x40,0xB5,0x7E,0xEC,0x99,0x28};

uint32_t SectorAreaCondition::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_radius_ = false;
  bool isset_dir_ = false;
  bool isset_radian_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->radius_);
          isset_radius_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast8;
          xfer += iprot->readI32(ecast8);
          this->dir_ = ( ::entity::DirectionType::type)ecast8;
          isset_dir_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast9;
          xfer += iprot->readI32(ecast9);
          this->radian_ = (SectorRadianType::type)ecast9;
          isset_radian_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_radius_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dir_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_radian_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SectorAreaCondition::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SectorAreaCondition");

  xfer += oprot->writeFieldBegin("radius_", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->radius_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dir_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->dir_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("radian_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->radian_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SectorAreaCondition &a, SectorAreaCondition &b) {
  using ::std::swap;
  swap(a.radius_, b.radius_);
  swap(a.dir_, b.dir_);
  swap(a.radian_, b.radian_);
}

const char* RayAreaCondition::ascii_fingerprint = "0ADFD9F821347143D588B15689D01279";
const uint8_t RayAreaCondition::binary_fingerprint[16] = {0x0A,0xDF,0xD9,0xF8,0x21,0x34,0x71,0x43,0xD5,0x88,0xB1,0x56,0x89,0xD0,0x12,0x79};

uint32_t RayAreaCondition::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_width_ = false;
  bool isset_length_ = false;
  bool isset_direction_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->width_);
          isset_width_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->length_);
          isset_length_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->direction_);
          isset_direction_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_width_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_length_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_direction_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RayAreaCondition::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RayAreaCondition");

  xfer += oprot->writeFieldBegin("width_", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->width_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("length_", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->length_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("direction_", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->direction_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RayAreaCondition &a, RayAreaCondition &b) {
  using ::std::swap;
  swap(a.width_, b.width_);
  swap(a.length_, b.length_);
  swap(a.direction_, b.direction_);
}

const char* AreaRolePair::ascii_fingerprint = "6E7DD25E88B43484CFC93FCB15DCA1AF";
const uint8_t AreaRolePair::binary_fingerprint[16] = {0x6E,0x7D,0xD2,0x5E,0x88,0xB4,0x34,0x84,0xCF,0xC9,0x3F,0xCB,0x15,0xDC,0xA1,0xAF};

uint32_t AreaRolePair::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast10;
          xfer += iprot->readI32(ecast10);
          this->type_ = ( ::entity::EntityType::type)ecast10;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AreaRolePair::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AreaRolePair");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AreaRolePair &a, AreaRolePair &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.id_, b.id_);
}

const char* RequestSceneSelectTargets::ascii_fingerprint = "D16EBA23BC839D68CAEA37C5A69CB5C2";
const uint8_t RequestSceneSelectTargets::binary_fingerprint[16] = {0xD1,0x6E,0xBA,0x23,0xBC,0x83,0x9D,0x68,0xCA,0xEA,0x37,0xC5,0xA6,0x9C,0xB5,0xC2};

uint32_t RequestSceneSelectTargets::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_id_ = false;
  bool isset_area_type_ = false;
  bool isset_x_ = false;
  bool isset_y_ = false;
  bool isset_select_mask_ = false;
  bool isset_max_count_ = false;
  bool isset_targets_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast11;
          xfer += iprot->readI32(ecast11);
          this->type_ = ( ::entity::EntityType::type)ecast11;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast12;
          xfer += iprot->readI32(ecast12);
          this->area_type_ = (AreaType::type)ecast12;
          isset_area_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->cond_circle_.read(iprot);
          this->__isset.cond_circle_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->cond_sector_.read(iprot);
          this->__isset.cond_sector_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->x_);
          isset_x_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->y_);
          isset_y_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->select_mask_);
          isset_select_mask_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_count_);
          isset_max_count_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->targets_.clear();
            uint32_t _size13;
            ::apache::thrift::protocol::TType _etype16;
            xfer += iprot->readListBegin(_etype16, _size13);
            this->targets_.resize(_size13);
            uint32_t _i17;
            for (_i17 = 0; _i17 < _size13; ++_i17)
            {
              xfer += this->targets_[_i17].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_targets_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_area_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_x_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_y_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_select_mask_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_max_count_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_targets_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestSceneSelectTargets::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestSceneSelectTargets");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("area_type_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->area_type_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.cond_circle_) {
    xfer += oprot->writeFieldBegin("cond_circle_", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->cond_circle_.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cond_sector_) {
    xfer += oprot->writeFieldBegin("cond_sector_", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->cond_sector_.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("x_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->x_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y_", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->y_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("select_mask_", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->select_mask_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_count_", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->max_count_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("targets_", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->targets_.size()));
    std::vector<AreaRolePair> ::const_iterator _iter18;
    for (_iter18 = this->targets_.begin(); _iter18 != this->targets_.end(); ++_iter18)
    {
      xfer += (*_iter18).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestSceneSelectTargets &a, RequestSceneSelectTargets &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.id_, b.id_);
  swap(a.area_type_, b.area_type_);
  swap(a.cond_circle_, b.cond_circle_);
  swap(a.cond_sector_, b.cond_sector_);
  swap(a.x_, b.x_);
  swap(a.y_, b.y_);
  swap(a.select_mask_, b.select_mask_);
  swap(a.max_count_, b.max_count_);
  swap(a.targets_, b.targets_);
  swap(a.__isset, b.__isset);
}

const char* RequestSceneRoleMove::ascii_fingerprint = "B4440F8A270382EF1F173F7EA5D25CE6";
const uint8_t RequestSceneRoleMove::binary_fingerprint[16] = {0xB4,0x44,0x0F,0x8A,0x27,0x03,0x82,0xEF,0x1F,0x17,0x3F,0x7E,0xA5,0xD2,0x5C,0xE6};

uint32_t RequestSceneRoleMove::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_id_ = false;
  bool isset_dir_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast19;
          xfer += iprot->readI32(ecast19);
          this->type_ = ( ::entity::EntityType::type)ecast19;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast20;
          xfer += iprot->readI32(ecast20);
          this->dir_ = ( ::entity::DirectionType::type)ecast20;
          isset_dir_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast21;
          xfer += iprot->readI32(ecast21);
          this->result_ = (MoveResultType::type)ecast21;
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dir_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestSceneRoleMove::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestSceneRoleMove");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dir_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->dir_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestSceneRoleMove &a, RequestSceneRoleMove &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.id_, b.id_);
  swap(a.dir_, b.dir_);
  swap(a.result_, b.result_);
}

const char* RequestSceneJump::ascii_fingerprint = "739C8557792AEF4079E839384F3BB223";
const uint8_t RequestSceneJump::binary_fingerprint[16] = {0x73,0x9C,0x85,0x57,0x79,0x2A,0xEF,0x40,0x79,0xE8,0x39,0x38,0x4F,0x3B,0xB2,0x23};

uint32_t RequestSceneJump::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_id_ = false;
  bool isset_x_ = false;
  bool isset_y_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast22;
          xfer += iprot->readI32(ecast22);
          this->type_ = ( ::entity::EntityType::type)ecast22;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->map_);
          this->__isset.map_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->scene_);
          this->__isset.scene_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->x_);
          isset_x_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->y_);
          isset_y_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_x_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_y_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestSceneJump::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestSceneJump");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->id_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.map_) {
    xfer += oprot->writeFieldBegin("map_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->map_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.scene_) {
    xfer += oprot->writeFieldBegin("scene_", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->scene_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("x_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->x_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->y_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestSceneJump &a, RequestSceneJump &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.id_, b.id_);
  swap(a.map_, b.map_);
  swap(a.scene_, b.scene_);
  swap(a.x_, b.x_);
  swap(a.y_, b.y_);
  swap(a.result_, b.result_);
  swap(a.__isset, b.__isset);
}

const char* RequestSceneRelocation::ascii_fingerprint = "9528C069007D1F03D56E8EFB8CB3B337";
const uint8_t RequestSceneRelocation::binary_fingerprint[16] = {0x95,0x28,0xC0,0x69,0x00,0x7D,0x1F,0x03,0xD5,0x6E,0x8E,0xFB,0x8C,0xB3,0xB3,0x37};

uint32_t RequestSceneRelocation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_id_ = false;
  bool isset_x_ = false;
  bool isset_y_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast23;
          xfer += iprot->readI32(ecast23);
          this->type_ = ( ::entity::EntityType::type)ecast23;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->x_);
          isset_x_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->y_);
          isset_y_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_x_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_y_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestSceneRelocation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestSceneRelocation");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->x_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->y_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestSceneRelocation &a, RequestSceneRelocation &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.id_, b.id_);
  swap(a.x_, b.x_);
  swap(a.y_, b.y_);
  swap(a.result_, b.result_);
}

const char* RequestSceneDayNightInfo::ascii_fingerprint = "DF2FE2E4EB425A90BF93B80E73230790";
const uint8_t RequestSceneDayNightInfo::binary_fingerprint[16] = {0xDF,0x2F,0xE2,0xE4,0xEB,0x42,0x5A,0x90,0xBF,0x93,0xB8,0x0E,0x73,0x23,0x07,0x90};

uint32_t RequestSceneDayNightInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_scene_ = false;
  bool isset_status_ = false;
  bool isset_aoi_coe_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->scene_);
          isset_scene_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast24;
          xfer += iprot->readI32(ecast24);
          this->status_ = (DayNightStatusType::type)ecast24;
          isset_status_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->aoi_coe_);
          isset_aoi_coe_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_scene_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_status_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_aoi_coe_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestSceneDayNightInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestSceneDayNightInfo");

  xfer += oprot->writeFieldBegin("scene_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->scene_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->status_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("aoi_coe_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->aoi_coe_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestSceneDayNightInfo &a, RequestSceneDayNightInfo &b) {
  using ::std::swap;
  swap(a.scene_, b.scene_);
  swap(a.status_, b.status_);
  swap(a.aoi_coe_, b.aoi_coe_);
}

const char* RequestSceneRouter::ascii_fingerprint = "204E4A386F18B2655D6E7A2873E079B4";
const uint8_t RequestSceneRouter::binary_fingerprint[16] = {0x20,0x4E,0x4A,0x38,0x6F,0x18,0xB2,0x65,0x5D,0x6E,0x7A,0x28,0x73,0xE0,0x79,0xB4};

uint32_t RequestSceneRouter::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_scene_ = false;
  bool isset_src_x_ = false;
  bool isset_src_y_ = false;
  bool isset_dest_x_ = false;
  bool isset_dest_y_ = false;
  bool isset_dest_radius_ = false;
  bool isset_max_path_ = false;
  bool isset_paths_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->scene_);
          isset_scene_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->src_x_);
          isset_src_x_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->src_y_);
          isset_src_y_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dest_x_);
          isset_dest_x_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dest_y_);
          isset_dest_y_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dest_radius_);
          isset_dest_radius_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->max_path_);
          isset_max_path_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->paths_.clear();
            uint32_t _size25;
            ::apache::thrift::protocol::TType _etype28;
            xfer += iprot->readListBegin(_etype28, _size25);
            this->paths_.resize(_size25);
            uint32_t _i29;
            for (_i29 = 0; _i29 < _size25; ++_i29)
            {
              int32_t ecast30;
              xfer += iprot->readI32(ecast30);
              this->paths_[_i29] = ( ::entity::DirectionType::type)ecast30;
            }
            xfer += iprot->readListEnd();
          }
          isset_paths_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_scene_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_src_x_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_src_y_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dest_x_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dest_y_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dest_radius_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_max_path_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_paths_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestSceneRouter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestSceneRouter");

  xfer += oprot->writeFieldBegin("scene_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->scene_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("src_x_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->src_x_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("src_y_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->src_y_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dest_x_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->dest_x_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dest_y_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->dest_y_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dest_radius_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->dest_radius_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_path_", ::apache::thrift::protocol::T_I16, 7);
  xfer += oprot->writeI16(this->max_path_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("paths_", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->paths_.size()));
    std::vector< ::entity::DirectionType::type> ::const_iterator _iter31;
    for (_iter31 = this->paths_.begin(); _iter31 != this->paths_.end(); ++_iter31)
    {
      xfer += oprot->writeI32((int32_t)(*_iter31));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestSceneRouter &a, RequestSceneRouter &b) {
  using ::std::swap;
  swap(a.scene_, b.scene_);
  swap(a.src_x_, b.src_x_);
  swap(a.src_y_, b.src_y_);
  swap(a.dest_x_, b.dest_x_);
  swap(a.dest_y_, b.dest_y_);
  swap(a.dest_radius_, b.dest_radius_);
  swap(a.max_path_, b.max_path_);
  swap(a.paths_, b.paths_);
  swap(a.result_, b.result_);
}

const char* RequestScenePKInfo::ascii_fingerprint = "B67D2D2C67C955C5F4AAA1F43073F646";
const uint8_t RequestScenePKInfo::binary_fingerprint[16] = {0xB6,0x7D,0x2D,0x2C,0x67,0xC9,0x55,0xC5,0xF4,0xAA,0xA1,0xF4,0x30,0x73,0xF6,0x46};

uint32_t RequestScenePKInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_scene_ = false;
  bool isset_rookie_protect_ = false;
  bool isset_ban_change_pk_mode_ = false;
  bool isset_die_protect_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->scene_);
          isset_scene_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->rookie_protect_);
          isset_rookie_protect_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ban_change_pk_mode_);
          isset_ban_change_pk_mode_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->die_protect_);
          isset_die_protect_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_scene_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rookie_protect_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ban_change_pk_mode_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_die_protect_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestScenePKInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestScenePKInfo");

  xfer += oprot->writeFieldBegin("scene_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->scene_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rookie_protect_", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->rookie_protect_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ban_change_pk_mode_", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->ban_change_pk_mode_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("die_protect_", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->die_protect_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestScenePKInfo &a, RequestScenePKInfo &b) {
  using ::std::swap;
  swap(a.scene_, b.scene_);
  swap(a.rookie_protect_, b.rookie_protect_);
  swap(a.ban_change_pk_mode_, b.ban_change_pk_mode_);
  swap(a.die_protect_, b.die_protect_);
}

const char* RequestSceneIsSafe::ascii_fingerprint = "74790CD6C921812BFE1FB306DD15F078";
const uint8_t RequestSceneIsSafe::binary_fingerprint[16] = {0x74,0x79,0x0C,0xD6,0xC9,0x21,0x81,0x2B,0xFE,0x1F,0xB3,0x06,0xDD,0x15,0xF0,0x78};

uint32_t RequestSceneIsSafe::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_scene_ = false;
  bool isset_x_ = false;
  bool isset_y_ = false;
  bool isset_is_safe_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->scene_);
          isset_scene_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->x_);
          isset_x_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->y_);
          isset_y_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_safe_);
          isset_is_safe_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_scene_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_x_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_y_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_is_safe_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestSceneIsSafe::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestSceneIsSafe");

  xfer += oprot->writeFieldBegin("scene_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->scene_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->x_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->y_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_safe_", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->is_safe_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestSceneIsSafe &a, RequestSceneIsSafe &b) {
  using ::std::swap;
  swap(a.scene_, b.scene_);
  swap(a.x_, b.x_);
  swap(a.y_, b.y_);
  swap(a.is_safe_, b.is_safe_);
}

const char* RequestScenePKCheck::ascii_fingerprint = "9F551022D4DF184E86CC5DB9186FAC79";
const uint8_t RequestScenePKCheck::binary_fingerprint[16] = {0x9F,0x55,0x10,0x22,0xD4,0xDF,0x18,0x4E,0x86,0xCC,0x5D,0xB9,0x18,0x6F,0xAC,0x79};

uint32_t RequestScenePKCheck::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_src_id_ = false;
  bool isset_dest_id_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->src_id_);
          isset_src_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dest_id_);
          isset_dest_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast32;
          xfer += iprot->readI32(ecast32);
          this->result_ = (PKCheckResultType::type)ecast32;
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_src_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dest_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestScenePKCheck::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestScenePKCheck");

  xfer += oprot->writeFieldBegin("src_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->src_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dest_id_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->dest_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestScenePKCheck &a, RequestScenePKCheck &b) {
  using ::std::swap;
  swap(a.src_id_, b.src_id_);
  swap(a.dest_id_, b.dest_id_);
  swap(a.result_, b.result_);
}

const char* RequestSceneActorBroadcast::ascii_fingerprint = "A39E716239CAE3EC73607CFCF4132607";
const uint8_t RequestSceneActorBroadcast::binary_fingerprint[16] = {0xA3,0x9E,0x71,0x62,0x39,0xCA,0xE3,0xEC,0x73,0x60,0x7C,0xFC,0xF4,0x13,0x26,0x07};

uint32_t RequestSceneActorBroadcast::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_message_ = false;
  bool isset_scene_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type_);
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->message_);
          isset_message_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->scene_);
          isset_scene_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_message_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_scene_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestSceneActorBroadcast::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestSceneActorBroadcast");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->message_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scene_", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->scene_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestSceneActorBroadcast &a, RequestSceneActorBroadcast &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.message_, b.message_);
  swap(a.scene_, b.scene_);
}

const char* RequestSceneCreateMap::ascii_fingerprint = "9C2A05F173B50306037BDE9AE30E1B99";
const uint8_t RequestSceneCreateMap::binary_fingerprint[16] = {0x9C,0x2A,0x05,0xF1,0x73,0xB5,0x03,0x06,0x03,0x7B,0xDE,0x9A,0xE3,0x0E,0x1B,0x99};

uint32_t RequestSceneCreateMap::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_map_ = false;
  bool isset_scene_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->map_);
          isset_map_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->scene_);
          isset_scene_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_map_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_scene_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestSceneCreateMap::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestSceneCreateMap");

  xfer += oprot->writeFieldBegin("map_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->map_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scene_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->scene_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestSceneCreateMap &a, RequestSceneCreateMap &b) {
  using ::std::swap;
  swap(a.map_, b.map_);
  swap(a.scene_, b.scene_);
}

const char* RequestSceneDestoryMap::ascii_fingerprint = "25038F937443AC9A2A06CEE5209E41BF";
const uint8_t RequestSceneDestoryMap::binary_fingerprint[16] = {0x25,0x03,0x8F,0x93,0x74,0x43,0xAC,0x9A,0x2A,0x06,0xCE,0xE5,0x20,0x9E,0x41,0xBF};

uint32_t RequestSceneDestoryMap::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_scene_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->scene_);
          isset_scene_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_scene_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestSceneDestoryMap::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestSceneDestoryMap");

  xfer += oprot->writeFieldBegin("scene_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->scene_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestSceneDestoryMap &a, RequestSceneDestoryMap &b) {
  using ::std::swap;
  swap(a.scene_, b.scene_);
  swap(a.result_, b.result_);
}

const char* RequestSceneClearAllNpc::ascii_fingerprint = "3495A4F4FB8ADC7B81D6DE532D320E88";
const uint8_t RequestSceneClearAllNpc::binary_fingerprint[16] = {0x34,0x95,0xA4,0xF4,0xFB,0x8A,0xDC,0x7B,0x81,0xD6,0xDE,0x53,0x2D,0x32,0x0E,0x88};

uint32_t RequestSceneClearAllNpc::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_scene_ = false;
  bool isset_delay_secs_ = false;
  bool isset_force_clear_reborn_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->scene_);
          isset_scene_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->delay_secs_);
          isset_delay_secs_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->force_clear_reborn_);
          isset_force_clear_reborn_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_scene_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_delay_secs_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_force_clear_reborn_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestSceneClearAllNpc::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestSceneClearAllNpc");

  xfer += oprot->writeFieldBegin("scene_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->scene_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("delay_secs_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->delay_secs_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("force_clear_reborn_", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->force_clear_reborn_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestSceneClearAllNpc &a, RequestSceneClearAllNpc &b) {
  using ::std::swap;
  swap(a.scene_, b.scene_);
  swap(a.delay_secs_, b.delay_secs_);
  swap(a.force_clear_reborn_, b.force_clear_reborn_);
}

const char* RequestSceneRevive::ascii_fingerprint = "25038F937443AC9A2A06CEE5209E41BF";
const uint8_t RequestSceneRevive::binary_fingerprint[16] = {0x25,0x03,0x8F,0x93,0x74,0x43,0xAC,0x9A,0x2A,0x06,0xCE,0xE5,0x20,0x9E,0x41,0xBF};

uint32_t RequestSceneRevive::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_stay_revive_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->stay_revive_);
          isset_stay_revive_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_stay_revive_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestSceneRevive::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestSceneRevive");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stay_revive_", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->stay_revive_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestSceneRevive &a, RequestSceneRevive &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.stay_revive_, b.stay_revive_);
}

const char* RequestSceneForbidDropItem::ascii_fingerprint = "86D67F208E764C02A1D026C912DFFF3D";
const uint8_t RequestSceneForbidDropItem::binary_fingerprint[16] = {0x86,0xD6,0x7F,0x20,0x8E,0x76,0x4C,0x02,0xA1,0xD0,0x26,0xC9,0x12,0xDF,0xFF,0x3D};

uint32_t RequestSceneForbidDropItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_npcs_ = false;
  bool isset_forbid_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->npcs_.clear();
            uint32_t _size33;
            ::apache::thrift::protocol::TType _etype36;
            xfer += iprot->readListBegin(_etype36, _size33);
            this->npcs_.resize(_size33);
            uint32_t _i37;
            for (_i37 = 0; _i37 < _size33; ++_i37)
            {
              xfer += iprot->readI64(this->npcs_[_i37]);
            }
            xfer += iprot->readListEnd();
          }
          isset_npcs_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->forbid_);
          isset_forbid_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_npcs_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_forbid_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestSceneForbidDropItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestSceneForbidDropItem");

  xfer += oprot->writeFieldBegin("npcs_", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->npcs_.size()));
    std::vector<int64_t> ::const_iterator _iter38;
    for (_iter38 = this->npcs_.begin(); _iter38 != this->npcs_.end(); ++_iter38)
    {
      xfer += oprot->writeI64((*_iter38));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("forbid_", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->forbid_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestSceneForbidDropItem &a, RequestSceneForbidDropItem &b) {
  using ::std::swap;
  swap(a.npcs_, b.npcs_);
  swap(a.forbid_, b.forbid_);
}

const char* RequestSceneGetNpcs::ascii_fingerprint = "955BD89722154769CC8FC8E9E0AB6CC2";
const uint8_t RequestSceneGetNpcs::binary_fingerprint[16] = {0x95,0x5B,0xD8,0x97,0x22,0x15,0x47,0x69,0xCC,0x8F,0xC8,0xE9,0xE0,0xAB,0x6C,0xC2};

uint32_t RequestSceneGetNpcs::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_scene_ = false;
  bool isset_npcs_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->scene_);
          isset_scene_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->npcs_.clear();
            uint32_t _size39;
            ::apache::thrift::protocol::TType _etype42;
            xfer += iprot->readListBegin(_etype42, _size39);
            this->npcs_.resize(_size39);
            uint32_t _i43;
            for (_i43 = 0; _i43 < _size39; ++_i43)
            {
              xfer += iprot->readI64(this->npcs_[_i43]);
            }
            xfer += iprot->readListEnd();
          }
          isset_npcs_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_scene_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_npcs_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestSceneGetNpcs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestSceneGetNpcs");

  xfer += oprot->writeFieldBegin("scene_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->scene_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("npcs_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->npcs_.size()));
    std::vector<int64_t> ::const_iterator _iter44;
    for (_iter44 = this->npcs_.begin(); _iter44 != this->npcs_.end(); ++_iter44)
    {
      xfer += oprot->writeI64((*_iter44));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestSceneGetNpcs &a, RequestSceneGetNpcs &b) {
  using ::std::swap;
  swap(a.scene_, b.scene_);
  swap(a.npcs_, b.npcs_);
}

}}} // namespace
