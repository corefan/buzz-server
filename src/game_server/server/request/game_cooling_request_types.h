/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef game_cooling_request_TYPES_H
#define game_cooling_request_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "game_request_types.h"
#include "entity_types.h"


namespace game { namespace server { namespace request {


class RequestCheckInCooling {
 public:

  static const char* ascii_fingerprint; // = "729E45C97A0E730BDEEBC207E4F729D3";
  static const uint8_t binary_fingerprint[16]; // = {0x72,0x9E,0x45,0xC9,0x7A,0x0E,0x73,0x0B,0xDE,0xEB,0xC2,0x07,0xE4,0xF7,0x29,0xD3};

  RequestCheckInCooling() : type_(( ::entity::EntityType::type)0), id_(0), cooling_id_(0), in_cooling_(0) {
  }

  virtual ~RequestCheckInCooling() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
  int32_t cooling_id_;
  bool in_cooling_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_cooling_id_(const int32_t val) {
    cooling_id_ = val;
  }

  void __set_in_cooling_(const bool val) {
    in_cooling_ = val;
  }

  bool operator == (const RequestCheckInCooling & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(cooling_id_ == rhs.cooling_id_))
      return false;
    if (!(in_cooling_ == rhs.in_cooling_))
      return false;
    return true;
  }
  bool operator != (const RequestCheckInCooling &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestCheckInCooling & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestCheckInCooling &a, RequestCheckInCooling &b);


class RequestStartCooling {
 public:

  static const char* ascii_fingerprint; // = "BC41DB2C57B606FFE1BA4098945A7E95";
  static const uint8_t binary_fingerprint[16]; // = {0xBC,0x41,0xDB,0x2C,0x57,0xB6,0x06,0xFF,0xE1,0xBA,0x40,0x98,0x94,0x5A,0x7E,0x95};

  RequestStartCooling() : type_(( ::entity::EntityType::type)0), id_(0), cooling_id_(0), cooling_add_value_(0LL), cooling_add_percent_(0) {
  }

  virtual ~RequestStartCooling() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
  int32_t cooling_id_;
  int64_t cooling_add_value_;
  int32_t cooling_add_percent_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_cooling_id_(const int32_t val) {
    cooling_id_ = val;
  }

  void __set_cooling_add_value_(const int64_t val) {
    cooling_add_value_ = val;
  }

  void __set_cooling_add_percent_(const int32_t val) {
    cooling_add_percent_ = val;
  }

  bool operator == (const RequestStartCooling & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(cooling_id_ == rhs.cooling_id_))
      return false;
    if (!(cooling_add_value_ == rhs.cooling_add_value_))
      return false;
    if (!(cooling_add_percent_ == rhs.cooling_add_percent_))
      return false;
    return true;
  }
  bool operator != (const RequestStartCooling &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestStartCooling & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestStartCooling &a, RequestStartCooling &b);

}}} // namespace

#endif
