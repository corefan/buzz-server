/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef game_transport_request_TYPES_H
#define game_transport_request_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "game_request_types.h"


namespace game { namespace server { namespace request {


class RequestTransportSummon {
 public:

  static const char* ascii_fingerprint; // = "C2C41E587DAC84A77A5056A1DC94ED73";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0xC4,0x1E,0x58,0x7D,0xAC,0x84,0xA7,0x7A,0x50,0x56,0xA1,0xDC,0x94,0xED,0x73};

  RequestTransportSummon() : actor_(0), transport_npc_template_(0), transport_npc_(0) {
  }

  virtual ~RequestTransportSummon() throw() {}

  int64_t actor_;
  int32_t transport_npc_template_;
  int64_t transport_npc_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_transport_npc_template_(const int32_t val) {
    transport_npc_template_ = val;
  }

  void __set_transport_npc_(const int64_t val) {
    transport_npc_ = val;
  }

  bool operator == (const RequestTransportSummon & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(transport_npc_template_ == rhs.transport_npc_template_))
      return false;
    if (!(transport_npc_ == rhs.transport_npc_))
      return false;
    return true;
  }
  bool operator != (const RequestTransportSummon &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestTransportSummon & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestTransportSummon &a, RequestTransportSummon &b);

typedef struct _RequestTransportRemove__isset {
  _RequestTransportRemove__isset() : actor_(false), transport_npc_(false) {}
  bool actor_;
  bool transport_npc_;
} _RequestTransportRemove__isset;

class RequestTransportRemove {
 public:

  static const char* ascii_fingerprint; // = "0354D07C94CB8542872CA1277008860A";
  static const uint8_t binary_fingerprint[16]; // = {0x03,0x54,0xD0,0x7C,0x94,0xCB,0x85,0x42,0x87,0x2C,0xA1,0x27,0x70,0x08,0x86,0x0A};

  RequestTransportRemove() : actor_(0), transport_npc_(0) {
  }

  virtual ~RequestTransportRemove() throw() {}

  int64_t actor_;
  int64_t transport_npc_;

  _RequestTransportRemove__isset __isset;

  void __set_actor_(const int64_t val) {
    actor_ = val;
    __isset.actor_ = true;
  }

  void __set_transport_npc_(const int64_t val) {
    transport_npc_ = val;
    __isset.transport_npc_ = true;
  }

  bool operator == (const RequestTransportRemove & rhs) const
  {
    if (__isset.actor_ != rhs.__isset.actor_)
      return false;
    else if (__isset.actor_ && !(actor_ == rhs.actor_))
      return false;
    if (__isset.transport_npc_ != rhs.__isset.transport_npc_)
      return false;
    else if (__isset.transport_npc_ && !(transport_npc_ == rhs.transport_npc_))
      return false;
    return true;
  }
  bool operator != (const RequestTransportRemove &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestTransportRemove & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestTransportRemove &a, RequestTransportRemove &b);


class RequestTransportCurrentNpc {
 public:

  static const char* ascii_fingerprint; // = "9763B9D124C8339490EA9AA9EB582188";
  static const uint8_t binary_fingerprint[16]; // = {0x97,0x63,0xB9,0xD1,0x24,0xC8,0x33,0x94,0x90,0xEA,0x9A,0xA9,0xEB,0x58,0x21,0x88};

  RequestTransportCurrentNpc() : actor_(0), transport_npc_(0), transport_npc_template_(0) {
  }

  virtual ~RequestTransportCurrentNpc() throw() {}

  int64_t actor_;
  int64_t transport_npc_;
  int32_t transport_npc_template_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_transport_npc_(const int64_t val) {
    transport_npc_ = val;
  }

  void __set_transport_npc_template_(const int32_t val) {
    transport_npc_template_ = val;
  }

  bool operator == (const RequestTransportCurrentNpc & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(transport_npc_ == rhs.transport_npc_))
      return false;
    if (!(transport_npc_template_ == rhs.transport_npc_template_))
      return false;
    return true;
  }
  bool operator != (const RequestTransportCurrentNpc &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestTransportCurrentNpc & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestTransportCurrentNpc &a, RequestTransportCurrentNpc &b);


class RequestTransportAround {
 public:

  static const char* ascii_fingerprint; // = "25038F937443AC9A2A06CEE5209E41BF";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x03,0x8F,0x93,0x74,0x43,0xAC,0x9A,0x2A,0x06,0xCE,0xE5,0x20,0x9E,0x41,0xBF};

  RequestTransportAround() : actor_(0), around_(0) {
  }

  virtual ~RequestTransportAround() throw() {}

  int64_t actor_;
  bool around_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_around_(const bool val) {
    around_ = val;
  }

  bool operator == (const RequestTransportAround & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(around_ == rhs.around_))
      return false;
    return true;
  }
  bool operator != (const RequestTransportAround &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestTransportAround & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestTransportAround &a, RequestTransportAround &b);


class RequestTransportGetSnapshot {
 public:

  static const char* ascii_fingerprint; // = "727CAEA8265A5DE67DBC931F55CD8753";
  static const uint8_t binary_fingerprint[16]; // = {0x72,0x7C,0xAE,0xA8,0x26,0x5A,0x5D,0xE6,0x7D,0xBC,0x93,0x1F,0x55,0xCD,0x87,0x53};

  RequestTransportGetSnapshot() : transport_npc_id_(0), snapshot_() {
  }

  virtual ~RequestTransportGetSnapshot() throw() {}

  int64_t transport_npc_id_;
  std::string snapshot_;

  void __set_transport_npc_id_(const int64_t val) {
    transport_npc_id_ = val;
  }

  void __set_snapshot_(const std::string& val) {
    snapshot_ = val;
  }

  bool operator == (const RequestTransportGetSnapshot & rhs) const
  {
    if (!(transport_npc_id_ == rhs.transport_npc_id_))
      return false;
    if (!(snapshot_ == rhs.snapshot_))
      return false;
    return true;
  }
  bool operator != (const RequestTransportGetSnapshot &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestTransportGetSnapshot & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestTransportGetSnapshot &a, RequestTransportGetSnapshot &b);


class RequestTransportSummonFromSnapshot {
 public:

  static const char* ascii_fingerprint; // = "609F7FD9A62998FFAAD62C61FD574946";
  static const uint8_t binary_fingerprint[16]; // = {0x60,0x9F,0x7F,0xD9,0xA6,0x29,0x98,0xFF,0xAA,0xD6,0x2C,0x61,0xFD,0x57,0x49,0x46};

  RequestTransportSummonFromSnapshot() : transport_npc_template_(0), scene_(0), x_(0), y_(0), snapshot_(), transport_npc_(0) {
  }

  virtual ~RequestTransportSummonFromSnapshot() throw() {}

  int32_t transport_npc_template_;
  int64_t scene_;
  int32_t x_;
  int32_t y_;
  std::string snapshot_;
  int64_t transport_npc_;

  void __set_transport_npc_template_(const int32_t val) {
    transport_npc_template_ = val;
  }

  void __set_scene_(const int64_t val) {
    scene_ = val;
  }

  void __set_x_(const int32_t val) {
    x_ = val;
  }

  void __set_y_(const int32_t val) {
    y_ = val;
  }

  void __set_snapshot_(const std::string& val) {
    snapshot_ = val;
  }

  void __set_transport_npc_(const int64_t val) {
    transport_npc_ = val;
  }

  bool operator == (const RequestTransportSummonFromSnapshot & rhs) const
  {
    if (!(transport_npc_template_ == rhs.transport_npc_template_))
      return false;
    if (!(scene_ == rhs.scene_))
      return false;
    if (!(x_ == rhs.x_))
      return false;
    if (!(y_ == rhs.y_))
      return false;
    if (!(snapshot_ == rhs.snapshot_))
      return false;
    if (!(transport_npc_ == rhs.transport_npc_))
      return false;
    return true;
  }
  bool operator != (const RequestTransportSummonFromSnapshot &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestTransportSummonFromSnapshot & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestTransportSummonFromSnapshot &a, RequestTransportSummonFromSnapshot &b);

}}} // namespace

#endif
