/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef game_item_request_TYPES_H
#define game_item_request_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "game_request_types.h"
#include "achieve_types.h"
#include "item_types.h"


namespace game { namespace server { namespace request {

struct AddItemResult {
  enum type {
    SUCCESS = 0,
    PACKET_FULL = 1,
    ERROR_UNKNOWN = 2
  };
};

extern const std::map<int, const char*> _AddItemResult_VALUES_TO_NAMES;

struct RemoveResult {
  enum type {
    SUCCESS = 0,
    ERROR_UNKNOWN = 1
  };
};

extern const std::map<int, const char*> _RemoveResult_VALUES_TO_NAMES;

typedef struct _RequestAddItem__isset {
  _RequestAddItem__isset() : location_(false), item_extra_info_(false), simulate_(true) {}
  bool location_;
  bool item_extra_info_;
  bool simulate_;
} _RequestAddItem__isset;

class RequestAddItem {
 public:

  static const char* ascii_fingerprint; // = "5B79CD68F6E79B331BEB595E39DC4732";
  static const uint8_t binary_fingerprint[16]; // = {0x5B,0x79,0xCD,0x68,0xF6,0xE7,0x9B,0x33,0x1B,0xEB,0x59,0x5E,0x39,0xDC,0x47,0x32};

  RequestAddItem() : actor_id_(0), item_template_(0), number_(0), bind_(( ::entity::BindRequireType::type)0), location_(0), item_extra_info_(), simulate_(false), intensify_level_(0), result_((AddItemResult::type)0) {
  }

  virtual ~RequestAddItem() throw() {}

  int64_t actor_id_;
  int32_t item_template_;
  int32_t number_;
   ::entity::BindRequireType::type bind_;
  int16_t location_;
  std::string item_extra_info_;
  bool simulate_;
  int32_t intensify_level_;
  AddItemResult::type result_;

  _RequestAddItem__isset __isset;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_item_template_(const int32_t val) {
    item_template_ = val;
  }

  void __set_number_(const int32_t val) {
    number_ = val;
  }

  void __set_bind_(const  ::entity::BindRequireType::type val) {
    bind_ = val;
  }

  void __set_location_(const int16_t val) {
    location_ = val;
    __isset.location_ = true;
  }

  void __set_item_extra_info_(const std::string& val) {
    item_extra_info_ = val;
    __isset.item_extra_info_ = true;
  }

  void __set_simulate_(const bool val) {
    simulate_ = val;
    __isset.simulate_ = true;
  }

  void __set_intensify_level_(const int32_t val) {
    intensify_level_ = val;
  }

  void __set_result_(const AddItemResult::type val) {
    result_ = val;
  }

  bool operator == (const RequestAddItem & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(item_template_ == rhs.item_template_))
      return false;
    if (!(number_ == rhs.number_))
      return false;
    if (!(bind_ == rhs.bind_))
      return false;
    if (__isset.location_ != rhs.__isset.location_)
      return false;
    else if (__isset.location_ && !(location_ == rhs.location_))
      return false;
    if (__isset.item_extra_info_ != rhs.__isset.item_extra_info_)
      return false;
    else if (__isset.item_extra_info_ && !(item_extra_info_ == rhs.item_extra_info_))
      return false;
    if (__isset.simulate_ != rhs.__isset.simulate_)
      return false;
    else if (__isset.simulate_ && !(simulate_ == rhs.simulate_))
      return false;
    if (!(intensify_level_ == rhs.intensify_level_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const RequestAddItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestAddItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestAddItem &a, RequestAddItem &b);

typedef struct _RequestAddItems__isset {
  _RequestAddItems__isset() : simulate_(true) {}
  bool simulate_;
} _RequestAddItems__isset;

class RequestAddItems {
 public:

  static const char* ascii_fingerprint; // = "F69432F471B0D6B2A2143540EE154A16";
  static const uint8_t binary_fingerprint[16]; // = {0xF6,0x94,0x32,0xF4,0x71,0xB0,0xD6,0xB2,0xA2,0x14,0x35,0x40,0xEE,0x15,0x4A,0x16};

  RequestAddItems() : actor_id_(0), simulate_(false), result_((AddItemResult::type)0) {
  }

  virtual ~RequestAddItems() throw() {}

  int64_t actor_id_;
  std::vector< ::entity::AddItemFields>  items_;
  bool simulate_;
  AddItemResult::type result_;

  _RequestAddItems__isset __isset;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_items_(const std::vector< ::entity::AddItemFields> & val) {
    items_ = val;
  }

  void __set_simulate_(const bool val) {
    simulate_ = val;
    __isset.simulate_ = true;
  }

  void __set_result_(const AddItemResult::type val) {
    result_ = val;
  }

  bool operator == (const RequestAddItems & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(items_ == rhs.items_))
      return false;
    if (__isset.simulate_ != rhs.__isset.simulate_)
      return false;
    else if (__isset.simulate_ && !(simulate_ == rhs.simulate_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const RequestAddItems &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestAddItems & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestAddItems &a, RequestAddItems &b);


class RequestGetPacketItemNumber {
 public:

  static const char* ascii_fingerprint; // = "32982958BFF8E8E004F8D868E75FBAE3";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x98,0x29,0x58,0xBF,0xF8,0xE8,0xE0,0x04,0xF8,0xD8,0x68,0xE7,0x5F,0xBA,0xE3};

  RequestGetPacketItemNumber() : actor_id_(0), item_template_(0), bind_(( ::entity::BindRequireType::type)0), number_(0) {
  }

  virtual ~RequestGetPacketItemNumber() throw() {}

  int64_t actor_id_;
  int32_t item_template_;
   ::entity::BindRequireType::type bind_;
  int32_t number_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_item_template_(const int32_t val) {
    item_template_ = val;
  }

  void __set_bind_(const  ::entity::BindRequireType::type val) {
    bind_ = val;
  }

  void __set_number_(const int32_t val) {
    number_ = val;
  }

  bool operator == (const RequestGetPacketItemNumber & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(item_template_ == rhs.item_template_))
      return false;
    if (!(bind_ == rhs.bind_))
      return false;
    if (!(number_ == rhs.number_))
      return false;
    return true;
  }
  bool operator != (const RequestGetPacketItemNumber &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestGetPacketItemNumber & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestGetPacketItemNumber &a, RequestGetPacketItemNumber &b);

typedef struct _RequestGetPacketItemTemplate__isset {
  _RequestGetPacketItemTemplate__isset() : item_id_(false), location_(false), item_extra_info_(false) {}
  bool item_id_;
  bool location_;
  bool item_extra_info_;
} _RequestGetPacketItemTemplate__isset;

class RequestGetPacketItemTemplate {
 public:

  static const char* ascii_fingerprint; // = "982116FC9CF1630F633DD75459E43ACD";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x21,0x16,0xFC,0x9C,0xF1,0x63,0x0F,0x63,0x3D,0xD7,0x54,0x59,0xE4,0x3A,0xCD};

  RequestGetPacketItemTemplate() : actor_id_(0), item_id_(0), location_(0), item_template_(0), bind_(0), item_extra_info_() {
  }

  virtual ~RequestGetPacketItemTemplate() throw() {}

  int64_t actor_id_;
  int64_t item_id_;
  int16_t location_;
  int32_t item_template_;
  bool bind_;
  std::string item_extra_info_;

  _RequestGetPacketItemTemplate__isset __isset;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_item_id_(const int64_t val) {
    item_id_ = val;
    __isset.item_id_ = true;
  }

  void __set_location_(const int16_t val) {
    location_ = val;
    __isset.location_ = true;
  }

  void __set_item_template_(const int32_t val) {
    item_template_ = val;
  }

  void __set_bind_(const bool val) {
    bind_ = val;
  }

  void __set_item_extra_info_(const std::string& val) {
    item_extra_info_ = val;
    __isset.item_extra_info_ = true;
  }

  bool operator == (const RequestGetPacketItemTemplate & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (__isset.item_id_ != rhs.__isset.item_id_)
      return false;
    else if (__isset.item_id_ && !(item_id_ == rhs.item_id_))
      return false;
    if (__isset.location_ != rhs.__isset.location_)
      return false;
    else if (__isset.location_ && !(location_ == rhs.location_))
      return false;
    if (!(item_template_ == rhs.item_template_))
      return false;
    if (!(bind_ == rhs.bind_))
      return false;
    if (__isset.item_extra_info_ != rhs.__isset.item_extra_info_)
      return false;
    else if (__isset.item_extra_info_ && !(item_extra_info_ == rhs.item_extra_info_))
      return false;
    return true;
  }
  bool operator != (const RequestGetPacketItemTemplate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestGetPacketItemTemplate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestGetPacketItemTemplate &a, RequestGetPacketItemTemplate &b);


class RequestRemoveItem {
 public:

  static const char* ascii_fingerprint; // = "755E00EEF0372395CE2405CA966A38AF";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0x5E,0x00,0xEE,0xF0,0x37,0x23,0x95,0xCE,0x24,0x05,0xCA,0x96,0x6A,0x38,0xAF};

  RequestRemoveItem() : actor_id_(0), item_template_(0), number_(0), bind_(( ::entity::BindRequireType::type)0), remove_number_(0) {
  }

  virtual ~RequestRemoveItem() throw() {}

  int64_t actor_id_;
  int32_t item_template_;
  int32_t number_;
   ::entity::BindRequireType::type bind_;
  int32_t remove_number_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_item_template_(const int32_t val) {
    item_template_ = val;
  }

  void __set_number_(const int32_t val) {
    number_ = val;
  }

  void __set_bind_(const  ::entity::BindRequireType::type val) {
    bind_ = val;
  }

  void __set_remove_number_(const int32_t val) {
    remove_number_ = val;
  }

  bool operator == (const RequestRemoveItem & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(item_template_ == rhs.item_template_))
      return false;
    if (!(number_ == rhs.number_))
      return false;
    if (!(bind_ == rhs.bind_))
      return false;
    if (!(remove_number_ == rhs.remove_number_))
      return false;
    return true;
  }
  bool operator != (const RequestRemoveItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestRemoveItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestRemoveItem &a, RequestRemoveItem &b);

typedef struct _RequestRemoveItemLocationID__isset {
  _RequestRemoveItemLocationID__isset() : item_id_(false), location_(false) {}
  bool item_id_;
  bool location_;
} _RequestRemoveItemLocationID__isset;

class RequestRemoveItemLocationID {
 public:

  static const char* ascii_fingerprint; // = "6514521A7C0040B34EBE34E8A06A705E";
  static const uint8_t binary_fingerprint[16]; // = {0x65,0x14,0x52,0x1A,0x7C,0x00,0x40,0xB3,0x4E,0xBE,0x34,0xE8,0xA0,0x6A,0x70,0x5E};

  RequestRemoveItemLocationID() : actor_id_(0), item_id_(), location_(0), number_(0), result_((RemoveResult::type)0) {
  }

  virtual ~RequestRemoveItemLocationID() throw() {}

  int64_t actor_id_;
  std::string item_id_;
  int16_t location_;
  int32_t number_;
  RemoveResult::type result_;

  _RequestRemoveItemLocationID__isset __isset;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_item_id_(const std::string& val) {
    item_id_ = val;
    __isset.item_id_ = true;
  }

  void __set_location_(const int16_t val) {
    location_ = val;
    __isset.location_ = true;
  }

  void __set_number_(const int32_t val) {
    number_ = val;
  }

  void __set_result_(const RemoveResult::type val) {
    result_ = val;
  }

  bool operator == (const RequestRemoveItemLocationID & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (__isset.item_id_ != rhs.__isset.item_id_)
      return false;
    else if (__isset.item_id_ && !(item_id_ == rhs.item_id_))
      return false;
    if (__isset.location_ != rhs.__isset.location_)
      return false;
    else if (__isset.location_ && !(location_ == rhs.location_))
      return false;
    if (!(number_ == rhs.number_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const RequestRemoveItemLocationID &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestRemoveItemLocationID & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestRemoveItemLocationID &a, RequestRemoveItemLocationID &b);


class RequestItemWearedEquipInfo {
 public:

  static const char* ascii_fingerprint; // = "F9FD8E4838A319D74043CA8A3E235319";
  static const uint8_t binary_fingerprint[16]; // = {0xF9,0xFD,0x8E,0x48,0x38,0xA3,0x19,0xD7,0x40,0x43,0xCA,0x8A,0x3E,0x23,0x53,0x19};

  RequestItemWearedEquipInfo() : actor_id_(0), type_(( ::entity::AchieveWearEquipType::type)0), num_(0), param1_(0) {
  }

  virtual ~RequestItemWearedEquipInfo() throw() {}

  int64_t actor_id_;
   ::entity::AchieveWearEquipType::type type_;
  int32_t num_;
  int32_t param1_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_type_(const  ::entity::AchieveWearEquipType::type val) {
    type_ = val;
  }

  void __set_num_(const int32_t val) {
    num_ = val;
  }

  void __set_param1_(const int32_t val) {
    param1_ = val;
  }

  bool operator == (const RequestItemWearedEquipInfo & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(type_ == rhs.type_))
      return false;
    if (!(num_ == rhs.num_))
      return false;
    if (!(param1_ == rhs.param1_))
      return false;
    return true;
  }
  bool operator != (const RequestItemWearedEquipInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestItemWearedEquipInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestItemWearedEquipInfo &a, RequestItemWearedEquipInfo &b);

}}} // namespace

#endif
