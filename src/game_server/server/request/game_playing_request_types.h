/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef game_playing_request_TYPES_H
#define game_playing_request_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "game_request_types.h"
#include "playing_types.h"


namespace game { namespace server { namespace request {


class RequestPlayingSetActorVariables {
 public:

  static const char* ascii_fingerprint; // = "B1CF74E1455F7B63B19CEBEBEAF7C304";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xCF,0x74,0xE1,0x45,0x5F,0x7B,0x63,0xB1,0x9C,0xEB,0xEB,0xEA,0xF7,0xC3,0x04};

  RequestPlayingSetActorVariables() : actor_(0), result_(0) {
  }

  virtual ~RequestPlayingSetActorVariables() throw() {}

  int64_t actor_;
  std::vector<std::string>  keys_;
  std::vector<int64_t>  values_;
  bool result_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_keys_(const std::vector<std::string> & val) {
    keys_ = val;
  }

  void __set_values_(const std::vector<int64_t> & val) {
    values_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const RequestPlayingSetActorVariables & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(keys_ == rhs.keys_))
      return false;
    if (!(values_ == rhs.values_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const RequestPlayingSetActorVariables &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestPlayingSetActorVariables & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestPlayingSetActorVariables &a, RequestPlayingSetActorVariables &b);


class RequestPlayingGetActorVariables {
 public:

  static const char* ascii_fingerprint; // = "B1CF74E1455F7B63B19CEBEBEAF7C304";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xCF,0x74,0xE1,0x45,0x5F,0x7B,0x63,0xB1,0x9C,0xEB,0xEB,0xEA,0xF7,0xC3,0x04};

  RequestPlayingGetActorVariables() : actor_(0), result_(0) {
  }

  virtual ~RequestPlayingGetActorVariables() throw() {}

  int64_t actor_;
  std::vector<std::string>  keys_;
  std::vector<int64_t>  values_;
  bool result_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_keys_(const std::vector<std::string> & val) {
    keys_ = val;
  }

  void __set_values_(const std::vector<int64_t> & val) {
    values_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const RequestPlayingGetActorVariables & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(keys_ == rhs.keys_))
      return false;
    if (!(values_ == rhs.values_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const RequestPlayingGetActorVariables &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestPlayingGetActorVariables & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestPlayingGetActorVariables &a, RequestPlayingGetActorVariables &b);


class RequestPlayingIncreaseActorVariables {
 public:

  static const char* ascii_fingerprint; // = "32415F6D53BD65AAFE7533A546FD5B3C";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x41,0x5F,0x6D,0x53,0xBD,0x65,0xAA,0xFE,0x75,0x33,0xA5,0x46,0xFD,0x5B,0x3C};

  RequestPlayingIncreaseActorVariables() : actor_(0), result_(0) {
  }

  virtual ~RequestPlayingIncreaseActorVariables() throw() {}

  int64_t actor_;
  std::vector<std::string>  keys_;
  std::vector<int64_t>  increments_;
  std::vector<int64_t>  values_;
  bool result_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_keys_(const std::vector<std::string> & val) {
    keys_ = val;
  }

  void __set_increments_(const std::vector<int64_t> & val) {
    increments_ = val;
  }

  void __set_values_(const std::vector<int64_t> & val) {
    values_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const RequestPlayingIncreaseActorVariables & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(keys_ == rhs.keys_))
      return false;
    if (!(increments_ == rhs.increments_))
      return false;
    if (!(values_ == rhs.values_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const RequestPlayingIncreaseActorVariables &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestPlayingIncreaseActorVariables & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestPlayingIncreaseActorVariables &a, RequestPlayingIncreaseActorVariables &b);


class RequestPlayingDecreaseActorVariables {
 public:

  static const char* ascii_fingerprint; // = "32415F6D53BD65AAFE7533A546FD5B3C";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x41,0x5F,0x6D,0x53,0xBD,0x65,0xAA,0xFE,0x75,0x33,0xA5,0x46,0xFD,0x5B,0x3C};

  RequestPlayingDecreaseActorVariables() : actor_(0), result_(0) {
  }

  virtual ~RequestPlayingDecreaseActorVariables() throw() {}

  int64_t actor_;
  std::vector<std::string>  keys_;
  std::vector<int64_t>  decrements_;
  std::vector<int64_t>  values_;
  bool result_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_keys_(const std::vector<std::string> & val) {
    keys_ = val;
  }

  void __set_decrements_(const std::vector<int64_t> & val) {
    decrements_ = val;
  }

  void __set_values_(const std::vector<int64_t> & val) {
    values_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const RequestPlayingDecreaseActorVariables & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(keys_ == rhs.keys_))
      return false;
    if (!(decrements_ == rhs.decrements_))
      return false;
    if (!(values_ == rhs.values_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const RequestPlayingDecreaseActorVariables &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestPlayingDecreaseActorVariables & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestPlayingDecreaseActorVariables &a, RequestPlayingDecreaseActorVariables &b);


class RequestPlayingInitializeActor {
 public:

  static const char* ascii_fingerprint; // = "E6B268EC1DCCC912680C96518492461B";
  static const uint8_t binary_fingerprint[16]; // = {0xE6,0xB2,0x68,0xEC,0x1D,0xCC,0xC9,0x12,0x68,0x0C,0x96,0x51,0x84,0x92,0x46,0x1B};

  RequestPlayingInitializeActor() : actor_(0), spend_time_(0) {
  }

  virtual ~RequestPlayingInitializeActor() throw() {}

  int64_t actor_;
  int32_t spend_time_;
  std::vector< ::entity::PlayingScoreField>  scores_;
  std::vector<int32_t>  datas_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_spend_time_(const int32_t val) {
    spend_time_ = val;
  }

  void __set_scores_(const std::vector< ::entity::PlayingScoreField> & val) {
    scores_ = val;
  }

  void __set_datas_(const std::vector<int32_t> & val) {
    datas_ = val;
  }

  bool operator == (const RequestPlayingInitializeActor & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(spend_time_ == rhs.spend_time_))
      return false;
    if (!(scores_ == rhs.scores_))
      return false;
    if (!(datas_ == rhs.datas_))
      return false;
    return true;
  }
  bool operator != (const RequestPlayingInitializeActor &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestPlayingInitializeActor & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestPlayingInitializeActor &a, RequestPlayingInitializeActor &b);


class RequestPlayingSynchronizeScore {
 public:

  static const char* ascii_fingerprint; // = "494E08EEB1EB1A5B6421F6C9547E5F8F";
  static const uint8_t binary_fingerprint[16]; // = {0x49,0x4E,0x08,0xEE,0xB1,0xEB,0x1A,0x5B,0x64,0x21,0xF6,0xC9,0x54,0x7E,0x5F,0x8F};

  RequestPlayingSynchronizeScore() : actor_(0) {
  }

  virtual ~RequestPlayingSynchronizeScore() throw() {}

  int64_t actor_;
   ::entity::PlayingScoreField score_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_score_(const  ::entity::PlayingScoreField& val) {
    score_ = val;
  }

  bool operator == (const RequestPlayingSynchronizeScore & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(score_ == rhs.score_))
      return false;
    return true;
  }
  bool operator != (const RequestPlayingSynchronizeScore &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestPlayingSynchronizeScore & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestPlayingSynchronizeScore &a, RequestPlayingSynchronizeScore &b);


class RequestPlayingSynchronizeRanking {
 public:

  static const char* ascii_fingerprint; // = "AA4F527100A418E488E7EBFE2AF9DDD3";
  static const uint8_t binary_fingerprint[16]; // = {0xAA,0x4F,0x52,0x71,0x00,0xA4,0x18,0xE4,0x88,0xE7,0xEB,0xFE,0x2A,0xF9,0xDD,0xD3};

  RequestPlayingSynchronizeRanking() {
  }

  virtual ~RequestPlayingSynchronizeRanking() throw() {}

  std::vector< ::entity::PlayingRankingField>  ranking_;
  std::vector<int64_t>  actors_;

  void __set_ranking_(const std::vector< ::entity::PlayingRankingField> & val) {
    ranking_ = val;
  }

  void __set_actors_(const std::vector<int64_t> & val) {
    actors_ = val;
  }

  bool operator == (const RequestPlayingSynchronizeRanking & rhs) const
  {
    if (!(ranking_ == rhs.ranking_))
      return false;
    if (!(actors_ == rhs.actors_))
      return false;
    return true;
  }
  bool operator != (const RequestPlayingSynchronizeRanking &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestPlayingSynchronizeRanking & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestPlayingSynchronizeRanking &a, RequestPlayingSynchronizeRanking &b);

typedef struct _RequestPlayingComplete__isset {
  _RequestPlayingComplete__isset() : awards_(false), draw_award_(false) {}
  bool awards_;
  bool draw_award_;
} _RequestPlayingComplete__isset;

class RequestPlayingComplete {
 public:

  static const char* ascii_fingerprint; // = "640FC39CA26580A91DA36AFC5883263D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x0F,0xC3,0x9C,0xA2,0x65,0x80,0xA9,0x1D,0xA3,0x6A,0xFC,0x58,0x83,0x26,0x3D};

  RequestPlayingComplete() : playing_(0) {
  }

  virtual ~RequestPlayingComplete() throw() {}

  int64_t playing_;
   ::entity::PlayingResultField result_;
  std::vector< ::entity::PlayingAwardField>  awards_;
   ::entity::PlayingAwardField draw_award_;

  _RequestPlayingComplete__isset __isset;

  void __set_playing_(const int64_t val) {
    playing_ = val;
  }

  void __set_result_(const  ::entity::PlayingResultField& val) {
    result_ = val;
  }

  void __set_awards_(const std::vector< ::entity::PlayingAwardField> & val) {
    awards_ = val;
    __isset.awards_ = true;
  }

  void __set_draw_award_(const  ::entity::PlayingAwardField& val) {
    draw_award_ = val;
    __isset.draw_award_ = true;
  }

  bool operator == (const RequestPlayingComplete & rhs) const
  {
    if (!(playing_ == rhs.playing_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.awards_ != rhs.__isset.awards_)
      return false;
    else if (__isset.awards_ && !(awards_ == rhs.awards_))
      return false;
    if (__isset.draw_award_ != rhs.__isset.draw_award_)
      return false;
    else if (__isset.draw_award_ && !(draw_award_ == rhs.draw_award_))
      return false;
    return true;
  }
  bool operator != (const RequestPlayingComplete &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestPlayingComplete & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestPlayingComplete &a, RequestPlayingComplete &b);

typedef struct _RequestPlayingActorComplete__isset {
  _RequestPlayingActorComplete__isset() : awards_(false), draw_award_(false) {}
  bool awards_;
  bool draw_award_;
} _RequestPlayingActorComplete__isset;

class RequestPlayingActorComplete {
 public:

  static const char* ascii_fingerprint; // = "84EF0604541B0EB5D7EE42C1998BE18D";
  static const uint8_t binary_fingerprint[16]; // = {0x84,0xEF,0x06,0x04,0x54,0x1B,0x0E,0xB5,0xD7,0xEE,0x42,0xC1,0x99,0x8B,0xE1,0x8D};

  RequestPlayingActorComplete() : playing_(0), actor_(0) {
  }

  virtual ~RequestPlayingActorComplete() throw() {}

  int64_t playing_;
  int64_t actor_;
   ::entity::PlayingResultField result_;
  std::vector< ::entity::PlayingAwardField>  awards_;
   ::entity::PlayingAwardField draw_award_;

  _RequestPlayingActorComplete__isset __isset;

  void __set_playing_(const int64_t val) {
    playing_ = val;
  }

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_result_(const  ::entity::PlayingResultField& val) {
    result_ = val;
  }

  void __set_awards_(const std::vector< ::entity::PlayingAwardField> & val) {
    awards_ = val;
    __isset.awards_ = true;
  }

  void __set_draw_award_(const  ::entity::PlayingAwardField& val) {
    draw_award_ = val;
    __isset.draw_award_ = true;
  }

  bool operator == (const RequestPlayingActorComplete & rhs) const
  {
    if (!(playing_ == rhs.playing_))
      return false;
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.awards_ != rhs.__isset.awards_)
      return false;
    else if (__isset.awards_ && !(awards_ == rhs.awards_))
      return false;
    if (__isset.draw_award_ != rhs.__isset.draw_award_)
      return false;
    else if (__isset.draw_award_ && !(draw_award_ == rhs.draw_award_))
      return false;
    return true;
  }
  bool operator != (const RequestPlayingActorComplete &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestPlayingActorComplete & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestPlayingActorComplete &a, RequestPlayingActorComplete &b);


class RequestPlayingFailure {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  RequestPlayingFailure() : playing_(0) {
  }

  virtual ~RequestPlayingFailure() throw() {}

  int64_t playing_;

  void __set_playing_(const int64_t val) {
    playing_ = val;
  }

  bool operator == (const RequestPlayingFailure & rhs) const
  {
    if (!(playing_ == rhs.playing_))
      return false;
    return true;
  }
  bool operator != (const RequestPlayingFailure &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestPlayingFailure & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestPlayingFailure &a, RequestPlayingFailure &b);


class RequestPlayingUpdateRecord {
 public:

  static const char* ascii_fingerprint; // = "DCE91D5C0B77961ECDD3233260ADA22F";
  static const uint8_t binary_fingerprint[16]; // = {0xDC,0xE9,0x1D,0x5C,0x0B,0x77,0x96,0x1E,0xCD,0xD3,0x23,0x32,0x60,0xAD,0xA2,0x2F};

  RequestPlayingUpdateRecord() : actor_(0), playing_template_(0) {
  }

  virtual ~RequestPlayingUpdateRecord() throw() {}

  int64_t actor_;
  int32_t playing_template_;
   ::entity::PlayingRecordField record_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_playing_template_(const int32_t val) {
    playing_template_ = val;
  }

  void __set_record_(const  ::entity::PlayingRecordField& val) {
    record_ = val;
  }

  bool operator == (const RequestPlayingUpdateRecord & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(playing_template_ == rhs.playing_template_))
      return false;
    if (!(record_ == rhs.record_))
      return false;
    return true;
  }
  bool operator != (const RequestPlayingUpdateRecord &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestPlayingUpdateRecord & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestPlayingUpdateRecord &a, RequestPlayingUpdateRecord &b);


class RequestPlayingUpdateResult {
 public:

  static const char* ascii_fingerprint; // = "EA075559887FE5B713CBE3869BC48BF9";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x07,0x55,0x59,0x88,0x7F,0xE5,0xB7,0x13,0xCB,0xE3,0x86,0x9B,0xC4,0x8B,0xF9};

  RequestPlayingUpdateResult() : actor_(0), playing_template_(0) {
  }

  virtual ~RequestPlayingUpdateResult() throw() {}

  int64_t actor_;
  int32_t playing_template_;
   ::entity::PlayingResultField result_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_playing_template_(const int32_t val) {
    playing_template_ = val;
  }

  void __set_result_(const  ::entity::PlayingResultField& val) {
    result_ = val;
  }

  bool operator == (const RequestPlayingUpdateResult & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(playing_template_ == rhs.playing_template_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const RequestPlayingUpdateResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestPlayingUpdateResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestPlayingUpdateResult &a, RequestPlayingUpdateResult &b);


class RequestPlayingAddAward {
 public:

  static const char* ascii_fingerprint; // = "44B5A269FCC223FF1D9925EAF80B5E45";
  static const uint8_t binary_fingerprint[16]; // = {0x44,0xB5,0xA2,0x69,0xFC,0xC2,0x23,0xFF,0x1D,0x99,0x25,0xEA,0xF8,0x0B,0x5E,0x45};

  RequestPlayingAddAward() : actor_(0), playing_template_(0) {
  }

  virtual ~RequestPlayingAddAward() throw() {}

  int64_t actor_;
  int32_t playing_template_;
  std::vector< ::entity::PlayingAwardField>  awards_;
   ::entity::PlayingAwardField draw_award_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_playing_template_(const int32_t val) {
    playing_template_ = val;
  }

  void __set_awards_(const std::vector< ::entity::PlayingAwardField> & val) {
    awards_ = val;
  }

  void __set_draw_award_(const  ::entity::PlayingAwardField& val) {
    draw_award_ = val;
  }

  bool operator == (const RequestPlayingAddAward & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(playing_template_ == rhs.playing_template_))
      return false;
    if (!(awards_ == rhs.awards_))
      return false;
    if (!(draw_award_ == rhs.draw_award_))
      return false;
    return true;
  }
  bool operator != (const RequestPlayingAddAward &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestPlayingAddAward & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestPlayingAddAward &a, RequestPlayingAddAward &b);


class RequestPlayingClearComplete {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  RequestPlayingClearComplete() : actor_(0), playing_template_(0) {
  }

  virtual ~RequestPlayingClearComplete() throw() {}

  int64_t actor_;
  int32_t playing_template_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_playing_template_(const int32_t val) {
    playing_template_ = val;
  }

  bool operator == (const RequestPlayingClearComplete & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(playing_template_ == rhs.playing_template_))
      return false;
    return true;
  }
  bool operator != (const RequestPlayingClearComplete &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestPlayingClearComplete & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestPlayingClearComplete &a, RequestPlayingClearComplete &b);


class RequestPlayingIncreaseComplete {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  RequestPlayingIncreaseComplete() : playing_(0) {
  }

  virtual ~RequestPlayingIncreaseComplete() throw() {}

  int64_t playing_;

  void __set_playing_(const int64_t val) {
    playing_ = val;
  }

  bool operator == (const RequestPlayingIncreaseComplete & rhs) const
  {
    if (!(playing_ == rhs.playing_))
      return false;
    return true;
  }
  bool operator != (const RequestPlayingIncreaseComplete &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestPlayingIncreaseComplete & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestPlayingIncreaseComplete &a, RequestPlayingIncreaseComplete &b);


class RequestPlayingActorIncreaseComplete {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  RequestPlayingActorIncreaseComplete() : actor_(0), playing_template_(0) {
  }

  virtual ~RequestPlayingActorIncreaseComplete() throw() {}

  int64_t actor_;
  int32_t playing_template_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_playing_template_(const int32_t val) {
    playing_template_ = val;
  }

  bool operator == (const RequestPlayingActorIncreaseComplete & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(playing_template_ == rhs.playing_template_))
      return false;
    return true;
  }
  bool operator != (const RequestPlayingActorIncreaseComplete &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestPlayingActorIncreaseComplete & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestPlayingActorIncreaseComplete &a, RequestPlayingActorIncreaseComplete &b);


class RequestPlayingAwardActor {
 public:

  static const char* ascii_fingerprint; // = "0C683EEB55C2B9ADA938AAF50F89DF74";
  static const uint8_t binary_fingerprint[16]; // = {0x0C,0x68,0x3E,0xEB,0x55,0xC2,0xB9,0xAD,0xA9,0x38,0xAA,0xF5,0x0F,0x89,0xDF,0x74};

  RequestPlayingAwardActor() : actor_(0), playing_template_(0), first_pass_award_(false) {
  }

  virtual ~RequestPlayingAwardActor() throw() {}

  int64_t actor_;
  int32_t playing_template_;
  bool first_pass_award_;
  std::vector< ::entity::PlayingAwardField>  awards_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_playing_template_(const int32_t val) {
    playing_template_ = val;
  }

  void __set_first_pass_award_(const bool val) {
    first_pass_award_ = val;
  }

  void __set_awards_(const std::vector< ::entity::PlayingAwardField> & val) {
    awards_ = val;
  }

  bool operator == (const RequestPlayingAwardActor & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(playing_template_ == rhs.playing_template_))
      return false;
    if (!(first_pass_award_ == rhs.first_pass_award_))
      return false;
    if (!(awards_ == rhs.awards_))
      return false;
    return true;
  }
  bool operator != (const RequestPlayingAwardActor &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestPlayingAwardActor & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestPlayingAwardActor &a, RequestPlayingAwardActor &b);


class RequestPlayingActorPlayingID {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  RequestPlayingActorPlayingID() : actor_(0), playing_id_(0) {
  }

  virtual ~RequestPlayingActorPlayingID() throw() {}

  int64_t actor_;
  int32_t playing_id_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_playing_id_(const int32_t val) {
    playing_id_ = val;
  }

  bool operator == (const RequestPlayingActorPlayingID & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(playing_id_ == rhs.playing_id_))
      return false;
    return true;
  }
  bool operator != (const RequestPlayingActorPlayingID &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestPlayingActorPlayingID & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestPlayingActorPlayingID &a, RequestPlayingActorPlayingID &b);

}}} // namespace

#endif
