/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "game_task_request_types.h"

#include <algorithm>

namespace game { namespace server { namespace request {

int _kRequestTaskOptTypeValues[] = {
  RequestTaskOptType::ACCEPT,
  RequestTaskOptType::FINISH
};
const char* _kRequestTaskOptTypeNames[] = {
  "ACCEPT",
  "FINISH"
};
const std::map<int, const char*> _RequestTaskOptType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kRequestTaskOptTypeValues, _kRequestTaskOptTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* RequestTaskAccept::ascii_fingerprint = "E2E24E9BC4DF93789792D14330D3E8BC";
const uint8_t RequestTaskAccept::binary_fingerprint[16] = {0xE2,0xE2,0x4E,0x9B,0xC4,0xDF,0x93,0x78,0x97,0x92,0xD1,0x43,0x30,0xD3,0xE8,0xBC};

uint32_t RequestTaskAccept::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_task_id_ = false;
  bool isset_actor_id_ = false;
  bool isset_type_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->task_id_);
          isset_task_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type_ = ( ::entity::TaskType::type)ecast0;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_task_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestTaskAccept::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestTaskAccept");

  xfer += oprot->writeFieldBegin("task_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->task_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestTaskAccept &a, RequestTaskAccept &b) {
  using ::std::swap;
  swap(a.task_id_, b.task_id_);
  swap(a.actor_id_, b.actor_id_);
  swap(a.type_, b.type_);
}

const char* RequestTaskCheckGather::ascii_fingerprint = "9C2A05F173B50306037BDE9AE30E1B99";
const uint8_t RequestTaskCheckGather::binary_fingerprint[16] = {0x9C,0x2A,0x05,0xF1,0x73,0xB5,0x03,0x06,0x03,0x7B,0xDE,0x9A,0xE3,0x0E,0x1B,0x99};

uint32_t RequestTaskCheckGather::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_npc_template_ = false;
  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->npc_template_);
          isset_npc_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_npc_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestTaskCheckGather::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestTaskCheckGather");

  xfer += oprot->writeFieldBegin("npc_template_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->npc_template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestTaskCheckGather &a, RequestTaskCheckGather &b) {
  using ::std::swap;
  swap(a.npc_template_, b.npc_template_);
  swap(a.actor_id_, b.actor_id_);
}

const char* RequestTaskMaxLayer::ascii_fingerprint = "AFAFBCDB9822F9D1AA4E44188E720B47";
const uint8_t RequestTaskMaxLayer::binary_fingerprint[16] = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

uint32_t RequestTaskMaxLayer::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_task_layer_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->task_layer_);
          isset_task_layer_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_task_layer_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestTaskMaxLayer::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestTaskMaxLayer");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("task_layer_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->task_layer_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestTaskMaxLayer &a, RequestTaskMaxLayer &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.task_layer_, b.task_layer_);
}

const char* RequestTaskConditionCoordinate::ascii_fingerprint = "7F9433AE415529774108A73E2A9C2675";
const uint8_t RequestTaskConditionCoordinate::binary_fingerprint[16] = {0x7F,0x94,0x33,0xAE,0x41,0x55,0x29,0x77,0x41,0x08,0xA7,0x3E,0x2A,0x9C,0x26,0x75};

uint32_t RequestTaskConditionCoordinate::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_type_ = false;
  bool isset_task_id_ = false;
  bool isset_condition_pos_ = false;
  bool isset_map_id_ = false;
  bool isset_x_ = false;
  bool isset_y_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->type_ = ( ::entity::TaskType::type)ecast1;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->task_id_);
          isset_task_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->condition_pos_);
          isset_condition_pos_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->map_id_);
          isset_map_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->x_);
          isset_x_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->y_);
          isset_y_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_task_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_condition_pos_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_map_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_x_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_y_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestTaskConditionCoordinate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestTaskConditionCoordinate");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("task_id_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->task_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("condition_pos_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->condition_pos_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("map_id_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->map_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->x_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y_", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->y_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestTaskConditionCoordinate &a, RequestTaskConditionCoordinate &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.type_, b.type_);
  swap(a.task_id_, b.task_id_);
  swap(a.condition_pos_, b.condition_pos_);
  swap(a.map_id_, b.map_id_);
  swap(a.x_, b.x_);
  swap(a.y_, b.y_);
}

const char* RequestTaskAcceptAndFinishCoordinate::ascii_fingerprint = "17717B3620341B2C0CC9164DE787961F";
const uint8_t RequestTaskAcceptAndFinishCoordinate::binary_fingerprint[16] = {0x17,0x71,0x7B,0x36,0x20,0x34,0x1B,0x2C,0x0C,0xC9,0x16,0x4D,0xE7,0x87,0x96,0x1F};

uint32_t RequestTaskAcceptAndFinishCoordinate::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_type_ = false;
  bool isset_task_id_ = false;
  bool isset_opt_type_ = false;
  bool isset_map_id_ = false;
  bool isset_x_ = false;
  bool isset_y_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->type_ = ( ::entity::TaskType::type)ecast2;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->task_id_);
          isset_task_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->opt_type_ = (RequestTaskOptType::type)ecast3;
          isset_opt_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->map_id_);
          isset_map_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->x_);
          isset_x_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->y_);
          isset_y_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_task_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_opt_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_map_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_x_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_y_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestTaskAcceptAndFinishCoordinate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestTaskAcceptAndFinishCoordinate");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("task_id_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->task_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("opt_type_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->opt_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("map_id_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->map_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->x_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y_", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->y_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestTaskAcceptAndFinishCoordinate &a, RequestTaskAcceptAndFinishCoordinate &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.type_, b.type_);
  swap(a.task_id_, b.task_id_);
  swap(a.opt_type_, b.opt_type_);
  swap(a.map_id_, b.map_id_);
  swap(a.x_, b.x_);
  swap(a.y_, b.y_);
}

}}} // namespace
