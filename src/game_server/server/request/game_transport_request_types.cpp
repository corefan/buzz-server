/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "game_transport_request_types.h"

#include <algorithm>

namespace game { namespace server { namespace request {

const char* RequestTransportSummon::ascii_fingerprint = "C2C41E587DAC84A77A5056A1DC94ED73";
const uint8_t RequestTransportSummon::binary_fingerprint[16] = {0xC2,0xC4,0x1E,0x58,0x7D,0xAC,0x84,0xA7,0x7A,0x50,0x56,0xA1,0xDC,0x94,0xED,0x73};

uint32_t RequestTransportSummon::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_transport_npc_template_ = false;
  bool isset_transport_npc_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->transport_npc_template_);
          isset_transport_npc_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->transport_npc_);
          isset_transport_npc_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_transport_npc_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_transport_npc_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestTransportSummon::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestTransportSummon");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("transport_npc_template_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->transport_npc_template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("transport_npc_", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->transport_npc_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestTransportSummon &a, RequestTransportSummon &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.transport_npc_template_, b.transport_npc_template_);
  swap(a.transport_npc_, b.transport_npc_);
}

const char* RequestTransportRemove::ascii_fingerprint = "0354D07C94CB8542872CA1277008860A";
const uint8_t RequestTransportRemove::binary_fingerprint[16] = {0x03,0x54,0xD0,0x7C,0x94,0xCB,0x85,0x42,0x87,0x2C,0xA1,0x27,0x70,0x08,0x86,0x0A};

uint32_t RequestTransportRemove::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          this->__isset.actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->transport_npc_);
          this->__isset.transport_npc_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RequestTransportRemove::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestTransportRemove");

  if (this->__isset.actor_) {
    xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->actor_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.transport_npc_) {
    xfer += oprot->writeFieldBegin("transport_npc_", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->transport_npc_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestTransportRemove &a, RequestTransportRemove &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.transport_npc_, b.transport_npc_);
  swap(a.__isset, b.__isset);
}

const char* RequestTransportCurrentNpc::ascii_fingerprint = "9763B9D124C8339490EA9AA9EB582188";
const uint8_t RequestTransportCurrentNpc::binary_fingerprint[16] = {0x97,0x63,0xB9,0xD1,0x24,0xC8,0x33,0x94,0x90,0xEA,0x9A,0xA9,0xEB,0x58,0x21,0x88};

uint32_t RequestTransportCurrentNpc::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_transport_npc_ = false;
  bool isset_transport_npc_template_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->transport_npc_);
          isset_transport_npc_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->transport_npc_template_);
          isset_transport_npc_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_transport_npc_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_transport_npc_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestTransportCurrentNpc::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestTransportCurrentNpc");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("transport_npc_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->transport_npc_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("transport_npc_template_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->transport_npc_template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestTransportCurrentNpc &a, RequestTransportCurrentNpc &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.transport_npc_, b.transport_npc_);
  swap(a.transport_npc_template_, b.transport_npc_template_);
}

const char* RequestTransportAround::ascii_fingerprint = "25038F937443AC9A2A06CEE5209E41BF";
const uint8_t RequestTransportAround::binary_fingerprint[16] = {0x25,0x03,0x8F,0x93,0x74,0x43,0xAC,0x9A,0x2A,0x06,0xCE,0xE5,0x20,0x9E,0x41,0xBF};

uint32_t RequestTransportAround::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_around_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->around_);
          isset_around_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_around_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestTransportAround::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestTransportAround");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("around_", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->around_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestTransportAround &a, RequestTransportAround &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.around_, b.around_);
}

const char* RequestTransportGetSnapshot::ascii_fingerprint = "727CAEA8265A5DE67DBC931F55CD8753";
const uint8_t RequestTransportGetSnapshot::binary_fingerprint[16] = {0x72,0x7C,0xAE,0xA8,0x26,0x5A,0x5D,0xE6,0x7D,0xBC,0x93,0x1F,0x55,0xCD,0x87,0x53};

uint32_t RequestTransportGetSnapshot::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_transport_npc_id_ = false;
  bool isset_snapshot_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->transport_npc_id_);
          isset_transport_npc_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->snapshot_);
          isset_snapshot_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_transport_npc_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_snapshot_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestTransportGetSnapshot::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestTransportGetSnapshot");

  xfer += oprot->writeFieldBegin("transport_npc_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->transport_npc_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("snapshot_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->snapshot_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestTransportGetSnapshot &a, RequestTransportGetSnapshot &b) {
  using ::std::swap;
  swap(a.transport_npc_id_, b.transport_npc_id_);
  swap(a.snapshot_, b.snapshot_);
}

const char* RequestTransportSummonFromSnapshot::ascii_fingerprint = "609F7FD9A62998FFAAD62C61FD574946";
const uint8_t RequestTransportSummonFromSnapshot::binary_fingerprint[16] = {0x60,0x9F,0x7F,0xD9,0xA6,0x29,0x98,0xFF,0xAA,0xD6,0x2C,0x61,0xFD,0x57,0x49,0x46};

uint32_t RequestTransportSummonFromSnapshot::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_transport_npc_template_ = false;
  bool isset_scene_ = false;
  bool isset_x_ = false;
  bool isset_y_ = false;
  bool isset_snapshot_ = false;
  bool isset_transport_npc_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->transport_npc_template_);
          isset_transport_npc_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->scene_);
          isset_scene_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->x_);
          isset_x_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->y_);
          isset_y_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->snapshot_);
          isset_snapshot_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->transport_npc_);
          isset_transport_npc_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_transport_npc_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_scene_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_x_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_y_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_snapshot_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_transport_npc_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestTransportSummonFromSnapshot::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestTransportSummonFromSnapshot");

  xfer += oprot->writeFieldBegin("transport_npc_template_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->transport_npc_template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scene_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->scene_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->x_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->y_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("snapshot_", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeBinary(this->snapshot_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("transport_npc_", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->transport_npc_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestTransportSummonFromSnapshot &a, RequestTransportSummonFromSnapshot &b) {
  using ::std::swap;
  swap(a.transport_npc_template_, b.transport_npc_template_);
  swap(a.scene_, b.scene_);
  swap(a.x_, b.x_);
  swap(a.y_, b.y_);
  swap(a.snapshot_, b.snapshot_);
  swap(a.transport_npc_, b.transport_npc_);
}

}}} // namespace
