/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef game_attr_request_TYPES_H
#define game_attr_request_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "game_request_types.h"


namespace game { namespace server { namespace request {


class RequestAttrCheckSwordOpen {
 public:

  static const char* ascii_fingerprint; // = "25038F937443AC9A2A06CEE5209E41BF";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x03,0x8F,0x93,0x74,0x43,0xAC,0x9A,0x2A,0x06,0xCE,0xE5,0x20,0x9E,0x41,0xBF};

  RequestAttrCheckSwordOpen() : actor_(0), result_(0) {
  }

  virtual ~RequestAttrCheckSwordOpen() throw() {}

  int64_t actor_;
  bool result_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const RequestAttrCheckSwordOpen & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const RequestAttrCheckSwordOpen &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestAttrCheckSwordOpen & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestAttrCheckSwordOpen &a, RequestAttrCheckSwordOpen &b);


class RequestAttrOpenSword {
 public:

  static const char* ascii_fingerprint; // = "25038F937443AC9A2A06CEE5209E41BF";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x03,0x8F,0x93,0x74,0x43,0xAC,0x9A,0x2A,0x06,0xCE,0xE5,0x20,0x9E,0x41,0xBF};

  RequestAttrOpenSword() : actor_(0), result_(0) {
  }

  virtual ~RequestAttrOpenSword() throw() {}

  int64_t actor_;
  bool result_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const RequestAttrOpenSword & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const RequestAttrOpenSword &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestAttrOpenSword & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestAttrOpenSword &a, RequestAttrOpenSword &b);


class RequestAttrGetSwordStep {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  RequestAttrGetSwordStep() : actor_(0), step_(0) {
  }

  virtual ~RequestAttrGetSwordStep() throw() {}

  int64_t actor_;
  int32_t step_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_step_(const int32_t val) {
    step_ = val;
  }

  bool operator == (const RequestAttrGetSwordStep & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(step_ == rhs.step_))
      return false;
    return true;
  }
  bool operator != (const RequestAttrGetSwordStep &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestAttrGetSwordStep & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestAttrGetSwordStep &a, RequestAttrGetSwordStep &b);


class RequestAttrAddSpiritFacade {
 public:

  static const char* ascii_fingerprint; // = "74790CD6C921812BFE1FB306DD15F078";
  static const uint8_t binary_fingerprint[16]; // = {0x74,0x79,0x0C,0xD6,0xC9,0x21,0x81,0x2B,0xFE,0x1F,0xB3,0x06,0xDD,0x15,0xF0,0x78};

  RequestAttrAddSpiritFacade() : actor_(0), spirit_facade_id_(0), duration_time_(0), result_(0) {
  }

  virtual ~RequestAttrAddSpiritFacade() throw() {}

  int64_t actor_;
  int32_t spirit_facade_id_;
  int32_t duration_time_;
  bool result_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_spirit_facade_id_(const int32_t val) {
    spirit_facade_id_ = val;
  }

  void __set_duration_time_(const int32_t val) {
    duration_time_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const RequestAttrAddSpiritFacade & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(spirit_facade_id_ == rhs.spirit_facade_id_))
      return false;
    if (!(duration_time_ == rhs.duration_time_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const RequestAttrAddSpiritFacade &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestAttrAddSpiritFacade & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestAttrAddSpiritFacade &a, RequestAttrAddSpiritFacade &b);


class RequestAttrGetSpiritLevel {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  RequestAttrGetSpiritLevel() : actor_(0), level_(0) {
  }

  virtual ~RequestAttrGetSpiritLevel() throw() {}

  int64_t actor_;
  int32_t level_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_level_(const int32_t val) {
    level_ = val;
  }

  bool operator == (const RequestAttrGetSpiritLevel & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(level_ == rhs.level_))
      return false;
    return true;
  }
  bool operator != (const RequestAttrGetSpiritLevel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestAttrGetSpiritLevel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestAttrGetSpiritLevel &a, RequestAttrGetSpiritLevel &b);


class RequestAttrGetNobleLevel {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  RequestAttrGetNobleLevel() : actor_(0), level_(0) {
  }

  virtual ~RequestAttrGetNobleLevel() throw() {}

  int64_t actor_;
  int32_t level_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_level_(const int32_t val) {
    level_ = val;
  }

  bool operator == (const RequestAttrGetNobleLevel & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(level_ == rhs.level_))
      return false;
    return true;
  }
  bool operator != (const RequestAttrGetNobleLevel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestAttrGetNobleLevel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestAttrGetNobleLevel &a, RequestAttrGetNobleLevel &b);


class RequestAttrGetSpiritFacadeType {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  RequestAttrGetSpiritFacadeType() : actor_(0), type_(0) {
  }

  virtual ~RequestAttrGetSpiritFacadeType() throw() {}

  int64_t actor_;
  int32_t type_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_type_(const int32_t val) {
    type_ = val;
  }

  bool operator == (const RequestAttrGetSpiritFacadeType & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(type_ == rhs.type_))
      return false;
    return true;
  }
  bool operator != (const RequestAttrGetSpiritFacadeType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestAttrGetSpiritFacadeType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestAttrGetSpiritFacadeType &a, RequestAttrGetSpiritFacadeType &b);

}}} // namespace

#endif
