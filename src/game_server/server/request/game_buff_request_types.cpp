/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "game_buff_request_types.h"

#include <algorithm>

namespace game { namespace server { namespace request {

const char* RequestBuffStart::ascii_fingerprint = "8F8E347B5834E39A5119A0202F7C5398";
const uint8_t RequestBuffStart::binary_fingerprint[16] = {0x8F,0x8E,0x34,0x7B,0x58,0x34,0xE3,0x9A,0x51,0x19,0xA0,0x20,0x2F,0x7C,0x53,0x98};

uint32_t RequestBuffStart::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_src_entity_type_ = false;
  bool isset_src_entity_id_ = false;
  bool isset_dest_entity_type_ = false;
  bool isset_dest_entity_id_ = false;
  bool isset_buff_id_ = false;
  bool isset_succeed_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->src_entity_type_ = ( ::entity::EntityType::type)ecast0;
          isset_src_entity_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->src_entity_id_);
          isset_src_entity_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->dest_entity_type_ = ( ::entity::EntityType::type)ecast1;
          isset_dest_entity_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dest_entity_id_);
          isset_dest_entity_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->buff_id_);
          isset_buff_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->succeed_);
          isset_succeed_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_src_entity_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_src_entity_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dest_entity_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dest_entity_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_buff_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_succeed_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestBuffStart::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestBuffStart");

  xfer += oprot->writeFieldBegin("src_entity_type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->src_entity_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("src_entity_id_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->src_entity_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dest_entity_type_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->dest_entity_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dest_entity_id_", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->dest_entity_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buff_id_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->buff_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("succeed_", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->succeed_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestBuffStart &a, RequestBuffStart &b) {
  using ::std::swap;
  swap(a.src_entity_type_, b.src_entity_type_);
  swap(a.src_entity_id_, b.src_entity_id_);
  swap(a.dest_entity_type_, b.dest_entity_type_);
  swap(a.dest_entity_id_, b.dest_entity_id_);
  swap(a.buff_id_, b.buff_id_);
  swap(a.succeed_, b.succeed_);
}

const char* RequestBuffEnd::ascii_fingerprint = "729E45C97A0E730BDEEBC207E4F729D3";
const uint8_t RequestBuffEnd::binary_fingerprint[16] = {0x72,0x9E,0x45,0xC9,0x7A,0x0E,0x73,0x0B,0xDE,0xEB,0xC2,0x07,0xE4,0xF7,0x29,0xD3};

uint32_t RequestBuffEnd::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dest_entity_type_ = false;
  bool isset_dest_entity_id_ = false;
  bool isset_buff_id_ = false;
  bool isset_succeed_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->dest_entity_type_ = ( ::entity::EntityType::type)ecast2;
          isset_dest_entity_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dest_entity_id_);
          isset_dest_entity_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->buff_id_);
          isset_buff_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->succeed_);
          isset_succeed_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dest_entity_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dest_entity_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_buff_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_succeed_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestBuffEnd::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestBuffEnd");

  xfer += oprot->writeFieldBegin("dest_entity_type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->dest_entity_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dest_entity_id_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->dest_entity_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buff_id_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->buff_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("succeed_", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->succeed_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestBuffEnd &a, RequestBuffEnd &b) {
  using ::std::swap;
  swap(a.dest_entity_type_, b.dest_entity_type_);
  swap(a.dest_entity_id_, b.dest_entity_id_);
  swap(a.buff_id_, b.buff_id_);
  swap(a.succeed_, b.succeed_);
}

const char* RequestBuffClear::ascii_fingerprint = "729E45C97A0E730BDEEBC207E4F729D3";
const uint8_t RequestBuffClear::binary_fingerprint[16] = {0x72,0x9E,0x45,0xC9,0x7A,0x0E,0x73,0x0B,0xDE,0xEB,0xC2,0x07,0xE4,0xF7,0x29,0xD3};

uint32_t RequestBuffClear::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_id_ = false;
  bool isset_buff_id_ = false;
  bool isset_succeed_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->type_ = ( ::entity::EntityType::type)ecast3;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->buff_id_);
          isset_buff_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->succeed_);
          isset_succeed_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_buff_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_succeed_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestBuffClear::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestBuffClear");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buff_id_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->buff_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("succeed_", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->succeed_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestBuffClear &a, RequestBuffClear &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.id_, b.id_);
  swap(a.buff_id_, b.buff_id_);
  swap(a.succeed_, b.succeed_);
}

const char* RequestBuffClearGroup::ascii_fingerprint = "729E45C97A0E730BDEEBC207E4F729D3";
const uint8_t RequestBuffClearGroup::binary_fingerprint[16] = {0x72,0x9E,0x45,0xC9,0x7A,0x0E,0x73,0x0B,0xDE,0xEB,0xC2,0x07,0xE4,0xF7,0x29,0xD3};

uint32_t RequestBuffClearGroup::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_id_ = false;
  bool isset_clear_group_ = false;
  bool isset_succeed_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast4;
          xfer += iprot->readI32(ecast4);
          this->type_ = ( ::entity::EntityType::type)ecast4;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->clear_group_);
          isset_clear_group_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->succeed_);
          isset_succeed_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_clear_group_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_succeed_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestBuffClearGroup::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestBuffClearGroup");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clear_group_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->clear_group_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("succeed_", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->succeed_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestBuffClearGroup &a, RequestBuffClearGroup &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.id_, b.id_);
  swap(a.clear_group_, b.clear_group_);
  swap(a.succeed_, b.succeed_);
}

const char* RequestBuffSetForbidGroup::ascii_fingerprint = "729E45C97A0E730BDEEBC207E4F729D3";
const uint8_t RequestBuffSetForbidGroup::binary_fingerprint[16] = {0x72,0x9E,0x45,0xC9,0x7A,0x0E,0x73,0x0B,0xDE,0xEB,0xC2,0x07,0xE4,0xF7,0x29,0xD3};

uint32_t RequestBuffSetForbidGroup::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_id_ = false;
  bool isset_clear_group_ = false;
  bool isset_succeed_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast5;
          xfer += iprot->readI32(ecast5);
          this->type_ = ( ::entity::EntityType::type)ecast5;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->clear_group_);
          isset_clear_group_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->succeed_);
          isset_succeed_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_clear_group_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_succeed_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestBuffSetForbidGroup::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestBuffSetForbidGroup");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clear_group_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->clear_group_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("succeed_", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->succeed_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestBuffSetForbidGroup &a, RequestBuffSetForbidGroup &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.id_, b.id_);
  swap(a.clear_group_, b.clear_group_);
  swap(a.succeed_, b.succeed_);
}

const char* RequestBuffResetForbidGroup::ascii_fingerprint = "729E45C97A0E730BDEEBC207E4F729D3";
const uint8_t RequestBuffResetForbidGroup::binary_fingerprint[16] = {0x72,0x9E,0x45,0xC9,0x7A,0x0E,0x73,0x0B,0xDE,0xEB,0xC2,0x07,0xE4,0xF7,0x29,0xD3};

uint32_t RequestBuffResetForbidGroup::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_id_ = false;
  bool isset_clear_group_ = false;
  bool isset_succeed_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast6;
          xfer += iprot->readI32(ecast6);
          this->type_ = ( ::entity::EntityType::type)ecast6;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->clear_group_);
          isset_clear_group_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->succeed_);
          isset_succeed_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_clear_group_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_succeed_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestBuffResetForbidGroup::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestBuffResetForbidGroup");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clear_group_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->clear_group_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("succeed_", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->succeed_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestBuffResetForbidGroup &a, RequestBuffResetForbidGroup &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.id_, b.id_);
  swap(a.clear_group_, b.clear_group_);
  swap(a.succeed_, b.succeed_);
}

const char* RequestBuffGetExist::ascii_fingerprint = "729E45C97A0E730BDEEBC207E4F729D3";
const uint8_t RequestBuffGetExist::binary_fingerprint[16] = {0x72,0x9E,0x45,0xC9,0x7A,0x0E,0x73,0x0B,0xDE,0xEB,0xC2,0x07,0xE4,0xF7,0x29,0xD3};

uint32_t RequestBuffGetExist::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_id_ = false;
  bool isset_buff_id_ = false;
  bool isset_exist_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast7;
          xfer += iprot->readI32(ecast7);
          this->type_ = ( ::entity::EntityType::type)ecast7;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->buff_id_);
          isset_buff_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->exist_);
          isset_exist_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_buff_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_exist_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestBuffGetExist::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestBuffGetExist");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buff_id_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->buff_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("exist_", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->exist_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestBuffGetExist &a, RequestBuffGetExist &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.id_, b.id_);
  swap(a.buff_id_, b.buff_id_);
  swap(a.exist_, b.exist_);
}

}}} // namespace
