/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef storage_mail_affix_TYPES_H
#define storage_mail_affix_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "mail_types.h"


namespace database { namespace protocol {

struct MailAffixField {
  enum type {
    ITEM1 = 0,
    ITEM1_NUM = 1,
    ITEM2 = 2,
    ITEM2_NUM = 3,
    ITEM3 = 4,
    ITEM3_NUM = 5,
    ITEM4 = 6,
    ITEM4_NUM = 7,
    ITEM5 = 8,
    ITEM5_NUM = 9,
    GOLD = 10,
    FREEDOM_DOLLARS = 11,
    MAX = 12
  };
};

extern const std::map<int, const char*> _MailAffixField_VALUES_TO_NAMES;


class StoragePickAffixRequest {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  StoragePickAffixRequest() : id_(0), mail_id_(0) {
  }

  virtual ~StoragePickAffixRequest() throw() {}

  int64_t id_;
  int32_t mail_id_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_mail_id_(const int32_t val) {
    mail_id_ = val;
  }

  bool operator == (const StoragePickAffixRequest & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(mail_id_ == rhs.mail_id_))
      return false;
    return true;
  }
  bool operator != (const StoragePickAffixRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StoragePickAffixRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StoragePickAffixRequest &a, StoragePickAffixRequest &b);


class StoragePickAffixResponse {
 public:

  static const char* ascii_fingerprint; // = "5AF3AACF638A0A4053C55537C8A2B8BA";
  static const uint8_t binary_fingerprint[16]; // = {0x5A,0xF3,0xAA,0xCF,0x63,0x8A,0x0A,0x40,0x53,0xC5,0x55,0x37,0xC8,0xA2,0xB8,0xBA};

  StoragePickAffixResponse() : mail_id_(0), id_(0) {
  }

  virtual ~StoragePickAffixResponse() throw() {}

   ::entity::MailAffix affix_;
  int32_t mail_id_;
  int64_t id_;

  void __set_affix_(const  ::entity::MailAffix& val) {
    affix_ = val;
  }

  void __set_mail_id_(const int32_t val) {
    mail_id_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  bool operator == (const StoragePickAffixResponse & rhs) const
  {
    if (!(affix_ == rhs.affix_))
      return false;
    if (!(mail_id_ == rhs.mail_id_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const StoragePickAffixResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StoragePickAffixResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StoragePickAffixResponse &a, StoragePickAffixResponse &b);

}} // namespace

#endif
