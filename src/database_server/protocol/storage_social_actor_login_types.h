/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef storage_social_actor_login_TYPES_H
#define storage_social_actor_login_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace database { namespace protocol {

struct SocialActorField {
  enum type {
    SIGNATURE = 0,
    FRIENDS = 1,
    BLACKLIST = 2,
    ENEMIES = 3,
    HOMELAND_UPGRADE_START_TIME = 4,
    HOMELAND_UPGRADE_FINISH_TIME = 5,
    HOMELAND_TEMPLE_LEVEL = 6,
    HOMELAND_TEMPLE_HARVEST_TIMES = 7,
    HOMELAND_TEMPLE_FORCE_HARVEST_TIMES = 8,
    HOMELAND_TEMPLE_NEXT_HARVEST_TIME = 9,
    HOMELAND_GOLDMINE_LEVEL = 10,
    HOMELAND_GOLDMINE_ROBBED_TIMES = 11,
    HOMELAND_GOLDMINE_LOSS_RATE = 12,
    HOMELAND_GOLDMINE_NEXT_HARVEST_TIME = 13,
    HOMELAND_GOLDMINE_ROB_TIMES = 14,
    HOMELAND_GOLDMINE_NEXT_ROB_TIME = 15,
    HOMELAND_POOL_LEVEL = 16,
    HOMELAND_POOL_LAST_HARVEST_TIME = 17,
    HOMELAND_CHURCH_FREE_PRAY_TIMES = 18,
    HOMELAND_CHURCH_PAID_PRAY_TIMES = 19,
    HOMELAND_CHURCH_FREE_REFRESH_TIMES = 20,
    HOMELAND_CHURCH_CHEST_TYPE = 21,
    HOMELAND_TREE_LEVEL = 22,
    HOMELAND_TREE_HARVEST_TIMES = 23,
    HOMELAND_TREE_STAGE = 24,
    HOMELAND_TREE_WATERED_TIMES = 25,
    HOMELAND_TREE_NEXT_WATER_TIME = 26,
    HOMELAND_TREE_GROWING_FINISH_TIME = 27,
    HOMELAND_TREE_ASSIST_WATER_TIMES = 28,
    HOMELAND_TREE_WATERED_ACTORS = 29,
    HOMELAND_TREE_STOLEN_ACTORS = 30,
    HOMELAND_TOWER1_LEVEL = 31,
    HOMELAND_TOWER2_LEVEL = 32,
    HOMELAND_STRONGHOLD_LEVEL = 33,
    HOMELAND_STRONGHOLD_NEXT_CALL_SUPPORT_TIME = 34,
    HOMELAND_STRONGHOLD_SUPPORTED_SOULS = 35,
    HOMELAND_STRONGHOLD_SUPPORT_SOULS = 36,
    HOMELAND_STRONGHOLD_SUPPORT_TIMES = 37,
    HOMELAND_INVADERS = 38,
    HOMELAND_EVENTS = 39,
    LAST_SAVE_TIME = 40,
    SOUL_DATA = 41,
    MAX = 42
  };
};

extern const std::map<int, const char*> _SocialActorField_VALUES_TO_NAMES;

struct SocialActorLoginResult {
  enum type {
    SUCCESS = 0,
    ERROR_UNKNOWN = 1,
    MAX = 2
  };
};

extern const std::map<int, const char*> _SocialActorLoginResult_VALUES_TO_NAMES;


class StorageSocialActorField {
 public:

  static const char* ascii_fingerprint; // = "DE3DC151581E148A58F06761A9E4F3BF";
  static const uint8_t binary_fingerprint[16]; // = {0xDE,0x3D,0xC1,0x51,0x58,0x1E,0x14,0x8A,0x58,0xF0,0x67,0x61,0xA9,0xE4,0xF3,0xBF};

  StorageSocialActorField() : signature_(), friends_(), blacklist_(), enemies_(), homeland_upgrade_start_time_(0), homeland_upgrade_finish_time_(0), homeland_temple_level_(0), homeland_temple_harvest_times_(0), homeland_temple_force_harvest_times_(0), homeland_temple_next_harvest_time_(0), homeland_goldmine_level_(0), homeland_goldmine_robbed_times_(0), homeland_goldmine_loss_rate_(0), homeland_goldmine_next_harvest_time_(0), homeland_goldmine_rob_times_(0), homeland_goldmine_next_rob_time_(0), homeland_pool_level_(0), homeland_pool_last_harvest_time_(0), homeland_church_free_pray_times_(0), homeland_church_paid_pray_times_(0), homeland_church_free_refresh_times_(0), homeland_church_chest_type_(0), homeland_tree_level_(0), homeland_tree_harvest_times_(0), homeland_tree_stage_(0), homeland_tree_watered_times_(0), homeland_tree_next_water_time_(0), homeland_tree_growing_finish_time_(0), homeland_tree_assist_water_times_(0), homeland_tree_watered_actors_(), homeland_tree_stolen_actors_(), homeland_tower1_level_(0), homeland_tower2_level_(0), homeland_stronghold_level_(0), homeland_stronghold_next_call_support_time_(0), homeland_stronghold_supported_souls_(), homeland_stronghold_support_souls_(), homeland_stronghold_support_times_(0), homeland_invaders_(), homeland_events_(), last_save_time_(0), soul_data_() {
  }

  virtual ~StorageSocialActorField() throw() {}

  std::string signature_;
  std::string friends_;
  std::string blacklist_;
  std::string enemies_;
  int64_t homeland_upgrade_start_time_;
  int64_t homeland_upgrade_finish_time_;
  int32_t homeland_temple_level_;
  int32_t homeland_temple_harvest_times_;
  int32_t homeland_temple_force_harvest_times_;
  int64_t homeland_temple_next_harvest_time_;
  int32_t homeland_goldmine_level_;
  int32_t homeland_goldmine_robbed_times_;
  int32_t homeland_goldmine_loss_rate_;
  int64_t homeland_goldmine_next_harvest_time_;
  int32_t homeland_goldmine_rob_times_;
  int64_t homeland_goldmine_next_rob_time_;
  int32_t homeland_pool_level_;
  int64_t homeland_pool_last_harvest_time_;
  int32_t homeland_church_free_pray_times_;
  int32_t homeland_church_paid_pray_times_;
  int32_t homeland_church_free_refresh_times_;
  int32_t homeland_church_chest_type_;
  int32_t homeland_tree_level_;
  int32_t homeland_tree_harvest_times_;
  int32_t homeland_tree_stage_;
  int32_t homeland_tree_watered_times_;
  int64_t homeland_tree_next_water_time_;
  int64_t homeland_tree_growing_finish_time_;
  int32_t homeland_tree_assist_water_times_;
  std::string homeland_tree_watered_actors_;
  std::string homeland_tree_stolen_actors_;
  int32_t homeland_tower1_level_;
  int32_t homeland_tower2_level_;
  int32_t homeland_stronghold_level_;
  int64_t homeland_stronghold_next_call_support_time_;
  std::string homeland_stronghold_supported_souls_;
  std::string homeland_stronghold_support_souls_;
  int32_t homeland_stronghold_support_times_;
  std::string homeland_invaders_;
  std::string homeland_events_;
  int64_t last_save_time_;
  std::string soul_data_;

  void __set_signature_(const std::string& val) {
    signature_ = val;
  }

  void __set_friends_(const std::string& val) {
    friends_ = val;
  }

  void __set_blacklist_(const std::string& val) {
    blacklist_ = val;
  }

  void __set_enemies_(const std::string& val) {
    enemies_ = val;
  }

  void __set_homeland_upgrade_start_time_(const int64_t val) {
    homeland_upgrade_start_time_ = val;
  }

  void __set_homeland_upgrade_finish_time_(const int64_t val) {
    homeland_upgrade_finish_time_ = val;
  }

  void __set_homeland_temple_level_(const int32_t val) {
    homeland_temple_level_ = val;
  }

  void __set_homeland_temple_harvest_times_(const int32_t val) {
    homeland_temple_harvest_times_ = val;
  }

  void __set_homeland_temple_force_harvest_times_(const int32_t val) {
    homeland_temple_force_harvest_times_ = val;
  }

  void __set_homeland_temple_next_harvest_time_(const int64_t val) {
    homeland_temple_next_harvest_time_ = val;
  }

  void __set_homeland_goldmine_level_(const int32_t val) {
    homeland_goldmine_level_ = val;
  }

  void __set_homeland_goldmine_robbed_times_(const int32_t val) {
    homeland_goldmine_robbed_times_ = val;
  }

  void __set_homeland_goldmine_loss_rate_(const int32_t val) {
    homeland_goldmine_loss_rate_ = val;
  }

  void __set_homeland_goldmine_next_harvest_time_(const int64_t val) {
    homeland_goldmine_next_harvest_time_ = val;
  }

  void __set_homeland_goldmine_rob_times_(const int32_t val) {
    homeland_goldmine_rob_times_ = val;
  }

  void __set_homeland_goldmine_next_rob_time_(const int64_t val) {
    homeland_goldmine_next_rob_time_ = val;
  }

  void __set_homeland_pool_level_(const int32_t val) {
    homeland_pool_level_ = val;
  }

  void __set_homeland_pool_last_harvest_time_(const int64_t val) {
    homeland_pool_last_harvest_time_ = val;
  }

  void __set_homeland_church_free_pray_times_(const int32_t val) {
    homeland_church_free_pray_times_ = val;
  }

  void __set_homeland_church_paid_pray_times_(const int32_t val) {
    homeland_church_paid_pray_times_ = val;
  }

  void __set_homeland_church_free_refresh_times_(const int32_t val) {
    homeland_church_free_refresh_times_ = val;
  }

  void __set_homeland_church_chest_type_(const int32_t val) {
    homeland_church_chest_type_ = val;
  }

  void __set_homeland_tree_level_(const int32_t val) {
    homeland_tree_level_ = val;
  }

  void __set_homeland_tree_harvest_times_(const int32_t val) {
    homeland_tree_harvest_times_ = val;
  }

  void __set_homeland_tree_stage_(const int32_t val) {
    homeland_tree_stage_ = val;
  }

  void __set_homeland_tree_watered_times_(const int32_t val) {
    homeland_tree_watered_times_ = val;
  }

  void __set_homeland_tree_next_water_time_(const int64_t val) {
    homeland_tree_next_water_time_ = val;
  }

  void __set_homeland_tree_growing_finish_time_(const int64_t val) {
    homeland_tree_growing_finish_time_ = val;
  }

  void __set_homeland_tree_assist_water_times_(const int32_t val) {
    homeland_tree_assist_water_times_ = val;
  }

  void __set_homeland_tree_watered_actors_(const std::string& val) {
    homeland_tree_watered_actors_ = val;
  }

  void __set_homeland_tree_stolen_actors_(const std::string& val) {
    homeland_tree_stolen_actors_ = val;
  }

  void __set_homeland_tower1_level_(const int32_t val) {
    homeland_tower1_level_ = val;
  }

  void __set_homeland_tower2_level_(const int32_t val) {
    homeland_tower2_level_ = val;
  }

  void __set_homeland_stronghold_level_(const int32_t val) {
    homeland_stronghold_level_ = val;
  }

  void __set_homeland_stronghold_next_call_support_time_(const int64_t val) {
    homeland_stronghold_next_call_support_time_ = val;
  }

  void __set_homeland_stronghold_supported_souls_(const std::string& val) {
    homeland_stronghold_supported_souls_ = val;
  }

  void __set_homeland_stronghold_support_souls_(const std::string& val) {
    homeland_stronghold_support_souls_ = val;
  }

  void __set_homeland_stronghold_support_times_(const int32_t val) {
    homeland_stronghold_support_times_ = val;
  }

  void __set_homeland_invaders_(const std::string& val) {
    homeland_invaders_ = val;
  }

  void __set_homeland_events_(const std::string& val) {
    homeland_events_ = val;
  }

  void __set_last_save_time_(const int64_t val) {
    last_save_time_ = val;
  }

  void __set_soul_data_(const std::string& val) {
    soul_data_ = val;
  }

  bool operator == (const StorageSocialActorField & rhs) const
  {
    if (!(signature_ == rhs.signature_))
      return false;
    if (!(friends_ == rhs.friends_))
      return false;
    if (!(blacklist_ == rhs.blacklist_))
      return false;
    if (!(enemies_ == rhs.enemies_))
      return false;
    if (!(homeland_upgrade_start_time_ == rhs.homeland_upgrade_start_time_))
      return false;
    if (!(homeland_upgrade_finish_time_ == rhs.homeland_upgrade_finish_time_))
      return false;
    if (!(homeland_temple_level_ == rhs.homeland_temple_level_))
      return false;
    if (!(homeland_temple_harvest_times_ == rhs.homeland_temple_harvest_times_))
      return false;
    if (!(homeland_temple_force_harvest_times_ == rhs.homeland_temple_force_harvest_times_))
      return false;
    if (!(homeland_temple_next_harvest_time_ == rhs.homeland_temple_next_harvest_time_))
      return false;
    if (!(homeland_goldmine_level_ == rhs.homeland_goldmine_level_))
      return false;
    if (!(homeland_goldmine_robbed_times_ == rhs.homeland_goldmine_robbed_times_))
      return false;
    if (!(homeland_goldmine_loss_rate_ == rhs.homeland_goldmine_loss_rate_))
      return false;
    if (!(homeland_goldmine_next_harvest_time_ == rhs.homeland_goldmine_next_harvest_time_))
      return false;
    if (!(homeland_goldmine_rob_times_ == rhs.homeland_goldmine_rob_times_))
      return false;
    if (!(homeland_goldmine_next_rob_time_ == rhs.homeland_goldmine_next_rob_time_))
      return false;
    if (!(homeland_pool_level_ == rhs.homeland_pool_level_))
      return false;
    if (!(homeland_pool_last_harvest_time_ == rhs.homeland_pool_last_harvest_time_))
      return false;
    if (!(homeland_church_free_pray_times_ == rhs.homeland_church_free_pray_times_))
      return false;
    if (!(homeland_church_paid_pray_times_ == rhs.homeland_church_paid_pray_times_))
      return false;
    if (!(homeland_church_free_refresh_times_ == rhs.homeland_church_free_refresh_times_))
      return false;
    if (!(homeland_church_chest_type_ == rhs.homeland_church_chest_type_))
      return false;
    if (!(homeland_tree_level_ == rhs.homeland_tree_level_))
      return false;
    if (!(homeland_tree_harvest_times_ == rhs.homeland_tree_harvest_times_))
      return false;
    if (!(homeland_tree_stage_ == rhs.homeland_tree_stage_))
      return false;
    if (!(homeland_tree_watered_times_ == rhs.homeland_tree_watered_times_))
      return false;
    if (!(homeland_tree_next_water_time_ == rhs.homeland_tree_next_water_time_))
      return false;
    if (!(homeland_tree_growing_finish_time_ == rhs.homeland_tree_growing_finish_time_))
      return false;
    if (!(homeland_tree_assist_water_times_ == rhs.homeland_tree_assist_water_times_))
      return false;
    if (!(homeland_tree_watered_actors_ == rhs.homeland_tree_watered_actors_))
      return false;
    if (!(homeland_tree_stolen_actors_ == rhs.homeland_tree_stolen_actors_))
      return false;
    if (!(homeland_tower1_level_ == rhs.homeland_tower1_level_))
      return false;
    if (!(homeland_tower2_level_ == rhs.homeland_tower2_level_))
      return false;
    if (!(homeland_stronghold_level_ == rhs.homeland_stronghold_level_))
      return false;
    if (!(homeland_stronghold_next_call_support_time_ == rhs.homeland_stronghold_next_call_support_time_))
      return false;
    if (!(homeland_stronghold_supported_souls_ == rhs.homeland_stronghold_supported_souls_))
      return false;
    if (!(homeland_stronghold_support_souls_ == rhs.homeland_stronghold_support_souls_))
      return false;
    if (!(homeland_stronghold_support_times_ == rhs.homeland_stronghold_support_times_))
      return false;
    if (!(homeland_invaders_ == rhs.homeland_invaders_))
      return false;
    if (!(homeland_events_ == rhs.homeland_events_))
      return false;
    if (!(last_save_time_ == rhs.last_save_time_))
      return false;
    if (!(soul_data_ == rhs.soul_data_))
      return false;
    return true;
  }
  bool operator != (const StorageSocialActorField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageSocialActorField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageSocialActorField &a, StorageSocialActorField &b);

typedef struct _StorageSocialActorLoginRequest__isset {
  _StorageSocialActorLoginRequest__isset() : offline_load_(false), offline_task_id_(false) {}
  bool offline_load_;
  bool offline_task_id_;
} _StorageSocialActorLoginRequest__isset;

class StorageSocialActorLoginRequest {
 public:

  static const char* ascii_fingerprint; // = "F5E236E76F6B26AEDFAED3A0E6551651";
  static const uint8_t binary_fingerprint[16]; // = {0xF5,0xE2,0x36,0xE7,0x6F,0x6B,0x26,0xAE,0xDF,0xAE,0xD3,0xA0,0xE6,0x55,0x16,0x51};

  StorageSocialActorLoginRequest() : actor_id_(0), offline_load_(0), offline_task_id_(0) {
  }

  virtual ~StorageSocialActorLoginRequest() throw() {}

  int64_t actor_id_;
  bool offline_load_;
  int64_t offline_task_id_;

  _StorageSocialActorLoginRequest__isset __isset;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_offline_load_(const bool val) {
    offline_load_ = val;
    __isset.offline_load_ = true;
  }

  void __set_offline_task_id_(const int64_t val) {
    offline_task_id_ = val;
    __isset.offline_task_id_ = true;
  }

  bool operator == (const StorageSocialActorLoginRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (__isset.offline_load_ != rhs.__isset.offline_load_)
      return false;
    else if (__isset.offline_load_ && !(offline_load_ == rhs.offline_load_))
      return false;
    if (__isset.offline_task_id_ != rhs.__isset.offline_task_id_)
      return false;
    else if (__isset.offline_task_id_ && !(offline_task_id_ == rhs.offline_task_id_))
      return false;
    return true;
  }
  bool operator != (const StorageSocialActorLoginRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageSocialActorLoginRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageSocialActorLoginRequest &a, StorageSocialActorLoginRequest &b);


class StorageSocialActorLoginResponse {
 public:

  static const char* ascii_fingerprint; // = "F25F0C3E146444184C16B572EC8989A0";
  static const uint8_t binary_fingerprint[16]; // = {0xF2,0x5F,0x0C,0x3E,0x14,0x64,0x44,0x18,0x4C,0x16,0xB5,0x72,0xEC,0x89,0x89,0xA0};

  StorageSocialActorLoginResponse() : result_((SocialActorLoginResult::type)0) {
  }

  virtual ~StorageSocialActorLoginResponse() throw() {}

  SocialActorLoginResult::type result_;
  StorageSocialActorField field_;

  void __set_result_(const SocialActorLoginResult::type val) {
    result_ = val;
  }

  void __set_field_(const StorageSocialActorField& val) {
    field_ = val;
  }

  bool operator == (const StorageSocialActorLoginResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (!(field_ == rhs.field_))
      return false;
    return true;
  }
  bool operator != (const StorageSocialActorLoginResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageSocialActorLoginResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageSocialActorLoginResponse &a, StorageSocialActorLoginResponse &b);

}} // namespace

#endif
