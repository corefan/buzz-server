/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "storage_task_actor_login_types.h"

#include <algorithm>

namespace database { namespace protocol {

int _kTaskActorFieldValues[] = {
  TaskActorField::CIRCLE_FLAG,
  TaskActorField::ROUND_NUM,
  TaskActorField::TOTAL_ROUND,
  TaskActorField::CIRCLE_NUM,
  TaskActorField::LV_STAGE,
  TaskActorField::CONDITION_ID,
  TaskActorField::TRIP_NUM_,
  TaskActorField::EXPLOIT_AWARD,
  TaskActorField::DAILY_EXPLIOT,
  TaskActorField::TRANSPORT_FINISHED_COUNT,
  TaskActorField::TRANSPORT_FREE_REFRESHED_COUNT,
  TaskActorField::TRANSPORT_ROBED_COUNT,
  TaskActorField::TRANSPORT_CURRENT_TRANSPORT,
  TaskActorField::TRANSPORT_STATUS,
  TaskActorField::MAX
};
const char* _kTaskActorFieldNames[] = {
  "CIRCLE_FLAG",
  "ROUND_NUM",
  "TOTAL_ROUND",
  "CIRCLE_NUM",
  "LV_STAGE",
  "CONDITION_ID",
  "TRIP_NUM_",
  "EXPLOIT_AWARD",
  "DAILY_EXPLIOT",
  "TRANSPORT_FINISHED_COUNT",
  "TRANSPORT_FREE_REFRESHED_COUNT",
  "TRANSPORT_ROBED_COUNT",
  "TRANSPORT_CURRENT_TRANSPORT",
  "TRANSPORT_STATUS",
  "MAX"
};
const std::map<int, const char*> _TaskActorField_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(15, _kTaskActorFieldValues, _kTaskActorFieldNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTaskActorResultValues[] = {
  TaskActorResult::SUCCESS,
  TaskActorResult::ERROR_UNKNOWN
};
const char* _kTaskActorResultNames[] = {
  "SUCCESS",
  "ERROR_UNKNOWN"
};
const std::map<int, const char*> _TaskActorResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTaskActorResultValues, _kTaskActorResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* StorageTaskActorField::ascii_fingerprint = "87BC2CAAECD1768CDB0CD1103D26D47A";
const uint8_t StorageTaskActorField::binary_fingerprint[16] = {0x87,0xBC,0x2C,0xAA,0xEC,0xD1,0x76,0x8C,0xDB,0x0C,0xD1,0x10,0x3D,0x26,0xD4,0x7A};

uint32_t StorageTaskActorField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_flag_ = false;
  bool isset_round_num_ = false;
  bool isset_total_num_ = false;
  bool isset_circle_num_ = false;
  bool isset_lv_stage_ = false;
  bool isset_condition_id_ = false;
  bool isset_trip_num_ = false;
  bool isset_exploit_award_ = false;
  bool isset_daily_exploit_ = false;
  bool isset_transport_finished_count_ = false;
  bool isset_transport_free_refreshed_count_ = false;
  bool isset_transport_robed_count_ = false;
  bool isset_transport_current_transport_ = false;
  bool isset_transport_status_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->flag_);
          isset_flag_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->round_num_);
          isset_round_num_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->total_num_);
          isset_total_num_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->circle_num_);
          isset_circle_num_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lv_stage_);
          isset_lv_stage_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->condition_id_);
          isset_condition_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->trip_num_);
          isset_trip_num_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->exploit_award_);
          isset_exploit_award_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->daily_exploit_);
          isset_daily_exploit_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->transport_finished_count_);
          isset_transport_finished_count_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->transport_free_refreshed_count_);
          isset_transport_free_refreshed_count_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->transport_robed_count_);
          isset_transport_robed_count_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->transport_current_transport_);
          isset_transport_current_transport_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->transport_status_);
          isset_transport_status_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_flag_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_round_num_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_total_num_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_circle_num_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lv_stage_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_condition_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_trip_num_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_exploit_award_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_daily_exploit_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_transport_finished_count_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_transport_free_refreshed_count_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_transport_robed_count_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_transport_current_transport_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_transport_status_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageTaskActorField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageTaskActorField");

  xfer += oprot->writeFieldBegin("flag_", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->flag_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("round_num_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->round_num_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("total_num_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->total_num_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("circle_num_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->circle_num_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lv_stage_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->lv_stage_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("condition_id_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->condition_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("trip_num_", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->trip_num_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("exploit_award_", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->exploit_award_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("daily_exploit_", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->daily_exploit_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("transport_finished_count_", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->transport_finished_count_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("transport_free_refreshed_count_", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->transport_free_refreshed_count_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("transport_robed_count_", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->transport_robed_count_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("transport_current_transport_", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->transport_current_transport_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("transport_status_", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->transport_status_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageTaskActorField &a, StorageTaskActorField &b) {
  using ::std::swap;
  swap(a.flag_, b.flag_);
  swap(a.round_num_, b.round_num_);
  swap(a.total_num_, b.total_num_);
  swap(a.circle_num_, b.circle_num_);
  swap(a.lv_stage_, b.lv_stage_);
  swap(a.condition_id_, b.condition_id_);
  swap(a.trip_num_, b.trip_num_);
  swap(a.exploit_award_, b.exploit_award_);
  swap(a.daily_exploit_, b.daily_exploit_);
  swap(a.transport_finished_count_, b.transport_finished_count_);
  swap(a.transport_free_refreshed_count_, b.transport_free_refreshed_count_);
  swap(a.transport_robed_count_, b.transport_robed_count_);
  swap(a.transport_current_transport_, b.transport_current_transport_);
  swap(a.transport_status_, b.transport_status_);
}

const char* StorageTaskActorLoginRequest::ascii_fingerprint = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
const uint8_t StorageTaskActorLoginRequest::binary_fingerprint[16] = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

uint32_t StorageTaskActorLoginRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageTaskActorLoginRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageTaskActorLoginRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageTaskActorLoginRequest &a, StorageTaskActorLoginRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
}

const char* StorageTaskActorLoginResponse::ascii_fingerprint = "62D3B2E378A6A82D8E99C62C99061EFB";
const uint8_t StorageTaskActorLoginResponse::binary_fingerprint[16] = {0x62,0xD3,0xB2,0xE3,0x78,0xA6,0xA8,0x2D,0x8E,0x99,0xC6,0x2C,0x99,0x06,0x1E,0xFB};

uint32_t StorageTaskActorLoginResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;
  bool isset_data_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->result_ = (TaskActorResult::type)ecast0;
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data_.read(iprot);
          isset_data_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_data_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageTaskActorLoginResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageTaskActorLoginResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->data_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageTaskActorLoginResponse &a, StorageTaskActorLoginResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.data_, b.data_);
}

}} // namespace
