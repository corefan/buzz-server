/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef storage_check_session_TYPES_H
#define storage_check_session_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace database { namespace protocol {


class StorageCheckSessionRequest {
 public:

  static const char* ascii_fingerprint; // = "E34AC4C3488C79351AAFF16C52D10BC0";
  static const uint8_t binary_fingerprint[16]; // = {0xE3,0x4A,0xC4,0xC3,0x48,0x8C,0x79,0x35,0x1A,0xAF,0xF1,0x6C,0x52,0xD1,0x0B,0xC0};

  StorageCheckSessionRequest() : id_(0), session_(), session_status_(0), effective_time_(0), sequence_(0) {
  }

  virtual ~StorageCheckSessionRequest() throw() {}

  int64_t id_;
  std::string session_;
  int8_t session_status_;
  int64_t effective_time_;
  int64_t sequence_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_session_(const std::string& val) {
    session_ = val;
  }

  void __set_session_status_(const int8_t val) {
    session_status_ = val;
  }

  void __set_effective_time_(const int64_t val) {
    effective_time_ = val;
  }

  void __set_sequence_(const int64_t val) {
    sequence_ = val;
  }

  bool operator == (const StorageCheckSessionRequest & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(session_ == rhs.session_))
      return false;
    if (!(session_status_ == rhs.session_status_))
      return false;
    if (!(effective_time_ == rhs.effective_time_))
      return false;
    if (!(sequence_ == rhs.sequence_))
      return false;
    return true;
  }
  bool operator != (const StorageCheckSessionRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageCheckSessionRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageCheckSessionRequest &a, StorageCheckSessionRequest &b);


class StorageCheckSessionResponse {
 public:

  static const char* ascii_fingerprint; // = "403F0C4586060E367DA428DD09C59C9C";
  static const uint8_t binary_fingerprint[16]; // = {0x40,0x3F,0x0C,0x45,0x86,0x06,0x0E,0x36,0x7D,0xA4,0x28,0xDD,0x09,0xC5,0x9C,0x9C};

  StorageCheckSessionResponse() : pass_(0), online_(0) {
  }

  virtual ~StorageCheckSessionResponse() throw() {}

  bool pass_;
  bool online_;

  void __set_pass_(const bool val) {
    pass_ = val;
  }

  void __set_online_(const bool val) {
    online_ = val;
  }

  bool operator == (const StorageCheckSessionResponse & rhs) const
  {
    if (!(pass_ == rhs.pass_))
      return false;
    if (!(online_ == rhs.online_))
      return false;
    return true;
  }
  bool operator != (const StorageCheckSessionResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageCheckSessionResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageCheckSessionResponse &a, StorageCheckSessionResponse &b);

}} // namespace

#endif
