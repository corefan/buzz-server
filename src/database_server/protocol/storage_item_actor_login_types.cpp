/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "storage_item_actor_login_types.h"

#include <algorithm>

namespace database { namespace protocol {

int _kItemActorFieldValues[] = {
  ItemActorField::GEM_GATHERING_POINT,
  ItemActorField::SHORTCUT1,
  ItemActorField::SHORTCUT2,
  ItemActorField::SHORTCUT3,
  ItemActorField::SHORTCUT4,
  ItemActorField::GIFTS_PICK_NUM,
  ItemActorField::ITEM_BUY_NUM,
  ItemActorField::MAX
};
const char* _kItemActorFieldNames[] = {
  "GEM_GATHERING_POINT",
  "SHORTCUT1",
  "SHORTCUT2",
  "SHORTCUT3",
  "SHORTCUT4",
  "GIFTS_PICK_NUM",
  "ITEM_BUY_NUM",
  "MAX"
};
const std::map<int, const char*> _ItemActorField_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kItemActorFieldValues, _kItemActorFieldNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kItemActorLoginResultValues[] = {
  ItemActorLoginResult::SUCCESS,
  ItemActorLoginResult::ERROR_UNKNOWN,
  ItemActorLoginResult::MAX
};
const char* _kItemActorLoginResultNames[] = {
  "SUCCESS",
  "ERROR_UNKNOWN",
  "MAX"
};
const std::map<int, const char*> _ItemActorLoginResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kItemActorLoginResultValues, _kItemActorLoginResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* StorageItemActorField::ascii_fingerprint = "B0752C2DE8DE1854FD00C8AF1A2D5154";
const uint8_t StorageItemActorField::binary_fingerprint[16] = {0xB0,0x75,0x2C,0x2D,0xE8,0xDE,0x18,0x54,0xFD,0x00,0xC8,0xAF,0x1A,0x2D,0x51,0x54};

uint32_t StorageItemActorField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_gem_gathering_point_ = false;
  bool isset_shortcut1 = false;
  bool isset_shortcut2 = false;
  bool isset_shortcut3 = false;
  bool isset_shortcut4 = false;
  bool isset_gifts_pick_num_ = false;
  bool isset_item_buy_num_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gem_gathering_point_);
          isset_gem_gathering_point_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->shortcut1);
          isset_shortcut1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->shortcut2);
          isset_shortcut2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->shortcut3);
          isset_shortcut3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->shortcut4);
          isset_shortcut4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gifts_pick_num_);
          isset_gifts_pick_num_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->item_buy_num_);
          isset_item_buy_num_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_gem_gathering_point_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_shortcut1)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_shortcut2)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_shortcut3)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_shortcut4)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gifts_pick_num_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item_buy_num_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageItemActorField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageItemActorField");

  xfer += oprot->writeFieldBegin("gem_gathering_point_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->gem_gathering_point_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("shortcut1", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->shortcut1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("shortcut2", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->shortcut2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("shortcut3", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->shortcut3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("shortcut4", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->shortcut4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gifts_pick_num_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->gifts_pick_num_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item_buy_num_", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->item_buy_num_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageItemActorField &a, StorageItemActorField &b) {
  using ::std::swap;
  swap(a.gem_gathering_point_, b.gem_gathering_point_);
  swap(a.shortcut1, b.shortcut1);
  swap(a.shortcut2, b.shortcut2);
  swap(a.shortcut3, b.shortcut3);
  swap(a.shortcut4, b.shortcut4);
  swap(a.gifts_pick_num_, b.gifts_pick_num_);
  swap(a.item_buy_num_, b.item_buy_num_);
}

const char* StorageItemActorLoginRequest::ascii_fingerprint = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
const uint8_t StorageItemActorLoginRequest::binary_fingerprint[16] = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

uint32_t StorageItemActorLoginRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageItemActorLoginRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageItemActorLoginRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageItemActorLoginRequest &a, StorageItemActorLoginRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
}

const char* StorageItemActorLoginResponse::ascii_fingerprint = "8CAA7F6EECAEC83A01BFB16909334DBF";
const uint8_t StorageItemActorLoginResponse::binary_fingerprint[16] = {0x8C,0xAA,0x7F,0x6E,0xEC,0xAE,0xC8,0x3A,0x01,0xBF,0xB1,0x69,0x09,0x33,0x4D,0xBF};

uint32_t StorageItemActorLoginResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;
  bool isset_field_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->result_ = (ItemActorLoginResult::type)ecast0;
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->field_.read(iprot);
          isset_field_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_field_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageItemActorLoginResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageItemActorLoginResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->field_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageItemActorLoginResponse &a, StorageItemActorLoginResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.field_, b.field_);
}

}} // namespace
