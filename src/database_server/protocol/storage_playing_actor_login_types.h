/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef storage_playing_actor_login_TYPES_H
#define storage_playing_actor_login_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace database { namespace protocol {

struct PlayingActorField {
  enum type {
    RECORDS = 0,
    RESULTS = 1,
    AUTO_PLAYING = 2,
    AUTO_PLAYING_GROUP = 3,
    AUTO_FINISH_TIME = 4,
    MAZE_AP = 5,
    MAZE_LAST_AP_RECOVER_TIME = 6,
    MAZE_FLOOR = 7,
    MAZE_EXPLORED_AREA = 8,
    MAZE_RECENT_POSITION = 9,
    MAZE_GIFT_NUMBER = 10,
    MAX = 11
  };
};

extern const std::map<int, const char*> _PlayingActorField_VALUES_TO_NAMES;

struct PlayingActorLoginResult {
  enum type {
    SUCCESS = 0,
    ERROR_UNKNOWN = 1,
    MAX = 2
  };
};

extern const std::map<int, const char*> _PlayingActorLoginResult_VALUES_TO_NAMES;


class StoragePlayingActorField {
 public:

  static const char* ascii_fingerprint; // = "52782DDADB5CE6E29F6F00356B3DD6FD";
  static const uint8_t binary_fingerprint[16]; // = {0x52,0x78,0x2D,0xDA,0xDB,0x5C,0xE6,0xE2,0x9F,0x6F,0x00,0x35,0x6B,0x3D,0xD6,0xFD};

  StoragePlayingActorField() : records_(), results_(), auto_playing_(0), auto_playing_group_(0), auto_finish_time_(0), maze_ap_(0), maze_last_ap_recover_time_(0), maze_floor_(0), maze_explored_area_(), maze_recent_position_(), maze_gift_number_(0) {
  }

  virtual ~StoragePlayingActorField() throw() {}

  std::string records_;
  std::string results_;
  int32_t auto_playing_;
  int32_t auto_playing_group_;
  int64_t auto_finish_time_;
  int32_t maze_ap_;
  int64_t maze_last_ap_recover_time_;
  int32_t maze_floor_;
  std::string maze_explored_area_;
  std::string maze_recent_position_;
  int32_t maze_gift_number_;

  void __set_records_(const std::string& val) {
    records_ = val;
  }

  void __set_results_(const std::string& val) {
    results_ = val;
  }

  void __set_auto_playing_(const int32_t val) {
    auto_playing_ = val;
  }

  void __set_auto_playing_group_(const int32_t val) {
    auto_playing_group_ = val;
  }

  void __set_auto_finish_time_(const int64_t val) {
    auto_finish_time_ = val;
  }

  void __set_maze_ap_(const int32_t val) {
    maze_ap_ = val;
  }

  void __set_maze_last_ap_recover_time_(const int64_t val) {
    maze_last_ap_recover_time_ = val;
  }

  void __set_maze_floor_(const int32_t val) {
    maze_floor_ = val;
  }

  void __set_maze_explored_area_(const std::string& val) {
    maze_explored_area_ = val;
  }

  void __set_maze_recent_position_(const std::string& val) {
    maze_recent_position_ = val;
  }

  void __set_maze_gift_number_(const int32_t val) {
    maze_gift_number_ = val;
  }

  bool operator == (const StoragePlayingActorField & rhs) const
  {
    if (!(records_ == rhs.records_))
      return false;
    if (!(results_ == rhs.results_))
      return false;
    if (!(auto_playing_ == rhs.auto_playing_))
      return false;
    if (!(auto_playing_group_ == rhs.auto_playing_group_))
      return false;
    if (!(auto_finish_time_ == rhs.auto_finish_time_))
      return false;
    if (!(maze_ap_ == rhs.maze_ap_))
      return false;
    if (!(maze_last_ap_recover_time_ == rhs.maze_last_ap_recover_time_))
      return false;
    if (!(maze_floor_ == rhs.maze_floor_))
      return false;
    if (!(maze_explored_area_ == rhs.maze_explored_area_))
      return false;
    if (!(maze_recent_position_ == rhs.maze_recent_position_))
      return false;
    if (!(maze_gift_number_ == rhs.maze_gift_number_))
      return false;
    return true;
  }
  bool operator != (const StoragePlayingActorField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StoragePlayingActorField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StoragePlayingActorField &a, StoragePlayingActorField &b);


class StoragePlayingActorLoginRequest {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  StoragePlayingActorLoginRequest() : actor_id_(0) {
  }

  virtual ~StoragePlayingActorLoginRequest() throw() {}

  int64_t actor_id_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  bool operator == (const StoragePlayingActorLoginRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    return true;
  }
  bool operator != (const StoragePlayingActorLoginRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StoragePlayingActorLoginRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StoragePlayingActorLoginRequest &a, StoragePlayingActorLoginRequest &b);


class StoragePlayingActorLoginResponse {
 public:

  static const char* ascii_fingerprint; // = "8766803AE29987F570AA37164F49D20A";
  static const uint8_t binary_fingerprint[16]; // = {0x87,0x66,0x80,0x3A,0xE2,0x99,0x87,0xF5,0x70,0xAA,0x37,0x16,0x4F,0x49,0xD2,0x0A};

  StoragePlayingActorLoginResponse() : result_((PlayingActorLoginResult::type)0) {
  }

  virtual ~StoragePlayingActorLoginResponse() throw() {}

  PlayingActorLoginResult::type result_;
  StoragePlayingActorField field_;

  void __set_result_(const PlayingActorLoginResult::type val) {
    result_ = val;
  }

  void __set_field_(const StoragePlayingActorField& val) {
    field_ = val;
  }

  bool operator == (const StoragePlayingActorLoginResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (!(field_ == rhs.field_))
      return false;
    return true;
  }
  bool operator != (const StoragePlayingActorLoginResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StoragePlayingActorLoginResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StoragePlayingActorLoginResponse &a, StoragePlayingActorLoginResponse &b);

}} // namespace

#endif
