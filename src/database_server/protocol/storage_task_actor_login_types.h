/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef storage_task_actor_login_TYPES_H
#define storage_task_actor_login_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace database { namespace protocol {

struct TaskActorField {
  enum type {
    CIRCLE_FLAG = 0,
    ROUND_NUM = 1,
    TOTAL_ROUND = 2,
    CIRCLE_NUM = 3,
    LV_STAGE = 4,
    CONDITION_ID = 5,
    TRIP_NUM_ = 6,
    EXPLOIT_AWARD = 7,
    DAILY_EXPLIOT = 8,
    TRANSPORT_FINISHED_COUNT = 9,
    TRANSPORT_FREE_REFRESHED_COUNT = 10,
    TRANSPORT_ROBED_COUNT = 11,
    TRANSPORT_CURRENT_TRANSPORT = 12,
    TRANSPORT_STATUS = 13,
    MAX = 14
  };
};

extern const std::map<int, const char*> _TaskActorField_VALUES_TO_NAMES;

struct TaskActorResult {
  enum type {
    SUCCESS = 0,
    ERROR_UNKNOWN = 1
  };
};

extern const std::map<int, const char*> _TaskActorResult_VALUES_TO_NAMES;


class StorageTaskActorField {
 public:

  static const char* ascii_fingerprint; // = "87BC2CAAECD1768CDB0CD1103D26D47A";
  static const uint8_t binary_fingerprint[16]; // = {0x87,0xBC,0x2C,0xAA,0xEC,0xD1,0x76,0x8C,0xDB,0x0C,0xD1,0x10,0x3D,0x26,0xD4,0x7A};

  StorageTaskActorField() : flag_(0), round_num_(0), total_num_(0), circle_num_(0), lv_stage_(0), condition_id_(0), trip_num_(0), exploit_award_(0), daily_exploit_(0), transport_finished_count_(0), transport_free_refreshed_count_(0), transport_robed_count_(0), transport_current_transport_(0), transport_status_(0) {
  }

  virtual ~StorageTaskActorField() throw() {}

  int8_t flag_;
  int32_t round_num_;
  int32_t total_num_;
  int32_t circle_num_;
  int32_t lv_stage_;
  int32_t condition_id_;
  int32_t trip_num_;
  int32_t exploit_award_;
  int32_t daily_exploit_;
  int32_t transport_finished_count_;
  int32_t transport_free_refreshed_count_;
  int32_t transport_robed_count_;
  int32_t transport_current_transport_;
  int32_t transport_status_;

  void __set_flag_(const int8_t val) {
    flag_ = val;
  }

  void __set_round_num_(const int32_t val) {
    round_num_ = val;
  }

  void __set_total_num_(const int32_t val) {
    total_num_ = val;
  }

  void __set_circle_num_(const int32_t val) {
    circle_num_ = val;
  }

  void __set_lv_stage_(const int32_t val) {
    lv_stage_ = val;
  }

  void __set_condition_id_(const int32_t val) {
    condition_id_ = val;
  }

  void __set_trip_num_(const int32_t val) {
    trip_num_ = val;
  }

  void __set_exploit_award_(const int32_t val) {
    exploit_award_ = val;
  }

  void __set_daily_exploit_(const int32_t val) {
    daily_exploit_ = val;
  }

  void __set_transport_finished_count_(const int32_t val) {
    transport_finished_count_ = val;
  }

  void __set_transport_free_refreshed_count_(const int32_t val) {
    transport_free_refreshed_count_ = val;
  }

  void __set_transport_robed_count_(const int32_t val) {
    transport_robed_count_ = val;
  }

  void __set_transport_current_transport_(const int32_t val) {
    transport_current_transport_ = val;
  }

  void __set_transport_status_(const int32_t val) {
    transport_status_ = val;
  }

  bool operator == (const StorageTaskActorField & rhs) const
  {
    if (!(flag_ == rhs.flag_))
      return false;
    if (!(round_num_ == rhs.round_num_))
      return false;
    if (!(total_num_ == rhs.total_num_))
      return false;
    if (!(circle_num_ == rhs.circle_num_))
      return false;
    if (!(lv_stage_ == rhs.lv_stage_))
      return false;
    if (!(condition_id_ == rhs.condition_id_))
      return false;
    if (!(trip_num_ == rhs.trip_num_))
      return false;
    if (!(exploit_award_ == rhs.exploit_award_))
      return false;
    if (!(daily_exploit_ == rhs.daily_exploit_))
      return false;
    if (!(transport_finished_count_ == rhs.transport_finished_count_))
      return false;
    if (!(transport_free_refreshed_count_ == rhs.transport_free_refreshed_count_))
      return false;
    if (!(transport_robed_count_ == rhs.transport_robed_count_))
      return false;
    if (!(transport_current_transport_ == rhs.transport_current_transport_))
      return false;
    if (!(transport_status_ == rhs.transport_status_))
      return false;
    return true;
  }
  bool operator != (const StorageTaskActorField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageTaskActorField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageTaskActorField &a, StorageTaskActorField &b);


class StorageTaskActorLoginRequest {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  StorageTaskActorLoginRequest() : actor_id_(0) {
  }

  virtual ~StorageTaskActorLoginRequest() throw() {}

  int64_t actor_id_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  bool operator == (const StorageTaskActorLoginRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    return true;
  }
  bool operator != (const StorageTaskActorLoginRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageTaskActorLoginRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageTaskActorLoginRequest &a, StorageTaskActorLoginRequest &b);


class StorageTaskActorLoginResponse {
 public:

  static const char* ascii_fingerprint; // = "62D3B2E378A6A82D8E99C62C99061EFB";
  static const uint8_t binary_fingerprint[16]; // = {0x62,0xD3,0xB2,0xE3,0x78,0xA6,0xA8,0x2D,0x8E,0x99,0xC6,0x2C,0x99,0x06,0x1E,0xFB};

  StorageTaskActorLoginResponse() : result_((TaskActorResult::type)0) {
  }

  virtual ~StorageTaskActorLoginResponse() throw() {}

  TaskActorResult::type result_;
  StorageTaskActorField data_;

  void __set_result_(const TaskActorResult::type val) {
    result_ = val;
  }

  void __set_data_(const StorageTaskActorField& val) {
    data_ = val;
  }

  bool operator == (const StorageTaskActorLoginResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (!(data_ == rhs.data_))
      return false;
    return true;
  }
  bool operator != (const StorageTaskActorLoginResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageTaskActorLoginResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageTaskActorLoginResponse &a, StorageTaskActorLoginResponse &b);

}} // namespace

#endif
