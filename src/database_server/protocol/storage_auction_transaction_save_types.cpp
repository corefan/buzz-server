/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "storage_auction_transaction_save_types.h"

#include <algorithm>

namespace database { namespace protocol {

int _kAuctionTransactionFieldValues[] = {
  AuctionTransactionField::ID,
  AuctionTransactionField::ITEM_TEMPLATE_ID,
  AuctionTransactionField::ITEM_NUMBER,
  AuctionTransactionField::ITEM_EXTRA_INFO,
  AuctionTransactionField::AUCTION_TIME_ID,
  AuctionTransactionField::START_BID_TIME,
  AuctionTransactionField::END_BID_TIME,
  AuctionTransactionField::OWNER,
  AuctionTransactionField::BUYER,
  AuctionTransactionField::START_BID_PRICE,
  AuctionTransactionField::LAST_BID_PRICE,
  AuctionTransactionField::BUYOUT_PRICE,
  AuctionTransactionField::FINISHED,
  AuctionTransactionField::MONEY_WITHDRAWN,
  AuctionTransactionField::ITEM_WITHDRAWN,
  AuctionTransactionField::MAX
};
const char* _kAuctionTransactionFieldNames[] = {
  "ID",
  "ITEM_TEMPLATE_ID",
  "ITEM_NUMBER",
  "ITEM_EXTRA_INFO",
  "AUCTION_TIME_ID",
  "START_BID_TIME",
  "END_BID_TIME",
  "OWNER",
  "BUYER",
  "START_BID_PRICE",
  "LAST_BID_PRICE",
  "BUYOUT_PRICE",
  "FINISHED",
  "MONEY_WITHDRAWN",
  "ITEM_WITHDRAWN",
  "MAX"
};
const std::map<int, const char*> _AuctionTransactionField_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(16, _kAuctionTransactionFieldValues, _kAuctionTransactionFieldNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* StorageAuctionTransactionField::ascii_fingerprint = "32E24769DE84CA1D9CB08F503808B4DF";
const uint8_t StorageAuctionTransactionField::binary_fingerprint[16] = {0x32,0xE2,0x47,0x69,0xDE,0x84,0xCA,0x1D,0x9C,0xB0,0x8F,0x50,0x38,0x08,0xB4,0xDF};

uint32_t StorageAuctionTransactionField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;
  bool isset_item_template_id_ = false;
  bool isset_item_number_ = false;
  bool isset_item_extra_info_ = false;
  bool isset_auction_time_id_ = false;
  bool isset_start_bid_time_ = false;
  bool isset_end_bid_time_ = false;
  bool isset_owner_ = false;
  bool isset_buyer_ = false;
  bool isset_start_bid_price_ = false;
  bool isset_last_bid_price_ = false;
  bool isset_buyout_price_ = false;
  bool isset_finished_ = false;
  bool isset_money_withdrawn_ = false;
  bool isset_item_withdrawn_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item_template_id_);
          isset_item_template_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item_number_);
          isset_item_number_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->item_extra_info_);
          isset_item_extra_info_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->auction_time_id_);
          isset_auction_time_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->start_bid_time_);
          isset_start_bid_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->end_bid_time_);
          isset_end_bid_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->owner_);
          isset_owner_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->buyer_);
          isset_buyer_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->start_bid_price_);
          isset_start_bid_price_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->last_bid_price_);
          isset_last_bid_price_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->buyout_price_);
          isset_buyout_price_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->finished_);
          isset_finished_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->money_withdrawn_);
          isset_money_withdrawn_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->item_withdrawn_);
          isset_item_withdrawn_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item_template_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item_number_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item_extra_info_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_auction_time_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_start_bid_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_end_bid_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_owner_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_buyer_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_start_bid_price_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_last_bid_price_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_buyout_price_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_finished_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_money_withdrawn_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item_withdrawn_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageAuctionTransactionField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageAuctionTransactionField");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item_template_id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->item_template_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item_number_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->item_number_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item_extra_info_", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->item_extra_info_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("auction_time_id_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->auction_time_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_bid_time_", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->start_bid_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("end_bid_time_", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->end_bid_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("owner_", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->owner_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buyer_", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->buyer_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_bid_price_", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->start_bid_price_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_bid_price_", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->last_bid_price_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buyout_price_", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->buyout_price_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("finished_", ::apache::thrift::protocol::T_BOOL, 13);
  xfer += oprot->writeBool(this->finished_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("money_withdrawn_", ::apache::thrift::protocol::T_BOOL, 14);
  xfer += oprot->writeBool(this->money_withdrawn_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item_withdrawn_", ::apache::thrift::protocol::T_BOOL, 15);
  xfer += oprot->writeBool(this->item_withdrawn_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageAuctionTransactionField &a, StorageAuctionTransactionField &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.item_template_id_, b.item_template_id_);
  swap(a.item_number_, b.item_number_);
  swap(a.item_extra_info_, b.item_extra_info_);
  swap(a.auction_time_id_, b.auction_time_id_);
  swap(a.start_bid_time_, b.start_bid_time_);
  swap(a.end_bid_time_, b.end_bid_time_);
  swap(a.owner_, b.owner_);
  swap(a.buyer_, b.buyer_);
  swap(a.start_bid_price_, b.start_bid_price_);
  swap(a.last_bid_price_, b.last_bid_price_);
  swap(a.buyout_price_, b.buyout_price_);
  swap(a.finished_, b.finished_);
  swap(a.money_withdrawn_, b.money_withdrawn_);
  swap(a.item_withdrawn_, b.item_withdrawn_);
}

const char* StorageAuctionTransactionSaveRequest::ascii_fingerprint = "E3B73E99BB74A2B6EBA048018276B672";
const uint8_t StorageAuctionTransactionSaveRequest::binary_fingerprint[16] = {0xE3,0xB7,0x3E,0x99,0xBB,0x74,0xA2,0xB6,0xEB,0xA0,0x48,0x01,0x82,0x76,0xB6,0x72};

uint32_t StorageAuctionTransactionSaveRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_field_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->field_.read(iprot);
          isset_field_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_field_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageAuctionTransactionSaveRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageAuctionTransactionSaveRequest");

  xfer += oprot->writeFieldBegin("field_", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->field_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageAuctionTransactionSaveRequest &a, StorageAuctionTransactionSaveRequest &b) {
  using ::std::swap;
  swap(a.field_, b.field_);
}

const char* StorageAuctionTransactionSaveResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t StorageAuctionTransactionSaveResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t StorageAuctionTransactionSaveResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageAuctionTransactionSaveResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageAuctionTransactionSaveResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageAuctionTransactionSaveResponse &a, StorageAuctionTransactionSaveResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

}} // namespace
