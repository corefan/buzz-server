/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef storage_achieve_save_TYPES_H
#define storage_achieve_save_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "storage_achieve_login_types.h"


namespace database { namespace protocol {


class StorageAchieveSave {
 public:

  static const char* ascii_fingerprint; // = "ABC0F5A1E20AEC6871AC0233F7077449";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0xC0,0xF5,0xA1,0xE2,0x0A,0xEC,0x68,0x71,0xAC,0x02,0x33,0xF7,0x07,0x74,0x49};

  StorageAchieveSave() : actor_(0) {
  }

  virtual ~StorageAchieveSave() throw() {}

  int64_t actor_;
  std::vector< ::database::protocol::StorageAchieveFinishField>  finish_achieves_;
  std::vector< ::database::protocol::StorageAchieveField>  achieves_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_finish_achieves_(const std::vector< ::database::protocol::StorageAchieveFinishField> & val) {
    finish_achieves_ = val;
  }

  void __set_achieves_(const std::vector< ::database::protocol::StorageAchieveField> & val) {
    achieves_ = val;
  }

  bool operator == (const StorageAchieveSave & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(finish_achieves_ == rhs.finish_achieves_))
      return false;
    if (!(achieves_ == rhs.achieves_))
      return false;
    return true;
  }
  bool operator != (const StorageAchieveSave &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageAchieveSave & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageAchieveSave &a, StorageAchieveSave &b);

}} // namespace

#endif
