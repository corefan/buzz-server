/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef storage_world_data_save_TYPES_H
#define storage_world_data_save_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace database { namespace protocol {

struct WorldDataField {
  enum type {
    ID = 0,
    DATA = 1,
    MAX = 2
  };
};

extern const std::map<int, const char*> _WorldDataField_VALUES_TO_NAMES;


class StorageWorldDataField {
 public:

  static const char* ascii_fingerprint; // = "727CAEA8265A5DE67DBC931F55CD8753";
  static const uint8_t binary_fingerprint[16]; // = {0x72,0x7C,0xAE,0xA8,0x26,0x5A,0x5D,0xE6,0x7D,0xBC,0x93,0x1F,0x55,0xCD,0x87,0x53};

  StorageWorldDataField() : id_(0), data_() {
  }

  virtual ~StorageWorldDataField() throw() {}

  int64_t id_;
  std::string data_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_data_(const std::string& val) {
    data_ = val;
  }

  bool operator == (const StorageWorldDataField & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(data_ == rhs.data_))
      return false;
    return true;
  }
  bool operator != (const StorageWorldDataField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageWorldDataField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageWorldDataField &a, StorageWorldDataField &b);


class StorageWorldDataSaveRequest {
 public:

  static const char* ascii_fingerprint; // = "E7AEB48427C123903547CCDEAAD05614";
  static const uint8_t binary_fingerprint[16]; // = {0xE7,0xAE,0xB4,0x84,0x27,0xC1,0x23,0x90,0x35,0x47,0xCC,0xDE,0xAA,0xD0,0x56,0x14};

  StorageWorldDataSaveRequest() {
  }

  virtual ~StorageWorldDataSaveRequest() throw() {}

  StorageWorldDataField field_;

  void __set_field_(const StorageWorldDataField& val) {
    field_ = val;
  }

  bool operator == (const StorageWorldDataSaveRequest & rhs) const
  {
    if (!(field_ == rhs.field_))
      return false;
    return true;
  }
  bool operator != (const StorageWorldDataSaveRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageWorldDataSaveRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageWorldDataSaveRequest &a, StorageWorldDataSaveRequest &b);


class StorageWorldDataSaveResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  StorageWorldDataSaveResponse() : result_(0) {
  }

  virtual ~StorageWorldDataSaveResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const StorageWorldDataSaveResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const StorageWorldDataSaveResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageWorldDataSaveResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageWorldDataSaveResponse &a, StorageWorldDataSaveResponse &b);

}} // namespace

#endif
