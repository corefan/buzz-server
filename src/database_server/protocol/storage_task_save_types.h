/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef storage_task_save_TYPES_H
#define storage_task_save_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "storage_task_login_types.h"


namespace database { namespace protocol {


class StorageTaskSaveRequest {
 public:

  static const char* ascii_fingerprint; // = "48441D22938511A03F6C2E90BE55DA8B";
  static const uint8_t binary_fingerprint[16]; // = {0x48,0x44,0x1D,0x22,0x93,0x85,0x11,0xA0,0x3F,0x6C,0x2E,0x90,0xBE,0x55,0xDA,0x8B};

  StorageTaskSaveRequest() : id_(0) {
  }

  virtual ~StorageTaskSaveRequest() throw() {}

  int64_t id_;
  std::vector< ::database::protocol::StorageTaskField>  actives_;
  std::vector< ::database::protocol::StorageTaskFinish>  finishes_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_actives_(const std::vector< ::database::protocol::StorageTaskField> & val) {
    actives_ = val;
  }

  void __set_finishes_(const std::vector< ::database::protocol::StorageTaskFinish> & val) {
    finishes_ = val;
  }

  bool operator == (const StorageTaskSaveRequest & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(actives_ == rhs.actives_))
      return false;
    if (!(finishes_ == rhs.finishes_))
      return false;
    return true;
  }
  bool operator != (const StorageTaskSaveRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageTaskSaveRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageTaskSaveRequest &a, StorageTaskSaveRequest &b);


class StorageTaskSaveResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  StorageTaskSaveResponse() : result_(0) {
  }

  virtual ~StorageTaskSaveResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const StorageTaskSaveResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const StorageTaskSaveResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageTaskSaveResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageTaskSaveResponse &a, StorageTaskSaveResponse &b);

}} // namespace

#endif
