/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef storage_auction_transaction_del_TYPES_H
#define storage_auction_transaction_del_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace database { namespace protocol {


class StorageAuctionTransactionDelRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  StorageAuctionTransactionDelRequest() : id_() {
  }

  virtual ~StorageAuctionTransactionDelRequest() throw() {}

  std::string id_;

  void __set_id_(const std::string& val) {
    id_ = val;
  }

  bool operator == (const StorageAuctionTransactionDelRequest & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const StorageAuctionTransactionDelRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageAuctionTransactionDelRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageAuctionTransactionDelRequest &a, StorageAuctionTransactionDelRequest &b);


class StorageAuctionTransactionDelResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  StorageAuctionTransactionDelResponse() : result_(0) {
  }

  virtual ~StorageAuctionTransactionDelResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const StorageAuctionTransactionDelResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const StorageAuctionTransactionDelResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageAuctionTransactionDelResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageAuctionTransactionDelResponse &a, StorageAuctionTransactionDelResponse &b);

}} // namespace

#endif
