/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef storage_cooling_login_TYPES_H
#define storage_cooling_login_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace database { namespace protocol {

struct CoolingField {
  enum type {
    COOLING_ID = 0,
    COOLING_TIME = 1,
    MAX = 2
  };
};

extern const std::map<int, const char*> _CoolingField_VALUES_TO_NAMES;

struct CoolingLoginResult {
  enum type {
    SUCCESS = 0,
    ERROR_UNKNOWN = 1
  };
};

extern const std::map<int, const char*> _CoolingLoginResult_VALUES_TO_NAMES;


class StorageCoolingField {
 public:

  static const char* ascii_fingerprint; // = "9C2A05F173B50306037BDE9AE30E1B99";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x2A,0x05,0xF1,0x73,0xB5,0x03,0x06,0x03,0x7B,0xDE,0x9A,0xE3,0x0E,0x1B,0x99};

  StorageCoolingField() : cooling_id_(0), cooling_time_(0) {
  }

  virtual ~StorageCoolingField() throw() {}

  int32_t cooling_id_;
  int64_t cooling_time_;

  void __set_cooling_id_(const int32_t val) {
    cooling_id_ = val;
  }

  void __set_cooling_time_(const int64_t val) {
    cooling_time_ = val;
  }

  bool operator == (const StorageCoolingField & rhs) const
  {
    if (!(cooling_id_ == rhs.cooling_id_))
      return false;
    if (!(cooling_time_ == rhs.cooling_time_))
      return false;
    return true;
  }
  bool operator != (const StorageCoolingField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageCoolingField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageCoolingField &a, StorageCoolingField &b);


class StorageCoolingLoginRequest {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  StorageCoolingLoginRequest() : id_(0) {
  }

  virtual ~StorageCoolingLoginRequest() throw() {}

  int64_t id_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  bool operator == (const StorageCoolingLoginRequest & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const StorageCoolingLoginRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageCoolingLoginRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageCoolingLoginRequest &a, StorageCoolingLoginRequest &b);

typedef struct _StorageCoolingLoginResponse__isset {
  _StorageCoolingLoginResponse__isset() : fields_(false) {}
  bool fields_;
} _StorageCoolingLoginResponse__isset;

class StorageCoolingLoginResponse {
 public:

  static const char* ascii_fingerprint; // = "FBBC7763D4AD2FACC3A8AC5BD8776536";
  static const uint8_t binary_fingerprint[16]; // = {0xFB,0xBC,0x77,0x63,0xD4,0xAD,0x2F,0xAC,0xC3,0xA8,0xAC,0x5B,0xD8,0x77,0x65,0x36};

  StorageCoolingLoginResponse() : result_((CoolingLoginResult::type)0) {
  }

  virtual ~StorageCoolingLoginResponse() throw() {}

  CoolingLoginResult::type result_;
  std::vector<StorageCoolingField>  fields_;

  _StorageCoolingLoginResponse__isset __isset;

  void __set_result_(const CoolingLoginResult::type val) {
    result_ = val;
  }

  void __set_fields_(const std::vector<StorageCoolingField> & val) {
    fields_ = val;
    __isset.fields_ = true;
  }

  bool operator == (const StorageCoolingLoginResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.fields_ != rhs.__isset.fields_)
      return false;
    else if (__isset.fields_ && !(fields_ == rhs.fields_))
      return false;
    return true;
  }
  bool operator != (const StorageCoolingLoginResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageCoolingLoginResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageCoolingLoginResponse &a, StorageCoolingLoginResponse &b);

}} // namespace

#endif
