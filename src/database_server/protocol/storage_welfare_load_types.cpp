/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "storage_welfare_load_types.h"

#include <algorithm>

namespace database { namespace protocol {

int _kWelfareFieldValues[] = {
  WelfareField::TITLE_ID,
  WelfareField::DAILY_CHECKINS,
  WelfareField::DAILY_AWARD,
  WelfareField::GENERAL_CHECKINS,
  WelfareField::VIP_CHECKINS,
  WelfareField::LAST_MONTH_RESOURCE,
  WelfareField::CURRENT_MONTH_RESOURCE,
  WelfareField::LAST_MONTH_AWARD_RESOURCE,
  WelfareField::DAILY_TIME,
  WelfareField::TOTAL_TIME,
  WelfareField::REPLENISH_CHECKINS_NUM,
  WelfareField::ONLINE_AWARD_ITEMS,
  WelfareField::RESPENISH_DAYS,
  WelfareField::MAX
};
const char* _kWelfareFieldNames[] = {
  "TITLE_ID",
  "DAILY_CHECKINS",
  "DAILY_AWARD",
  "GENERAL_CHECKINS",
  "VIP_CHECKINS",
  "LAST_MONTH_RESOURCE",
  "CURRENT_MONTH_RESOURCE",
  "LAST_MONTH_AWARD_RESOURCE",
  "DAILY_TIME",
  "TOTAL_TIME",
  "REPLENISH_CHECKINS_NUM",
  "ONLINE_AWARD_ITEMS",
  "RESPENISH_DAYS",
  "MAX"
};
const std::map<int, const char*> _WelfareField_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(14, _kWelfareFieldValues, _kWelfareFieldNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kWelfareLoginReslutValues[] = {
  WelfareLoginReslut::SUCCESS,
  WelfareLoginReslut::ERROR_INEXIST,
  WelfareLoginReslut::ERROR_UNKNOWN,
  WelfareLoginReslut::MAX
};
const char* _kWelfareLoginReslutNames[] = {
  "SUCCESS",
  "ERROR_INEXIST",
  "ERROR_UNKNOWN",
  "MAX"
};
const std::map<int, const char*> _WelfareLoginReslut_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kWelfareLoginReslutValues, _kWelfareLoginReslutNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* StorageWelfareField::ascii_fingerprint = "4380D141FDF35D6FCDD3CE938B7C7709";
const uint8_t StorageWelfareField::binary_fingerprint[16] = {0x43,0x80,0xD1,0x41,0xFD,0xF3,0x5D,0x6F,0xCD,0xD3,0xCE,0x93,0x8B,0x7C,0x77,0x09};

uint32_t StorageWelfareField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_title_id_ = false;
  bool isset_daily_checkins_ = false;
  bool isset_daily_award_ = false;
  bool isset_general_checkins_ = false;
  bool isset_vip_checkins_ = false;
  bool isset_last_month_resource_ = false;
  bool isset_current_month_resource_ = false;
  bool isset_last_month_award_resource_ = false;
  bool isset_daily_time_ = false;
  bool isset_total_time_ = false;
  bool isset_replenish_checkins_num_ = false;
  bool isset_online_award_items_ = false;
  bool isset_respenish_days_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->title_id_);
          isset_title_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->daily_checkins_);
          isset_daily_checkins_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->daily_award_);
          isset_daily_award_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->general_checkins_);
          isset_general_checkins_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vip_checkins_);
          isset_vip_checkins_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->last_month_resource_);
          isset_last_month_resource_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->current_month_resource_);
          isset_current_month_resource_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->last_month_award_resource_);
          isset_last_month_award_resource_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->daily_time_);
          isset_daily_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->total_time_);
          isset_total_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->replenish_checkins_num_);
          isset_replenish_checkins_num_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->online_award_items_);
          isset_online_award_items_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->respenish_days_);
          isset_respenish_days_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_title_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_daily_checkins_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_daily_award_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_general_checkins_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_vip_checkins_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_last_month_resource_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_current_month_resource_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_last_month_award_resource_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_daily_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_total_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_replenish_checkins_num_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_online_award_items_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_respenish_days_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageWelfareField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageWelfareField");

  xfer += oprot->writeFieldBegin("title_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->title_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("daily_checkins_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->daily_checkins_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("daily_award_", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->daily_award_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("general_checkins_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->general_checkins_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vip_checkins_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->vip_checkins_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_month_resource_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->last_month_resource_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("current_month_resource_", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->current_month_resource_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_month_award_resource_", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->last_month_award_resource_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("daily_time_", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->daily_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("total_time_", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->total_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("replenish_checkins_num_", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->replenish_checkins_num_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("online_award_items_", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->online_award_items_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("respenish_days_", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->respenish_days_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageWelfareField &a, StorageWelfareField &b) {
  using ::std::swap;
  swap(a.title_id_, b.title_id_);
  swap(a.daily_checkins_, b.daily_checkins_);
  swap(a.daily_award_, b.daily_award_);
  swap(a.general_checkins_, b.general_checkins_);
  swap(a.vip_checkins_, b.vip_checkins_);
  swap(a.last_month_resource_, b.last_month_resource_);
  swap(a.current_month_resource_, b.current_month_resource_);
  swap(a.last_month_award_resource_, b.last_month_award_resource_);
  swap(a.daily_time_, b.daily_time_);
  swap(a.total_time_, b.total_time_);
  swap(a.replenish_checkins_num_, b.replenish_checkins_num_);
  swap(a.online_award_items_, b.online_award_items_);
  swap(a.respenish_days_, b.respenish_days_);
}

const char* StorageWelfareLoadRequest::ascii_fingerprint = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
const uint8_t StorageWelfareLoadRequest::binary_fingerprint[16] = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

uint32_t StorageWelfareLoadRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageWelfareLoadRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageWelfareLoadRequest");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageWelfareLoadRequest &a, StorageWelfareLoadRequest &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
}

const char* StorageWelfareLoadResponse::ascii_fingerprint = "9DA6B38C6BE7B764B9D1EA5D15E0ACDD";
const uint8_t StorageWelfareLoadResponse::binary_fingerprint[16] = {0x9D,0xA6,0xB3,0x8C,0x6B,0xE7,0xB7,0x64,0xB9,0xD1,0xEA,0x5D,0x15,0xE0,0xAC,0xDD};

uint32_t StorageWelfareLoadResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_field_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->field_.read(iprot);
          isset_field_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->result_ = (WelfareLoginReslut::type)ecast0;
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_field_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageWelfareLoadResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageWelfareLoadResponse");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->field_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageWelfareLoadResponse &a, StorageWelfareLoadResponse &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.field_, b.field_);
  swap(a.result_, b.result_);
}

}} // namespace
