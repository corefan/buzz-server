/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef storage_spirit_facade_login_TYPES_H
#define storage_spirit_facade_login_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace database { namespace protocol {

struct SpiritFacadeField {
  enum type {
    SPIRIT_FACADE_ID = 0,
    EXPIRE_TIME = 1,
    MAX = 2
  };
};

extern const std::map<int, const char*> _SpiritFacadeField_VALUES_TO_NAMES;

struct SpiritFacadeLoginResult {
  enum type {
    SUCCESS = 0,
    ERROR_UNKNOWN = 1
  };
};

extern const std::map<int, const char*> _SpiritFacadeLoginResult_VALUES_TO_NAMES;


class StorageSpiritFacadeField {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  StorageSpiritFacadeField() : spirit_facade_id_(0), expire_time_(0) {
  }

  virtual ~StorageSpiritFacadeField() throw() {}

  int32_t spirit_facade_id_;
  int32_t expire_time_;

  void __set_spirit_facade_id_(const int32_t val) {
    spirit_facade_id_ = val;
  }

  void __set_expire_time_(const int32_t val) {
    expire_time_ = val;
  }

  bool operator == (const StorageSpiritFacadeField & rhs) const
  {
    if (!(spirit_facade_id_ == rhs.spirit_facade_id_))
      return false;
    if (!(expire_time_ == rhs.expire_time_))
      return false;
    return true;
  }
  bool operator != (const StorageSpiritFacadeField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageSpiritFacadeField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageSpiritFacadeField &a, StorageSpiritFacadeField &b);


class StorageSpiritFacadeLoginRequest {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  StorageSpiritFacadeLoginRequest() : actor_id_(0) {
  }

  virtual ~StorageSpiritFacadeLoginRequest() throw() {}

  int64_t actor_id_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  bool operator == (const StorageSpiritFacadeLoginRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    return true;
  }
  bool operator != (const StorageSpiritFacadeLoginRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageSpiritFacadeLoginRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageSpiritFacadeLoginRequest &a, StorageSpiritFacadeLoginRequest &b);


class StorageSpiritFacadeLoginResponse {
 public:

  static const char* ascii_fingerprint; // = "F004E88FEC75D15061E26676505FFAE0";
  static const uint8_t binary_fingerprint[16]; // = {0xF0,0x04,0xE8,0x8F,0xEC,0x75,0xD1,0x50,0x61,0xE2,0x66,0x76,0x50,0x5F,0xFA,0xE0};

  StorageSpiritFacadeLoginResponse() : result_((SpiritFacadeLoginResult::type)0) {
  }

  virtual ~StorageSpiritFacadeLoginResponse() throw() {}

  SpiritFacadeLoginResult::type result_;
  std::vector<StorageSpiritFacadeField>  fields_;

  void __set_result_(const SpiritFacadeLoginResult::type val) {
    result_ = val;
  }

  void __set_fields_(const std::vector<StorageSpiritFacadeField> & val) {
    fields_ = val;
  }

  bool operator == (const StorageSpiritFacadeLoginResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (!(fields_ == rhs.fields_))
      return false;
    return true;
  }
  bool operator != (const StorageSpiritFacadeLoginResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageSpiritFacadeLoginResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageSpiritFacadeLoginResponse &a, StorageSpiritFacadeLoginResponse &b);

}} // namespace

#endif
