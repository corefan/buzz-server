/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef storage_skill_save_TYPES_H
#define storage_skill_save_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "storage_skill_login_types.h"


namespace database { namespace protocol {


class StorageSkillSaveRequest {
 public:

  static const char* ascii_fingerprint; // = "7A7F1BEA1D5B90403D0F3535B8F288E8";
  static const uint8_t binary_fingerprint[16]; // = {0x7A,0x7F,0x1B,0xEA,0x1D,0x5B,0x90,0x40,0x3D,0x0F,0x35,0x35,0xB8,0xF2,0x88,0xE8};

  StorageSkillSaveRequest() : id_(0), skillid_(0), opration_type_(0), skill_level_(0) {
  }

  virtual ~StorageSkillSaveRequest() throw() {}

  int64_t id_;
  int32_t skillid_;
  int16_t opration_type_;
  int16_t skill_level_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_skillid_(const int32_t val) {
    skillid_ = val;
  }

  void __set_opration_type_(const int16_t val) {
    opration_type_ = val;
  }

  void __set_skill_level_(const int16_t val) {
    skill_level_ = val;
  }

  bool operator == (const StorageSkillSaveRequest & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(skillid_ == rhs.skillid_))
      return false;
    if (!(opration_type_ == rhs.opration_type_))
      return false;
    if (!(skill_level_ == rhs.skill_level_))
      return false;
    return true;
  }
  bool operator != (const StorageSkillSaveRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageSkillSaveRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageSkillSaveRequest &a, StorageSkillSaveRequest &b);


class StorageSkillSaveResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  StorageSkillSaveResponse() : result_(0) {
  }

  virtual ~StorageSkillSaveResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const StorageSkillSaveResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const StorageSkillSaveResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageSkillSaveResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageSkillSaveResponse &a, StorageSkillSaveResponse &b);

}} // namespace

#endif
