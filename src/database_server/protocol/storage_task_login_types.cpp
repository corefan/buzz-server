/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "storage_task_login_types.h"

#include <algorithm>

namespace database { namespace protocol {

int _kTaskFieldValues[] = {
  TaskField::TASK,
  TaskField::FLAG,
  TaskField::COND_TYPE1,
  TaskField::VAR1,
  TaskField::VALUE1,
  TaskField::COND_TYPE2,
  TaskField::VAR2,
  TaskField::VALUE2,
  TaskField::COND_TYPE3,
  TaskField::VAR3,
  TaskField::VALUE3,
  TaskField::TASK_TYPE,
  TaskField::MAX
};
const char* _kTaskFieldNames[] = {
  "TASK",
  "FLAG",
  "COND_TYPE1",
  "VAR1",
  "VALUE1",
  "COND_TYPE2",
  "VAR2",
  "VALUE2",
  "COND_TYPE3",
  "VAR3",
  "VALUE3",
  "TASK_TYPE",
  "MAX"
};
const std::map<int, const char*> _TaskField_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(13, _kTaskFieldValues, _kTaskFieldNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTaskLoginResultValues[] = {
  TaskLoginResult::SUCCESS,
  TaskLoginResult::ERROR_UNKNOWN
};
const char* _kTaskLoginResultNames[] = {
  "SUCCESS",
  "ERROR_UNKNOWN"
};
const std::map<int, const char*> _TaskLoginResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTaskLoginResultValues, _kTaskLoginResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTaskFlagValues[] = {
  TaskFlag::NOT_EXIST,
  TaskFlag::ACTIVE,
  TaskFlag::FINISHED,
  TaskFlag::MAX
};
const char* _kTaskFlagNames[] = {
  "NOT_EXIST",
  "ACTIVE",
  "FINISHED",
  "MAX"
};
const std::map<int, const char*> _TaskFlag_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTaskFlagValues, _kTaskFlagNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* StorageTaskField::ascii_fingerprint = "C9B09257039E1A6FA9A9AEB247AF4699";
const uint8_t StorageTaskField::binary_fingerprint[16] = {0xC9,0xB0,0x92,0x57,0x03,0x9E,0x1A,0x6F,0xA9,0xA9,0xAE,0xB2,0x47,0xAF,0x46,0x99};

uint32_t StorageTaskField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_task_ = false;
  bool isset_flag_ = false;
  bool isset_cond_type1_ = false;
  bool isset_var1_ = false;
  bool isset_value1_ = false;
  bool isset_cond_type2_ = false;
  bool isset_var2_ = false;
  bool isset_value2_ = false;
  bool isset_cond_type3_ = false;
  bool isset_var3_ = false;
  bool isset_value3_ = false;
  bool isset_task_type_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->task_);
          isset_task_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->flag_);
          isset_flag_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->cond_type1_);
          isset_cond_type1_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->var1_);
          isset_var1_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->value1_);
          isset_value1_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->cond_type2_);
          isset_cond_type2_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->var2_);
          isset_var2_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->value2_);
          isset_value2_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->cond_type3_);
          isset_cond_type3_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->var3_);
          isset_var3_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->value3_);
          isset_value3_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->task_type_);
          isset_task_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_task_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_flag_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cond_type1_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_var1_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value1_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cond_type2_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_var2_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value2_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cond_type3_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_var3_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value3_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_task_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageTaskField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageTaskField");

  xfer += oprot->writeFieldBegin("task_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->task_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flag_", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->flag_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cond_type1_", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->cond_type1_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("var1_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->var1_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value1_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->value1_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cond_type2_", ::apache::thrift::protocol::T_BYTE, 6);
  xfer += oprot->writeByte(this->cond_type2_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("var2_", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->var2_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value2_", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->value2_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cond_type3_", ::apache::thrift::protocol::T_BYTE, 9);
  xfer += oprot->writeByte(this->cond_type3_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("var3_", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->var3_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value3_", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->value3_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("task_type_", ::apache::thrift::protocol::T_BYTE, 12);
  xfer += oprot->writeByte(this->task_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageTaskField &a, StorageTaskField &b) {
  using ::std::swap;
  swap(a.task_, b.task_);
  swap(a.flag_, b.flag_);
  swap(a.cond_type1_, b.cond_type1_);
  swap(a.var1_, b.var1_);
  swap(a.value1_, b.value1_);
  swap(a.cond_type2_, b.cond_type2_);
  swap(a.var2_, b.var2_);
  swap(a.value2_, b.value2_);
  swap(a.cond_type3_, b.cond_type3_);
  swap(a.var3_, b.var3_);
  swap(a.value3_, b.value3_);
  swap(a.task_type_, b.task_type_);
}

const char* StorageTaskFinish::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t StorageTaskFinish::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

uint32_t StorageTaskFinish::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_task_id_ = false;
  bool isset_type_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->task_id_);
          isset_task_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type_);
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_task_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageTaskFinish::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageTaskFinish");

  xfer += oprot->writeFieldBegin("task_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->task_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageTaskFinish &a, StorageTaskFinish &b) {
  using ::std::swap;
  swap(a.task_id_, b.task_id_);
  swap(a.type_, b.type_);
}

const char* StorageTaskLoginRequest::ascii_fingerprint = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
const uint8_t StorageTaskLoginRequest::binary_fingerprint[16] = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

uint32_t StorageTaskLoginRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageTaskLoginRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageTaskLoginRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageTaskLoginRequest &a, StorageTaskLoginRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
}

const char* StorageTaskLoginResponse::ascii_fingerprint = "4DE3A2BD02A5C38C350F83A882ADEF0B";
const uint8_t StorageTaskLoginResponse::binary_fingerprint[16] = {0x4D,0xE3,0xA2,0xBD,0x02,0xA5,0xC3,0x8C,0x35,0x0F,0x83,0xA8,0x82,0xAD,0xEF,0x0B};

uint32_t StorageTaskLoginResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;
  bool isset_actives_ = false;
  bool isset_finishes_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->result_ = (TaskLoginResult::type)ecast0;
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->actives_.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readListBegin(_etype4, _size1);
            this->actives_.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += this->actives_[_i5].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_actives_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->finishes_.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->finishes_.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += this->finishes_[_i10].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_finishes_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_actives_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_finishes_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageTaskLoginResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageTaskLoginResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("actives_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->actives_.size()));
    std::vector<StorageTaskField> ::const_iterator _iter11;
    for (_iter11 = this->actives_.begin(); _iter11 != this->actives_.end(); ++_iter11)
    {
      xfer += (*_iter11).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("finishes_", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->finishes_.size()));
    std::vector<StorageTaskFinish> ::const_iterator _iter12;
    for (_iter12 = this->finishes_.begin(); _iter12 != this->finishes_.end(); ++_iter12)
    {
      xfer += (*_iter12).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageTaskLoginResponse &a, StorageTaskLoginResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.actives_, b.actives_);
  swap(a.finishes_, b.finishes_);
}

}} // namespace
