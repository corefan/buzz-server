/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "storage_mail_login_types.h"

#include <algorithm>

namespace database { namespace protocol {

int _kMailLoadFieldValues[] = {
  MailLoadField::ID,
  MailLoadField::TYPE,
  MailLoadField::AFFIX_STATE,
  MailLoadField::READ_STATE,
  MailLoadField::TITLE,
  MailLoadField::CREATE_TIME,
  MailLoadField::ADDRESSER,
  MailLoadField::MAX
};
const char* _kMailLoadFieldNames[] = {
  "ID",
  "TYPE",
  "AFFIX_STATE",
  "READ_STATE",
  "TITLE",
  "CREATE_TIME",
  "ADDRESSER",
  "MAX"
};
const std::map<int, const char*> _MailLoadField_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kMailLoadFieldValues, _kMailLoadFieldNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMailLoginResultValues[] = {
  MailLoginResult::SUCCESS,
  MailLoginResult::ERROR_UNKNOWN
};
const char* _kMailLoginResultNames[] = {
  "SUCCESS",
  "ERROR_UNKNOWN"
};
const std::map<int, const char*> _MailLoginResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kMailLoginResultValues, _kMailLoginResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* MailHead::ascii_fingerprint = "1F89719F9590E01FF87A5E33120054F2";
const uint8_t MailHead::binary_fingerprint[16] = {0x1F,0x89,0x71,0x9F,0x95,0x90,0xE0,0x1F,0xF8,0x7A,0x5E,0x33,0x12,0x00,0x54,0xF2};

uint32_t MailHead::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_title_ = false;
  bool isset_addresser_ = false;
  bool isset_state_ = false;
  bool isset_affix_type_ = false;
  bool isset_type_ = false;
  bool isset_time_ = false;
  bool isset_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title_);
          isset_title_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->addresser_);
          isset_addresser_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->state_ = ( ::entity::MailReadState::type)ecast0;
          isset_state_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->affix_type_ = ( ::entity::MailAffixType::type)ecast1;
          isset_affix_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->type_ = ( ::entity::MailType::type)ecast2;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->time_);
          isset_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_title_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_addresser_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_state_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_affix_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MailHead::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MailHead");

  xfer += oprot->writeFieldBegin("title_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->title_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("addresser_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->addresser_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->state_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("affix_type_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->affix_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time_", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MailHead &a, MailHead &b) {
  using ::std::swap;
  swap(a.title_, b.title_);
  swap(a.addresser_, b.addresser_);
  swap(a.state_, b.state_);
  swap(a.affix_type_, b.affix_type_);
  swap(a.type_, b.type_);
  swap(a.time_, b.time_);
  swap(a.id_, b.id_);
}

const char* StorageMailLoginRequest::ascii_fingerprint = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
const uint8_t StorageMailLoginRequest::binary_fingerprint[16] = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

uint32_t StorageMailLoginRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageMailLoginRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageMailLoginRequest");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageMailLoginRequest &a, StorageMailLoginRequest &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
}

const char* StorageMailLoginResponse::ascii_fingerprint = "4C6385ED8E64D38FDABD537680F139D3";
const uint8_t StorageMailLoginResponse::binary_fingerprint[16] = {0x4C,0x63,0x85,0xED,0x8E,0x64,0xD3,0x8F,0xDA,0xBD,0x53,0x76,0x80,0xF1,0x39,0xD3};

uint32_t StorageMailLoginResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;
  bool isset_mail_list_ = false;
  bool isset_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->result_ = (MailLoginResult::type)ecast3;
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->mail_list_.clear();
            uint32_t _size4;
            ::apache::thrift::protocol::TType _etype7;
            xfer += iprot->readListBegin(_etype7, _size4);
            this->mail_list_.resize(_size4);
            uint32_t _i8;
            for (_i8 = 0; _i8 < _size4; ++_i8)
            {
              xfer += this->mail_list_[_i8].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_mail_list_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_mail_list_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageMailLoginResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageMailLoginResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mail_list_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->mail_list_.size()));
    std::vector<MailHead> ::const_iterator _iter9;
    for (_iter9 = this->mail_list_.begin(); _iter9 != this->mail_list_.end(); ++_iter9)
    {
      xfer += (*_iter9).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageMailLoginResponse &a, StorageMailLoginResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.mail_list_, b.mail_list_);
  swap(a.id_, b.id_);
}

}} // namespace
