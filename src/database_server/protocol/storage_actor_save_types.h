/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef storage_actor_save_TYPES_H
#define storage_actor_save_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "storage_actor_login_types.h"


namespace database { namespace protocol {


class StorageActorSaveRequest {
 public:

  static const char* ascii_fingerprint; // = "5409788F6F93C0C1E11DD136C18514AA";
  static const uint8_t binary_fingerprint[16]; // = {0x54,0x09,0x78,0x8F,0x6F,0x93,0xC0,0xC1,0xE1,0x1D,0xD1,0x36,0xC1,0x85,0x14,0xAA};

  StorageActorSaveRequest() : id_(0) {
  }

  virtual ~StorageActorSaveRequest() throw() {}

  int64_t id_;
   ::database::protocol::StorageActorField fields_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_fields_(const  ::database::protocol::StorageActorField& val) {
    fields_ = val;
  }

  bool operator == (const StorageActorSaveRequest & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(fields_ == rhs.fields_))
      return false;
    return true;
  }
  bool operator != (const StorageActorSaveRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageActorSaveRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageActorSaveRequest &a, StorageActorSaveRequest &b);


class StorageActorSaveResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  StorageActorSaveResponse() : result_(0) {
  }

  virtual ~StorageActorSaveResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const StorageActorSaveResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const StorageActorSaveResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageActorSaveResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageActorSaveResponse &a, StorageActorSaveResponse &b);

}} // namespace

#endif
