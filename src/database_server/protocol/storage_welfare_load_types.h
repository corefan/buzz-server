/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef storage_welfare_load_TYPES_H
#define storage_welfare_load_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace database { namespace protocol {

struct WelfareField {
  enum type {
    TITLE_ID = 0,
    DAILY_CHECKINS = 1,
    DAILY_AWARD = 2,
    GENERAL_CHECKINS = 3,
    VIP_CHECKINS = 4,
    LAST_MONTH_RESOURCE = 5,
    CURRENT_MONTH_RESOURCE = 6,
    LAST_MONTH_AWARD_RESOURCE = 7,
    DAILY_TIME = 8,
    TOTAL_TIME = 9,
    REPLENISH_CHECKINS_NUM = 10,
    ONLINE_AWARD_ITEMS = 11,
    RESPENISH_DAYS = 12,
    MAX = 13
  };
};

extern const std::map<int, const char*> _WelfareField_VALUES_TO_NAMES;

struct WelfareLoginReslut {
  enum type {
    SUCCESS = 0,
    ERROR_INEXIST = 1,
    ERROR_UNKNOWN = 2,
    MAX = 3
  };
};

extern const std::map<int, const char*> _WelfareLoginReslut_VALUES_TO_NAMES;


class StorageWelfareField {
 public:

  static const char* ascii_fingerprint; // = "4380D141FDF35D6FCDD3CE938B7C7709";
  static const uint8_t binary_fingerprint[16]; // = {0x43,0x80,0xD1,0x41,0xFD,0xF3,0x5D,0x6F,0xCD,0xD3,0xCE,0x93,0x8B,0x7C,0x77,0x09};

  StorageWelfareField() : title_id_(0), daily_checkins_(0), daily_award_(0), general_checkins_(0), vip_checkins_(0), last_month_resource_(0), current_month_resource_(0), last_month_award_resource_(0), daily_time_(0), total_time_(0), replenish_checkins_num_(0), online_award_items_(), respenish_days_() {
  }

  virtual ~StorageWelfareField() throw() {}

  int32_t title_id_;
  int32_t daily_checkins_;
  bool daily_award_;
  int32_t general_checkins_;
  int32_t vip_checkins_;
  int32_t last_month_resource_;
  int32_t current_month_resource_;
  bool last_month_award_resource_;
  int32_t daily_time_;
  int32_t total_time_;
  int32_t replenish_checkins_num_;
  std::string online_award_items_;
  std::string respenish_days_;

  void __set_title_id_(const int32_t val) {
    title_id_ = val;
  }

  void __set_daily_checkins_(const int32_t val) {
    daily_checkins_ = val;
  }

  void __set_daily_award_(const bool val) {
    daily_award_ = val;
  }

  void __set_general_checkins_(const int32_t val) {
    general_checkins_ = val;
  }

  void __set_vip_checkins_(const int32_t val) {
    vip_checkins_ = val;
  }

  void __set_last_month_resource_(const int32_t val) {
    last_month_resource_ = val;
  }

  void __set_current_month_resource_(const int32_t val) {
    current_month_resource_ = val;
  }

  void __set_last_month_award_resource_(const bool val) {
    last_month_award_resource_ = val;
  }

  void __set_daily_time_(const int32_t val) {
    daily_time_ = val;
  }

  void __set_total_time_(const int32_t val) {
    total_time_ = val;
  }

  void __set_replenish_checkins_num_(const int32_t val) {
    replenish_checkins_num_ = val;
  }

  void __set_online_award_items_(const std::string& val) {
    online_award_items_ = val;
  }

  void __set_respenish_days_(const std::string& val) {
    respenish_days_ = val;
  }

  bool operator == (const StorageWelfareField & rhs) const
  {
    if (!(title_id_ == rhs.title_id_))
      return false;
    if (!(daily_checkins_ == rhs.daily_checkins_))
      return false;
    if (!(daily_award_ == rhs.daily_award_))
      return false;
    if (!(general_checkins_ == rhs.general_checkins_))
      return false;
    if (!(vip_checkins_ == rhs.vip_checkins_))
      return false;
    if (!(last_month_resource_ == rhs.last_month_resource_))
      return false;
    if (!(current_month_resource_ == rhs.current_month_resource_))
      return false;
    if (!(last_month_award_resource_ == rhs.last_month_award_resource_))
      return false;
    if (!(daily_time_ == rhs.daily_time_))
      return false;
    if (!(total_time_ == rhs.total_time_))
      return false;
    if (!(replenish_checkins_num_ == rhs.replenish_checkins_num_))
      return false;
    if (!(online_award_items_ == rhs.online_award_items_))
      return false;
    if (!(respenish_days_ == rhs.respenish_days_))
      return false;
    return true;
  }
  bool operator != (const StorageWelfareField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageWelfareField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageWelfareField &a, StorageWelfareField &b);


class StorageWelfareLoadRequest {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  StorageWelfareLoadRequest() : actor_(0) {
  }

  virtual ~StorageWelfareLoadRequest() throw() {}

  int64_t actor_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  bool operator == (const StorageWelfareLoadRequest & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    return true;
  }
  bool operator != (const StorageWelfareLoadRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageWelfareLoadRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageWelfareLoadRequest &a, StorageWelfareLoadRequest &b);


class StorageWelfareLoadResponse {
 public:

  static const char* ascii_fingerprint; // = "9DA6B38C6BE7B764B9D1EA5D15E0ACDD";
  static const uint8_t binary_fingerprint[16]; // = {0x9D,0xA6,0xB3,0x8C,0x6B,0xE7,0xB7,0x64,0xB9,0xD1,0xEA,0x5D,0x15,0xE0,0xAC,0xDD};

  StorageWelfareLoadResponse() : actor_(0), result_((WelfareLoginReslut::type)0) {
  }

  virtual ~StorageWelfareLoadResponse() throw() {}

  int64_t actor_;
  StorageWelfareField field_;
  WelfareLoginReslut::type result_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_field_(const StorageWelfareField& val) {
    field_ = val;
  }

  void __set_result_(const WelfareLoginReslut::type val) {
    result_ = val;
  }

  bool operator == (const StorageWelfareLoadResponse & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(field_ == rhs.field_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const StorageWelfareLoadResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageWelfareLoadResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageWelfareLoadResponse &a, StorageWelfareLoadResponse &b);

}} // namespace

#endif
