/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "storage_cooling_login_types.h"

#include <algorithm>

namespace database { namespace protocol {

int _kCoolingFieldValues[] = {
  CoolingField::COOLING_ID,
  CoolingField::COOLING_TIME,
  CoolingField::MAX
};
const char* _kCoolingFieldNames[] = {
  "COOLING_ID",
  "COOLING_TIME",
  "MAX"
};
const std::map<int, const char*> _CoolingField_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kCoolingFieldValues, _kCoolingFieldNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCoolingLoginResultValues[] = {
  CoolingLoginResult::SUCCESS,
  CoolingLoginResult::ERROR_UNKNOWN
};
const char* _kCoolingLoginResultNames[] = {
  "SUCCESS",
  "ERROR_UNKNOWN"
};
const std::map<int, const char*> _CoolingLoginResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kCoolingLoginResultValues, _kCoolingLoginResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* StorageCoolingField::ascii_fingerprint = "9C2A05F173B50306037BDE9AE30E1B99";
const uint8_t StorageCoolingField::binary_fingerprint[16] = {0x9C,0x2A,0x05,0xF1,0x73,0xB5,0x03,0x06,0x03,0x7B,0xDE,0x9A,0xE3,0x0E,0x1B,0x99};

uint32_t StorageCoolingField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_cooling_id_ = false;
  bool isset_cooling_time_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cooling_id_);
          isset_cooling_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cooling_time_);
          isset_cooling_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_cooling_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cooling_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageCoolingField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageCoolingField");

  xfer += oprot->writeFieldBegin("cooling_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->cooling_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cooling_time_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->cooling_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageCoolingField &a, StorageCoolingField &b) {
  using ::std::swap;
  swap(a.cooling_id_, b.cooling_id_);
  swap(a.cooling_time_, b.cooling_time_);
}

const char* StorageCoolingLoginRequest::ascii_fingerprint = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
const uint8_t StorageCoolingLoginRequest::binary_fingerprint[16] = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

uint32_t StorageCoolingLoginRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageCoolingLoginRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageCoolingLoginRequest");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageCoolingLoginRequest &a, StorageCoolingLoginRequest &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
}

const char* StorageCoolingLoginResponse::ascii_fingerprint = "FBBC7763D4AD2FACC3A8AC5BD8776536";
const uint8_t StorageCoolingLoginResponse::binary_fingerprint[16] = {0xFB,0xBC,0x77,0x63,0xD4,0xAD,0x2F,0xAC,0xC3,0xA8,0xAC,0x5B,0xD8,0x77,0x65,0x36};

uint32_t StorageCoolingLoginResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->result_ = (CoolingLoginResult::type)ecast0;
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->fields_.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readListBegin(_etype4, _size1);
            this->fields_.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += this->fields_[_i5].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageCoolingLoginResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageCoolingLoginResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.fields_) {
    xfer += oprot->writeFieldBegin("fields_", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->fields_.size()));
      std::vector<StorageCoolingField> ::const_iterator _iter6;
      for (_iter6 = this->fields_.begin(); _iter6 != this->fields_.end(); ++_iter6)
      {
        xfer += (*_iter6).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageCoolingLoginResponse &a, StorageCoolingLoginResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.fields_, b.fields_);
  swap(a.__isset, b.__isset);
}

}} // namespace
