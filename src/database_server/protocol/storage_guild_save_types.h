/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef storage_guild_save_TYPES_H
#define storage_guild_save_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace database { namespace protocol {

struct GuildField {
  enum type {
    ID = 0,
    NAME = 1,
    LOGO = 2,
    LEVEL = 3,
    SUPPRESS_JOIN = 4,
    PENDING_MEMBERS = 5,
    MEMBERS = 6,
    ANNOUNCEMENT = 7,
    EVENTS = 8,
    GOLD = 9,
    LIGHT_CRYSTAL = 10,
    DARK_CRYSTAL = 11,
    HOLY_CRYSTAL = 12,
    LIGHT_ATTRIBUTE = 13,
    DARK_ATTRIBUTE = 14,
    HOLY_ATTRIBUTE = 15,
    SHOP_LEVEL = 16,
    COLLEGE_LEVEL = 17,
    BARRACK_LEVEL = 18,
    LAST_SAVE_TIME = 19,
    OPENED_PLAYING_GROUPS = 20,
    FINISHED_PLAYINGS = 21,
    MAX = 22
  };
};

extern const std::map<int, const char*> _GuildField_VALUES_TO_NAMES;


class StorageGuildField {
 public:

  static const char* ascii_fingerprint; // = "2EFA59426B8273B480FB43624AE86971";
  static const uint8_t binary_fingerprint[16]; // = {0x2E,0xFA,0x59,0x42,0x6B,0x82,0x73,0xB4,0x80,0xFB,0x43,0x62,0x4A,0xE8,0x69,0x71};

  StorageGuildField() : id_(0), name_(), logo_(0), level_(0), suppress_join_(0), pending_members_(), members_(), announcement_(), events_(), gold_(0), light_crystal_(0), dark_crystal_(0), holy_crystal_(0), light_attribute_(0), dark_attribute_(0), holy_attribute_(0), shop_level_(0), college_level_(0), barrack_level_(0), opened_playing_groups_(), finished_playings_(), last_save_time_(0) {
  }

  virtual ~StorageGuildField() throw() {}

  int64_t id_;
  std::string name_;
  int32_t logo_;
  int32_t level_;
  bool suppress_join_;
  std::string pending_members_;
  std::string members_;
  std::string announcement_;
  std::string events_;
  int32_t gold_;
  int32_t light_crystal_;
  int32_t dark_crystal_;
  int32_t holy_crystal_;
  int32_t light_attribute_;
  int32_t dark_attribute_;
  int32_t holy_attribute_;
  int32_t shop_level_;
  int32_t college_level_;
  int32_t barrack_level_;
  std::string opened_playing_groups_;
  std::string finished_playings_;
  int64_t last_save_time_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_name_(const std::string& val) {
    name_ = val;
  }

  void __set_logo_(const int32_t val) {
    logo_ = val;
  }

  void __set_level_(const int32_t val) {
    level_ = val;
  }

  void __set_suppress_join_(const bool val) {
    suppress_join_ = val;
  }

  void __set_pending_members_(const std::string& val) {
    pending_members_ = val;
  }

  void __set_members_(const std::string& val) {
    members_ = val;
  }

  void __set_announcement_(const std::string& val) {
    announcement_ = val;
  }

  void __set_events_(const std::string& val) {
    events_ = val;
  }

  void __set_gold_(const int32_t val) {
    gold_ = val;
  }

  void __set_light_crystal_(const int32_t val) {
    light_crystal_ = val;
  }

  void __set_dark_crystal_(const int32_t val) {
    dark_crystal_ = val;
  }

  void __set_holy_crystal_(const int32_t val) {
    holy_crystal_ = val;
  }

  void __set_light_attribute_(const int32_t val) {
    light_attribute_ = val;
  }

  void __set_dark_attribute_(const int32_t val) {
    dark_attribute_ = val;
  }

  void __set_holy_attribute_(const int32_t val) {
    holy_attribute_ = val;
  }

  void __set_shop_level_(const int32_t val) {
    shop_level_ = val;
  }

  void __set_college_level_(const int32_t val) {
    college_level_ = val;
  }

  void __set_barrack_level_(const int32_t val) {
    barrack_level_ = val;
  }

  void __set_opened_playing_groups_(const std::string& val) {
    opened_playing_groups_ = val;
  }

  void __set_finished_playings_(const std::string& val) {
    finished_playings_ = val;
  }

  void __set_last_save_time_(const int64_t val) {
    last_save_time_ = val;
  }

  bool operator == (const StorageGuildField & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(name_ == rhs.name_))
      return false;
    if (!(logo_ == rhs.logo_))
      return false;
    if (!(level_ == rhs.level_))
      return false;
    if (!(suppress_join_ == rhs.suppress_join_))
      return false;
    if (!(pending_members_ == rhs.pending_members_))
      return false;
    if (!(members_ == rhs.members_))
      return false;
    if (!(announcement_ == rhs.announcement_))
      return false;
    if (!(events_ == rhs.events_))
      return false;
    if (!(gold_ == rhs.gold_))
      return false;
    if (!(light_crystal_ == rhs.light_crystal_))
      return false;
    if (!(dark_crystal_ == rhs.dark_crystal_))
      return false;
    if (!(holy_crystal_ == rhs.holy_crystal_))
      return false;
    if (!(light_attribute_ == rhs.light_attribute_))
      return false;
    if (!(dark_attribute_ == rhs.dark_attribute_))
      return false;
    if (!(holy_attribute_ == rhs.holy_attribute_))
      return false;
    if (!(shop_level_ == rhs.shop_level_))
      return false;
    if (!(college_level_ == rhs.college_level_))
      return false;
    if (!(barrack_level_ == rhs.barrack_level_))
      return false;
    if (!(opened_playing_groups_ == rhs.opened_playing_groups_))
      return false;
    if (!(finished_playings_ == rhs.finished_playings_))
      return false;
    if (!(last_save_time_ == rhs.last_save_time_))
      return false;
    return true;
  }
  bool operator != (const StorageGuildField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageGuildField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageGuildField &a, StorageGuildField &b);


class StorageGuildSaveRequest {
 public:

  static const char* ascii_fingerprint; // = "D767E392EB2F5453CA2146D6654A26FD";
  static const uint8_t binary_fingerprint[16]; // = {0xD7,0x67,0xE3,0x92,0xEB,0x2F,0x54,0x53,0xCA,0x21,0x46,0xD6,0x65,0x4A,0x26,0xFD};

  StorageGuildSaveRequest() {
  }

  virtual ~StorageGuildSaveRequest() throw() {}

  StorageGuildField field_;

  void __set_field_(const StorageGuildField& val) {
    field_ = val;
  }

  bool operator == (const StorageGuildSaveRequest & rhs) const
  {
    if (!(field_ == rhs.field_))
      return false;
    return true;
  }
  bool operator != (const StorageGuildSaveRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageGuildSaveRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageGuildSaveRequest &a, StorageGuildSaveRequest &b);


class StorageGuildSaveResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  StorageGuildSaveResponse() : result_(0) {
  }

  virtual ~StorageGuildSaveResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const StorageGuildSaveResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const StorageGuildSaveResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageGuildSaveResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageGuildSaveResponse &a, StorageGuildSaveResponse &b);

}} // namespace

#endif
