/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef storage_mail_del_TYPES_H
#define storage_mail_del_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "mail_types.h"


namespace database { namespace protocol {

struct MailDelType {
  enum type {
    MAIL_DEL_TYPE_1 = 1,
    MAIL_DEL_TYPE_2 = 2
  };
};

extern const std::map<int, const char*> _MailDelType_VALUES_TO_NAMES;


class StorageDelMailRequest {
 public:

  static const char* ascii_fingerprint; // = "8830B22072E19A9C9C3ADE1FB6429A06";
  static const uint8_t binary_fingerprint[16]; // = {0x88,0x30,0xB2,0x20,0x72,0xE1,0x9A,0x9C,0x9C,0x3A,0xDE,0x1F,0xB6,0x42,0x9A,0x06};

  StorageDelMailRequest() : id_(0), del_type_((MailDelType::type)0) {
  }

  virtual ~StorageDelMailRequest() throw() {}

  int64_t id_;
  std::vector<int32_t>  id_list_;
  MailDelType::type del_type_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_id_list_(const std::vector<int32_t> & val) {
    id_list_ = val;
  }

  void __set_del_type_(const MailDelType::type val) {
    del_type_ = val;
  }

  bool operator == (const StorageDelMailRequest & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(id_list_ == rhs.id_list_))
      return false;
    if (!(del_type_ == rhs.del_type_))
      return false;
    return true;
  }
  bool operator != (const StorageDelMailRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageDelMailRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageDelMailRequest &a, StorageDelMailRequest &b);


class StorageDelMailResponse {
 public:

  static const char* ascii_fingerprint; // = "5DDE96F44B125BEA7379750973DE133C";
  static const uint8_t binary_fingerprint[16]; // = {0x5D,0xDE,0x96,0xF4,0x4B,0x12,0x5B,0xEA,0x73,0x79,0x75,0x09,0x73,0xDE,0x13,0x3C};

  StorageDelMailResponse() : id_(0) {
  }

  virtual ~StorageDelMailResponse() throw() {}

  int64_t id_;
  std::vector<int32_t>  id_list_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_id_list_(const std::vector<int32_t> & val) {
    id_list_ = val;
  }

  bool operator == (const StorageDelMailResponse & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(id_list_ == rhs.id_list_))
      return false;
    return true;
  }
  bool operator != (const StorageDelMailResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageDelMailResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageDelMailResponse &a, StorageDelMailResponse &b);

}} // namespace

#endif
