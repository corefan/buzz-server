/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef storage_buff_login_TYPES_H
#define storage_buff_login_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace database { namespace protocol {

struct BuffField {
  enum type {
    BUFF_ID = 0,
    LEFT_TIME = 1,
    STACK_COUNT = 2,
    MAX = 3
  };
};

extern const std::map<int, const char*> _BuffField_VALUES_TO_NAMES;

struct BuffLoginResult {
  enum type {
    SUCCESS = 0,
    ERROR_UNKNOWN = 1
  };
};

extern const std::map<int, const char*> _BuffLoginResult_VALUES_TO_NAMES;


class StorageBuffField {
 public:

  static const char* ascii_fingerprint; // = "6435B39C87AB0E30F30BEDEFD7328C0D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

  StorageBuffField() : buff_id_(0), left_time_(0), stack_count_(0) {
  }

  virtual ~StorageBuffField() throw() {}

  int32_t buff_id_;
  int32_t left_time_;
  int32_t stack_count_;

  void __set_buff_id_(const int32_t val) {
    buff_id_ = val;
  }

  void __set_left_time_(const int32_t val) {
    left_time_ = val;
  }

  void __set_stack_count_(const int32_t val) {
    stack_count_ = val;
  }

  bool operator == (const StorageBuffField & rhs) const
  {
    if (!(buff_id_ == rhs.buff_id_))
      return false;
    if (!(left_time_ == rhs.left_time_))
      return false;
    if (!(stack_count_ == rhs.stack_count_))
      return false;
    return true;
  }
  bool operator != (const StorageBuffField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageBuffField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageBuffField &a, StorageBuffField &b);


class StorageBuffLoginRequest {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  StorageBuffLoginRequest() : id_(0) {
  }

  virtual ~StorageBuffLoginRequest() throw() {}

  int64_t id_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  bool operator == (const StorageBuffLoginRequest & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const StorageBuffLoginRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageBuffLoginRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageBuffLoginRequest &a, StorageBuffLoginRequest &b);

typedef struct _StorageBuffLoginResponse__isset {
  _StorageBuffLoginResponse__isset() : fields_(false) {}
  bool fields_;
} _StorageBuffLoginResponse__isset;

class StorageBuffLoginResponse {
 public:

  static const char* ascii_fingerprint; // = "5AE01BC72548EFFE778BA4D18E789AE7";
  static const uint8_t binary_fingerprint[16]; // = {0x5A,0xE0,0x1B,0xC7,0x25,0x48,0xEF,0xFE,0x77,0x8B,0xA4,0xD1,0x8E,0x78,0x9A,0xE7};

  StorageBuffLoginResponse() : result_((BuffLoginResult::type)0) {
  }

  virtual ~StorageBuffLoginResponse() throw() {}

  BuffLoginResult::type result_;
  std::vector<StorageBuffField>  fields_;

  _StorageBuffLoginResponse__isset __isset;

  void __set_result_(const BuffLoginResult::type val) {
    result_ = val;
  }

  void __set_fields_(const std::vector<StorageBuffField> & val) {
    fields_ = val;
    __isset.fields_ = true;
  }

  bool operator == (const StorageBuffLoginResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.fields_ != rhs.__isset.fields_)
      return false;
    else if (__isset.fields_ && !(fields_ == rhs.fields_))
      return false;
    return true;
  }
  bool operator != (const StorageBuffLoginResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageBuffLoginResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageBuffLoginResponse &a, StorageBuffLoginResponse &b);

}} // namespace

#endif
