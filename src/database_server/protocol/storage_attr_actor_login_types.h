/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef storage_attr_actor_login_TYPES_H
#define storage_attr_actor_login_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace database { namespace protocol {

struct AttrActorField {
  enum type {
    NOBLE_LEVEL = 0,
    NOBLE_USED_ITEM_COUNT = 1,
    NOBLE_MAX_HP_ADD_VALUE = 2,
    NOBLE_MAX_MP_ADD_VALUE = 3,
    NOBLE_PHYSICS_ATTACK_ADD_VALUE = 4,
    NOBLE_PHYSICS_DEFENCE_ADD_VALUE = 5,
    NOBLE_MAGIC_ATTACK_ADD_VALUE = 6,
    NOBLE_MAGIC_DEFENCE_ADD_VALUE = 7,
    NOBLE_DODGE_ADD_VALUE = 8,
    NOBLE_CRIT_ADD_VALUE = 9,
    NOBLE_IGNORE_DEFENCE_ADD_VALUE = 10,
    SWORD_AVAIL_STEP = 11,
    SWORD_CURRENT_STEP = 12,
    SWORD_LUCKY_VALUE = 13,
    SWORD_GAIN_TIME = 14,
    ELEMENT_LEVEL = 15,
    SPIRIT_LEVEL = 16,
    SPIRIT_LUCKY_VALUE = 17,
    SPIRIT_CURRENT_FACADE_TYPE = 18,
    SPIRIT_HORSE_FACADE_ID = 19,
    SPIRIT_WING_FACADE_ID = 20,
    RUNES = 21,
    LEGENDARY_WEAPON_PIECES = 22,
    MAX = 23
  };
};

extern const std::map<int, const char*> _AttrActorField_VALUES_TO_NAMES;

struct AttrActorLoginResult {
  enum type {
    SUCCESS = 0,
    ERROR_UNKNOWN = 1,
    MAX = 2
  };
};

extern const std::map<int, const char*> _AttrActorLoginResult_VALUES_TO_NAMES;


class StorageAttrActorField {
 public:

  static const char* ascii_fingerprint; // = "624F8F9AB76991A761ACA42320E65FFC";
  static const uint8_t binary_fingerprint[16]; // = {0x62,0x4F,0x8F,0x9A,0xB7,0x69,0x91,0xA7,0x61,0xAC,0xA4,0x23,0x20,0xE6,0x5F,0xFC};

  StorageAttrActorField() : noble_level_(0), noble_used_item_count_(0), noble_max_hp_add_value_(0), noble_max_mp_add_value_(0), noble_physics_attack_add_value_(0), noble_physics_defence_add_value_(0), noble_magic_attack_add_value_(0), noble_magic_defence_add_value_(0), noble_dodge_add_value_(0), noble_crit_add_value_(0), noble_ignore_defence_add_value_(0), sword_avail_step_(0), sword_current_step_(0), sword_lucky_value_(0), sword_gain_time_(0), element_level_(0), spirit_level_(0), spirit_lucky_value_(0), spirit_current_facade_type_(0), spirit_horse_facade_id_(0), spirit_wing_facade_id_(0), rune_slot_data_(), legendary_weapon_pieces_() {
  }

  virtual ~StorageAttrActorField() throw() {}

  int32_t noble_level_;
  int32_t noble_used_item_count_;
  int32_t noble_max_hp_add_value_;
  int32_t noble_max_mp_add_value_;
  int32_t noble_physics_attack_add_value_;
  int32_t noble_physics_defence_add_value_;
  int32_t noble_magic_attack_add_value_;
  int32_t noble_magic_defence_add_value_;
  int32_t noble_dodge_add_value_;
  int32_t noble_crit_add_value_;
  int32_t noble_ignore_defence_add_value_;
  int32_t sword_avail_step_;
  int32_t sword_current_step_;
  int32_t sword_lucky_value_;
  int32_t sword_gain_time_;
  int32_t element_level_;
  int32_t spirit_level_;
  int32_t spirit_lucky_value_;
  int32_t spirit_current_facade_type_;
  int32_t spirit_horse_facade_id_;
  int32_t spirit_wing_facade_id_;
  std::string rune_slot_data_;
  std::string legendary_weapon_pieces_;

  void __set_noble_level_(const int32_t val) {
    noble_level_ = val;
  }

  void __set_noble_used_item_count_(const int32_t val) {
    noble_used_item_count_ = val;
  }

  void __set_noble_max_hp_add_value_(const int32_t val) {
    noble_max_hp_add_value_ = val;
  }

  void __set_noble_max_mp_add_value_(const int32_t val) {
    noble_max_mp_add_value_ = val;
  }

  void __set_noble_physics_attack_add_value_(const int32_t val) {
    noble_physics_attack_add_value_ = val;
  }

  void __set_noble_physics_defence_add_value_(const int32_t val) {
    noble_physics_defence_add_value_ = val;
  }

  void __set_noble_magic_attack_add_value_(const int32_t val) {
    noble_magic_attack_add_value_ = val;
  }

  void __set_noble_magic_defence_add_value_(const int32_t val) {
    noble_magic_defence_add_value_ = val;
  }

  void __set_noble_dodge_add_value_(const int32_t val) {
    noble_dodge_add_value_ = val;
  }

  void __set_noble_crit_add_value_(const int32_t val) {
    noble_crit_add_value_ = val;
  }

  void __set_noble_ignore_defence_add_value_(const int32_t val) {
    noble_ignore_defence_add_value_ = val;
  }

  void __set_sword_avail_step_(const int32_t val) {
    sword_avail_step_ = val;
  }

  void __set_sword_current_step_(const int32_t val) {
    sword_current_step_ = val;
  }

  void __set_sword_lucky_value_(const int32_t val) {
    sword_lucky_value_ = val;
  }

  void __set_sword_gain_time_(const int32_t val) {
    sword_gain_time_ = val;
  }

  void __set_element_level_(const int32_t val) {
    element_level_ = val;
  }

  void __set_spirit_level_(const int32_t val) {
    spirit_level_ = val;
  }

  void __set_spirit_lucky_value_(const int32_t val) {
    spirit_lucky_value_ = val;
  }

  void __set_spirit_current_facade_type_(const int32_t val) {
    spirit_current_facade_type_ = val;
  }

  void __set_spirit_horse_facade_id_(const int32_t val) {
    spirit_horse_facade_id_ = val;
  }

  void __set_spirit_wing_facade_id_(const int32_t val) {
    spirit_wing_facade_id_ = val;
  }

  void __set_rune_slot_data_(const std::string& val) {
    rune_slot_data_ = val;
  }

  void __set_legendary_weapon_pieces_(const std::string& val) {
    legendary_weapon_pieces_ = val;
  }

  bool operator == (const StorageAttrActorField & rhs) const
  {
    if (!(noble_level_ == rhs.noble_level_))
      return false;
    if (!(noble_used_item_count_ == rhs.noble_used_item_count_))
      return false;
    if (!(noble_max_hp_add_value_ == rhs.noble_max_hp_add_value_))
      return false;
    if (!(noble_max_mp_add_value_ == rhs.noble_max_mp_add_value_))
      return false;
    if (!(noble_physics_attack_add_value_ == rhs.noble_physics_attack_add_value_))
      return false;
    if (!(noble_physics_defence_add_value_ == rhs.noble_physics_defence_add_value_))
      return false;
    if (!(noble_magic_attack_add_value_ == rhs.noble_magic_attack_add_value_))
      return false;
    if (!(noble_magic_defence_add_value_ == rhs.noble_magic_defence_add_value_))
      return false;
    if (!(noble_dodge_add_value_ == rhs.noble_dodge_add_value_))
      return false;
    if (!(noble_crit_add_value_ == rhs.noble_crit_add_value_))
      return false;
    if (!(noble_ignore_defence_add_value_ == rhs.noble_ignore_defence_add_value_))
      return false;
    if (!(sword_avail_step_ == rhs.sword_avail_step_))
      return false;
    if (!(sword_current_step_ == rhs.sword_current_step_))
      return false;
    if (!(sword_lucky_value_ == rhs.sword_lucky_value_))
      return false;
    if (!(sword_gain_time_ == rhs.sword_gain_time_))
      return false;
    if (!(element_level_ == rhs.element_level_))
      return false;
    if (!(spirit_level_ == rhs.spirit_level_))
      return false;
    if (!(spirit_lucky_value_ == rhs.spirit_lucky_value_))
      return false;
    if (!(spirit_current_facade_type_ == rhs.spirit_current_facade_type_))
      return false;
    if (!(spirit_horse_facade_id_ == rhs.spirit_horse_facade_id_))
      return false;
    if (!(spirit_wing_facade_id_ == rhs.spirit_wing_facade_id_))
      return false;
    if (!(rune_slot_data_ == rhs.rune_slot_data_))
      return false;
    if (!(legendary_weapon_pieces_ == rhs.legendary_weapon_pieces_))
      return false;
    return true;
  }
  bool operator != (const StorageAttrActorField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageAttrActorField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageAttrActorField &a, StorageAttrActorField &b);


class StorageAttrActorLoginRequest {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  StorageAttrActorLoginRequest() : actor_id_(0) {
  }

  virtual ~StorageAttrActorLoginRequest() throw() {}

  int64_t actor_id_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  bool operator == (const StorageAttrActorLoginRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    return true;
  }
  bool operator != (const StorageAttrActorLoginRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageAttrActorLoginRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageAttrActorLoginRequest &a, StorageAttrActorLoginRequest &b);


class StorageAttrActorLoginResponse {
 public:

  static const char* ascii_fingerprint; // = "A65B1A3E88F2C87C6E4350B264F81A45";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x5B,0x1A,0x3E,0x88,0xF2,0xC8,0x7C,0x6E,0x43,0x50,0xB2,0x64,0xF8,0x1A,0x45};

  StorageAttrActorLoginResponse() : result_((AttrActorLoginResult::type)0) {
  }

  virtual ~StorageAttrActorLoginResponse() throw() {}

  AttrActorLoginResult::type result_;
  StorageAttrActorField field_;

  void __set_result_(const AttrActorLoginResult::type val) {
    result_ = val;
  }

  void __set_field_(const StorageAttrActorField& val) {
    field_ = val;
  }

  bool operator == (const StorageAttrActorLoginResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (!(field_ == rhs.field_))
      return false;
    return true;
  }
  bool operator != (const StorageAttrActorLoginResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageAttrActorLoginResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageAttrActorLoginResponse &a, StorageAttrActorLoginResponse &b);

}} // namespace

#endif
