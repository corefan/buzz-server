/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef storage_item_actor_save_TYPES_H
#define storage_item_actor_save_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "storage_item_actor_login_types.h"


namespace database { namespace protocol {


class StorageItemActorSaveRequest {
 public:

  static const char* ascii_fingerprint; // = "7417723CA27E0CD6976ECA8D2207CBC0";
  static const uint8_t binary_fingerprint[16]; // = {0x74,0x17,0x72,0x3C,0xA2,0x7E,0x0C,0xD6,0x97,0x6E,0xCA,0x8D,0x22,0x07,0xCB,0xC0};

  StorageItemActorSaveRequest() : actor_id_(0) {
  }

  virtual ~StorageItemActorSaveRequest() throw() {}

  int64_t actor_id_;
   ::database::protocol::StorageItemActorField field_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_field_(const  ::database::protocol::StorageItemActorField& val) {
    field_ = val;
  }

  bool operator == (const StorageItemActorSaveRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(field_ == rhs.field_))
      return false;
    return true;
  }
  bool operator != (const StorageItemActorSaveRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageItemActorSaveRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageItemActorSaveRequest &a, StorageItemActorSaveRequest &b);


class StorageItemActorSaveResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  StorageItemActorSaveResponse() : result_(0) {
  }

  virtual ~StorageItemActorSaveResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const StorageItemActorSaveResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const StorageItemActorSaveResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageItemActorSaveResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageItemActorSaveResponse &a, StorageItemActorSaveResponse &b);

}} // namespace

#endif
