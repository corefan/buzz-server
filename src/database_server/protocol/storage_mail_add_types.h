/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef storage_mail_add_TYPES_H
#define storage_mail_add_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "mail_types.h"
#include "storage_mail_login_types.h"


namespace database { namespace protocol {

struct MailAddField {
  enum type {
    ID = 0,
    ACTOR_ID = 1,
    CREATE_TIME = 2,
    MAX = 3
  };
};

extern const std::map<int, const char*> _MailAddField_VALUES_TO_NAMES;


class StorageAddMailRequest {
 public:

  static const char* ascii_fingerprint; // = "DF38EA172FD63BDBEA971309B8279851";
  static const uint8_t binary_fingerprint[16]; // = {0xDF,0x38,0xEA,0x17,0x2F,0xD6,0x3B,0xDB,0xEA,0x97,0x13,0x09,0xB8,0x27,0x98,0x51};

  StorageAddMailRequest() : addressee_id_(0), addresser_id_(0), addresser_(), title_(), context_(), type_(( ::entity::MailType::type)0) {
  }

  virtual ~StorageAddMailRequest() throw() {}

   ::entity::MailAffix affix_;
  int64_t addressee_id_;
  int64_t addresser_id_;
  std::string addresser_;
  std::string title_;
  std::string context_;
   ::entity::MailType::type type_;

  void __set_affix_(const  ::entity::MailAffix& val) {
    affix_ = val;
  }

  void __set_addressee_id_(const int64_t val) {
    addressee_id_ = val;
  }

  void __set_addresser_id_(const int64_t val) {
    addresser_id_ = val;
  }

  void __set_addresser_(const std::string& val) {
    addresser_ = val;
  }

  void __set_title_(const std::string& val) {
    title_ = val;
  }

  void __set_context_(const std::string& val) {
    context_ = val;
  }

  void __set_type_(const  ::entity::MailType::type val) {
    type_ = val;
  }

  bool operator == (const StorageAddMailRequest & rhs) const
  {
    if (!(affix_ == rhs.affix_))
      return false;
    if (!(addressee_id_ == rhs.addressee_id_))
      return false;
    if (!(addresser_id_ == rhs.addresser_id_))
      return false;
    if (!(addresser_ == rhs.addresser_))
      return false;
    if (!(title_ == rhs.title_))
      return false;
    if (!(context_ == rhs.context_))
      return false;
    if (!(type_ == rhs.type_))
      return false;
    return true;
  }
  bool operator != (const StorageAddMailRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageAddMailRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageAddMailRequest &a, StorageAddMailRequest &b);


class StorageAddMailResponse {
 public:

  static const char* ascii_fingerprint; // = "22ABB85EDE8D52E41826B594B5C56655";
  static const uint8_t binary_fingerprint[16]; // = {0x22,0xAB,0xB8,0x5E,0xDE,0x8D,0x52,0xE4,0x18,0x26,0xB5,0x94,0xB5,0xC5,0x66,0x55};

  StorageAddMailResponse() : addressee_id_(0), addresser_id_(0) {
  }

  virtual ~StorageAddMailResponse() throw() {}

   ::database::protocol::MailHead mail_head_;
  int64_t addressee_id_;
  int64_t addresser_id_;

  void __set_mail_head_(const  ::database::protocol::MailHead& val) {
    mail_head_ = val;
  }

  void __set_addressee_id_(const int64_t val) {
    addressee_id_ = val;
  }

  void __set_addresser_id_(const int64_t val) {
    addresser_id_ = val;
  }

  bool operator == (const StorageAddMailResponse & rhs) const
  {
    if (!(mail_head_ == rhs.mail_head_))
      return false;
    if (!(addressee_id_ == rhs.addressee_id_))
      return false;
    if (!(addresser_id_ == rhs.addresser_id_))
      return false;
    return true;
  }
  bool operator != (const StorageAddMailResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageAddMailResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageAddMailResponse &a, StorageAddMailResponse &b);

}} // namespace

#endif
