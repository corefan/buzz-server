/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "storage_guild_actor_login_types.h"

#include <algorithm>

namespace database { namespace protocol {

int _kGuildActorFieldValues[] = {
  GuildActorField::GUILD_ID,
  GuildActorField::GUILD_POSITION,
  GuildActorField::CURRENT_CONTRIBUTION_VALUE,
  GuildActorField::TOTAL_CONTRIBUTION_VALUE,
  GuildActorField::GOLD_CONTRIBUTION,
  GuildActorField::FREEDOM_DOLLARS_CONTRIBUTION,
  GuildActorField::LIGHT_CRYSTAL_CONTRIBUTION,
  GuildActorField::DARK_CRYSTAL_CONTRIBUTION,
  GuildActorField::HOLY_CRYSTAL_CONTRIBUTION,
  GuildActorField::GUILD_SKILLS,
  GuildActorField::GUILD_BUFFS,
  GuildActorField::AWARDED_GUILD_PLAYINGS,
  GuildActorField::MAX
};
const char* _kGuildActorFieldNames[] = {
  "GUILD_ID",
  "GUILD_POSITION",
  "CURRENT_CONTRIBUTION_VALUE",
  "TOTAL_CONTRIBUTION_VALUE",
  "GOLD_CONTRIBUTION",
  "FREEDOM_DOLLARS_CONTRIBUTION",
  "LIGHT_CRYSTAL_CONTRIBUTION",
  "DARK_CRYSTAL_CONTRIBUTION",
  "HOLY_CRYSTAL_CONTRIBUTION",
  "GUILD_SKILLS",
  "GUILD_BUFFS",
  "AWARDED_GUILD_PLAYINGS",
  "MAX"
};
const std::map<int, const char*> _GuildActorField_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(13, _kGuildActorFieldValues, _kGuildActorFieldNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kGuildActorLoginResultValues[] = {
  GuildActorLoginResult::SUCCESS,
  GuildActorLoginResult::NOT_FOUND,
  GuildActorLoginResult::ERROR_UNKNOWN,
  GuildActorLoginResult::MAX
};
const char* _kGuildActorLoginResultNames[] = {
  "SUCCESS",
  "NOT_FOUND",
  "ERROR_UNKNOWN",
  "MAX"
};
const std::map<int, const char*> _GuildActorLoginResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kGuildActorLoginResultValues, _kGuildActorLoginResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* StorageGuildActorField::ascii_fingerprint = "7C3C053A9D2290359A0A108EFC16A516";
const uint8_t StorageGuildActorField::binary_fingerprint[16] = {0x7C,0x3C,0x05,0x3A,0x9D,0x22,0x90,0x35,0x9A,0x0A,0x10,0x8E,0xFC,0x16,0xA5,0x16};

uint32_t StorageGuildActorField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_guild_id_ = false;
  bool isset_guild_position_ = false;
  bool isset_current_contribution_value_ = false;
  bool isset_total_contribution_value_ = false;
  bool isset_gold_contribution_ = false;
  bool isset_freedom_dollars_contribution_ = false;
  bool isset_light_crystal_contribution_ = false;
  bool isset_dark_crystal_contribution_ = false;
  bool isset_holy_crystal_contribution_ = false;
  bool isset_guild_skills_ = false;
  bool isset_guild_buffs_ = false;
  bool isset_awarded_guild_playings_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->guild_id_);
          isset_guild_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_position_);
          isset_guild_position_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->current_contribution_value_);
          isset_current_contribution_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->total_contribution_value_);
          isset_total_contribution_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gold_contribution_);
          isset_gold_contribution_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->freedom_dollars_contribution_);
          isset_freedom_dollars_contribution_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->light_crystal_contribution_);
          isset_light_crystal_contribution_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dark_crystal_contribution_);
          isset_dark_crystal_contribution_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->holy_crystal_contribution_);
          isset_holy_crystal_contribution_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guild_skills_);
          isset_guild_skills_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guild_buffs_);
          isset_guild_buffs_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->awarded_guild_playings_);
          isset_awarded_guild_playings_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_guild_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_guild_position_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_current_contribution_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_total_contribution_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gold_contribution_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_freedom_dollars_contribution_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_light_crystal_contribution_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dark_crystal_contribution_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_holy_crystal_contribution_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_guild_skills_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_guild_buffs_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_awarded_guild_playings_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageGuildActorField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageGuildActorField");

  xfer += oprot->writeFieldBegin("guild_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->guild_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guild_position_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->guild_position_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("current_contribution_value_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->current_contribution_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("total_contribution_value_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->total_contribution_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gold_contribution_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->gold_contribution_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("freedom_dollars_contribution_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->freedom_dollars_contribution_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("light_crystal_contribution_", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->light_crystal_contribution_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dark_crystal_contribution_", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->dark_crystal_contribution_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("holy_crystal_contribution_", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->holy_crystal_contribution_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guild_skills_", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->guild_skills_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guild_buffs_", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->guild_buffs_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("awarded_guild_playings_", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->awarded_guild_playings_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageGuildActorField &a, StorageGuildActorField &b) {
  using ::std::swap;
  swap(a.guild_id_, b.guild_id_);
  swap(a.guild_position_, b.guild_position_);
  swap(a.current_contribution_value_, b.current_contribution_value_);
  swap(a.total_contribution_value_, b.total_contribution_value_);
  swap(a.gold_contribution_, b.gold_contribution_);
  swap(a.freedom_dollars_contribution_, b.freedom_dollars_contribution_);
  swap(a.light_crystal_contribution_, b.light_crystal_contribution_);
  swap(a.dark_crystal_contribution_, b.dark_crystal_contribution_);
  swap(a.holy_crystal_contribution_, b.holy_crystal_contribution_);
  swap(a.guild_skills_, b.guild_skills_);
  swap(a.guild_buffs_, b.guild_buffs_);
  swap(a.awarded_guild_playings_, b.awarded_guild_playings_);
}

const char* StorageGuildActorLoginRequest::ascii_fingerprint = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
const uint8_t StorageGuildActorLoginRequest::binary_fingerprint[16] = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

uint32_t StorageGuildActorLoginRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageGuildActorLoginRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageGuildActorLoginRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageGuildActorLoginRequest &a, StorageGuildActorLoginRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
}

const char* StorageGuildActorLoginResponse::ascii_fingerprint = "63FA5A8A01CAE198368DCEC211F706FC";
const uint8_t StorageGuildActorLoginResponse::binary_fingerprint[16] = {0x63,0xFA,0x5A,0x8A,0x01,0xCA,0xE1,0x98,0x36,0x8D,0xCE,0xC2,0x11,0xF7,0x06,0xFC};

uint32_t StorageGuildActorLoginResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;
  bool isset_field_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->result_ = (GuildActorLoginResult::type)ecast0;
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->field_.read(iprot);
          isset_field_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_field_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageGuildActorLoginResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageGuildActorLoginResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->field_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageGuildActorLoginResponse &a, StorageGuildActorLoginResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.field_, b.field_);
}

}} // namespace
