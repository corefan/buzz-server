/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "storage_playing_actor_login_types.h"

#include <algorithm>

namespace database { namespace protocol {

int _kPlayingActorFieldValues[] = {
  PlayingActorField::RECORDS,
  PlayingActorField::RESULTS,
  PlayingActorField::AUTO_PLAYING,
  PlayingActorField::AUTO_PLAYING_GROUP,
  PlayingActorField::AUTO_FINISH_TIME,
  PlayingActorField::MAZE_AP,
  PlayingActorField::MAZE_LAST_AP_RECOVER_TIME,
  PlayingActorField::MAZE_FLOOR,
  PlayingActorField::MAZE_EXPLORED_AREA,
  PlayingActorField::MAZE_RECENT_POSITION,
  PlayingActorField::MAZE_GIFT_NUMBER,
  PlayingActorField::MAX
};
const char* _kPlayingActorFieldNames[] = {
  "RECORDS",
  "RESULTS",
  "AUTO_PLAYING",
  "AUTO_PLAYING_GROUP",
  "AUTO_FINISH_TIME",
  "MAZE_AP",
  "MAZE_LAST_AP_RECOVER_TIME",
  "MAZE_FLOOR",
  "MAZE_EXPLORED_AREA",
  "MAZE_RECENT_POSITION",
  "MAZE_GIFT_NUMBER",
  "MAX"
};
const std::map<int, const char*> _PlayingActorField_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(12, _kPlayingActorFieldValues, _kPlayingActorFieldNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPlayingActorLoginResultValues[] = {
  PlayingActorLoginResult::SUCCESS,
  PlayingActorLoginResult::ERROR_UNKNOWN,
  PlayingActorLoginResult::MAX
};
const char* _kPlayingActorLoginResultNames[] = {
  "SUCCESS",
  "ERROR_UNKNOWN",
  "MAX"
};
const std::map<int, const char*> _PlayingActorLoginResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kPlayingActorLoginResultValues, _kPlayingActorLoginResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* StoragePlayingActorField::ascii_fingerprint = "52782DDADB5CE6E29F6F00356B3DD6FD";
const uint8_t StoragePlayingActorField::binary_fingerprint[16] = {0x52,0x78,0x2D,0xDA,0xDB,0x5C,0xE6,0xE2,0x9F,0x6F,0x00,0x35,0x6B,0x3D,0xD6,0xFD};

uint32_t StoragePlayingActorField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_records_ = false;
  bool isset_results_ = false;
  bool isset_auto_playing_ = false;
  bool isset_auto_playing_group_ = false;
  bool isset_auto_finish_time_ = false;
  bool isset_maze_ap_ = false;
  bool isset_maze_last_ap_recover_time_ = false;
  bool isset_maze_floor_ = false;
  bool isset_maze_explored_area_ = false;
  bool isset_maze_recent_position_ = false;
  bool isset_maze_gift_number_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->records_);
          isset_records_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->results_);
          isset_results_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->auto_playing_);
          isset_auto_playing_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->auto_playing_group_);
          isset_auto_playing_group_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->auto_finish_time_);
          isset_auto_finish_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maze_ap_);
          isset_maze_ap_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->maze_last_ap_recover_time_);
          isset_maze_last_ap_recover_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maze_floor_);
          isset_maze_floor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->maze_explored_area_);
          isset_maze_explored_area_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->maze_recent_position_);
          isset_maze_recent_position_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maze_gift_number_);
          isset_maze_gift_number_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_records_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_results_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_auto_playing_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_auto_playing_group_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_auto_finish_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maze_ap_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maze_last_ap_recover_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maze_floor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maze_explored_area_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maze_recent_position_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maze_gift_number_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StoragePlayingActorField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StoragePlayingActorField");

  xfer += oprot->writeFieldBegin("records_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->records_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("results_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->results_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("auto_playing_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->auto_playing_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("auto_playing_group_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->auto_playing_group_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("auto_finish_time_", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->auto_finish_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maze_ap_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->maze_ap_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maze_last_ap_recover_time_", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->maze_last_ap_recover_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maze_floor_", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->maze_floor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maze_explored_area_", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->maze_explored_area_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maze_recent_position_", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->maze_recent_position_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maze_gift_number_", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->maze_gift_number_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StoragePlayingActorField &a, StoragePlayingActorField &b) {
  using ::std::swap;
  swap(a.records_, b.records_);
  swap(a.results_, b.results_);
  swap(a.auto_playing_, b.auto_playing_);
  swap(a.auto_playing_group_, b.auto_playing_group_);
  swap(a.auto_finish_time_, b.auto_finish_time_);
  swap(a.maze_ap_, b.maze_ap_);
  swap(a.maze_last_ap_recover_time_, b.maze_last_ap_recover_time_);
  swap(a.maze_floor_, b.maze_floor_);
  swap(a.maze_explored_area_, b.maze_explored_area_);
  swap(a.maze_recent_position_, b.maze_recent_position_);
  swap(a.maze_gift_number_, b.maze_gift_number_);
}

const char* StoragePlayingActorLoginRequest::ascii_fingerprint = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
const uint8_t StoragePlayingActorLoginRequest::binary_fingerprint[16] = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

uint32_t StoragePlayingActorLoginRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StoragePlayingActorLoginRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StoragePlayingActorLoginRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StoragePlayingActorLoginRequest &a, StoragePlayingActorLoginRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
}

const char* StoragePlayingActorLoginResponse::ascii_fingerprint = "8766803AE29987F570AA37164F49D20A";
const uint8_t StoragePlayingActorLoginResponse::binary_fingerprint[16] = {0x87,0x66,0x80,0x3A,0xE2,0x99,0x87,0xF5,0x70,0xAA,0x37,0x16,0x4F,0x49,0xD2,0x0A};

uint32_t StoragePlayingActorLoginResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;
  bool isset_field_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->result_ = (PlayingActorLoginResult::type)ecast0;
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->field_.read(iprot);
          isset_field_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_field_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StoragePlayingActorLoginResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StoragePlayingActorLoginResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->field_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StoragePlayingActorLoginResponse &a, StoragePlayingActorLoginResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.field_, b.field_);
}

}} // namespace
