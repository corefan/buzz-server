/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef storage_gem_save_TYPES_H
#define storage_gem_save_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "storage_gem_login_types.h"


namespace database { namespace protocol {


class StorageGemSaveRequest {
 public:

  static const char* ascii_fingerprint; // = "87665900B98B0A54F17C070FF532D04E";
  static const uint8_t binary_fingerprint[16]; // = {0x87,0x66,0x59,0x00,0xB9,0x8B,0x0A,0x54,0xF1,0x7C,0x07,0x0F,0xF5,0x32,0xD0,0x4E};

  StorageGemSaveRequest() : actor_id_(0) {
  }

  virtual ~StorageGemSaveRequest() throw() {}

  int64_t actor_id_;
  std::vector< ::database::protocol::StorageGemField>  fields_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_fields_(const std::vector< ::database::protocol::StorageGemField> & val) {
    fields_ = val;
  }

  bool operator == (const StorageGemSaveRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(fields_ == rhs.fields_))
      return false;
    return true;
  }
  bool operator != (const StorageGemSaveRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageGemSaveRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageGemSaveRequest &a, StorageGemSaveRequest &b);


class StorageGemSaveResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  StorageGemSaveResponse() : result_(0) {
  }

  virtual ~StorageGemSaveResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const StorageGemSaveResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const StorageGemSaveResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageGemSaveResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageGemSaveResponse &a, StorageGemSaveResponse &b);

}} // namespace

#endif
