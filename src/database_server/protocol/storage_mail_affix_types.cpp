/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "storage_mail_affix_types.h"

#include <algorithm>

namespace database { namespace protocol {

int _kMailAffixFieldValues[] = {
  MailAffixField::ITEM1,
  MailAffixField::ITEM1_NUM,
  MailAffixField::ITEM2,
  MailAffixField::ITEM2_NUM,
  MailAffixField::ITEM3,
  MailAffixField::ITEM3_NUM,
  MailAffixField::ITEM4,
  MailAffixField::ITEM4_NUM,
  MailAffixField::ITEM5,
  MailAffixField::ITEM5_NUM,
  MailAffixField::GOLD,
  MailAffixField::FREEDOM_DOLLARS,
  MailAffixField::MAX
};
const char* _kMailAffixFieldNames[] = {
  "ITEM1",
  "ITEM1_NUM",
  "ITEM2",
  "ITEM2_NUM",
  "ITEM3",
  "ITEM3_NUM",
  "ITEM4",
  "ITEM4_NUM",
  "ITEM5",
  "ITEM5_NUM",
  "GOLD",
  "FREEDOM_DOLLARS",
  "MAX"
};
const std::map<int, const char*> _MailAffixField_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(13, _kMailAffixFieldValues, _kMailAffixFieldNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* StoragePickAffixRequest::ascii_fingerprint = "AFAFBCDB9822F9D1AA4E44188E720B47";
const uint8_t StoragePickAffixRequest::binary_fingerprint[16] = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

uint32_t StoragePickAffixRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;
  bool isset_mail_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mail_id_);
          isset_mail_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_mail_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StoragePickAffixRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StoragePickAffixRequest");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mail_id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->mail_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StoragePickAffixRequest &a, StoragePickAffixRequest &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.mail_id_, b.mail_id_);
}

const char* StoragePickAffixResponse::ascii_fingerprint = "5AF3AACF638A0A4053C55537C8A2B8BA";
const uint8_t StoragePickAffixResponse::binary_fingerprint[16] = {0x5A,0xF3,0xAA,0xCF,0x63,0x8A,0x0A,0x40,0x53,0xC5,0x55,0x37,0xC8,0xA2,0xB8,0xBA};

uint32_t StoragePickAffixResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_affix_ = false;
  bool isset_mail_id_ = false;
  bool isset_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->affix_.read(iprot);
          isset_affix_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mail_id_);
          isset_mail_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_affix_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_mail_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StoragePickAffixResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StoragePickAffixResponse");

  xfer += oprot->writeFieldBegin("affix_", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->affix_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mail_id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->mail_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StoragePickAffixResponse &a, StoragePickAffixResponse &b) {
  using ::std::swap;
  swap(a.affix_, b.affix_);
  swap(a.mail_id_, b.mail_id_);
  swap(a.id_, b.id_);
}

}} // namespace
