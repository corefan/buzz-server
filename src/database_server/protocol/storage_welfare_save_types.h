/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef storage_welfare_save_TYPES_H
#define storage_welfare_save_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "storage_welfare_load_types.h"


namespace database { namespace protocol {


class StorageWelfareSave {
 public:

  static const char* ascii_fingerprint; // = "EE7FEE56996252BF43D77EC52DF2C378";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0x7F,0xEE,0x56,0x99,0x62,0x52,0xBF,0x43,0xD7,0x7E,0xC5,0x2D,0xF2,0xC3,0x78};

  StorageWelfareSave() : actor_(0) {
  }

  virtual ~StorageWelfareSave() throw() {}

  int64_t actor_;
   ::database::protocol::StorageWelfareField field_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_field_(const  ::database::protocol::StorageWelfareField& val) {
    field_ = val;
  }

  bool operator == (const StorageWelfareSave & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(field_ == rhs.field_))
      return false;
    return true;
  }
  bool operator != (const StorageWelfareSave &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageWelfareSave & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageWelfareSave &a, StorageWelfareSave &b);

}} // namespace

#endif
