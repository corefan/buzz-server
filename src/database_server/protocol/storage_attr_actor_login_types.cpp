/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "storage_attr_actor_login_types.h"

#include <algorithm>

namespace database { namespace protocol {

int _kAttrActorFieldValues[] = {
  AttrActorField::NOBLE_LEVEL,
  AttrActorField::NOBLE_USED_ITEM_COUNT,
  AttrActorField::NOBLE_MAX_HP_ADD_VALUE,
  AttrActorField::NOBLE_MAX_MP_ADD_VALUE,
  AttrActorField::NOBLE_PHYSICS_ATTACK_ADD_VALUE,
  AttrActorField::NOBLE_PHYSICS_DEFENCE_ADD_VALUE,
  AttrActorField::NOBLE_MAGIC_ATTACK_ADD_VALUE,
  AttrActorField::NOBLE_MAGIC_DEFENCE_ADD_VALUE,
  AttrActorField::NOBLE_DODGE_ADD_VALUE,
  AttrActorField::NOBLE_CRIT_ADD_VALUE,
  AttrActorField::NOBLE_IGNORE_DEFENCE_ADD_VALUE,
  AttrActorField::SWORD_AVAIL_STEP,
  AttrActorField::SWORD_CURRENT_STEP,
  AttrActorField::SWORD_LUCKY_VALUE,
  AttrActorField::SWORD_GAIN_TIME,
  AttrActorField::ELEMENT_LEVEL,
  AttrActorField::SPIRIT_LEVEL,
  AttrActorField::SPIRIT_LUCKY_VALUE,
  AttrActorField::SPIRIT_CURRENT_FACADE_TYPE,
  AttrActorField::SPIRIT_HORSE_FACADE_ID,
  AttrActorField::SPIRIT_WING_FACADE_ID,
  AttrActorField::RUNES,
  AttrActorField::LEGENDARY_WEAPON_PIECES,
  AttrActorField::MAX
};
const char* _kAttrActorFieldNames[] = {
  "NOBLE_LEVEL",
  "NOBLE_USED_ITEM_COUNT",
  "NOBLE_MAX_HP_ADD_VALUE",
  "NOBLE_MAX_MP_ADD_VALUE",
  "NOBLE_PHYSICS_ATTACK_ADD_VALUE",
  "NOBLE_PHYSICS_DEFENCE_ADD_VALUE",
  "NOBLE_MAGIC_ATTACK_ADD_VALUE",
  "NOBLE_MAGIC_DEFENCE_ADD_VALUE",
  "NOBLE_DODGE_ADD_VALUE",
  "NOBLE_CRIT_ADD_VALUE",
  "NOBLE_IGNORE_DEFENCE_ADD_VALUE",
  "SWORD_AVAIL_STEP",
  "SWORD_CURRENT_STEP",
  "SWORD_LUCKY_VALUE",
  "SWORD_GAIN_TIME",
  "ELEMENT_LEVEL",
  "SPIRIT_LEVEL",
  "SPIRIT_LUCKY_VALUE",
  "SPIRIT_CURRENT_FACADE_TYPE",
  "SPIRIT_HORSE_FACADE_ID",
  "SPIRIT_WING_FACADE_ID",
  "RUNES",
  "LEGENDARY_WEAPON_PIECES",
  "MAX"
};
const std::map<int, const char*> _AttrActorField_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(24, _kAttrActorFieldValues, _kAttrActorFieldNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAttrActorLoginResultValues[] = {
  AttrActorLoginResult::SUCCESS,
  AttrActorLoginResult::ERROR_UNKNOWN,
  AttrActorLoginResult::MAX
};
const char* _kAttrActorLoginResultNames[] = {
  "SUCCESS",
  "ERROR_UNKNOWN",
  "MAX"
};
const std::map<int, const char*> _AttrActorLoginResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kAttrActorLoginResultValues, _kAttrActorLoginResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* StorageAttrActorField::ascii_fingerprint = "624F8F9AB76991A761ACA42320E65FFC";
const uint8_t StorageAttrActorField::binary_fingerprint[16] = {0x62,0x4F,0x8F,0x9A,0xB7,0x69,0x91,0xA7,0x61,0xAC,0xA4,0x23,0x20,0xE6,0x5F,0xFC};

uint32_t StorageAttrActorField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_noble_level_ = false;
  bool isset_noble_used_item_count_ = false;
  bool isset_noble_max_hp_add_value_ = false;
  bool isset_noble_max_mp_add_value_ = false;
  bool isset_noble_physics_attack_add_value_ = false;
  bool isset_noble_physics_defence_add_value_ = false;
  bool isset_noble_magic_attack_add_value_ = false;
  bool isset_noble_magic_defence_add_value_ = false;
  bool isset_noble_dodge_add_value_ = false;
  bool isset_noble_crit_add_value_ = false;
  bool isset_noble_ignore_defence_add_value_ = false;
  bool isset_sword_avail_step_ = false;
  bool isset_sword_current_step_ = false;
  bool isset_sword_lucky_value_ = false;
  bool isset_sword_gain_time_ = false;
  bool isset_element_level_ = false;
  bool isset_spirit_level_ = false;
  bool isset_spirit_lucky_value_ = false;
  bool isset_spirit_current_facade_type_ = false;
  bool isset_spirit_horse_facade_id_ = false;
  bool isset_spirit_wing_facade_id_ = false;
  bool isset_rune_slot_data_ = false;
  bool isset_legendary_weapon_pieces_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->noble_level_);
          isset_noble_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->noble_used_item_count_);
          isset_noble_used_item_count_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->noble_max_hp_add_value_);
          isset_noble_max_hp_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->noble_max_mp_add_value_);
          isset_noble_max_mp_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->noble_physics_attack_add_value_);
          isset_noble_physics_attack_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->noble_physics_defence_add_value_);
          isset_noble_physics_defence_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->noble_magic_attack_add_value_);
          isset_noble_magic_attack_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->noble_magic_defence_add_value_);
          isset_noble_magic_defence_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->noble_dodge_add_value_);
          isset_noble_dodge_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->noble_crit_add_value_);
          isset_noble_crit_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->noble_ignore_defence_add_value_);
          isset_noble_ignore_defence_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sword_avail_step_);
          isset_sword_avail_step_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sword_current_step_);
          isset_sword_current_step_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sword_lucky_value_);
          isset_sword_lucky_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sword_gain_time_);
          isset_sword_gain_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->element_level_);
          isset_element_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->spirit_level_);
          isset_spirit_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->spirit_lucky_value_);
          isset_spirit_lucky_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->spirit_current_facade_type_);
          isset_spirit_current_facade_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->spirit_horse_facade_id_);
          isset_spirit_horse_facade_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->spirit_wing_facade_id_);
          isset_spirit_wing_facade_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rune_slot_data_);
          isset_rune_slot_data_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->legendary_weapon_pieces_);
          isset_legendary_weapon_pieces_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_noble_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_noble_used_item_count_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_noble_max_hp_add_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_noble_max_mp_add_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_noble_physics_attack_add_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_noble_physics_defence_add_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_noble_magic_attack_add_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_noble_magic_defence_add_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_noble_dodge_add_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_noble_crit_add_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_noble_ignore_defence_add_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sword_avail_step_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sword_current_step_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sword_lucky_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sword_gain_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_element_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_spirit_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_spirit_lucky_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_spirit_current_facade_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_spirit_horse_facade_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_spirit_wing_facade_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rune_slot_data_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_legendary_weapon_pieces_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageAttrActorField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageAttrActorField");

  xfer += oprot->writeFieldBegin("noble_level_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->noble_level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("noble_used_item_count_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->noble_used_item_count_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("noble_max_hp_add_value_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->noble_max_hp_add_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("noble_max_mp_add_value_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->noble_max_mp_add_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("noble_physics_attack_add_value_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->noble_physics_attack_add_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("noble_physics_defence_add_value_", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->noble_physics_defence_add_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("noble_magic_attack_add_value_", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->noble_magic_attack_add_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("noble_magic_defence_add_value_", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->noble_magic_defence_add_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("noble_dodge_add_value_", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->noble_dodge_add_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("noble_crit_add_value_", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->noble_crit_add_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("noble_ignore_defence_add_value_", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->noble_ignore_defence_add_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sword_avail_step_", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->sword_avail_step_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sword_current_step_", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->sword_current_step_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sword_lucky_value_", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->sword_lucky_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sword_gain_time_", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->sword_gain_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("element_level_", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->element_level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("spirit_level_", ::apache::thrift::protocol::T_I32, 18);
  xfer += oprot->writeI32(this->spirit_level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("spirit_lucky_value_", ::apache::thrift::protocol::T_I32, 19);
  xfer += oprot->writeI32(this->spirit_lucky_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("spirit_current_facade_type_", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32(this->spirit_current_facade_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("spirit_horse_facade_id_", ::apache::thrift::protocol::T_I32, 21);
  xfer += oprot->writeI32(this->spirit_horse_facade_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("spirit_wing_facade_id_", ::apache::thrift::protocol::T_I32, 22);
  xfer += oprot->writeI32(this->spirit_wing_facade_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rune_slot_data_", ::apache::thrift::protocol::T_STRING, 23);
  xfer += oprot->writeString(this->rune_slot_data_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("legendary_weapon_pieces_", ::apache::thrift::protocol::T_STRING, 24);
  xfer += oprot->writeString(this->legendary_weapon_pieces_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageAttrActorField &a, StorageAttrActorField &b) {
  using ::std::swap;
  swap(a.noble_level_, b.noble_level_);
  swap(a.noble_used_item_count_, b.noble_used_item_count_);
  swap(a.noble_max_hp_add_value_, b.noble_max_hp_add_value_);
  swap(a.noble_max_mp_add_value_, b.noble_max_mp_add_value_);
  swap(a.noble_physics_attack_add_value_, b.noble_physics_attack_add_value_);
  swap(a.noble_physics_defence_add_value_, b.noble_physics_defence_add_value_);
  swap(a.noble_magic_attack_add_value_, b.noble_magic_attack_add_value_);
  swap(a.noble_magic_defence_add_value_, b.noble_magic_defence_add_value_);
  swap(a.noble_dodge_add_value_, b.noble_dodge_add_value_);
  swap(a.noble_crit_add_value_, b.noble_crit_add_value_);
  swap(a.noble_ignore_defence_add_value_, b.noble_ignore_defence_add_value_);
  swap(a.sword_avail_step_, b.sword_avail_step_);
  swap(a.sword_current_step_, b.sword_current_step_);
  swap(a.sword_lucky_value_, b.sword_lucky_value_);
  swap(a.sword_gain_time_, b.sword_gain_time_);
  swap(a.element_level_, b.element_level_);
  swap(a.spirit_level_, b.spirit_level_);
  swap(a.spirit_lucky_value_, b.spirit_lucky_value_);
  swap(a.spirit_current_facade_type_, b.spirit_current_facade_type_);
  swap(a.spirit_horse_facade_id_, b.spirit_horse_facade_id_);
  swap(a.spirit_wing_facade_id_, b.spirit_wing_facade_id_);
  swap(a.rune_slot_data_, b.rune_slot_data_);
  swap(a.legendary_weapon_pieces_, b.legendary_weapon_pieces_);
}

const char* StorageAttrActorLoginRequest::ascii_fingerprint = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
const uint8_t StorageAttrActorLoginRequest::binary_fingerprint[16] = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

uint32_t StorageAttrActorLoginRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageAttrActorLoginRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageAttrActorLoginRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageAttrActorLoginRequest &a, StorageAttrActorLoginRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
}

const char* StorageAttrActorLoginResponse::ascii_fingerprint = "A65B1A3E88F2C87C6E4350B264F81A45";
const uint8_t StorageAttrActorLoginResponse::binary_fingerprint[16] = {0xA6,0x5B,0x1A,0x3E,0x88,0xF2,0xC8,0x7C,0x6E,0x43,0x50,0xB2,0x64,0xF8,0x1A,0x45};

uint32_t StorageAttrActorLoginResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;
  bool isset_field_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->result_ = (AttrActorLoginResult::type)ecast0;
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->field_.read(iprot);
          isset_field_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_field_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageAttrActorLoginResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageAttrActorLoginResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->field_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageAttrActorLoginResponse &a, StorageAttrActorLoginResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.field_, b.field_);
}

}} // namespace
