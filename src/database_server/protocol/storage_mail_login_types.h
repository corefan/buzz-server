/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef storage_mail_login_TYPES_H
#define storage_mail_login_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "database_storage_types.h"
#include "mail_types.h"


namespace database { namespace protocol {

struct MailLoadField {
  enum type {
    ID = 0,
    TYPE = 1,
    AFFIX_STATE = 2,
    READ_STATE = 3,
    TITLE = 4,
    CREATE_TIME = 5,
    ADDRESSER = 6,
    MAX = 7
  };
};

extern const std::map<int, const char*> _MailLoadField_VALUES_TO_NAMES;

struct MailLoginResult {
  enum type {
    SUCCESS = 0,
    ERROR_UNKNOWN = 1
  };
};

extern const std::map<int, const char*> _MailLoginResult_VALUES_TO_NAMES;


class MailHead {
 public:

  static const char* ascii_fingerprint; // = "1F89719F9590E01FF87A5E33120054F2";
  static const uint8_t binary_fingerprint[16]; // = {0x1F,0x89,0x71,0x9F,0x95,0x90,0xE0,0x1F,0xF8,0x7A,0x5E,0x33,0x12,0x00,0x54,0xF2};

  MailHead() : title_(), addresser_(), state_(( ::entity::MailReadState::type)0), affix_type_(( ::entity::MailAffixType::type)0), type_(( ::entity::MailType::type)0), time_(0), id_(0) {
  }

  virtual ~MailHead() throw() {}

  std::string title_;
  std::string addresser_;
   ::entity::MailReadState::type state_;
   ::entity::MailAffixType::type affix_type_;
   ::entity::MailType::type type_;
  int64_t time_;
  int32_t id_;

  void __set_title_(const std::string& val) {
    title_ = val;
  }

  void __set_addresser_(const std::string& val) {
    addresser_ = val;
  }

  void __set_state_(const  ::entity::MailReadState::type val) {
    state_ = val;
  }

  void __set_affix_type_(const  ::entity::MailAffixType::type val) {
    affix_type_ = val;
  }

  void __set_type_(const  ::entity::MailType::type val) {
    type_ = val;
  }

  void __set_time_(const int64_t val) {
    time_ = val;
  }

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  bool operator == (const MailHead & rhs) const
  {
    if (!(title_ == rhs.title_))
      return false;
    if (!(addresser_ == rhs.addresser_))
      return false;
    if (!(state_ == rhs.state_))
      return false;
    if (!(affix_type_ == rhs.affix_type_))
      return false;
    if (!(type_ == rhs.type_))
      return false;
    if (!(time_ == rhs.time_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const MailHead &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MailHead & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MailHead &a, MailHead &b);


class StorageMailLoginRequest {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  StorageMailLoginRequest() : id_(0) {
  }

  virtual ~StorageMailLoginRequest() throw() {}

  int64_t id_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  bool operator == (const StorageMailLoginRequest & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const StorageMailLoginRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMailLoginRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageMailLoginRequest &a, StorageMailLoginRequest &b);


class StorageMailLoginResponse {
 public:

  static const char* ascii_fingerprint; // = "4C6385ED8E64D38FDABD537680F139D3";
  static const uint8_t binary_fingerprint[16]; // = {0x4C,0x63,0x85,0xED,0x8E,0x64,0xD3,0x8F,0xDA,0xBD,0x53,0x76,0x80,0xF1,0x39,0xD3};

  StorageMailLoginResponse() : result_((MailLoginResult::type)0), id_(0) {
  }

  virtual ~StorageMailLoginResponse() throw() {}

  MailLoginResult::type result_;
  std::vector<MailHead>  mail_list_;
  int64_t id_;

  void __set_result_(const MailLoginResult::type val) {
    result_ = val;
  }

  void __set_mail_list_(const std::vector<MailHead> & val) {
    mail_list_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  bool operator == (const StorageMailLoginResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (!(mail_list_ == rhs.mail_list_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const StorageMailLoginResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMailLoginResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageMailLoginResponse &a, StorageMailLoginResponse &b);

}} // namespace

#endif
