/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "storage_achieve_login_types.h"

#include <algorithm>

namespace database { namespace protocol {

int _kAchieveFieldValues[] = {
  AchieveField::ACHIEVE_ID,
  AchieveField::FLAG,
  AchieveField::CONDITION1_PARAM1,
  AchieveField::CONDITION1_PARAM2,
  AchieveField::CONDITION1_VALUE,
  AchieveField::CONDITION2_PARAM1,
  AchieveField::CONDITION2_PARAM2,
  AchieveField::CONDITION2_VALUE,
  AchieveField::FINISH_TIME,
  AchieveField::MAX
};
const char* _kAchieveFieldNames[] = {
  "ACHIEVE_ID",
  "FLAG",
  "CONDITION1_PARAM1",
  "CONDITION1_PARAM2",
  "CONDITION1_VALUE",
  "CONDITION2_PARAM1",
  "CONDITION2_PARAM2",
  "CONDITION2_VALUE",
  "FINISH_TIME",
  "MAX"
};
const std::map<int, const char*> _AchieveField_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(10, _kAchieveFieldValues, _kAchieveFieldNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAchieveLoginResultValues[] = {
  AchieveLoginResult::SUCCESS,
  AchieveLoginResult::ERROR_INEXIST,
  AchieveLoginResult::ERROR_UNKNOWN,
  AchieveLoginResult::MAX
};
const char* _kAchieveLoginResultNames[] = {
  "SUCCESS",
  "ERROR_INEXIST",
  "ERROR_UNKNOWN",
  "MAX"
};
const std::map<int, const char*> _AchieveLoginResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kAchieveLoginResultValues, _kAchieveLoginResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAchieveFlagValues[] = {
  AchieveFlag::DEL,
  AchieveFlag::ACTIVE,
  AchieveFlag::FINISH
};
const char* _kAchieveFlagNames[] = {
  "DEL",
  "ACTIVE",
  "FINISH"
};
const std::map<int, const char*> _AchieveFlag_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kAchieveFlagValues, _kAchieveFlagNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* StorageAchieveField::ascii_fingerprint = "027E159CFA8AC9DDF61E609145301D49";
const uint8_t StorageAchieveField::binary_fingerprint[16] = {0x02,0x7E,0x15,0x9C,0xFA,0x8A,0xC9,0xDD,0xF6,0x1E,0x60,0x91,0x45,0x30,0x1D,0x49};

uint32_t StorageAchieveField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_achieve_id_ = false;
  bool isset_condition1_param1_ = false;
  bool isset_condition1_param2_ = false;
  bool isset_condition1_value_ = false;
  bool isset_condition2_param1_ = false;
  bool isset_condition2_param2_ = false;
  bool isset_condition2_value_ = false;
  bool isset_finish_time_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->achieve_id_);
          isset_achieve_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->condition1_param1_);
          isset_condition1_param1_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->condition1_param2_);
          isset_condition1_param2_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->condition1_value_);
          isset_condition1_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->condition2_param1_);
          isset_condition2_param1_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->condition2_param2_);
          isset_condition2_param2_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->condition2_value_);
          isset_condition2_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->finish_time_);
          isset_finish_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_achieve_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_condition1_param1_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_condition1_param2_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_condition1_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_condition2_param1_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_condition2_param2_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_condition2_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_finish_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageAchieveField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageAchieveField");

  xfer += oprot->writeFieldBegin("achieve_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->achieve_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("condition1_param1_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->condition1_param1_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("condition1_param2_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->condition1_param2_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("condition1_value_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->condition1_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("condition2_param1_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->condition2_param1_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("condition2_param2_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->condition2_param2_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("condition2_value_", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->condition2_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("finish_time_", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->finish_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageAchieveField &a, StorageAchieveField &b) {
  using ::std::swap;
  swap(a.achieve_id_, b.achieve_id_);
  swap(a.condition1_param1_, b.condition1_param1_);
  swap(a.condition1_param2_, b.condition1_param2_);
  swap(a.condition1_value_, b.condition1_value_);
  swap(a.condition2_param1_, b.condition2_param1_);
  swap(a.condition2_param2_, b.condition2_param2_);
  swap(a.condition2_value_, b.condition2_value_);
  swap(a.finish_time_, b.finish_time_);
}

const char* StorageAchieveFinishField::ascii_fingerprint = "9C2A05F173B50306037BDE9AE30E1B99";
const uint8_t StorageAchieveFinishField::binary_fingerprint[16] = {0x9C,0x2A,0x05,0xF1,0x73,0xB5,0x03,0x06,0x03,0x7B,0xDE,0x9A,0xE3,0x0E,0x1B,0x99};

uint32_t StorageAchieveFinishField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_achieve_id_ = false;
  bool isset_finish_time_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->achieve_id_);
          isset_achieve_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->finish_time_);
          isset_finish_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_achieve_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_finish_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageAchieveFinishField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageAchieveFinishField");

  xfer += oprot->writeFieldBegin("achieve_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->achieve_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("finish_time_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->finish_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageAchieveFinishField &a, StorageAchieveFinishField &b) {
  using ::std::swap;
  swap(a.achieve_id_, b.achieve_id_);
  swap(a.finish_time_, b.finish_time_);
}

const char* StorageAchieveLoginRequest::ascii_fingerprint = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
const uint8_t StorageAchieveLoginRequest::binary_fingerprint[16] = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

uint32_t StorageAchieveLoginRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageAchieveLoginRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageAchieveLoginRequest");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageAchieveLoginRequest &a, StorageAchieveLoginRequest &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
}

const char* StorageAchieveLoginResponse::ascii_fingerprint = "0881C54FE106022985C13A9E5E482908";
const uint8_t StorageAchieveLoginResponse::binary_fingerprint[16] = {0x08,0x81,0xC5,0x4F,0xE1,0x06,0x02,0x29,0x85,0xC1,0x3A,0x9E,0x5E,0x48,0x29,0x08};

uint32_t StorageAchieveLoginResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_achieves_ = false;
  bool isset_finish_achieves_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->achieves_.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->achieves_.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->achieves_[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_achieves_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->finish_achieves_.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->finish_achieves_.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += this->finish_achieves_[_i9].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_finish_achieves_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast10;
          xfer += iprot->readI32(ecast10);
          this->result_ = (AchieveLoginResult::type)ecast10;
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_achieves_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_finish_achieves_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageAchieveLoginResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageAchieveLoginResponse");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("achieves_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->achieves_.size()));
    std::vector<StorageAchieveField> ::const_iterator _iter11;
    for (_iter11 = this->achieves_.begin(); _iter11 != this->achieves_.end(); ++_iter11)
    {
      xfer += (*_iter11).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("finish_achieves_", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->finish_achieves_.size()));
    std::vector<StorageAchieveFinishField> ::const_iterator _iter12;
    for (_iter12 = this->finish_achieves_.begin(); _iter12 != this->finish_achieves_.end(); ++_iter12)
    {
      xfer += (*_iter12).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageAchieveLoginResponse &a, StorageAchieveLoginResponse &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.achieves_, b.achieves_);
  swap(a.finish_achieves_, b.finish_achieves_);
  swap(a.result_, b.result_);
}

}} // namespace
