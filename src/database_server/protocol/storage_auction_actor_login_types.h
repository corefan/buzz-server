/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef storage_auction_actor_login_TYPES_H
#define storage_auction_actor_login_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace database { namespace protocol {

struct AuctionActorField {
  enum type {
    SELL_ITEMS = 0,
    BUY_ITEMS = 1,
    HISTORY = 2,
    MAX = 3
  };
};

extern const std::map<int, const char*> _AuctionActorField_VALUES_TO_NAMES;

struct AuctionActorLoginResult {
  enum type {
    SUCCESS = 0,
    ERROR_UNKNOWN = 1,
    MAX = 2
  };
};

extern const std::map<int, const char*> _AuctionActorLoginResult_VALUES_TO_NAMES;


class StorageAuctionActorField {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  StorageAuctionActorField() : sell_items_(), buy_items_(), history_() {
  }

  virtual ~StorageAuctionActorField() throw() {}

  std::string sell_items_;
  std::string buy_items_;
  std::string history_;

  void __set_sell_items_(const std::string& val) {
    sell_items_ = val;
  }

  void __set_buy_items_(const std::string& val) {
    buy_items_ = val;
  }

  void __set_history_(const std::string& val) {
    history_ = val;
  }

  bool operator == (const StorageAuctionActorField & rhs) const
  {
    if (!(sell_items_ == rhs.sell_items_))
      return false;
    if (!(buy_items_ == rhs.buy_items_))
      return false;
    if (!(history_ == rhs.history_))
      return false;
    return true;
  }
  bool operator != (const StorageAuctionActorField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageAuctionActorField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageAuctionActorField &a, StorageAuctionActorField &b);

typedef struct _StorageAuctionActorLoginRequest__isset {
  _StorageAuctionActorLoginRequest__isset() : offline_load_(false), offline_task_id_(false) {}
  bool offline_load_;
  bool offline_task_id_;
} _StorageAuctionActorLoginRequest__isset;

class StorageAuctionActorLoginRequest {
 public:

  static const char* ascii_fingerprint; // = "F5E236E76F6B26AEDFAED3A0E6551651";
  static const uint8_t binary_fingerprint[16]; // = {0xF5,0xE2,0x36,0xE7,0x6F,0x6B,0x26,0xAE,0xDF,0xAE,0xD3,0xA0,0xE6,0x55,0x16,0x51};

  StorageAuctionActorLoginRequest() : actor_id_(0), offline_load_(0), offline_task_id_(0) {
  }

  virtual ~StorageAuctionActorLoginRequest() throw() {}

  int64_t actor_id_;
  bool offline_load_;
  int64_t offline_task_id_;

  _StorageAuctionActorLoginRequest__isset __isset;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_offline_load_(const bool val) {
    offline_load_ = val;
    __isset.offline_load_ = true;
  }

  void __set_offline_task_id_(const int64_t val) {
    offline_task_id_ = val;
    __isset.offline_task_id_ = true;
  }

  bool operator == (const StorageAuctionActorLoginRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (__isset.offline_load_ != rhs.__isset.offline_load_)
      return false;
    else if (__isset.offline_load_ && !(offline_load_ == rhs.offline_load_))
      return false;
    if (__isset.offline_task_id_ != rhs.__isset.offline_task_id_)
      return false;
    else if (__isset.offline_task_id_ && !(offline_task_id_ == rhs.offline_task_id_))
      return false;
    return true;
  }
  bool operator != (const StorageAuctionActorLoginRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageAuctionActorLoginRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageAuctionActorLoginRequest &a, StorageAuctionActorLoginRequest &b);


class StorageAuctionActorLoginResponse {
 public:

  static const char* ascii_fingerprint; // = "9686679C94D43D75F2B35A0BED2E4003";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0x86,0x67,0x9C,0x94,0xD4,0x3D,0x75,0xF2,0xB3,0x5A,0x0B,0xED,0x2E,0x40,0x03};

  StorageAuctionActorLoginResponse() : result_((AuctionActorLoginResult::type)0) {
  }

  virtual ~StorageAuctionActorLoginResponse() throw() {}

  AuctionActorLoginResult::type result_;
  StorageAuctionActorField field_;

  void __set_result_(const AuctionActorLoginResult::type val) {
    result_ = val;
  }

  void __set_field_(const StorageAuctionActorField& val) {
    field_ = val;
  }

  bool operator == (const StorageAuctionActorLoginResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (!(field_ == rhs.field_))
      return false;
    return true;
  }
  bool operator != (const StorageAuctionActorLoginResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageAuctionActorLoginResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageAuctionActorLoginResponse &a, StorageAuctionActorLoginResponse &b);

}} // namespace

#endif
