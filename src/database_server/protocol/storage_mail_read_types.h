/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef storage_mail_read_TYPES_H
#define storage_mail_read_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "mail_types.h"


namespace database { namespace protocol {

struct MailReadField {
  enum type {
    CONTEXT = 0,
    ITEM1 = 1,
    ITEM1_NUM = 2,
    ITEM2 = 3,
    ITEM2_NUM = 4,
    ITEM3 = 5,
    ITEM3_NUM = 6,
    ITEM4 = 7,
    ITEM4_NUM = 8,
    ITEM5 = 9,
    ITEM5_NUM = 10,
    GOLD = 11,
    FREEDOM_DOLLARS = 12,
    MAX = 13
  };
};

extern const std::map<int, const char*> _MailReadField_VALUES_TO_NAMES;


class StorageReadMailRequest {
 public:

  static const char* ascii_fingerprint; // = "9C2A05F173B50306037BDE9AE30E1B99";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x2A,0x05,0xF1,0x73,0xB5,0x03,0x06,0x03,0x7B,0xDE,0x9A,0xE3,0x0E,0x1B,0x99};

  StorageReadMailRequest() : mail_id_(0), id_(0) {
  }

  virtual ~StorageReadMailRequest() throw() {}

  int32_t mail_id_;
  int64_t id_;

  void __set_mail_id_(const int32_t val) {
    mail_id_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  bool operator == (const StorageReadMailRequest & rhs) const
  {
    if (!(mail_id_ == rhs.mail_id_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const StorageReadMailRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageReadMailRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageReadMailRequest &a, StorageReadMailRequest &b);


class StorageReadMailResponse {
 public:

  static const char* ascii_fingerprint; // = "6FDCE32D599F88A07698BD7083300048";
  static const uint8_t binary_fingerprint[16]; // = {0x6F,0xDC,0xE3,0x2D,0x59,0x9F,0x88,0xA0,0x76,0x98,0xBD,0x70,0x83,0x30,0x00,0x48};

  StorageReadMailResponse() : context_(), id_(0), mail_id_(0) {
  }

  virtual ~StorageReadMailResponse() throw() {}

   ::entity::MailAffix affix_;
  std::string context_;
  int64_t id_;
  int32_t mail_id_;

  void __set_affix_(const  ::entity::MailAffix& val) {
    affix_ = val;
  }

  void __set_context_(const std::string& val) {
    context_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_mail_id_(const int32_t val) {
    mail_id_ = val;
  }

  bool operator == (const StorageReadMailResponse & rhs) const
  {
    if (!(affix_ == rhs.affix_))
      return false;
    if (!(context_ == rhs.context_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(mail_id_ == rhs.mail_id_))
      return false;
    return true;
  }
  bool operator != (const StorageReadMailResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageReadMailResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageReadMailResponse &a, StorageReadMailResponse &b);

}} // namespace

#endif
