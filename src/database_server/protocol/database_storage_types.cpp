/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "database_storage_types.h"

#include <algorithm>

namespace database { namespace protocol {

int _kStorageTypeValues[] = {
  StorageType::STORAGE_START,
  StorageType::STORAGE_TEST_ECHO,
  StorageType::STORAGE_TEST_SUM,
  StorageType::STORAGE_CHECK_SESSION,
  StorageType::STORAGE_ACTOR_ONLINE,
  StorageType::STORAGE_ACTOR_LOGOUT_CENTER,
  StorageType::STORAGE_WORLD_DATA_SAVE,
  StorageType::STORAGE_ACTOR_LOGIN,
  StorageType::STORAGE_ACTOR_SAVE,
  StorageType::STORAGE_COOLING_LOGIN,
  StorageType::STORAGE_COOLING_SAVE,
  StorageType::STORAGE_SKILL_LOGIN,
  StorageType::STORAGE_SKILL_SAVE,
  StorageType::STORAGE_BUFF_LOGIN,
  StorageType::STORAGE_BUFF_SAVE,
  StorageType::STORAGE_ITEM_ACTOR_LOGIN,
  StorageType::STORAGE_ITEM_ACTOR_SAVE,
  StorageType::STORAGE_ITEM_LOGIN,
  StorageType::STORAGE_ITEM_SAVE,
  StorageType::STORAGE_GEM_LOGIN,
  StorageType::STORAGE_GEM_SAVE,
  StorageType::STORAGE_SOUL_LOGIN,
  StorageType::STORAGE_SOUL_SAVE,
  StorageType::STORAGE_SOUL_ACTOR_LOGIN,
  StorageType::STORAGE_SOUL_ACTOR_SAVE,
  StorageType::STORAGE_TASK_LOGIN,
  StorageType::STORAGE_TASK_SAVE,
  StorageType::STORAGE_TASK_ACTOR_LOGIN,
  StorageType::STORAGE_TASK_ACTOR_SAVE,
  StorageType::STORAGE_ATTR_ACTOR_LOGIN,
  StorageType::STORAGE_ATTR_ACTOR_SAVE,
  StorageType::STORAGE_SPIRIT_FACADE_LOGIN,
  StorageType::STORAGE_SPIRIT_FACADE_SAVE,
  StorageType::STORAGE_MAIL_LOGIN,
  StorageType::STORAGE_MAIL_ADD,
  StorageType::STORAGE_MAIL_DEL,
  StorageType::STORAGE_MAIL_PICK_AFFIX,
  StorageType::STORAGE_MAIL_READ,
  StorageType::STORAGE_MAIL_AFFIX_STATE,
  StorageType::STORAGE_SOCIAL_ACTOR_LOGIN,
  StorageType::STORAGE_SOCIAL_ACTOR_SAVE,
  StorageType::STORAGE_GUILD_DEL,
  StorageType::STORAGE_GUILD_SAVE,
  StorageType::STORAGE_GUILD_ACTOR_LOGIN,
  StorageType::STORAGE_GUILD_ACTOR_SAVE,
  StorageType::STORAGE_PLAYING_ACTOR_LOGIN,
  StorageType::STORAGE_PLAYING_ACTOR_SAVE,
  StorageType::STORAGE_AUCTION_ACTOR_LOGIN,
  StorageType::STORAGE_AUCTION_ACTOR_SAVE,
  StorageType::STORAGE_AUCTION_TRANSACTION_DEL,
  StorageType::STORAGE_AUCTION_TRANSACTION_SAVE,
  StorageType::STORAGE_ACHIEVE_LOGIN,
  StorageType::STORAGE_ACHIEVE_SAVE,
  StorageType::STORAGE_WELFARE_LOAD,
  StorageType::STORAGE_WELFARE_SAVE,
  StorageType::STORAGE_MAX
};
const char* _kStorageTypeNames[] = {
  "STORAGE_START",
  "STORAGE_TEST_ECHO",
  "STORAGE_TEST_SUM",
  "STORAGE_CHECK_SESSION",
  "STORAGE_ACTOR_ONLINE",
  "STORAGE_ACTOR_LOGOUT_CENTER",
  "STORAGE_WORLD_DATA_SAVE",
  "STORAGE_ACTOR_LOGIN",
  "STORAGE_ACTOR_SAVE",
  "STORAGE_COOLING_LOGIN",
  "STORAGE_COOLING_SAVE",
  "STORAGE_SKILL_LOGIN",
  "STORAGE_SKILL_SAVE",
  "STORAGE_BUFF_LOGIN",
  "STORAGE_BUFF_SAVE",
  "STORAGE_ITEM_ACTOR_LOGIN",
  "STORAGE_ITEM_ACTOR_SAVE",
  "STORAGE_ITEM_LOGIN",
  "STORAGE_ITEM_SAVE",
  "STORAGE_GEM_LOGIN",
  "STORAGE_GEM_SAVE",
  "STORAGE_SOUL_LOGIN",
  "STORAGE_SOUL_SAVE",
  "STORAGE_SOUL_ACTOR_LOGIN",
  "STORAGE_SOUL_ACTOR_SAVE",
  "STORAGE_TASK_LOGIN",
  "STORAGE_TASK_SAVE",
  "STORAGE_TASK_ACTOR_LOGIN",
  "STORAGE_TASK_ACTOR_SAVE",
  "STORAGE_ATTR_ACTOR_LOGIN",
  "STORAGE_ATTR_ACTOR_SAVE",
  "STORAGE_SPIRIT_FACADE_LOGIN",
  "STORAGE_SPIRIT_FACADE_SAVE",
  "STORAGE_MAIL_LOGIN",
  "STORAGE_MAIL_ADD",
  "STORAGE_MAIL_DEL",
  "STORAGE_MAIL_PICK_AFFIX",
  "STORAGE_MAIL_READ",
  "STORAGE_MAIL_AFFIX_STATE",
  "STORAGE_SOCIAL_ACTOR_LOGIN",
  "STORAGE_SOCIAL_ACTOR_SAVE",
  "STORAGE_GUILD_DEL",
  "STORAGE_GUILD_SAVE",
  "STORAGE_GUILD_ACTOR_LOGIN",
  "STORAGE_GUILD_ACTOR_SAVE",
  "STORAGE_PLAYING_ACTOR_LOGIN",
  "STORAGE_PLAYING_ACTOR_SAVE",
  "STORAGE_AUCTION_ACTOR_LOGIN",
  "STORAGE_AUCTION_ACTOR_SAVE",
  "STORAGE_AUCTION_TRANSACTION_DEL",
  "STORAGE_AUCTION_TRANSACTION_SAVE",
  "STORAGE_ACHIEVE_LOGIN",
  "STORAGE_ACHIEVE_SAVE",
  "STORAGE_WELFARE_LOAD",
  "STORAGE_WELFARE_SAVE",
  "STORAGE_MAX"
};
const std::map<int, const char*> _StorageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(56, _kStorageTypeValues, _kStorageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* StorageTestEchoRequest::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t StorageTestEchoRequest::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

uint32_t StorageTestEchoRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_argu1_ = false;
  bool isset_argu2_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->argu1_);
          isset_argu1_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->argu2_);
          isset_argu2_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_argu1_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_argu2_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageTestEchoRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageTestEchoRequest");

  xfer += oprot->writeFieldBegin("argu1_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->argu1_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("argu2_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->argu2_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageTestEchoRequest &a, StorageTestEchoRequest &b) {
  using ::std::swap;
  swap(a.argu1_, b.argu1_);
  swap(a.argu2_, b.argu2_);
}

const char* StorageTestEchoResponse::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t StorageTestEchoResponse::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

uint32_t StorageTestEchoResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_retvalue1_ = false;
  bool isset_retvalue2_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->retvalue1_);
          isset_retvalue1_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->retvalue2_);
          isset_retvalue2_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_retvalue1_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_retvalue2_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageTestEchoResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageTestEchoResponse");

  xfer += oprot->writeFieldBegin("retvalue1_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->retvalue1_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("retvalue2_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->retvalue2_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageTestEchoResponse &a, StorageTestEchoResponse &b) {
  using ::std::swap;
  swap(a.retvalue1_, b.retvalue1_);
  swap(a.retvalue2_, b.retvalue2_);
}

const char* StorageTestSumRequest::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t StorageTestSumRequest::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

uint32_t StorageTestSumRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_argu1_ = false;
  bool isset_argu2_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->argu1_);
          isset_argu1_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->argu2_);
          isset_argu2_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_argu1_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_argu2_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageTestSumRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageTestSumRequest");

  xfer += oprot->writeFieldBegin("argu1_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->argu1_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("argu2_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->argu2_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageTestSumRequest &a, StorageTestSumRequest &b) {
  using ::std::swap;
  swap(a.argu1_, b.argu1_);
  swap(a.argu2_, b.argu2_);
}

const char* StorageTestSumResponse::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t StorageTestSumResponse::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t StorageTestSumResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_sum_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sum_);
          isset_sum_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_sum_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageTestSumResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageTestSumResponse");

  xfer += oprot->writeFieldBegin("sum_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sum_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageTestSumResponse &a, StorageTestSumResponse &b) {
  using ::std::swap;
  swap(a.sum_, b.sum_);
}

}} // namespace
