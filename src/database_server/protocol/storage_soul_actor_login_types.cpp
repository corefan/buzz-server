/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "storage_soul_actor_login_types.h"

#include <algorithm>

namespace database { namespace protocol {

int _kSoulActorFieldValues[] = {
  SoulActorField::AXE_SETTING,
  SoulActorField::SHOOT_SETTING,
  SoulActorField::MAGIC_SETTING,
  SoulActorField::SETTINGS,
  SoulActorField::ALTAR_SUMMON_PAID,
  SoulActorField::ALTAR_FREE_SUMMON_TIMES,
  SoulActorField::ALTAR_CARDS,
  SoulActorField::ALTAR_CARD_BIND,
  SoulActorField::CURRENT_ENERGY,
  SoulActorField::MAX
};
const char* _kSoulActorFieldNames[] = {
  "AXE_SETTING",
  "SHOOT_SETTING",
  "MAGIC_SETTING",
  "SETTINGS",
  "ALTAR_SUMMON_PAID",
  "ALTAR_FREE_SUMMON_TIMES",
  "ALTAR_CARDS",
  "ALTAR_CARD_BIND",
  "CURRENT_ENERGY",
  "MAX"
};
const std::map<int, const char*> _SoulActorField_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(10, _kSoulActorFieldValues, _kSoulActorFieldNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSoulActorLoginResultValues[] = {
  SoulActorLoginResult::SUCCESS,
  SoulActorLoginResult::ERROR_UNKNOWN
};
const char* _kSoulActorLoginResultNames[] = {
  "SUCCESS",
  "ERROR_UNKNOWN"
};
const std::map<int, const char*> _SoulActorLoginResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kSoulActorLoginResultValues, _kSoulActorLoginResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* StorageSoulActorField::ascii_fingerprint = "54BE10CB6FC2FA41B9B73C8621779FFB";
const uint8_t StorageSoulActorField::binary_fingerprint[16] = {0x54,0xBE,0x10,0xCB,0x6F,0xC2,0xFA,0x41,0xB9,0xB7,0x3C,0x86,0x21,0x77,0x9F,0xFB};

uint32_t StorageSoulActorField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_axe_setting_ = false;
  bool isset_shoot_setting_ = false;
  bool isset_magic_setting_ = false;
  bool isset_settings_ = false;
  bool isset_altar_summon_paid_ = false;
  bool isset_altar_free_summon_times_ = false;
  bool isset_altar_cards_ = false;
  bool isset_altar_card_bind_ = false;
  bool isset_current_energy_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->axe_setting_);
          isset_axe_setting_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->shoot_setting_);
          isset_shoot_setting_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->magic_setting_);
          isset_magic_setting_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->settings_);
          isset_settings_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->altar_summon_paid_);
          isset_altar_summon_paid_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->altar_free_summon_times_);
          isset_altar_free_summon_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->altar_cards_);
          isset_altar_cards_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->altar_card_bind_);
          isset_altar_card_bind_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->current_energy_);
          isset_current_energy_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_axe_setting_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_shoot_setting_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_magic_setting_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_settings_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_altar_summon_paid_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_altar_free_summon_times_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_altar_cards_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_altar_card_bind_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_current_energy_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageSoulActorField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageSoulActorField");

  xfer += oprot->writeFieldBegin("axe_setting_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->axe_setting_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("shoot_setting_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->shoot_setting_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("magic_setting_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->magic_setting_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("settings_", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->settings_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("altar_summon_paid_", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->altar_summon_paid_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("altar_free_summon_times_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->altar_free_summon_times_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("altar_cards_", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->altar_cards_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("altar_card_bind_", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->altar_card_bind_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("current_energy_", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->current_energy_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageSoulActorField &a, StorageSoulActorField &b) {
  using ::std::swap;
  swap(a.axe_setting_, b.axe_setting_);
  swap(a.shoot_setting_, b.shoot_setting_);
  swap(a.magic_setting_, b.magic_setting_);
  swap(a.settings_, b.settings_);
  swap(a.altar_summon_paid_, b.altar_summon_paid_);
  swap(a.altar_free_summon_times_, b.altar_free_summon_times_);
  swap(a.altar_cards_, b.altar_cards_);
  swap(a.altar_card_bind_, b.altar_card_bind_);
  swap(a.current_energy_, b.current_energy_);
}

const char* StorageSoulActorLoginRequest::ascii_fingerprint = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
const uint8_t StorageSoulActorLoginRequest::binary_fingerprint[16] = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

uint32_t StorageSoulActorLoginRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageSoulActorLoginRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageSoulActorLoginRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageSoulActorLoginRequest &a, StorageSoulActorLoginRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
}

const char* StorageSoulActorLoginResponse::ascii_fingerprint = "DD206C7EE30E363F4D8EDD6D53D63DF2";
const uint8_t StorageSoulActorLoginResponse::binary_fingerprint[16] = {0xDD,0x20,0x6C,0x7E,0xE3,0x0E,0x36,0x3F,0x4D,0x8E,0xDD,0x6D,0x53,0xD6,0x3D,0xF2};

uint32_t StorageSoulActorLoginResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;
  bool isset_field_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->result_ = (SoulActorLoginResult::type)ecast0;
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->field_.read(iprot);
          isset_field_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_field_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageSoulActorLoginResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageSoulActorLoginResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->field_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageSoulActorLoginResponse &a, StorageSoulActorLoginResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.field_, b.field_);
}

}} // namespace
