/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "storage_gem_login_types.h"

#include <algorithm>

namespace database { namespace protocol {

int _kGemFieldValues[] = {
  GemField::LOCATION_TYPE,
  GemField::LOCATION_INDEX,
  GemField::GEM_ID,
  GemField::GEM_LEVEL,
  GemField::GEM_EXP,
  GemField::LOCKED,
  GemField::MAX
};
const char* _kGemFieldNames[] = {
  "LOCATION_TYPE",
  "LOCATION_INDEX",
  "GEM_ID",
  "GEM_LEVEL",
  "GEM_EXP",
  "LOCKED",
  "MAX"
};
const std::map<int, const char*> _GemField_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kGemFieldValues, _kGemFieldNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kGemLoginResultValues[] = {
  GemLoginResult::SUCCESS,
  GemLoginResult::ERROR_UNKNOWN
};
const char* _kGemLoginResultNames[] = {
  "SUCCESS",
  "ERROR_UNKNOWN"
};
const std::map<int, const char*> _GemLoginResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kGemLoginResultValues, _kGemLoginResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* StorageGemField::ascii_fingerprint = "DE1C18EECDE6FED79A97C079E85426FA";
const uint8_t StorageGemField::binary_fingerprint[16] = {0xDE,0x1C,0x18,0xEE,0xCD,0xE6,0xFE,0xD7,0x9A,0x97,0xC0,0x79,0xE8,0x54,0x26,0xFA};

uint32_t StorageGemField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_location_type_ = false;
  bool isset_location_index_ = false;
  bool isset_gem_id_ = false;
  bool isset_gem_level_ = false;
  bool isset_gem_exp_ = false;
  bool isset_locked_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->location_type_);
          isset_location_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->location_index_);
          isset_location_index_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gem_id_);
          isset_gem_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gem_level_);
          isset_gem_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gem_exp_);
          isset_gem_exp_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->locked_);
          isset_locked_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_location_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_location_index_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gem_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gem_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gem_exp_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_locked_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageGemField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageGemField");

  xfer += oprot->writeFieldBegin("location_type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->location_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("location_index_", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->location_index_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gem_id_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->gem_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gem_level_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->gem_level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gem_exp_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->gem_exp_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("locked_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->locked_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageGemField &a, StorageGemField &b) {
  using ::std::swap;
  swap(a.location_type_, b.location_type_);
  swap(a.location_index_, b.location_index_);
  swap(a.gem_id_, b.gem_id_);
  swap(a.gem_level_, b.gem_level_);
  swap(a.gem_exp_, b.gem_exp_);
  swap(a.locked_, b.locked_);
}

const char* StorageGemLoginRequest::ascii_fingerprint = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
const uint8_t StorageGemLoginRequest::binary_fingerprint[16] = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

uint32_t StorageGemLoginRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageGemLoginRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageGemLoginRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageGemLoginRequest &a, StorageGemLoginRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
}

const char* StorageGemLoginResponse::ascii_fingerprint = "C39010F48C88EC5865A3E83845F51814";
const uint8_t StorageGemLoginResponse::binary_fingerprint[16] = {0xC3,0x90,0x10,0xF4,0x8C,0x88,0xEC,0x58,0x65,0xA3,0xE8,0x38,0x45,0xF5,0x18,0x14};

uint32_t StorageGemLoginResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;
  bool isset_fields_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->result_ = (GemLoginResult::type)ecast0;
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->fields_.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readListBegin(_etype4, _size1);
            this->fields_.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += this->fields_[_i5].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fields_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageGemLoginResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageGemLoginResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fields_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->fields_.size()));
    std::vector<StorageGemField> ::const_iterator _iter6;
    for (_iter6 = this->fields_.begin(); _iter6 != this->fields_.end(); ++_iter6)
    {
      xfer += (*_iter6).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageGemLoginResponse &a, StorageGemLoginResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.fields_, b.fields_);
}

}} // namespace
