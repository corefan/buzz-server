/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "storage_guild_save_types.h"

#include <algorithm>

namespace database { namespace protocol {

int _kGuildFieldValues[] = {
  GuildField::ID,
  GuildField::NAME,
  GuildField::LOGO,
  GuildField::LEVEL,
  GuildField::SUPPRESS_JOIN,
  GuildField::PENDING_MEMBERS,
  GuildField::MEMBERS,
  GuildField::ANNOUNCEMENT,
  GuildField::EVENTS,
  GuildField::GOLD,
  GuildField::LIGHT_CRYSTAL,
  GuildField::DARK_CRYSTAL,
  GuildField::HOLY_CRYSTAL,
  GuildField::LIGHT_ATTRIBUTE,
  GuildField::DARK_ATTRIBUTE,
  GuildField::HOLY_ATTRIBUTE,
  GuildField::SHOP_LEVEL,
  GuildField::COLLEGE_LEVEL,
  GuildField::BARRACK_LEVEL,
  GuildField::LAST_SAVE_TIME,
  GuildField::OPENED_PLAYING_GROUPS,
  GuildField::FINISHED_PLAYINGS,
  GuildField::MAX
};
const char* _kGuildFieldNames[] = {
  "ID",
  "NAME",
  "LOGO",
  "LEVEL",
  "SUPPRESS_JOIN",
  "PENDING_MEMBERS",
  "MEMBERS",
  "ANNOUNCEMENT",
  "EVENTS",
  "GOLD",
  "LIGHT_CRYSTAL",
  "DARK_CRYSTAL",
  "HOLY_CRYSTAL",
  "LIGHT_ATTRIBUTE",
  "DARK_ATTRIBUTE",
  "HOLY_ATTRIBUTE",
  "SHOP_LEVEL",
  "COLLEGE_LEVEL",
  "BARRACK_LEVEL",
  "LAST_SAVE_TIME",
  "OPENED_PLAYING_GROUPS",
  "FINISHED_PLAYINGS",
  "MAX"
};
const std::map<int, const char*> _GuildField_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(23, _kGuildFieldValues, _kGuildFieldNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* StorageGuildField::ascii_fingerprint = "2EFA59426B8273B480FB43624AE86971";
const uint8_t StorageGuildField::binary_fingerprint[16] = {0x2E,0xFA,0x59,0x42,0x6B,0x82,0x73,0xB4,0x80,0xFB,0x43,0x62,0x4A,0xE8,0x69,0x71};

uint32_t StorageGuildField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;
  bool isset_name_ = false;
  bool isset_logo_ = false;
  bool isset_level_ = false;
  bool isset_suppress_join_ = false;
  bool isset_pending_members_ = false;
  bool isset_members_ = false;
  bool isset_announcement_ = false;
  bool isset_events_ = false;
  bool isset_gold_ = false;
  bool isset_light_crystal_ = false;
  bool isset_dark_crystal_ = false;
  bool isset_holy_crystal_ = false;
  bool isset_light_attribute_ = false;
  bool isset_dark_attribute_ = false;
  bool isset_holy_attribute_ = false;
  bool isset_shop_level_ = false;
  bool isset_college_level_ = false;
  bool isset_barrack_level_ = false;
  bool isset_opened_playing_groups_ = false;
  bool isset_finished_playings_ = false;
  bool isset_last_save_time_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name_);
          isset_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->logo_);
          isset_logo_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level_);
          isset_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->suppress_join_);
          isset_suppress_join_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pending_members_);
          isset_pending_members_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->members_);
          isset_members_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->announcement_);
          isset_announcement_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->events_);
          isset_events_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gold_);
          isset_gold_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->light_crystal_);
          isset_light_crystal_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dark_crystal_);
          isset_dark_crystal_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->holy_crystal_);
          isset_holy_crystal_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->light_attribute_);
          isset_light_attribute_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dark_attribute_);
          isset_dark_attribute_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->holy_attribute_);
          isset_holy_attribute_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->shop_level_);
          isset_shop_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->college_level_);
          isset_college_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->barrack_level_);
          isset_barrack_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->opened_playing_groups_);
          isset_opened_playing_groups_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->finished_playings_);
          isset_finished_playings_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->last_save_time_);
          isset_last_save_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_name_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_logo_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_suppress_join_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pending_members_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_members_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_announcement_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_events_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gold_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_light_crystal_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dark_crystal_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_holy_crystal_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_light_attribute_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dark_attribute_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_holy_attribute_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_shop_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_college_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_barrack_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_opened_playing_groups_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_finished_playings_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_last_save_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageGuildField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageGuildField");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("logo_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->logo_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("level_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("suppress_join_", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->suppress_join_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pending_members_", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->pending_members_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("members_", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->members_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("announcement_", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->announcement_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("events_", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->events_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gold_", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->gold_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("light_crystal_", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->light_crystal_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dark_crystal_", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->dark_crystal_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("holy_crystal_", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->holy_crystal_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("light_attribute_", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->light_attribute_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dark_attribute_", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->dark_attribute_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("holy_attribute_", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->holy_attribute_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("shop_level_", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->shop_level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("college_level_", ::apache::thrift::protocol::T_I32, 18);
  xfer += oprot->writeI32(this->college_level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("barrack_level_", ::apache::thrift::protocol::T_I32, 19);
  xfer += oprot->writeI32(this->barrack_level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("opened_playing_groups_", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->opened_playing_groups_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("finished_playings_", ::apache::thrift::protocol::T_STRING, 21);
  xfer += oprot->writeString(this->finished_playings_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_save_time_", ::apache::thrift::protocol::T_I64, 22);
  xfer += oprot->writeI64(this->last_save_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageGuildField &a, StorageGuildField &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.name_, b.name_);
  swap(a.logo_, b.logo_);
  swap(a.level_, b.level_);
  swap(a.suppress_join_, b.suppress_join_);
  swap(a.pending_members_, b.pending_members_);
  swap(a.members_, b.members_);
  swap(a.announcement_, b.announcement_);
  swap(a.events_, b.events_);
  swap(a.gold_, b.gold_);
  swap(a.light_crystal_, b.light_crystal_);
  swap(a.dark_crystal_, b.dark_crystal_);
  swap(a.holy_crystal_, b.holy_crystal_);
  swap(a.light_attribute_, b.light_attribute_);
  swap(a.dark_attribute_, b.dark_attribute_);
  swap(a.holy_attribute_, b.holy_attribute_);
  swap(a.shop_level_, b.shop_level_);
  swap(a.college_level_, b.college_level_);
  swap(a.barrack_level_, b.barrack_level_);
  swap(a.opened_playing_groups_, b.opened_playing_groups_);
  swap(a.finished_playings_, b.finished_playings_);
  swap(a.last_save_time_, b.last_save_time_);
}

const char* StorageGuildSaveRequest::ascii_fingerprint = "D767E392EB2F5453CA2146D6654A26FD";
const uint8_t StorageGuildSaveRequest::binary_fingerprint[16] = {0xD7,0x67,0xE3,0x92,0xEB,0x2F,0x54,0x53,0xCA,0x21,0x46,0xD6,0x65,0x4A,0x26,0xFD};

uint32_t StorageGuildSaveRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_field_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->field_.read(iprot);
          isset_field_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_field_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageGuildSaveRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageGuildSaveRequest");

  xfer += oprot->writeFieldBegin("field_", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->field_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageGuildSaveRequest &a, StorageGuildSaveRequest &b) {
  using ::std::swap;
  swap(a.field_, b.field_);
}

const char* StorageGuildSaveResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t StorageGuildSaveResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t StorageGuildSaveResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageGuildSaveResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageGuildSaveResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageGuildSaveResponse &a, StorageGuildSaveResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

}} // namespace
