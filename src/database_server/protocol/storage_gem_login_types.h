/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef storage_gem_login_TYPES_H
#define storage_gem_login_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace database { namespace protocol {

struct GemField {
  enum type {
    LOCATION_TYPE = 0,
    LOCATION_INDEX = 1,
    GEM_ID = 2,
    GEM_LEVEL = 3,
    GEM_EXP = 4,
    LOCKED = 5,
    MAX = 6
  };
};

extern const std::map<int, const char*> _GemField_VALUES_TO_NAMES;

struct GemLoginResult {
  enum type {
    SUCCESS = 0,
    ERROR_UNKNOWN = 1
  };
};

extern const std::map<int, const char*> _GemLoginResult_VALUES_TO_NAMES;


class StorageGemField {
 public:

  static const char* ascii_fingerprint; // = "DE1C18EECDE6FED79A97C079E85426FA";
  static const uint8_t binary_fingerprint[16]; // = {0xDE,0x1C,0x18,0xEE,0xCD,0xE6,0xFE,0xD7,0x9A,0x97,0xC0,0x79,0xE8,0x54,0x26,0xFA};

  StorageGemField() : location_type_(0), location_index_(0), gem_id_(0), gem_level_(0), gem_exp_(0), locked_(0) {
  }

  virtual ~StorageGemField() throw() {}

  int32_t location_type_;
  int16_t location_index_;
  int32_t gem_id_;
  int32_t gem_level_;
  int32_t gem_exp_;
  int32_t locked_;

  void __set_location_type_(const int32_t val) {
    location_type_ = val;
  }

  void __set_location_index_(const int16_t val) {
    location_index_ = val;
  }

  void __set_gem_id_(const int32_t val) {
    gem_id_ = val;
  }

  void __set_gem_level_(const int32_t val) {
    gem_level_ = val;
  }

  void __set_gem_exp_(const int32_t val) {
    gem_exp_ = val;
  }

  void __set_locked_(const int32_t val) {
    locked_ = val;
  }

  bool operator == (const StorageGemField & rhs) const
  {
    if (!(location_type_ == rhs.location_type_))
      return false;
    if (!(location_index_ == rhs.location_index_))
      return false;
    if (!(gem_id_ == rhs.gem_id_))
      return false;
    if (!(gem_level_ == rhs.gem_level_))
      return false;
    if (!(gem_exp_ == rhs.gem_exp_))
      return false;
    if (!(locked_ == rhs.locked_))
      return false;
    return true;
  }
  bool operator != (const StorageGemField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageGemField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageGemField &a, StorageGemField &b);


class StorageGemLoginRequest {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  StorageGemLoginRequest() : actor_id_(0) {
  }

  virtual ~StorageGemLoginRequest() throw() {}

  int64_t actor_id_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  bool operator == (const StorageGemLoginRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    return true;
  }
  bool operator != (const StorageGemLoginRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageGemLoginRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageGemLoginRequest &a, StorageGemLoginRequest &b);


class StorageGemLoginResponse {
 public:

  static const char* ascii_fingerprint; // = "C39010F48C88EC5865A3E83845F51814";
  static const uint8_t binary_fingerprint[16]; // = {0xC3,0x90,0x10,0xF4,0x8C,0x88,0xEC,0x58,0x65,0xA3,0xE8,0x38,0x45,0xF5,0x18,0x14};

  StorageGemLoginResponse() : result_((GemLoginResult::type)0) {
  }

  virtual ~StorageGemLoginResponse() throw() {}

  GemLoginResult::type result_;
  std::vector<StorageGemField>  fields_;

  void __set_result_(const GemLoginResult::type val) {
    result_ = val;
  }

  void __set_fields_(const std::vector<StorageGemField> & val) {
    fields_ = val;
  }

  bool operator == (const StorageGemLoginResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (!(fields_ == rhs.fields_))
      return false;
    return true;
  }
  bool operator != (const StorageGemLoginResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageGemLoginResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageGemLoginResponse &a, StorageGemLoginResponse &b);

}} // namespace

#endif
