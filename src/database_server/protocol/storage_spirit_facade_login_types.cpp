/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "storage_spirit_facade_login_types.h"

#include <algorithm>

namespace database { namespace protocol {

int _kSpiritFacadeFieldValues[] = {
  SpiritFacadeField::SPIRIT_FACADE_ID,
  SpiritFacadeField::EXPIRE_TIME,
  SpiritFacadeField::MAX
};
const char* _kSpiritFacadeFieldNames[] = {
  "SPIRIT_FACADE_ID",
  "EXPIRE_TIME",
  "MAX"
};
const std::map<int, const char*> _SpiritFacadeField_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kSpiritFacadeFieldValues, _kSpiritFacadeFieldNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSpiritFacadeLoginResultValues[] = {
  SpiritFacadeLoginResult::SUCCESS,
  SpiritFacadeLoginResult::ERROR_UNKNOWN
};
const char* _kSpiritFacadeLoginResultNames[] = {
  "SUCCESS",
  "ERROR_UNKNOWN"
};
const std::map<int, const char*> _SpiritFacadeLoginResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kSpiritFacadeLoginResultValues, _kSpiritFacadeLoginResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* StorageSpiritFacadeField::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t StorageSpiritFacadeField::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

uint32_t StorageSpiritFacadeField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_spirit_facade_id_ = false;
  bool isset_expire_time_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->spirit_facade_id_);
          isset_spirit_facade_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->expire_time_);
          isset_expire_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_spirit_facade_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_expire_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageSpiritFacadeField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageSpiritFacadeField");

  xfer += oprot->writeFieldBegin("spirit_facade_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->spirit_facade_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("expire_time_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->expire_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageSpiritFacadeField &a, StorageSpiritFacadeField &b) {
  using ::std::swap;
  swap(a.spirit_facade_id_, b.spirit_facade_id_);
  swap(a.expire_time_, b.expire_time_);
}

const char* StorageSpiritFacadeLoginRequest::ascii_fingerprint = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
const uint8_t StorageSpiritFacadeLoginRequest::binary_fingerprint[16] = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

uint32_t StorageSpiritFacadeLoginRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageSpiritFacadeLoginRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageSpiritFacadeLoginRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageSpiritFacadeLoginRequest &a, StorageSpiritFacadeLoginRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
}

const char* StorageSpiritFacadeLoginResponse::ascii_fingerprint = "F004E88FEC75D15061E26676505FFAE0";
const uint8_t StorageSpiritFacadeLoginResponse::binary_fingerprint[16] = {0xF0,0x04,0xE8,0x8F,0xEC,0x75,0xD1,0x50,0x61,0xE2,0x66,0x76,0x50,0x5F,0xFA,0xE0};

uint32_t StorageSpiritFacadeLoginResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;
  bool isset_fields_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->result_ = (SpiritFacadeLoginResult::type)ecast0;
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->fields_.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readListBegin(_etype4, _size1);
            this->fields_.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += this->fields_[_i5].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fields_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageSpiritFacadeLoginResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageSpiritFacadeLoginResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fields_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->fields_.size()));
    std::vector<StorageSpiritFacadeField> ::const_iterator _iter6;
    for (_iter6 = this->fields_.begin(); _iter6 != this->fields_.end(); ++_iter6)
    {
      xfer += (*_iter6).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageSpiritFacadeLoginResponse &a, StorageSpiritFacadeLoginResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.fields_, b.fields_);
}

}} // namespace
