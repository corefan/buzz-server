/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "storage_mail_add_types.h"

#include <algorithm>

namespace database { namespace protocol {

int _kMailAddFieldValues[] = {
  MailAddField::ID,
  MailAddField::ACTOR_ID,
  MailAddField::CREATE_TIME,
  MailAddField::MAX
};
const char* _kMailAddFieldNames[] = {
  "ID",
  "ACTOR_ID",
  "CREATE_TIME",
  "MAX"
};
const std::map<int, const char*> _MailAddField_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kMailAddFieldValues, _kMailAddFieldNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* StorageAddMailRequest::ascii_fingerprint = "DF38EA172FD63BDBEA971309B8279851";
const uint8_t StorageAddMailRequest::binary_fingerprint[16] = {0xDF,0x38,0xEA,0x17,0x2F,0xD6,0x3B,0xDB,0xEA,0x97,0x13,0x09,0xB8,0x27,0x98,0x51};

uint32_t StorageAddMailRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_affix_ = false;
  bool isset_addressee_id_ = false;
  bool isset_addresser_id_ = false;
  bool isset_addresser_ = false;
  bool isset_title_ = false;
  bool isset_context_ = false;
  bool isset_type_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->affix_.read(iprot);
          isset_affix_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->addressee_id_);
          isset_addressee_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->addresser_id_);
          isset_addresser_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->addresser_);
          isset_addresser_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title_);
          isset_title_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->context_);
          isset_context_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type_ = ( ::entity::MailType::type)ecast0;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_affix_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_addressee_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_addresser_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_addresser_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_title_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_context_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageAddMailRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageAddMailRequest");

  xfer += oprot->writeFieldBegin("affix_", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->affix_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("addressee_id_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->addressee_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("addresser_id_", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->addresser_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("addresser_", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->addresser_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title_", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->title_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("context_", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->context_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageAddMailRequest &a, StorageAddMailRequest &b) {
  using ::std::swap;
  swap(a.affix_, b.affix_);
  swap(a.addressee_id_, b.addressee_id_);
  swap(a.addresser_id_, b.addresser_id_);
  swap(a.addresser_, b.addresser_);
  swap(a.title_, b.title_);
  swap(a.context_, b.context_);
  swap(a.type_, b.type_);
}

const char* StorageAddMailResponse::ascii_fingerprint = "22ABB85EDE8D52E41826B594B5C56655";
const uint8_t StorageAddMailResponse::binary_fingerprint[16] = {0x22,0xAB,0xB8,0x5E,0xDE,0x8D,0x52,0xE4,0x18,0x26,0xB5,0x94,0xB5,0xC5,0x66,0x55};

uint32_t StorageAddMailResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_mail_head_ = false;
  bool isset_addressee_id_ = false;
  bool isset_addresser_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->mail_head_.read(iprot);
          isset_mail_head_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->addressee_id_);
          isset_addressee_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->addresser_id_);
          isset_addresser_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_mail_head_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_addressee_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_addresser_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageAddMailResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageAddMailResponse");

  xfer += oprot->writeFieldBegin("mail_head_", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->mail_head_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("addressee_id_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->addressee_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("addresser_id_", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->addresser_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageAddMailResponse &a, StorageAddMailResponse &b) {
  using ::std::swap;
  swap(a.mail_head_, b.mail_head_);
  swap(a.addressee_id_, b.addressee_id_);
  swap(a.addresser_id_, b.addresser_id_);
}

}} // namespace
