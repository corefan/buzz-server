/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "storage_social_actor_login_types.h"

#include <algorithm>

namespace database { namespace protocol {

int _kSocialActorFieldValues[] = {
  SocialActorField::SIGNATURE,
  SocialActorField::FRIENDS,
  SocialActorField::BLACKLIST,
  SocialActorField::ENEMIES,
  SocialActorField::HOMELAND_UPGRADE_START_TIME,
  SocialActorField::HOMELAND_UPGRADE_FINISH_TIME,
  SocialActorField::HOMELAND_TEMPLE_LEVEL,
  SocialActorField::HOMELAND_TEMPLE_HARVEST_TIMES,
  SocialActorField::HOMELAND_TEMPLE_FORCE_HARVEST_TIMES,
  SocialActorField::HOMELAND_TEMPLE_NEXT_HARVEST_TIME,
  SocialActorField::HOMELAND_GOLDMINE_LEVEL,
  SocialActorField::HOMELAND_GOLDMINE_ROBBED_TIMES,
  SocialActorField::HOMELAND_GOLDMINE_LOSS_RATE,
  SocialActorField::HOMELAND_GOLDMINE_NEXT_HARVEST_TIME,
  SocialActorField::HOMELAND_GOLDMINE_ROB_TIMES,
  SocialActorField::HOMELAND_GOLDMINE_NEXT_ROB_TIME,
  SocialActorField::HOMELAND_POOL_LEVEL,
  SocialActorField::HOMELAND_POOL_LAST_HARVEST_TIME,
  SocialActorField::HOMELAND_CHURCH_FREE_PRAY_TIMES,
  SocialActorField::HOMELAND_CHURCH_PAID_PRAY_TIMES,
  SocialActorField::HOMELAND_CHURCH_FREE_REFRESH_TIMES,
  SocialActorField::HOMELAND_CHURCH_CHEST_TYPE,
  SocialActorField::HOMELAND_TREE_LEVEL,
  SocialActorField::HOMELAND_TREE_HARVEST_TIMES,
  SocialActorField::HOMELAND_TREE_STAGE,
  SocialActorField::HOMELAND_TREE_WATERED_TIMES,
  SocialActorField::HOMELAND_TREE_NEXT_WATER_TIME,
  SocialActorField::HOMELAND_TREE_GROWING_FINISH_TIME,
  SocialActorField::HOMELAND_TREE_ASSIST_WATER_TIMES,
  SocialActorField::HOMELAND_TREE_WATERED_ACTORS,
  SocialActorField::HOMELAND_TREE_STOLEN_ACTORS,
  SocialActorField::HOMELAND_TOWER1_LEVEL,
  SocialActorField::HOMELAND_TOWER2_LEVEL,
  SocialActorField::HOMELAND_STRONGHOLD_LEVEL,
  SocialActorField::HOMELAND_STRONGHOLD_NEXT_CALL_SUPPORT_TIME,
  SocialActorField::HOMELAND_STRONGHOLD_SUPPORTED_SOULS,
  SocialActorField::HOMELAND_STRONGHOLD_SUPPORT_SOULS,
  SocialActorField::HOMELAND_STRONGHOLD_SUPPORT_TIMES,
  SocialActorField::HOMELAND_INVADERS,
  SocialActorField::HOMELAND_EVENTS,
  SocialActorField::LAST_SAVE_TIME,
  SocialActorField::SOUL_DATA,
  SocialActorField::MAX
};
const char* _kSocialActorFieldNames[] = {
  "SIGNATURE",
  "FRIENDS",
  "BLACKLIST",
  "ENEMIES",
  "HOMELAND_UPGRADE_START_TIME",
  "HOMELAND_UPGRADE_FINISH_TIME",
  "HOMELAND_TEMPLE_LEVEL",
  "HOMELAND_TEMPLE_HARVEST_TIMES",
  "HOMELAND_TEMPLE_FORCE_HARVEST_TIMES",
  "HOMELAND_TEMPLE_NEXT_HARVEST_TIME",
  "HOMELAND_GOLDMINE_LEVEL",
  "HOMELAND_GOLDMINE_ROBBED_TIMES",
  "HOMELAND_GOLDMINE_LOSS_RATE",
  "HOMELAND_GOLDMINE_NEXT_HARVEST_TIME",
  "HOMELAND_GOLDMINE_ROB_TIMES",
  "HOMELAND_GOLDMINE_NEXT_ROB_TIME",
  "HOMELAND_POOL_LEVEL",
  "HOMELAND_POOL_LAST_HARVEST_TIME",
  "HOMELAND_CHURCH_FREE_PRAY_TIMES",
  "HOMELAND_CHURCH_PAID_PRAY_TIMES",
  "HOMELAND_CHURCH_FREE_REFRESH_TIMES",
  "HOMELAND_CHURCH_CHEST_TYPE",
  "HOMELAND_TREE_LEVEL",
  "HOMELAND_TREE_HARVEST_TIMES",
  "HOMELAND_TREE_STAGE",
  "HOMELAND_TREE_WATERED_TIMES",
  "HOMELAND_TREE_NEXT_WATER_TIME",
  "HOMELAND_TREE_GROWING_FINISH_TIME",
  "HOMELAND_TREE_ASSIST_WATER_TIMES",
  "HOMELAND_TREE_WATERED_ACTORS",
  "HOMELAND_TREE_STOLEN_ACTORS",
  "HOMELAND_TOWER1_LEVEL",
  "HOMELAND_TOWER2_LEVEL",
  "HOMELAND_STRONGHOLD_LEVEL",
  "HOMELAND_STRONGHOLD_NEXT_CALL_SUPPORT_TIME",
  "HOMELAND_STRONGHOLD_SUPPORTED_SOULS",
  "HOMELAND_STRONGHOLD_SUPPORT_SOULS",
  "HOMELAND_STRONGHOLD_SUPPORT_TIMES",
  "HOMELAND_INVADERS",
  "HOMELAND_EVENTS",
  "LAST_SAVE_TIME",
  "SOUL_DATA",
  "MAX"
};
const std::map<int, const char*> _SocialActorField_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(43, _kSocialActorFieldValues, _kSocialActorFieldNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSocialActorLoginResultValues[] = {
  SocialActorLoginResult::SUCCESS,
  SocialActorLoginResult::ERROR_UNKNOWN,
  SocialActorLoginResult::MAX
};
const char* _kSocialActorLoginResultNames[] = {
  "SUCCESS",
  "ERROR_UNKNOWN",
  "MAX"
};
const std::map<int, const char*> _SocialActorLoginResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kSocialActorLoginResultValues, _kSocialActorLoginResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* StorageSocialActorField::ascii_fingerprint = "DE3DC151581E148A58F06761A9E4F3BF";
const uint8_t StorageSocialActorField::binary_fingerprint[16] = {0xDE,0x3D,0xC1,0x51,0x58,0x1E,0x14,0x8A,0x58,0xF0,0x67,0x61,0xA9,0xE4,0xF3,0xBF};

uint32_t StorageSocialActorField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_signature_ = false;
  bool isset_friends_ = false;
  bool isset_blacklist_ = false;
  bool isset_enemies_ = false;
  bool isset_homeland_upgrade_start_time_ = false;
  bool isset_homeland_upgrade_finish_time_ = false;
  bool isset_homeland_temple_level_ = false;
  bool isset_homeland_temple_harvest_times_ = false;
  bool isset_homeland_temple_force_harvest_times_ = false;
  bool isset_homeland_temple_next_harvest_time_ = false;
  bool isset_homeland_goldmine_level_ = false;
  bool isset_homeland_goldmine_robbed_times_ = false;
  bool isset_homeland_goldmine_loss_rate_ = false;
  bool isset_homeland_goldmine_next_harvest_time_ = false;
  bool isset_homeland_goldmine_rob_times_ = false;
  bool isset_homeland_goldmine_next_rob_time_ = false;
  bool isset_homeland_pool_level_ = false;
  bool isset_homeland_pool_last_harvest_time_ = false;
  bool isset_homeland_church_free_pray_times_ = false;
  bool isset_homeland_church_paid_pray_times_ = false;
  bool isset_homeland_church_free_refresh_times_ = false;
  bool isset_homeland_church_chest_type_ = false;
  bool isset_homeland_tree_level_ = false;
  bool isset_homeland_tree_harvest_times_ = false;
  bool isset_homeland_tree_stage_ = false;
  bool isset_homeland_tree_watered_times_ = false;
  bool isset_homeland_tree_next_water_time_ = false;
  bool isset_homeland_tree_growing_finish_time_ = false;
  bool isset_homeland_tree_assist_water_times_ = false;
  bool isset_homeland_tree_watered_actors_ = false;
  bool isset_homeland_tree_stolen_actors_ = false;
  bool isset_homeland_tower1_level_ = false;
  bool isset_homeland_tower2_level_ = false;
  bool isset_homeland_stronghold_level_ = false;
  bool isset_homeland_stronghold_next_call_support_time_ = false;
  bool isset_homeland_stronghold_supported_souls_ = false;
  bool isset_homeland_stronghold_support_souls_ = false;
  bool isset_homeland_stronghold_support_times_ = false;
  bool isset_homeland_invaders_ = false;
  bool isset_homeland_events_ = false;
  bool isset_last_save_time_ = false;
  bool isset_soul_data_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->signature_);
          isset_signature_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->friends_);
          isset_friends_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->blacklist_);
          isset_blacklist_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->enemies_);
          isset_enemies_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->homeland_upgrade_start_time_);
          isset_homeland_upgrade_start_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->homeland_upgrade_finish_time_);
          isset_homeland_upgrade_finish_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->homeland_temple_level_);
          isset_homeland_temple_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->homeland_temple_harvest_times_);
          isset_homeland_temple_harvest_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->homeland_temple_force_harvest_times_);
          isset_homeland_temple_force_harvest_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->homeland_temple_next_harvest_time_);
          isset_homeland_temple_next_harvest_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->homeland_goldmine_level_);
          isset_homeland_goldmine_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->homeland_goldmine_robbed_times_);
          isset_homeland_goldmine_robbed_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->homeland_goldmine_loss_rate_);
          isset_homeland_goldmine_loss_rate_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->homeland_goldmine_next_harvest_time_);
          isset_homeland_goldmine_next_harvest_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->homeland_goldmine_rob_times_);
          isset_homeland_goldmine_rob_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->homeland_goldmine_next_rob_time_);
          isset_homeland_goldmine_next_rob_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->homeland_pool_level_);
          isset_homeland_pool_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->homeland_pool_last_harvest_time_);
          isset_homeland_pool_last_harvest_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->homeland_church_free_pray_times_);
          isset_homeland_church_free_pray_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->homeland_church_paid_pray_times_);
          isset_homeland_church_paid_pray_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->homeland_church_free_refresh_times_);
          isset_homeland_church_free_refresh_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->homeland_church_chest_type_);
          isset_homeland_church_chest_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->homeland_tree_level_);
          isset_homeland_tree_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->homeland_tree_harvest_times_);
          isset_homeland_tree_harvest_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->homeland_tree_stage_);
          isset_homeland_tree_stage_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->homeland_tree_watered_times_);
          isset_homeland_tree_watered_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->homeland_tree_next_water_time_);
          isset_homeland_tree_next_water_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->homeland_tree_growing_finish_time_);
          isset_homeland_tree_growing_finish_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->homeland_tree_assist_water_times_);
          isset_homeland_tree_assist_water_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->homeland_tree_watered_actors_);
          isset_homeland_tree_watered_actors_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->homeland_tree_stolen_actors_);
          isset_homeland_tree_stolen_actors_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->homeland_tower1_level_);
          isset_homeland_tower1_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->homeland_tower2_level_);
          isset_homeland_tower2_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->homeland_stronghold_level_);
          isset_homeland_stronghold_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->homeland_stronghold_next_call_support_time_);
          isset_homeland_stronghold_next_call_support_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->homeland_stronghold_supported_souls_);
          isset_homeland_stronghold_supported_souls_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->homeland_stronghold_support_souls_);
          isset_homeland_stronghold_support_souls_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->homeland_stronghold_support_times_);
          isset_homeland_stronghold_support_times_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->homeland_invaders_);
          isset_homeland_invaders_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->homeland_events_);
          isset_homeland_events_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->last_save_time_);
          isset_last_save_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->soul_data_);
          isset_soul_data_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_signature_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_friends_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_blacklist_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_enemies_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_upgrade_start_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_upgrade_finish_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_temple_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_temple_harvest_times_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_temple_force_harvest_times_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_temple_next_harvest_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_goldmine_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_goldmine_robbed_times_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_goldmine_loss_rate_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_goldmine_next_harvest_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_goldmine_rob_times_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_goldmine_next_rob_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_pool_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_pool_last_harvest_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_church_free_pray_times_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_church_paid_pray_times_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_church_free_refresh_times_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_church_chest_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_tree_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_tree_harvest_times_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_tree_stage_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_tree_watered_times_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_tree_next_water_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_tree_growing_finish_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_tree_assist_water_times_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_tree_watered_actors_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_tree_stolen_actors_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_tower1_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_tower2_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_stronghold_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_stronghold_next_call_support_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_stronghold_supported_souls_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_stronghold_support_souls_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_stronghold_support_times_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_invaders_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homeland_events_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_last_save_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_soul_data_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageSocialActorField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageSocialActorField");

  xfer += oprot->writeFieldBegin("signature_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->signature_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("friends_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->friends_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("blacklist_", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->blacklist_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enemies_", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->enemies_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_upgrade_start_time_", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->homeland_upgrade_start_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_upgrade_finish_time_", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->homeland_upgrade_finish_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_temple_level_", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->homeland_temple_level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_temple_harvest_times_", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->homeland_temple_harvest_times_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_temple_force_harvest_times_", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->homeland_temple_force_harvest_times_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_temple_next_harvest_time_", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->homeland_temple_next_harvest_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_goldmine_level_", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->homeland_goldmine_level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_goldmine_robbed_times_", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->homeland_goldmine_robbed_times_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_goldmine_loss_rate_", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->homeland_goldmine_loss_rate_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_goldmine_next_harvest_time_", ::apache::thrift::protocol::T_I64, 14);
  xfer += oprot->writeI64(this->homeland_goldmine_next_harvest_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_goldmine_rob_times_", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->homeland_goldmine_rob_times_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_goldmine_next_rob_time_", ::apache::thrift::protocol::T_I64, 16);
  xfer += oprot->writeI64(this->homeland_goldmine_next_rob_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_pool_level_", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->homeland_pool_level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_pool_last_harvest_time_", ::apache::thrift::protocol::T_I64, 18);
  xfer += oprot->writeI64(this->homeland_pool_last_harvest_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_church_free_pray_times_", ::apache::thrift::protocol::T_I32, 19);
  xfer += oprot->writeI32(this->homeland_church_free_pray_times_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_church_paid_pray_times_", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32(this->homeland_church_paid_pray_times_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_church_free_refresh_times_", ::apache::thrift::protocol::T_I32, 21);
  xfer += oprot->writeI32(this->homeland_church_free_refresh_times_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_church_chest_type_", ::apache::thrift::protocol::T_I32, 22);
  xfer += oprot->writeI32(this->homeland_church_chest_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_tree_level_", ::apache::thrift::protocol::T_I32, 23);
  xfer += oprot->writeI32(this->homeland_tree_level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_tree_harvest_times_", ::apache::thrift::protocol::T_I32, 24);
  xfer += oprot->writeI32(this->homeland_tree_harvest_times_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_tree_stage_", ::apache::thrift::protocol::T_I32, 25);
  xfer += oprot->writeI32(this->homeland_tree_stage_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_tree_watered_times_", ::apache::thrift::protocol::T_I32, 26);
  xfer += oprot->writeI32(this->homeland_tree_watered_times_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_tree_next_water_time_", ::apache::thrift::protocol::T_I64, 27);
  xfer += oprot->writeI64(this->homeland_tree_next_water_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_tree_growing_finish_time_", ::apache::thrift::protocol::T_I64, 28);
  xfer += oprot->writeI64(this->homeland_tree_growing_finish_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_tree_assist_water_times_", ::apache::thrift::protocol::T_I32, 29);
  xfer += oprot->writeI32(this->homeland_tree_assist_water_times_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_tree_watered_actors_", ::apache::thrift::protocol::T_STRING, 30);
  xfer += oprot->writeString(this->homeland_tree_watered_actors_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_tree_stolen_actors_", ::apache::thrift::protocol::T_STRING, 31);
  xfer += oprot->writeString(this->homeland_tree_stolen_actors_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_tower1_level_", ::apache::thrift::protocol::T_I32, 32);
  xfer += oprot->writeI32(this->homeland_tower1_level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_tower2_level_", ::apache::thrift::protocol::T_I32, 33);
  xfer += oprot->writeI32(this->homeland_tower2_level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_stronghold_level_", ::apache::thrift::protocol::T_I32, 34);
  xfer += oprot->writeI32(this->homeland_stronghold_level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_stronghold_next_call_support_time_", ::apache::thrift::protocol::T_I64, 35);
  xfer += oprot->writeI64(this->homeland_stronghold_next_call_support_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_stronghold_supported_souls_", ::apache::thrift::protocol::T_STRING, 36);
  xfer += oprot->writeString(this->homeland_stronghold_supported_souls_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_stronghold_support_souls_", ::apache::thrift::protocol::T_STRING, 37);
  xfer += oprot->writeString(this->homeland_stronghold_support_souls_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_stronghold_support_times_", ::apache::thrift::protocol::T_I32, 38);
  xfer += oprot->writeI32(this->homeland_stronghold_support_times_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_invaders_", ::apache::thrift::protocol::T_STRING, 39);
  xfer += oprot->writeString(this->homeland_invaders_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeland_events_", ::apache::thrift::protocol::T_STRING, 40);
  xfer += oprot->writeString(this->homeland_events_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_save_time_", ::apache::thrift::protocol::T_I64, 41);
  xfer += oprot->writeI64(this->last_save_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("soul_data_", ::apache::thrift::protocol::T_STRING, 42);
  xfer += oprot->writeString(this->soul_data_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageSocialActorField &a, StorageSocialActorField &b) {
  using ::std::swap;
  swap(a.signature_, b.signature_);
  swap(a.friends_, b.friends_);
  swap(a.blacklist_, b.blacklist_);
  swap(a.enemies_, b.enemies_);
  swap(a.homeland_upgrade_start_time_, b.homeland_upgrade_start_time_);
  swap(a.homeland_upgrade_finish_time_, b.homeland_upgrade_finish_time_);
  swap(a.homeland_temple_level_, b.homeland_temple_level_);
  swap(a.homeland_temple_harvest_times_, b.homeland_temple_harvest_times_);
  swap(a.homeland_temple_force_harvest_times_, b.homeland_temple_force_harvest_times_);
  swap(a.homeland_temple_next_harvest_time_, b.homeland_temple_next_harvest_time_);
  swap(a.homeland_goldmine_level_, b.homeland_goldmine_level_);
  swap(a.homeland_goldmine_robbed_times_, b.homeland_goldmine_robbed_times_);
  swap(a.homeland_goldmine_loss_rate_, b.homeland_goldmine_loss_rate_);
  swap(a.homeland_goldmine_next_harvest_time_, b.homeland_goldmine_next_harvest_time_);
  swap(a.homeland_goldmine_rob_times_, b.homeland_goldmine_rob_times_);
  swap(a.homeland_goldmine_next_rob_time_, b.homeland_goldmine_next_rob_time_);
  swap(a.homeland_pool_level_, b.homeland_pool_level_);
  swap(a.homeland_pool_last_harvest_time_, b.homeland_pool_last_harvest_time_);
  swap(a.homeland_church_free_pray_times_, b.homeland_church_free_pray_times_);
  swap(a.homeland_church_paid_pray_times_, b.homeland_church_paid_pray_times_);
  swap(a.homeland_church_free_refresh_times_, b.homeland_church_free_refresh_times_);
  swap(a.homeland_church_chest_type_, b.homeland_church_chest_type_);
  swap(a.homeland_tree_level_, b.homeland_tree_level_);
  swap(a.homeland_tree_harvest_times_, b.homeland_tree_harvest_times_);
  swap(a.homeland_tree_stage_, b.homeland_tree_stage_);
  swap(a.homeland_tree_watered_times_, b.homeland_tree_watered_times_);
  swap(a.homeland_tree_next_water_time_, b.homeland_tree_next_water_time_);
  swap(a.homeland_tree_growing_finish_time_, b.homeland_tree_growing_finish_time_);
  swap(a.homeland_tree_assist_water_times_, b.homeland_tree_assist_water_times_);
  swap(a.homeland_tree_watered_actors_, b.homeland_tree_watered_actors_);
  swap(a.homeland_tree_stolen_actors_, b.homeland_tree_stolen_actors_);
  swap(a.homeland_tower1_level_, b.homeland_tower1_level_);
  swap(a.homeland_tower2_level_, b.homeland_tower2_level_);
  swap(a.homeland_stronghold_level_, b.homeland_stronghold_level_);
  swap(a.homeland_stronghold_next_call_support_time_, b.homeland_stronghold_next_call_support_time_);
  swap(a.homeland_stronghold_supported_souls_, b.homeland_stronghold_supported_souls_);
  swap(a.homeland_stronghold_support_souls_, b.homeland_stronghold_support_souls_);
  swap(a.homeland_stronghold_support_times_, b.homeland_stronghold_support_times_);
  swap(a.homeland_invaders_, b.homeland_invaders_);
  swap(a.homeland_events_, b.homeland_events_);
  swap(a.last_save_time_, b.last_save_time_);
  swap(a.soul_data_, b.soul_data_);
}

const char* StorageSocialActorLoginRequest::ascii_fingerprint = "F5E236E76F6B26AEDFAED3A0E6551651";
const uint8_t StorageSocialActorLoginRequest::binary_fingerprint[16] = {0xF5,0xE2,0x36,0xE7,0x6F,0x6B,0x26,0xAE,0xDF,0xAE,0xD3,0xA0,0xE6,0x55,0x16,0x51};

uint32_t StorageSocialActorLoginRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->offline_load_);
          this->__isset.offline_load_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->offline_task_id_);
          this->__isset.offline_task_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageSocialActorLoginRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageSocialActorLoginRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.offline_load_) {
    xfer += oprot->writeFieldBegin("offline_load_", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->offline_load_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.offline_task_id_) {
    xfer += oprot->writeFieldBegin("offline_task_id_", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->offline_task_id_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageSocialActorLoginRequest &a, StorageSocialActorLoginRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.offline_load_, b.offline_load_);
  swap(a.offline_task_id_, b.offline_task_id_);
  swap(a.__isset, b.__isset);
}

const char* StorageSocialActorLoginResponse::ascii_fingerprint = "F25F0C3E146444184C16B572EC8989A0";
const uint8_t StorageSocialActorLoginResponse::binary_fingerprint[16] = {0xF2,0x5F,0x0C,0x3E,0x14,0x64,0x44,0x18,0x4C,0x16,0xB5,0x72,0xEC,0x89,0x89,0xA0};

uint32_t StorageSocialActorLoginResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;
  bool isset_field_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->result_ = (SocialActorLoginResult::type)ecast0;
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->field_.read(iprot);
          isset_field_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_field_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageSocialActorLoginResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageSocialActorLoginResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->field_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageSocialActorLoginResponse &a, StorageSocialActorLoginResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.field_, b.field_);
}

}} // namespace
