/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef storage_item_actor_login_TYPES_H
#define storage_item_actor_login_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace database { namespace protocol {

struct ItemActorField {
  enum type {
    GEM_GATHERING_POINT = 0,
    SHORTCUT1 = 1,
    SHORTCUT2 = 2,
    SHORTCUT3 = 3,
    SHORTCUT4 = 4,
    GIFTS_PICK_NUM = 5,
    ITEM_BUY_NUM = 6,
    MAX = 7
  };
};

extern const std::map<int, const char*> _ItemActorField_VALUES_TO_NAMES;

struct ItemActorLoginResult {
  enum type {
    SUCCESS = 0,
    ERROR_UNKNOWN = 1,
    MAX = 2
  };
};

extern const std::map<int, const char*> _ItemActorLoginResult_VALUES_TO_NAMES;


class StorageItemActorField {
 public:

  static const char* ascii_fingerprint; // = "B0752C2DE8DE1854FD00C8AF1A2D5154";
  static const uint8_t binary_fingerprint[16]; // = {0xB0,0x75,0x2C,0x2D,0xE8,0xDE,0x18,0x54,0xFD,0x00,0xC8,0xAF,0x1A,0x2D,0x51,0x54};

  StorageItemActorField() : gem_gathering_point_(0), shortcut1(0), shortcut2(0), shortcut3(0), shortcut4(0), gifts_pick_num_(0), item_buy_num_() {
  }

  virtual ~StorageItemActorField() throw() {}

  int32_t gem_gathering_point_;
  int32_t shortcut1;
  int32_t shortcut2;
  int32_t shortcut3;
  int32_t shortcut4;
  int32_t gifts_pick_num_;
  std::string item_buy_num_;

  void __set_gem_gathering_point_(const int32_t val) {
    gem_gathering_point_ = val;
  }

  void __set_shortcut1(const int32_t val) {
    shortcut1 = val;
  }

  void __set_shortcut2(const int32_t val) {
    shortcut2 = val;
  }

  void __set_shortcut3(const int32_t val) {
    shortcut3 = val;
  }

  void __set_shortcut4(const int32_t val) {
    shortcut4 = val;
  }

  void __set_gifts_pick_num_(const int32_t val) {
    gifts_pick_num_ = val;
  }

  void __set_item_buy_num_(const std::string& val) {
    item_buy_num_ = val;
  }

  bool operator == (const StorageItemActorField & rhs) const
  {
    if (!(gem_gathering_point_ == rhs.gem_gathering_point_))
      return false;
    if (!(shortcut1 == rhs.shortcut1))
      return false;
    if (!(shortcut2 == rhs.shortcut2))
      return false;
    if (!(shortcut3 == rhs.shortcut3))
      return false;
    if (!(shortcut4 == rhs.shortcut4))
      return false;
    if (!(gifts_pick_num_ == rhs.gifts_pick_num_))
      return false;
    if (!(item_buy_num_ == rhs.item_buy_num_))
      return false;
    return true;
  }
  bool operator != (const StorageItemActorField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageItemActorField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageItemActorField &a, StorageItemActorField &b);


class StorageItemActorLoginRequest {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  StorageItemActorLoginRequest() : actor_id_(0) {
  }

  virtual ~StorageItemActorLoginRequest() throw() {}

  int64_t actor_id_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  bool operator == (const StorageItemActorLoginRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    return true;
  }
  bool operator != (const StorageItemActorLoginRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageItemActorLoginRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageItemActorLoginRequest &a, StorageItemActorLoginRequest &b);


class StorageItemActorLoginResponse {
 public:

  static const char* ascii_fingerprint; // = "8CAA7F6EECAEC83A01BFB16909334DBF";
  static const uint8_t binary_fingerprint[16]; // = {0x8C,0xAA,0x7F,0x6E,0xEC,0xAE,0xC8,0x3A,0x01,0xBF,0xB1,0x69,0x09,0x33,0x4D,0xBF};

  StorageItemActorLoginResponse() : result_((ItemActorLoginResult::type)0) {
  }

  virtual ~StorageItemActorLoginResponse() throw() {}

  ItemActorLoginResult::type result_;
  StorageItemActorField field_;

  void __set_result_(const ItemActorLoginResult::type val) {
    result_ = val;
  }

  void __set_field_(const StorageItemActorField& val) {
    field_ = val;
  }

  bool operator == (const StorageItemActorLoginResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (!(field_ == rhs.field_))
      return false;
    return true;
  }
  bool operator != (const StorageItemActorLoginResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageItemActorLoginResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageItemActorLoginResponse &a, StorageItemActorLoginResponse &b);

}} // namespace

#endif
