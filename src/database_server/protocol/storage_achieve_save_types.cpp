/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "storage_achieve_save_types.h"

#include <algorithm>

namespace database { namespace protocol {

const char* StorageAchieveSave::ascii_fingerprint = "ABC0F5A1E20AEC6871AC0233F7077449";
const uint8_t StorageAchieveSave::binary_fingerprint[16] = {0xAB,0xC0,0xF5,0xA1,0xE2,0x0A,0xEC,0x68,0x71,0xAC,0x02,0x33,0xF7,0x07,0x74,0x49};

uint32_t StorageAchieveSave::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_finish_achieves_ = false;
  bool isset_achieves_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->finish_achieves_.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->finish_achieves_.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->finish_achieves_[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_finish_achieves_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->achieves_.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->achieves_.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += this->achieves_[_i9].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_achieves_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_finish_achieves_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_achieves_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageAchieveSave::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageAchieveSave");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("finish_achieves_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->finish_achieves_.size()));
    std::vector< ::database::protocol::StorageAchieveFinishField> ::const_iterator _iter10;
    for (_iter10 = this->finish_achieves_.begin(); _iter10 != this->finish_achieves_.end(); ++_iter10)
    {
      xfer += (*_iter10).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("achieves_", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->achieves_.size()));
    std::vector< ::database::protocol::StorageAchieveField> ::const_iterator _iter11;
    for (_iter11 = this->achieves_.begin(); _iter11 != this->achieves_.end(); ++_iter11)
    {
      xfer += (*_iter11).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageAchieveSave &a, StorageAchieveSave &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.finish_achieves_, b.finish_achieves_);
  swap(a.achieves_, b.achieves_);
}

}} // namespace
