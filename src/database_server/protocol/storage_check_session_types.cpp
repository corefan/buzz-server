/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "storage_check_session_types.h"

#include <algorithm>

namespace database { namespace protocol {

const char* StorageCheckSessionRequest::ascii_fingerprint = "E34AC4C3488C79351AAFF16C52D10BC0";
const uint8_t StorageCheckSessionRequest::binary_fingerprint[16] = {0xE3,0x4A,0xC4,0xC3,0x48,0x8C,0x79,0x35,0x1A,0xAF,0xF1,0x6C,0x52,0xD1,0x0B,0xC0};

uint32_t StorageCheckSessionRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;
  bool isset_session_ = false;
  bool isset_session_status_ = false;
  bool isset_effective_time_ = false;
  bool isset_sequence_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->session_);
          isset_session_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->session_status_);
          isset_session_status_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->effective_time_);
          isset_effective_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sequence_);
          isset_sequence_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_session_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_session_status_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_effective_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sequence_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageCheckSessionRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageCheckSessionRequest");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->session_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_status_", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->session_status_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("effective_time_", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->effective_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sequence_", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->sequence_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageCheckSessionRequest &a, StorageCheckSessionRequest &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.session_, b.session_);
  swap(a.session_status_, b.session_status_);
  swap(a.effective_time_, b.effective_time_);
  swap(a.sequence_, b.sequence_);
}

const char* StorageCheckSessionResponse::ascii_fingerprint = "403F0C4586060E367DA428DD09C59C9C";
const uint8_t StorageCheckSessionResponse::binary_fingerprint[16] = {0x40,0x3F,0x0C,0x45,0x86,0x06,0x0E,0x36,0x7D,0xA4,0x28,0xDD,0x09,0xC5,0x9C,0x9C};

uint32_t StorageCheckSessionResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_pass_ = false;
  bool isset_online_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->pass_);
          isset_pass_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->online_);
          isset_online_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_pass_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_online_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StorageCheckSessionResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorageCheckSessionResponse");

  xfer += oprot->writeFieldBegin("pass_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->pass_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("online_", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->online_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageCheckSessionResponse &a, StorageCheckSessionResponse &b) {
  using ::std::swap;
  swap(a.pass_, b.pass_);
  swap(a.online_, b.online_);
}

}} // namespace
