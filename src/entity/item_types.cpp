/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "item_types.h"

#include <algorithm>

namespace entity {

int _kItemTypeValues[] = {
  ItemType::EQUIPMENT,
  ItemType::MEDICINE,
  ItemType::CARD,
  ItemType::MATERIAL,
  ItemType::TASK,
  ItemType::MAX
};
const char* _kItemTypeNames[] = {
  "EQUIPMENT",
  "MEDICINE",
  "CARD",
  "MATERIAL",
  "TASK",
  "MAX"
};
const std::map<int, const char*> _ItemType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kItemTypeValues, _kItemTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kEquipmentTypeValues[] = {
  EquipmentType::MIN,
  EquipmentType::WEAPONS,
  EquipmentType::HAT,
  EquipmentType::CLOTHES,
  EquipmentType::ARM,
  EquipmentType::BELT,
  EquipmentType::TROUSERS,
  EquipmentType::SHOES,
  EquipmentType::RING,
  EquipmentType::NECKLACE,
  EquipmentType::ACCESORY,
  EquipmentType::MAX
};
const char* _kEquipmentTypeNames[] = {
  "MIN",
  "WEAPONS",
  "HAT",
  "CLOTHES",
  "ARM",
  "BELT",
  "TROUSERS",
  "SHOES",
  "RING",
  "NECKLACE",
  "ACCESORY",
  "MAX"
};
const std::map<int, const char*> _EquipmentType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(12, _kEquipmentTypeValues, _kEquipmentTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMedicineTypeValues[] = {
  MedicineType::MIN,
  MedicineType::MEDICINE,
  MedicineType::BUFF,
  MedicineType::SOUL,
  MedicineType::MAX
};
const char* _kMedicineTypeNames[] = {
  "MIN",
  "MEDICINE",
  "BUFF",
  "SOUL",
  "MAX"
};
const std::map<int, const char*> _MedicineType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kMedicineTypeValues, _kMedicineTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMaterialTypeValues[] = {
  MaterialType::MIN,
  MaterialType::EQUIP_INTENSIFY,
  MaterialType::INLAY,
  MaterialType::SLOTTING,
  MaterialType::REFINE,
  MaterialType::PROMOTION,
  MaterialType::HORSE_INTENSIFY,
  MaterialType::HORSE_UNREAL,
  MaterialType::SOUL_STONE,
  MaterialType::RUNE,
  MaterialType::MAX
};
const char* _kMaterialTypeNames[] = {
  "MIN",
  "EQUIP_INTENSIFY",
  "INLAY",
  "SLOTTING",
  "REFINE",
  "PROMOTION",
  "HORSE_INTENSIFY",
  "HORSE_UNREAL",
  "SOUL_STONE",
  "RUNE",
  "MAX"
};
const std::map<int, const char*> _MaterialType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(11, _kMaterialTypeValues, _kMaterialTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCardTypeValues[] = {
  CardType::MIN,
  CardType::MAX
};
const char* _kCardTypeNames[] = {
  "MIN",
  "MAX"
};
const std::map<int, const char*> _CardType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kCardTypeValues, _kCardTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTaskItemTypeValues[] = {
  TaskItemType::MIN,
  TaskItemType::MAX
};
const char* _kTaskItemTypeNames[] = {
  "MIN",
  "MAX"
};
const std::map<int, const char*> _TaskItemType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTaskItemTypeValues, _kTaskItemTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kItemContainerTypeValues[] = {
  ItemContainerType::PACKET,
  ItemContainerType::EQUIP,
  ItemContainerType::SHOP,
  ItemContainerType::STORAGE,
  ItemContainerType::TREASURE,
  ItemContainerType::MAX
};
const char* _kItemContainerTypeNames[] = {
  "PACKET",
  "EQUIP",
  "SHOP",
  "STORAGE",
  "TREASURE",
  "MAX"
};
const std::map<int, const char*> _ItemContainerType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kItemContainerTypeValues, _kItemContainerTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kItemTargetTypeValues[] = {
  ItemTargetType::SELF,
  ItemTargetType::OTHER_ONE
};
const char* _kItemTargetTypeNames[] = {
  "SELF",
  "OTHER_ONE"
};
const std::map<int, const char*> _ItemTargetType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kItemTargetTypeValues, _kItemTargetTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kItemClientFieldsValues[] = {
  ItemClientFields::CLIENT_BEGIN,
  ItemClientFields::BIND_TYPE,
  ItemClientFields::STACK_COUNT,
  ItemClientFields::CLIENT_END
};
const char* _kItemClientFieldsNames[] = {
  "CLIENT_BEGIN",
  "BIND_TYPE",
  "STACK_COUNT",
  "CLIENT_END"
};
const std::map<int, const char*> _ItemClientFields_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kItemClientFieldsValues, _kItemClientFieldsNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kItemServerFieldsValues[] = {
  ItemServerFields::SERVER_BEGIN,
  ItemServerFields::SERVER_END
};
const char* _kItemServerFieldsNames[] = {
  "SERVER_BEGIN",
  "SERVER_END"
};
const std::map<int, const char*> _ItemServerFields_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kItemServerFieldsValues, _kItemServerFieldsNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kBindRequireTypeValues[] = {
  BindRequireType::NOT_BIND,
  BindRequireType::BIND,
  BindRequireType::BOTH
};
const char* _kBindRequireTypeNames[] = {
  "NOT_BIND",
  "BIND",
  "BOTH"
};
const std::map<int, const char*> _BindRequireType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kBindRequireTypeValues, _kBindRequireTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kItemUseRoleStatusValues[] = {
  ItemUseRoleStatus::LIVE,
  ItemUseRoleStatus::DIED,
  ItemUseRoleStatus::ALL
};
const char* _kItemUseRoleStatusNames[] = {
  "LIVE",
  "DIED",
  "ALL"
};
const std::map<int, const char*> _ItemUseRoleStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kItemUseRoleStatusValues, _kItemUseRoleStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* ItemClientField::ascii_fingerprint = "46A703A33337BED2F62F386FC66B2A5F";
const uint8_t ItemClientField::binary_fingerprint[16] = {0x46,0xA7,0x03,0xA3,0x33,0x37,0xBE,0xD2,0xF6,0x2F,0x38,0x6F,0xC6,0x6B,0x2A,0x5F};

uint32_t ItemClientField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_field_ = false;
  bool isset_value_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->field_ = (ItemClientFields::type)ecast0;
          isset_field_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->value_);
          isset_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_field_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ItemClientField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ItemClientField");

  xfer += oprot->writeFieldBegin("field_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->field_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ItemClientField &a, ItemClientField &b) {
  using ::std::swap;
  swap(a.field_, b.field_);
  swap(a.value_, b.value_);
}

const char* ItemServerField::ascii_fingerprint = "46A703A33337BED2F62F386FC66B2A5F";
const uint8_t ItemServerField::binary_fingerprint[16] = {0x46,0xA7,0x03,0xA3,0x33,0x37,0xBE,0xD2,0xF6,0x2F,0x38,0x6F,0xC6,0x6B,0x2A,0x5F};

uint32_t ItemServerField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_field_ = false;
  bool isset_value_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->field_ = (ItemServerFields::type)ecast1;
          isset_field_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->value_);
          isset_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_field_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ItemServerField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ItemServerField");

  xfer += oprot->writeFieldBegin("field_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->field_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ItemServerField &a, ItemServerField &b) {
  using ::std::swap;
  swap(a.field_, b.field_);
  swap(a.value_, b.value_);
}

const char* AddItemFields::ascii_fingerprint = "03F2C7B3E06E58B9DDF92A0DE228138B";
const uint8_t AddItemFields::binary_fingerprint[16] = {0x03,0xF2,0xC7,0xB3,0xE0,0x6E,0x58,0xB9,0xDD,0xF9,0x2A,0x0D,0xE2,0x28,0x13,0x8B};

uint32_t AddItemFields::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_item_template_ = false;
  bool isset_number_ = false;
  bool isset_bind_ = false;
  bool isset_intensify_level_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item_template_);
          isset_item_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->number_);
          isset_number_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->bind_);
          isset_bind_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->intensify_level_);
          isset_intensify_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_item_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_number_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_bind_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_intensify_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AddItemFields::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AddItemFields");

  xfer += oprot->writeFieldBegin("item_template_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->item_template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->number_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bind_", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->bind_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("intensify_level_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->intensify_level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddItemFields &a, AddItemFields &b) {
  using ::std::swap;
  swap(a.item_template_, b.item_template_);
  swap(a.number_, b.number_);
  swap(a.bind_, b.bind_);
  swap(a.intensify_level_, b.intensify_level_);
}

const char* ItemFields::ascii_fingerprint = "87C12C4601E4F64A4BB77527DB5F4F55";
const uint8_t ItemFields::binary_fingerprint[16] = {0x87,0xC1,0x2C,0x46,0x01,0xE4,0xF6,0x4A,0x4B,0xB7,0x75,0x27,0xDB,0x5F,0x4F,0x55};

uint32_t ItemFields::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;
  bool isset_template_id_ = false;
  bool isset_type_ = false;
  bool isset_location_ = false;
  bool isset_item_client_fields_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->template_id_);
          isset_template_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->type_ = (ItemType::type)ecast2;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->location_);
          isset_location_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->item_client_fields_.clear();
            uint32_t _size3;
            ::apache::thrift::protocol::TType _etype6;
            xfer += iprot->readListBegin(_etype6, _size3);
            this->item_client_fields_.resize(_size3);
            uint32_t _i7;
            for (_i7 = 0; _i7 < _size3; ++_i7)
            {
              xfer += iprot->readI32(this->item_client_fields_[_i7]);
            }
            xfer += iprot->readListEnd();
          }
          isset_item_client_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->equipment_client_fields_.clear();
            uint32_t _size8;
            ::apache::thrift::protocol::TType _etype11;
            xfer += iprot->readListBegin(_etype11, _size8);
            this->equipment_client_fields_.resize(_size8);
            uint32_t _i12;
            for (_i12 = 0; _i12 < _size8; ++_i12)
            {
              xfer += iprot->readI32(this->equipment_client_fields_[_i12]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.equipment_client_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->first_equip_time_);
          this->__isset.first_equip_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_template_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_location_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item_client_fields_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ItemFields::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ItemFields");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("template_id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->template_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("location_", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->location_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item_client_fields_", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->item_client_fields_.size()));
    std::vector<int32_t> ::const_iterator _iter13;
    for (_iter13 = this->item_client_fields_.begin(); _iter13 != this->item_client_fields_.end(); ++_iter13)
    {
      xfer += oprot->writeI32((*_iter13));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.equipment_client_fields_) {
    xfer += oprot->writeFieldBegin("equipment_client_fields_", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->equipment_client_fields_.size()));
      std::vector<int32_t> ::const_iterator _iter14;
      for (_iter14 = this->equipment_client_fields_.begin(); _iter14 != this->equipment_client_fields_.end(); ++_iter14)
      {
        xfer += oprot->writeI32((*_iter14));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.first_equip_time_) {
    xfer += oprot->writeFieldBegin("first_equip_time_", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->first_equip_time_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ItemFields &a, ItemFields &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.template_id_, b.template_id_);
  swap(a.type_, b.type_);
  swap(a.location_, b.location_);
  swap(a.item_client_fields_, b.item_client_fields_);
  swap(a.equipment_client_fields_, b.equipment_client_fields_);
  swap(a.first_equip_time_, b.first_equip_time_);
  swap(a.__isset, b.__isset);
}

} // namespace
