/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef transport_TYPES_H
#define transport_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace entity {


class TransportSnapshotField {
 public:

  static const char* ascii_fingerprint; // = "727CAEA8265A5DE67DBC931F55CD8753";
  static const uint8_t binary_fingerprint[16]; // = {0x72,0x7C,0xAE,0xA8,0x26,0x5A,0x5D,0xE6,0x7D,0xBC,0x93,0x1F,0x55,0xCD,0x87,0x53};

  TransportSnapshotField() : actor_id_(0), actor_name_() {
  }

  virtual ~TransportSnapshotField() throw() {}

  int64_t actor_id_;
  std::string actor_name_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_actor_name_(const std::string& val) {
    actor_name_ = val;
  }

  bool operator == (const TransportSnapshotField & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(actor_name_ == rhs.actor_name_))
      return false;
    return true;
  }
  bool operator != (const TransportSnapshotField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TransportSnapshotField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TransportSnapshotField &a, TransportSnapshotField &b);

} // namespace

#endif
