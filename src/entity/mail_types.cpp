/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "mail_types.h"

#include <algorithm>

namespace entity {

int _kMailTypeValues[] = {
  MailType::INVALID,
  MailType::SYSTEM,
  MailType::OPERATING,
  MailType::GENERAL
};
const char* _kMailTypeNames[] = {
  "INVALID",
  "SYSTEM",
  "OPERATING",
  "GENERAL"
};
const std::map<int, const char*> _MailType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kMailTypeValues, _kMailTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMailAffixTypeValues[] = {
  MailAffixType::NONE,
  MailAffixType::EXIST,
  MailAffixType::PICKED
};
const char* _kMailAffixTypeNames[] = {
  "NONE",
  "EXIST",
  "PICKED"
};
const std::map<int, const char*> _MailAffixType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kMailAffixTypeValues, _kMailAffixTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMailReadStateValues[] = {
  MailReadState::UNREAD,
  MailReadState::READ
};
const char* _kMailReadStateNames[] = {
  "UNREAD",
  "READ"
};
const std::map<int, const char*> _MailReadState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kMailReadStateValues, _kMailReadStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* MailAffix::ascii_fingerprint = "C85359CE002BF2903A76E0958B7216DE";
const uint8_t MailAffix::binary_fingerprint[16] = {0xC8,0x53,0x59,0xCE,0x00,0x2B,0xF2,0x90,0x3A,0x76,0xE0,0x95,0x8B,0x72,0x16,0xDE};

uint32_t MailAffix::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_item1_ = false;
  bool isset_item1_num_ = false;
  bool isset_item2_ = false;
  bool isset_item2_num_ = false;
  bool isset_item3_ = false;
  bool isset_item3_num_ = false;
  bool isset_item4_ = false;
  bool isset_item4_num_ = false;
  bool isset_item5_ = false;
  bool isset_item5_num_ = false;
  bool isset_gold_ = false;
  bool isset_restrict_dollars_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item1_);
          isset_item1_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item1_num_);
          isset_item1_num_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item2_);
          isset_item2_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item2_num_);
          isset_item2_num_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item3_);
          isset_item3_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item3_num_);
          isset_item3_num_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item4_);
          isset_item4_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item4_num_);
          isset_item4_num_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item5_);
          isset_item5_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item5_num_);
          isset_item5_num_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gold_);
          isset_gold_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->restrict_dollars_);
          isset_restrict_dollars_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_item1_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item1_num_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item2_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item2_num_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item3_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item3_num_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item4_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item4_num_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item5_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item5_num_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gold_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_restrict_dollars_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MailAffix::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MailAffix");

  xfer += oprot->writeFieldBegin("item1_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->item1_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item1_num_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->item1_num_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item2_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->item2_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item2_num_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->item2_num_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item3_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->item3_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item3_num_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->item3_num_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item4_", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->item4_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item4_num_", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->item4_num_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item5_", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->item5_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item5_num_", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->item5_num_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gold_", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->gold_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("restrict_dollars_", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->restrict_dollars_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MailAffix &a, MailAffix &b) {
  using ::std::swap;
  swap(a.item1_, b.item1_);
  swap(a.item1_num_, b.item1_num_);
  swap(a.item2_, b.item2_);
  swap(a.item2_num_, b.item2_num_);
  swap(a.item3_, b.item3_);
  swap(a.item3_num_, b.item3_num_);
  swap(a.item4_, b.item4_);
  swap(a.item4_num_, b.item4_num_);
  swap(a.item5_, b.item5_);
  swap(a.item5_num_, b.item5_num_);
  swap(a.gold_, b.gold_);
  swap(a.restrict_dollars_, b.restrict_dollars_);
}

} // namespace
