/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "soul_types.h"

#include <algorithm>

namespace entity {

int _kSoulSettingIDValues[] = {
  SoulSettingID::MIN,
  SoulSettingID::COMMON_1,
  SoulSettingID::COMMON_2,
  SoulSettingID::COMMON_3,
  SoulSettingID::COMMON_4,
  SoulSettingID::SOUL,
  SoulSettingID::MAX
};
const char* _kSoulSettingIDNames[] = {
  "MIN",
  "COMMON_1",
  "COMMON_2",
  "COMMON_3",
  "COMMON_4",
  "SOUL",
  "MAX"
};
const std::map<int, const char*> _SoulSettingID_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kSoulSettingIDValues, _kSoulSettingIDNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSoulUnlockTypeValues[] = {
  SoulUnlockType::MIN,
  SoulUnlockType::ITEM,
  SoulUnlockType::SPIRIT_LEVEL,
  SoulUnlockType::SWORD_LEVEL,
  SoulUnlockType::NOBLE_LEVEL,
  SoulUnlockType::MAX
};
const char* _kSoulUnlockTypeNames[] = {
  "MIN",
  "ITEM",
  "SPIRIT_LEVEL",
  "SWORD_LEVEL",
  "NOBLE_LEVEL",
  "MAX"
};
const std::map<int, const char*> _SoulUnlockType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kSoulUnlockTypeValues, _kSoulUnlockTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSoulEffectTypeValues[] = {
  SoulEffectType::MIN,
  SoulEffectType::ATTR,
  SoulEffectType::EFFECT,
  SoulEffectType::SKILL_MAX_LEVEL,
  SoulEffectType::MAX
};
const char* _kSoulEffectTypeNames[] = {
  "MIN",
  "ATTR",
  "EFFECT",
  "SKILL_MAX_LEVEL",
  "MAX"
};
const std::map<int, const char*> _SoulEffectType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kSoulEffectTypeValues, _kSoulEffectTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSoulAttributeTypeValues[] = {
  SoulAttributeType::MIN,
  SoulAttributeType::MAX_HP,
  SoulAttributeType::MAX_MP,
  SoulAttributeType::PHYSICS_ATTACK,
  SoulAttributeType::PHYSICS_DEFENCE,
  SoulAttributeType::MAGIC_ATTACK,
  SoulAttributeType::MAGIC_DEFENCE,
  SoulAttributeType::DODGE,
  SoulAttributeType::CRIT,
  SoulAttributeType::IGNORE_DEFENCE,
  SoulAttributeType::MAX
};
const char* _kSoulAttributeTypeNames[] = {
  "MIN",
  "MAX_HP",
  "MAX_MP",
  "PHYSICS_ATTACK",
  "PHYSICS_DEFENCE",
  "MAGIC_ATTACK",
  "MAGIC_DEFENCE",
  "DODGE",
  "CRIT",
  "IGNORE_DEFENCE",
  "MAX"
};
const std::map<int, const char*> _SoulAttributeType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(11, _kSoulAttributeTypeValues, _kSoulAttributeTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSoulEnergyStatusValues[] = {
  SoulEnergyStatus::MIN,
  SoulEnergyStatus::INCREMENT,
  SoulEnergyStatus::EXPLOSION,
  SoulEnergyStatus::DECREMENT,
  SoulEnergyStatus::MAX
};
const char* _kSoulEnergyStatusNames[] = {
  "MIN",
  "INCREMENT",
  "EXPLOSION",
  "DECREMENT",
  "MAX"
};
const std::map<int, const char*> _SoulEnergyStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kSoulEnergyStatusValues, _kSoulEnergyStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* SoulField::ascii_fingerprint = "62CBF95059CB084430B0BABE2E5A68C7";
const uint8_t SoulField::binary_fingerprint[16] = {0x62,0xCB,0xF9,0x50,0x59,0xCB,0x08,0x44,0x30,0xB0,0xBA,0xBE,0x2E,0x5A,0x68,0xC7};

uint32_t SoulField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;
  bool isset_level_ = false;
  bool isset_step_ = false;
  bool isset_common_skill_level_ = false;
  bool isset_appear_skill_level_ = false;
  bool isset_soul_skill_level_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level_);
          isset_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->step_);
          isset_step_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->common_skill_level_);
          isset_common_skill_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->appear_skill_level_);
          isset_appear_skill_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->soul_skill_level_);
          isset_soul_skill_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_step_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_common_skill_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_appear_skill_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_soul_skill_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SoulField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SoulField");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("level_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("step_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->step_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("common_skill_level_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->common_skill_level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("appear_skill_level_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->appear_skill_level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("soul_skill_level_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->soul_skill_level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SoulField &a, SoulField &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.level_, b.level_);
  swap(a.step_, b.step_);
  swap(a.common_skill_level_, b.common_skill_level_);
  swap(a.appear_skill_level_, b.appear_skill_level_);
  swap(a.soul_skill_level_, b.soul_skill_level_);
}

const char* SoulSettingField::ascii_fingerprint = "7598AB33931F8E8513753EFF2D53550E";
const uint8_t SoulSettingField::binary_fingerprint[16] = {0x75,0x98,0xAB,0x33,0x93,0x1F,0x8E,0x85,0x13,0x75,0x3E,0xFF,0x2D,0x53,0x55,0x0E};

uint32_t SoulSettingField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_vocation_ = false;
  bool isset_group_ = false;
  bool isset_settings_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->vocation_ = ( ::entity::VocationType::type)ecast0;
          isset_vocation_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->group_);
          isset_group_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->settings_.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readListBegin(_etype4, _size1);
            this->settings_.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += iprot->readI32(this->settings_[_i5]);
            }
            xfer += iprot->readListEnd();
          }
          isset_settings_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_vocation_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_group_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_settings_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SoulSettingField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SoulSettingField");

  xfer += oprot->writeFieldBegin("vocation_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->vocation_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("group_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->group_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("settings_", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->settings_.size()));
    std::vector<int32_t> ::const_iterator _iter6;
    for (_iter6 = this->settings_.begin(); _iter6 != this->settings_.end(); ++_iter6)
    {
      xfer += oprot->writeI32((*_iter6));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SoulSettingField &a, SoulSettingField &b) {
  using ::std::swap;
  swap(a.vocation_, b.vocation_);
  swap(a.group_, b.group_);
  swap(a.settings_, b.settings_);
}

} // namespace
