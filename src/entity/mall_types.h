/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef mall_TYPES_H
#define mall_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace entity {

struct MallUseType {
  enum type {
    USE_FREEDOM_DOLLARS = 0,
    USE_RESTRICT_DOLLARS = 1,
    USE_FREEDOM_RESTRICT = 2,
    USE_ARENA_INTEGRAL = 3,
    USE_JUSTICE = 4,
    USE_MIRACLE_INTEGRAL = 5,
    USE_LEGEND_INTEGRAL = 6
  };
};

extern const std::map<int, const char*> _MallUseType_VALUES_TO_NAMES;

struct MallTreasureType {
  enum type {
    MALL = 0,
    TREASURE = 1
  };
};

extern const std::map<int, const char*> _MallTreasureType_VALUES_TO_NAMES;


class MallTreasureCell {
 public:

  static const char* ascii_fingerprint; // = "725A17D7A8AFD5B81F9D20D41C41BA09";
  static const uint8_t binary_fingerprint[16]; // = {0x72,0x5A,0x17,0xD7,0xA8,0xAF,0xD5,0xB8,0x1F,0x9D,0x20,0xD4,0x1C,0x41,0xBA,0x09};

  MallTreasureCell() : tab_(0), shop_type_(0), location_(0), id_(0), hot_(0), dollars_(0), spend_type_(0), up_start_time_(), up_end_time_(), dollars_start_time_(), dollars_end_time_(), limit_buy_num_(0), sell_price_(0), bind_(0) {
  }

  virtual ~MallTreasureCell() throw() {}

  int8_t tab_;
  int8_t shop_type_;
  int8_t location_;
  int32_t id_;
  bool hot_;
  int32_t dollars_;
  int8_t spend_type_;
  std::string up_start_time_;
  std::string up_end_time_;
  std::string dollars_start_time_;
  std::string dollars_end_time_;
  int32_t limit_buy_num_;
  int32_t sell_price_;
  int8_t bind_;

  void __set_tab_(const int8_t val) {
    tab_ = val;
  }

  void __set_shop_type_(const int8_t val) {
    shop_type_ = val;
  }

  void __set_location_(const int8_t val) {
    location_ = val;
  }

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  void __set_hot_(const bool val) {
    hot_ = val;
  }

  void __set_dollars_(const int32_t val) {
    dollars_ = val;
  }

  void __set_spend_type_(const int8_t val) {
    spend_type_ = val;
  }

  void __set_up_start_time_(const std::string& val) {
    up_start_time_ = val;
  }

  void __set_up_end_time_(const std::string& val) {
    up_end_time_ = val;
  }

  void __set_dollars_start_time_(const std::string& val) {
    dollars_start_time_ = val;
  }

  void __set_dollars_end_time_(const std::string& val) {
    dollars_end_time_ = val;
  }

  void __set_limit_buy_num_(const int32_t val) {
    limit_buy_num_ = val;
  }

  void __set_sell_price_(const int32_t val) {
    sell_price_ = val;
  }

  void __set_bind_(const int8_t val) {
    bind_ = val;
  }

  bool operator == (const MallTreasureCell & rhs) const
  {
    if (!(tab_ == rhs.tab_))
      return false;
    if (!(shop_type_ == rhs.shop_type_))
      return false;
    if (!(location_ == rhs.location_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(hot_ == rhs.hot_))
      return false;
    if (!(dollars_ == rhs.dollars_))
      return false;
    if (!(spend_type_ == rhs.spend_type_))
      return false;
    if (!(up_start_time_ == rhs.up_start_time_))
      return false;
    if (!(up_end_time_ == rhs.up_end_time_))
      return false;
    if (!(dollars_start_time_ == rhs.dollars_start_time_))
      return false;
    if (!(dollars_end_time_ == rhs.dollars_end_time_))
      return false;
    if (!(limit_buy_num_ == rhs.limit_buy_num_))
      return false;
    if (!(sell_price_ == rhs.sell_price_))
      return false;
    if (!(bind_ == rhs.bind_))
      return false;
    return true;
  }
  bool operator != (const MallTreasureCell &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MallTreasureCell & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MallTreasureCell &a, MallTreasureCell &b);


class MallReasureBuyNum {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  MallReasureBuyNum() : item_id_(0), num_(0) {
  }

  virtual ~MallReasureBuyNum() throw() {}

  int32_t item_id_;
  int32_t num_;

  void __set_item_id_(const int32_t val) {
    item_id_ = val;
  }

  void __set_num_(const int32_t val) {
    num_ = val;
  }

  bool operator == (const MallReasureBuyNum & rhs) const
  {
    if (!(item_id_ == rhs.item_id_))
      return false;
    if (!(num_ == rhs.num_))
      return false;
    return true;
  }
  bool operator != (const MallReasureBuyNum &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MallReasureBuyNum & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MallReasureBuyNum &a, MallReasureBuyNum &b);

} // namespace

#endif
