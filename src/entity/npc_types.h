/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef npc_TYPES_H
#define npc_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace entity {

struct NpcKind {
  enum type {
    MIN = 0,
    FUNCTION = 1,
    MONSTER = 2,
    TELEPORTER = 3,
    TASK = 4,
    TASK_GATHER = 5,
    GATHER = 6,
    TRANSPORT = 7,
    MAX = 8
  };
};

extern const std::map<int, const char*> _NpcKind_VALUES_TO_NAMES;

struct NpcOwnerType {
  enum type {
    MIN = 0,
    ALL = 0,
    KILL = 1,
    DAMAGE = 2,
    CAMP_COMPETE = 3,
    CAMP_EACH = 4,
    MAX = 5
  };
};

extern const std::map<int, const char*> _NpcOwnerType_VALUES_TO_NAMES;

struct NpcAoiFields {
  enum type {
    AOI_BEGIN = 0,
    AOI_END = 1
  };
};

extern const std::map<int, const char*> _NpcAoiFields_VALUES_TO_NAMES;

struct NpcClientFields {
  enum type {
    CLIENT_BEGIN = 0,
    CLIENT_END = 1
  };
};

extern const std::map<int, const char*> _NpcClientFields_VALUES_TO_NAMES;

struct NpcMobType {
  enum type {
    GENERAL_NPC = 0,
    CREAM_NPC = 1,
    BOSS_NPC = 2
  };
};

extern const std::map<int, const char*> _NpcMobType_VALUES_TO_NAMES;


class NpcAoiField {
 public:

  static const char* ascii_fingerprint; // = "46A703A33337BED2F62F386FC66B2A5F";
  static const uint8_t binary_fingerprint[16]; // = {0x46,0xA7,0x03,0xA3,0x33,0x37,0xBE,0xD2,0xF6,0x2F,0x38,0x6F,0xC6,0x6B,0x2A,0x5F};

  NpcAoiField() : field_((NpcAoiFields::type)0), value_(0) {
  }

  virtual ~NpcAoiField() throw() {}

  NpcAoiFields::type field_;
  int32_t value_;

  void __set_field_(const NpcAoiFields::type val) {
    field_ = val;
  }

  void __set_value_(const int32_t val) {
    value_ = val;
  }

  bool operator == (const NpcAoiField & rhs) const
  {
    if (!(field_ == rhs.field_))
      return false;
    if (!(value_ == rhs.value_))
      return false;
    return true;
  }
  bool operator != (const NpcAoiField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NpcAoiField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NpcAoiField &a, NpcAoiField &b);


class NpcSnapshotField {
 public:

  static const char* ascii_fingerprint; // = "DC4A7944CA87068C3A6D1BCBB8633569";
  static const uint8_t binary_fingerprint[16]; // = {0xDC,0x4A,0x79,0x44,0xCA,0x87,0x06,0x8C,0x3A,0x6D,0x1B,0xCB,0xB8,0x63,0x35,0x69};

  NpcSnapshotField() : template_id_(0), current_hp_(0), current_mp_(0), buff_(), transport_() {
  }

  virtual ~NpcSnapshotField() throw() {}

  int32_t template_id_;
  int32_t current_hp_;
  int32_t current_mp_;
  std::string buff_;
  std::string transport_;

  void __set_template_id_(const int32_t val) {
    template_id_ = val;
  }

  void __set_current_hp_(const int32_t val) {
    current_hp_ = val;
  }

  void __set_current_mp_(const int32_t val) {
    current_mp_ = val;
  }

  void __set_buff_(const std::string& val) {
    buff_ = val;
  }

  void __set_transport_(const std::string& val) {
    transport_ = val;
  }

  bool operator == (const NpcSnapshotField & rhs) const
  {
    if (!(template_id_ == rhs.template_id_))
      return false;
    if (!(current_hp_ == rhs.current_hp_))
      return false;
    if (!(current_mp_ == rhs.current_mp_))
      return false;
    if (!(buff_ == rhs.buff_))
      return false;
    if (!(transport_ == rhs.transport_))
      return false;
    return true;
  }
  bool operator != (const NpcSnapshotField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NpcSnapshotField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NpcSnapshotField &a, NpcSnapshotField &b);

} // namespace

#endif
