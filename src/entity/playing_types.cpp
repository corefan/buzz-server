/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "playing_types.h"

#include <algorithm>

namespace entity {

int _kPlayingTypeValues[] = {
  PlayingType::MIN,
  PlayingType::COMMON,
  PlayingType::DAILY_PASS,
  PlayingType::MAX
};
const char* _kPlayingTypeNames[] = {
  "MIN",
  "COMMON",
  "DAILY_PASS",
  "MAX"
};
const std::map<int, const char*> _PlayingType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kPlayingTypeValues, _kPlayingTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPlayingCampTypeValues[] = {
  PlayingCampType::MIN,
  PlayingCampType::PLAYER,
  PlayingCampType::TEAM,
  PlayingCampType::GUILD,
  PlayingCampType::ROOM,
  PlayingCampType::ACTIVITY,
  PlayingCampType::MAX
};
const char* _kPlayingCampTypeNames[] = {
  "MIN",
  "PLAYER",
  "TEAM",
  "GUILD",
  "ROOM",
  "ACTIVITY",
  "MAX"
};
const std::map<int, const char*> _PlayingCampType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kPlayingCampTypeValues, _kPlayingCampTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDailyPassGroupValues[] = {
  DailyPassGroup::MIN,
  DailyPassGroup::PLOT,
  DailyPassGroup::IDOL,
  DailyPassGroup::MAX
};
const char* _kDailyPassGroupNames[] = {
  "MIN",
  "PLOT",
  "IDOL",
  "MAX"
};
const std::map<int, const char*> _DailyPassGroup_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kDailyPassGroupValues, _kDailyPassGroupNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPlayingScoreTypeValues[] = {
  PlayingScoreType::MIN,
  PlayingScoreType::KILL_NPC,
  PlayingScoreType::KILL_ACTOR,
  PlayingScoreType::EXP,
  PlayingScoreType::DEAD_COUNT,
  PlayingScoreType::POWER,
  PlayingScoreType::DAMAGE,
  PlayingScoreType::STAGE,
  PlayingScoreType::MAX
};
const char* _kPlayingScoreTypeNames[] = {
  "MIN",
  "KILL_NPC",
  "KILL_ACTOR",
  "EXP",
  "DEAD_COUNT",
  "POWER",
  "DAMAGE",
  "STAGE",
  "MAX"
};
const std::map<int, const char*> _PlayingScoreType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(9, _kPlayingScoreTypeValues, _kPlayingScoreTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPlayingResultTypeValues[] = {
  PlayingResultType::MIN,
  PlayingResultType::SIMPLE_SOCRE,
  PlayingResultType::SIMPLE_PASS,
  PlayingResultType::MAX
};
const char* _kPlayingResultTypeNames[] = {
  "MIN",
  "SIMPLE_SOCRE",
  "SIMPLE_PASS",
  "MAX"
};
const std::map<int, const char*> _PlayingResultType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kPlayingResultTypeValues, _kPlayingResultTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPlayingAutoTypeValues[] = {
  PlayingAutoType::MIN,
  PlayingAutoType::RECORD,
  PlayingAutoType::IMMEDIATE,
  PlayingAutoType::MAX
};
const char* _kPlayingAutoTypeNames[] = {
  "MIN",
  "RECORD",
  "IMMEDIATE",
  "MAX"
};
const std::map<int, const char*> _PlayingAutoType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kPlayingAutoTypeValues, _kPlayingAutoTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPlayingPeriodTypeValues[] = {
  PlayingPeriodType::MIN,
  PlayingPeriodType::DAILY,
  PlayingPeriodType::WEEKLY,
  PlayingPeriodType::MAX
};
const char* _kPlayingPeriodTypeNames[] = {
  "MIN",
  "DAILY",
  "WEEKLY",
  "MAX"
};
const std::map<int, const char*> _PlayingPeriodType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kPlayingPeriodTypeValues, _kPlayingPeriodTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPlayingTeamStatusValues[] = {
  PlayingTeamStatus::MIN,
  PlayingTeamStatus::WAITING,
  PlayingTeamStatus::READY,
  PlayingTeamStatus::MAX
};
const char* _kPlayingTeamStatusNames[] = {
  "MIN",
  "WAITING",
  "READY",
  "MAX"
};
const std::map<int, const char*> _PlayingTeamStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kPlayingTeamStatusValues, _kPlayingTeamStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* PlayingItemField::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t PlayingItemField::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

uint32_t PlayingItemField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_template_ = false;
  bool isset_number_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->template_);
          isset_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->number_);
          isset_number_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_number_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PlayingItemField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PlayingItemField");

  xfer += oprot->writeFieldBegin("template_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->number_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PlayingItemField &a, PlayingItemField &b) {
  using ::std::swap;
  swap(a.template_, b.template_);
  swap(a.number_, b.number_);
}

const char* PlayingAwardField::ascii_fingerprint = "9177E894815163D920ECC1A1CE512CD8";
const uint8_t PlayingAwardField::binary_fingerprint[16] = {0x91,0x77,0xE8,0x94,0x81,0x51,0x63,0xD9,0x20,0xEC,0xC1,0xA1,0xCE,0x51,0x2C,0xD8};

uint32_t PlayingAwardField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_id_ = false;
  bool isset_number_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type_ = ( ::entity::ResourceType::type)ecast0;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->number_);
          isset_number_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_number_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PlayingAwardField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PlayingAwardField");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->number_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PlayingAwardField &a, PlayingAwardField &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.id_, b.id_);
  swap(a.number_, b.number_);
}

const char* PlayingAwardFields::ascii_fingerprint = "7FEA17F9F2B4FB50FF33F7320BB8C48F";
const uint8_t PlayingAwardFields::binary_fingerprint[16] = {0x7F,0xEA,0x17,0xF9,0xF2,0xB4,0xFB,0x50,0xFF,0x33,0xF7,0x32,0x0B,0xB8,0xC4,0x8F};

uint32_t PlayingAwardFields::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_playing_template_ = false;
  bool isset_awards_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_template_);
          isset_playing_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->awards_.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readListBegin(_etype4, _size1);
            this->awards_.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += this->awards_[_i5].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_awards_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_playing_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_awards_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PlayingAwardFields::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PlayingAwardFields");

  xfer += oprot->writeFieldBegin("playing_template_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->playing_template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("awards_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->awards_.size()));
    std::vector<PlayingAwardField> ::const_iterator _iter6;
    for (_iter6 = this->awards_.begin(); _iter6 != this->awards_.end(); ++_iter6)
    {
      xfer += (*_iter6).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PlayingAwardFields &a, PlayingAwardFields &b) {
  using ::std::swap;
  swap(a.playing_template_, b.playing_template_);
  swap(a.awards_, b.awards_);
}

const char* PlayingScoreField::ascii_fingerprint = "9177E894815163D920ECC1A1CE512CD8";
const uint8_t PlayingScoreField::binary_fingerprint[16] = {0x91,0x77,0xE8,0x94,0x81,0x51,0x63,0xD9,0x20,0xEC,0xC1,0xA1,0xCE,0x51,0x2C,0xD8};

uint32_t PlayingScoreField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_key_ = false;
  bool isset_value_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast7;
          xfer += iprot->readI32(ecast7);
          this->type_ = (PlayingScoreType::type)ecast7;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->key_);
          isset_key_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->value_);
          isset_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_key_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PlayingScoreField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PlayingScoreField");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("key_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->key_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PlayingScoreField &a, PlayingScoreField &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.key_, b.key_);
  swap(a.value_, b.value_);
}

const char* PlayingRankingField::ascii_fingerprint = "EEBC915CE44901401D881E6091423036";
const uint8_t PlayingRankingField::binary_fingerprint[16] = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

uint32_t PlayingRankingField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name_ = false;
  bool isset_value_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name_);
          isset_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->value_);
          isset_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PlayingRankingField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PlayingRankingField");

  xfer += oprot->writeFieldBegin("name_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PlayingRankingField &a, PlayingRankingField &b) {
  using ::std::swap;
  swap(a.name_, b.name_);
  swap(a.value_, b.value_);
}

const char* PlayingRecordField::ascii_fingerprint = "BAC735954E29AD7C622C02DC007A46AB";
const uint8_t PlayingRecordField::binary_fingerprint[16] = {0xBA,0xC7,0x35,0x95,0x4E,0x29,0xAD,0x7C,0x62,0x2C,0x02,0xDC,0x00,0x7A,0x46,0xAB};

uint32_t PlayingRecordField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_period_count_ = false;
  bool isset_spend_secs_ = false;
  bool isset_first_pass_awarded_ = false;
  bool isset_values_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->period_count_);
          isset_period_count_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->spend_secs_);
          isset_spend_secs_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->first_pass_awarded_);
          isset_first_pass_awarded_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->values_.clear();
            uint32_t _size8;
            ::apache::thrift::protocol::TType _etype11;
            xfer += iprot->readListBegin(_etype11, _size8);
            this->values_.resize(_size8);
            uint32_t _i12;
            for (_i12 = 0; _i12 < _size8; ++_i12)
            {
              xfer += iprot->readI32(this->values_[_i12]);
            }
            xfer += iprot->readListEnd();
          }
          isset_values_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_period_count_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_spend_secs_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_first_pass_awarded_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_values_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PlayingRecordField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PlayingRecordField");

  xfer += oprot->writeFieldBegin("period_count_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->period_count_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("spend_secs_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->spend_secs_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("first_pass_awarded_", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->first_pass_awarded_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("values_", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->values_.size()));
    std::vector<int32_t> ::const_iterator _iter13;
    for (_iter13 = this->values_.begin(); _iter13 != this->values_.end(); ++_iter13)
    {
      xfer += oprot->writeI32((*_iter13));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PlayingRecordField &a, PlayingRecordField &b) {
  using ::std::swap;
  swap(a.period_count_, b.period_count_);
  swap(a.spend_secs_, b.spend_secs_);
  swap(a.first_pass_awarded_, b.first_pass_awarded_);
  swap(a.values_, b.values_);
}

const char* PlayingResultField::ascii_fingerprint = "93C3AA88F26314341CE82F7918D8BF77";
const uint8_t PlayingResultField::binary_fingerprint[16] = {0x93,0xC3,0xAA,0x88,0xF2,0x63,0x14,0x34,0x1C,0xE8,0x2F,0x79,0x18,0xD8,0xBF,0x77};

uint32_t PlayingResultField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_awarded_ = false;
  bool isset_award_count_ = false;
  bool isset_paid_award_count_ = false;
  bool isset_values_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->awarded_);
          isset_awarded_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->award_count_);
          isset_award_count_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->paid_award_count_);
          isset_paid_award_count_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->values_.clear();
            uint32_t _size14;
            ::apache::thrift::protocol::TType _etype17;
            xfer += iprot->readListBegin(_etype17, _size14);
            this->values_.resize(_size14);
            uint32_t _i18;
            for (_i18 = 0; _i18 < _size14; ++_i18)
            {
              xfer += iprot->readI32(this->values_[_i18]);
            }
            xfer += iprot->readListEnd();
          }
          isset_values_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_awarded_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_award_count_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_paid_award_count_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_values_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PlayingResultField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PlayingResultField");

  xfer += oprot->writeFieldBegin("awarded_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->awarded_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("award_count_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->award_count_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("paid_award_count_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->paid_award_count_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("values_", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->values_.size()));
    std::vector<int32_t> ::const_iterator _iter19;
    for (_iter19 = this->values_.begin(); _iter19 != this->values_.end(); ++_iter19)
    {
      xfer += oprot->writeI32((*_iter19));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PlayingResultField &a, PlayingResultField &b) {
  using ::std::swap;
  swap(a.awarded_, b.awarded_);
  swap(a.award_count_, b.award_count_);
  swap(a.paid_award_count_, b.paid_award_count_);
  swap(a.values_, b.values_);
}

const char* PlayingTeamField::ascii_fingerprint = "776618BF917B240D143C3C7E58214557";
const uint8_t PlayingTeamField::binary_fingerprint[16] = {0x77,0x66,0x18,0xBF,0x91,0x7B,0x24,0x0D,0x14,0x3C,0x3C,0x7E,0x58,0x21,0x45,0x57};

uint32_t PlayingTeamField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;
  bool isset_name_ = false;
  bool isset_min_fight_score_ = false;
  bool isset_member_number_ = false;
  bool isset_status_ = false;
  bool isset_capacity_ = false;
  bool isset_auto_open_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name_);
          isset_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->min_fight_score_);
          isset_min_fight_score_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->member_number_);
          isset_member_number_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast20;
          xfer += iprot->readI32(ecast20);
          this->status_ = (PlayingTeamStatus::type)ecast20;
          isset_status_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->capacity_);
          isset_capacity_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->auto_open_);
          isset_auto_open_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_name_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_min_fight_score_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_member_number_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_status_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_capacity_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_auto_open_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PlayingTeamField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PlayingTeamField");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("min_fight_score_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->min_fight_score_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("member_number_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->member_number_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->status_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("capacity_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->capacity_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("auto_open_", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->auto_open_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PlayingTeamField &a, PlayingTeamField &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.name_, b.name_);
  swap(a.min_fight_score_, b.min_fight_score_);
  swap(a.member_number_, b.member_number_);
  swap(a.status_, b.status_);
  swap(a.capacity_, b.capacity_);
  swap(a.auto_open_, b.auto_open_);
}

const char* PlayingTeamMemberField::ascii_fingerprint = "0FAA12BA4C0DEB2499895230F6057237";
const uint8_t PlayingTeamMemberField::binary_fingerprint[16] = {0x0F,0xAA,0x12,0xBA,0x4C,0x0D,0xEB,0x24,0x99,0x89,0x52,0x30,0xF6,0x05,0x72,0x37};

uint32_t PlayingTeamMemberField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_name_ = false;
  bool isset_fight_score_ = false;
  bool isset_level_ = false;
  bool isset_ready_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name_);
          isset_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->fight_score_);
          isset_fight_score_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level_);
          isset_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ready_);
          isset_ready_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_name_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fight_score_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ready_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PlayingTeamMemberField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PlayingTeamMemberField");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fight_score_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->fight_score_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("level_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ready_", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->ready_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PlayingTeamMemberField &a, PlayingTeamMemberField &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.name_, b.name_);
  swap(a.fight_score_, b.fight_score_);
  swap(a.level_, b.level_);
  swap(a.ready_, b.ready_);
}

} // namespace
