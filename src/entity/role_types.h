/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef role_TYPES_H
#define role_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace entity {

struct RoleAoiFields {
  enum type {
    AOI_BEGIN = 0,
    LEVEL = 0,
    VOCATION = 1,
    CURRENT_HP = 2,
    MAX_HP = 3,
    CURRENT_MP = 4,
    MAX_MP = 5,
    MOVE_SPEED = 6,
    STATUS = 7,
    COMMON_STATUS = 8,
    CAMP = 9,
    DIRECTION = 10,
    AOI_END = 11
  };
};

extern const std::map<int, const char*> _RoleAoiFields_VALUES_TO_NAMES;

struct RoleClientFields {
  enum type {
    CLIENT_BEGIN = 0,
    PHYSIQUE = 0,
    STRENGTH = 1,
    INTELLIGENCE = 2,
    AGILE = 3,
    SPIRIT = 4,
    PHYSICS_ATTACK = 5,
    PHYSICS_DEFENCE = 6,
    MAGIC_ATTACK = 7,
    MAGIC_DEFENCE = 8,
    DODGE = 9,
    CRIT = 10,
    IGNORE_DEFENCE = 11,
    CURRENT_ENERGY = 12,
    MAX_ENERGY = 13,
    ENERGY_INCREMENT = 14,
    CLIENT_END = 15
  };
};

extern const std::map<int, const char*> _RoleClientFields_VALUES_TO_NAMES;

struct RoleServerFields {
  enum type {
    SERVER_BEGIN = 0,
    MAX_HP_ADD_VALUE = 0,
    MAX_HP_ADD_SECOND_VALUE = 1,
    MAX_HP_ADD_PERCENT = 2,
    MAX_MP_ADD_VALUE = 3,
    MAX_MP_ADD_SECOND_VALUE = 4,
    MAX_MP_ADD_PERCENT = 5,
    MOVE_SPEED_ADD_VALUE = 6,
    MOVE_SPEED_ADD_SECOND_VALUE = 7,
    MOVE_SPEED_ADD_PERCENT = 8,
    PHYSIQUE_ADD_VALUE = 9,
    PHYSIQUE_ADD_SECOND_VALUE = 10,
    PHYSIQUE_ADD_PERCENT = 11,
    STRENGTH_ADD_VALUE = 12,
    STRENGTH_ADD_SECOND_VALUE = 13,
    STRENGTH_ADD_PERCENT = 14,
    INTELLIGENCE_ADD_VALUE = 15,
    INTELLIGENCE_ADD_SECOND_VALUE = 16,
    INTELLIGENCE_ADD_PERCENT = 17,
    AGILE_ADD_VALUE = 18,
    AGILE_ADD_SECOND_VALUE = 19,
    AGILE_ADD_PERCENT = 20,
    SPIRIT_ADD_VALUE = 21,
    SPIRIT_ADD_SECOND_VALUE = 22,
    SPIRIT_ADD_PERCENT = 23,
    PHYSICS_ATTACK_ADD_VALUE = 24,
    PHYSICS_ATTACK_ADD_SECOND_VALUE = 25,
    PHYSICS_ATTACK_ADD_PERCENT = 26,
    PHYSICS_DEFENCE_ADD_VALUE = 27,
    PHYSICS_DEFENCE_ADD_SECOND_VALUE = 28,
    PHYSICS_DEFENCE_ADD_PERCENT = 29,
    MAGIC_ATTACK_ADD_VALUE = 30,
    MAGIC_ATTACK_ADD_SECOND_VALUE = 31,
    MAGIC_ATTACK_ADD_PERCENT = 32,
    MAGIC_DEFENCE_ADD_VALUE = 33,
    MAGIC_DEFENCE_ADD_SECOND_VALUE = 34,
    MAGIC_DEFENCE_ADD_PERCENT = 35,
    DODGE_ADD_VALUE = 36,
    DODGE_ADD_SECOND_VALUE = 37,
    DODGE_ADD_PERCENT = 38,
    DODGE_PERCENT_ADD_VALUE = 39,
    CRIT_ADD_VALUE = 40,
    CRIT_ADD_SECOND_VALUE = 41,
    CRIT_ADD_PERCENT = 42,
    CRIT_PERCENT_ADD_VALUE = 43,
    CRIT_EFFECT_PERCENT_ADD_VALUE = 44,
    IGNORE_DEFENCE_ADD_VALUE = 45,
    IGNORE_DEFENCE_ADD_SECOND_VALUE = 46,
    IGNORE_DEFENCE_ADD_PERCENT = 47,
    IGNORE_DEFENCE_PERCENT_ADD_VALUE = 48,
    PHYSICS_HURT_REDUCE_ADD_PERCENT = 49,
    MAGIC_HURT_REDUCE_ADD_PERCENT = 50,
    HURT_REDUCE_ADD_PERCENT = 51,
    HURT_RANDOM_PERCENT_ADD = 52,
    CURE_PERCENT_ADD = 53,
    MAX_ENERGY_ADD_VALUE = 54,
    MAX_ENERGY_ADD_SECOND_VALUE = 55,
    MAX_ENERGY_ADD_PERCENT = 56,
    ENERGY_INCREMENT_ADD_VALUE = 57,
    ENERGY_INCREMENT_ADD_SECOND_VALUE = 58,
    ENERGY_INCREMENT_ADD_PERCENT = 59,
    SERVER_END = 60
  };
};

extern const std::map<int, const char*> _RoleServerFields_VALUES_TO_NAMES;

struct RoleBasicStatus {
  enum type {
    STATUS_MIN = 0,
    STATUS_COMMON = 0,
    STATUS_DIE = 1,
    STATUS_ZAZEN = 2,
    STATUS_MAX = 3
  };
};

extern const std::map<int, const char*> _RoleBasicStatus_VALUES_TO_NAMES;

struct RoleCommonStatus {
  enum type {
    SOUL = 1,
    FORBID_MOVE = 2,
    FORBID_USE_SKILL = 4,
    FORBID_USE_ITEM = 8,
    FORBID_BEATEN_MAP = 16
  };
};

extern const std::map<int, const char*> _RoleCommonStatus_VALUES_TO_NAMES;

struct RoleAfterDieStatus {
  enum type {
    NORMAL = 0,
    PROTECT = 1
  };
};

extern const std::map<int, const char*> _RoleAfterDieStatus_VALUES_TO_NAMES;


class RoleAoiField {
 public:

  static const char* ascii_fingerprint; // = "46A703A33337BED2F62F386FC66B2A5F";
  static const uint8_t binary_fingerprint[16]; // = {0x46,0xA7,0x03,0xA3,0x33,0x37,0xBE,0xD2,0xF6,0x2F,0x38,0x6F,0xC6,0x6B,0x2A,0x5F};

  RoleAoiField() : field_((RoleAoiFields::type)0), value_(0) {
  }

  virtual ~RoleAoiField() throw() {}

  RoleAoiFields::type field_;
  int32_t value_;

  void __set_field_(const RoleAoiFields::type val) {
    field_ = val;
  }

  void __set_value_(const int32_t val) {
    value_ = val;
  }

  bool operator == (const RoleAoiField & rhs) const
  {
    if (!(field_ == rhs.field_))
      return false;
    if (!(value_ == rhs.value_))
      return false;
    return true;
  }
  bool operator != (const RoleAoiField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RoleAoiField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RoleAoiField &a, RoleAoiField &b);


class RoleClientField {
 public:

  static const char* ascii_fingerprint; // = "46A703A33337BED2F62F386FC66B2A5F";
  static const uint8_t binary_fingerprint[16]; // = {0x46,0xA7,0x03,0xA3,0x33,0x37,0xBE,0xD2,0xF6,0x2F,0x38,0x6F,0xC6,0x6B,0x2A,0x5F};

  RoleClientField() : field_((RoleClientFields::type)0), value_(0) {
  }

  virtual ~RoleClientField() throw() {}

  RoleClientFields::type field_;
  int32_t value_;

  void __set_field_(const RoleClientFields::type val) {
    field_ = val;
  }

  void __set_value_(const int32_t val) {
    value_ = val;
  }

  bool operator == (const RoleClientField & rhs) const
  {
    if (!(field_ == rhs.field_))
      return false;
    if (!(value_ == rhs.value_))
      return false;
    return true;
  }
  bool operator != (const RoleClientField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RoleClientField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RoleClientField &a, RoleClientField &b);

} // namespace

#endif
