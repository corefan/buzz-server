/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "role_types.h"

#include <algorithm>

namespace entity {

int _kRoleAoiFieldsValues[] = {
  RoleAoiFields::AOI_BEGIN,
  RoleAoiFields::LEVEL,
  RoleAoiFields::VOCATION,
  RoleAoiFields::CURRENT_HP,
  RoleAoiFields::MAX_HP,
  RoleAoiFields::CURRENT_MP,
  RoleAoiFields::MAX_MP,
  RoleAoiFields::MOVE_SPEED,
  RoleAoiFields::STATUS,
  RoleAoiFields::COMMON_STATUS,
  RoleAoiFields::CAMP,
  RoleAoiFields::DIRECTION,
  RoleAoiFields::AOI_END
};
const char* _kRoleAoiFieldsNames[] = {
  "AOI_BEGIN",
  "LEVEL",
  "VOCATION",
  "CURRENT_HP",
  "MAX_HP",
  "CURRENT_MP",
  "MAX_MP",
  "MOVE_SPEED",
  "STATUS",
  "COMMON_STATUS",
  "CAMP",
  "DIRECTION",
  "AOI_END"
};
const std::map<int, const char*> _RoleAoiFields_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(13, _kRoleAoiFieldsValues, _kRoleAoiFieldsNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRoleClientFieldsValues[] = {
  RoleClientFields::CLIENT_BEGIN,
  RoleClientFields::PHYSIQUE,
  RoleClientFields::STRENGTH,
  RoleClientFields::INTELLIGENCE,
  RoleClientFields::AGILE,
  RoleClientFields::SPIRIT,
  RoleClientFields::PHYSICS_ATTACK,
  RoleClientFields::PHYSICS_DEFENCE,
  RoleClientFields::MAGIC_ATTACK,
  RoleClientFields::MAGIC_DEFENCE,
  RoleClientFields::DODGE,
  RoleClientFields::CRIT,
  RoleClientFields::IGNORE_DEFENCE,
  RoleClientFields::CURRENT_ENERGY,
  RoleClientFields::MAX_ENERGY,
  RoleClientFields::ENERGY_INCREMENT,
  RoleClientFields::CLIENT_END
};
const char* _kRoleClientFieldsNames[] = {
  "CLIENT_BEGIN",
  "PHYSIQUE",
  "STRENGTH",
  "INTELLIGENCE",
  "AGILE",
  "SPIRIT",
  "PHYSICS_ATTACK",
  "PHYSICS_DEFENCE",
  "MAGIC_ATTACK",
  "MAGIC_DEFENCE",
  "DODGE",
  "CRIT",
  "IGNORE_DEFENCE",
  "CURRENT_ENERGY",
  "MAX_ENERGY",
  "ENERGY_INCREMENT",
  "CLIENT_END"
};
const std::map<int, const char*> _RoleClientFields_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(17, _kRoleClientFieldsValues, _kRoleClientFieldsNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRoleServerFieldsValues[] = {
  RoleServerFields::SERVER_BEGIN,
  RoleServerFields::MAX_HP_ADD_VALUE,
  RoleServerFields::MAX_HP_ADD_SECOND_VALUE,
  RoleServerFields::MAX_HP_ADD_PERCENT,
  RoleServerFields::MAX_MP_ADD_VALUE,
  RoleServerFields::MAX_MP_ADD_SECOND_VALUE,
  RoleServerFields::MAX_MP_ADD_PERCENT,
  RoleServerFields::MOVE_SPEED_ADD_VALUE,
  RoleServerFields::MOVE_SPEED_ADD_SECOND_VALUE,
  RoleServerFields::MOVE_SPEED_ADD_PERCENT,
  RoleServerFields::PHYSIQUE_ADD_VALUE,
  RoleServerFields::PHYSIQUE_ADD_SECOND_VALUE,
  RoleServerFields::PHYSIQUE_ADD_PERCENT,
  RoleServerFields::STRENGTH_ADD_VALUE,
  RoleServerFields::STRENGTH_ADD_SECOND_VALUE,
  RoleServerFields::STRENGTH_ADD_PERCENT,
  RoleServerFields::INTELLIGENCE_ADD_VALUE,
  RoleServerFields::INTELLIGENCE_ADD_SECOND_VALUE,
  RoleServerFields::INTELLIGENCE_ADD_PERCENT,
  RoleServerFields::AGILE_ADD_VALUE,
  RoleServerFields::AGILE_ADD_SECOND_VALUE,
  RoleServerFields::AGILE_ADD_PERCENT,
  RoleServerFields::SPIRIT_ADD_VALUE,
  RoleServerFields::SPIRIT_ADD_SECOND_VALUE,
  RoleServerFields::SPIRIT_ADD_PERCENT,
  RoleServerFields::PHYSICS_ATTACK_ADD_VALUE,
  RoleServerFields::PHYSICS_ATTACK_ADD_SECOND_VALUE,
  RoleServerFields::PHYSICS_ATTACK_ADD_PERCENT,
  RoleServerFields::PHYSICS_DEFENCE_ADD_VALUE,
  RoleServerFields::PHYSICS_DEFENCE_ADD_SECOND_VALUE,
  RoleServerFields::PHYSICS_DEFENCE_ADD_PERCENT,
  RoleServerFields::MAGIC_ATTACK_ADD_VALUE,
  RoleServerFields::MAGIC_ATTACK_ADD_SECOND_VALUE,
  RoleServerFields::MAGIC_ATTACK_ADD_PERCENT,
  RoleServerFields::MAGIC_DEFENCE_ADD_VALUE,
  RoleServerFields::MAGIC_DEFENCE_ADD_SECOND_VALUE,
  RoleServerFields::MAGIC_DEFENCE_ADD_PERCENT,
  RoleServerFields::DODGE_ADD_VALUE,
  RoleServerFields::DODGE_ADD_SECOND_VALUE,
  RoleServerFields::DODGE_ADD_PERCENT,
  RoleServerFields::DODGE_PERCENT_ADD_VALUE,
  RoleServerFields::CRIT_ADD_VALUE,
  RoleServerFields::CRIT_ADD_SECOND_VALUE,
  RoleServerFields::CRIT_ADD_PERCENT,
  RoleServerFields::CRIT_PERCENT_ADD_VALUE,
  RoleServerFields::CRIT_EFFECT_PERCENT_ADD_VALUE,
  RoleServerFields::IGNORE_DEFENCE_ADD_VALUE,
  RoleServerFields::IGNORE_DEFENCE_ADD_SECOND_VALUE,
  RoleServerFields::IGNORE_DEFENCE_ADD_PERCENT,
  RoleServerFields::IGNORE_DEFENCE_PERCENT_ADD_VALUE,
  RoleServerFields::PHYSICS_HURT_REDUCE_ADD_PERCENT,
  RoleServerFields::MAGIC_HURT_REDUCE_ADD_PERCENT,
  RoleServerFields::HURT_REDUCE_ADD_PERCENT,
  RoleServerFields::HURT_RANDOM_PERCENT_ADD,
  RoleServerFields::CURE_PERCENT_ADD,
  RoleServerFields::MAX_ENERGY_ADD_VALUE,
  RoleServerFields::MAX_ENERGY_ADD_SECOND_VALUE,
  RoleServerFields::MAX_ENERGY_ADD_PERCENT,
  RoleServerFields::ENERGY_INCREMENT_ADD_VALUE,
  RoleServerFields::ENERGY_INCREMENT_ADD_SECOND_VALUE,
  RoleServerFields::ENERGY_INCREMENT_ADD_PERCENT,
  RoleServerFields::SERVER_END
};
const char* _kRoleServerFieldsNames[] = {
  "SERVER_BEGIN",
  "MAX_HP_ADD_VALUE",
  "MAX_HP_ADD_SECOND_VALUE",
  "MAX_HP_ADD_PERCENT",
  "MAX_MP_ADD_VALUE",
  "MAX_MP_ADD_SECOND_VALUE",
  "MAX_MP_ADD_PERCENT",
  "MOVE_SPEED_ADD_VALUE",
  "MOVE_SPEED_ADD_SECOND_VALUE",
  "MOVE_SPEED_ADD_PERCENT",
  "PHYSIQUE_ADD_VALUE",
  "PHYSIQUE_ADD_SECOND_VALUE",
  "PHYSIQUE_ADD_PERCENT",
  "STRENGTH_ADD_VALUE",
  "STRENGTH_ADD_SECOND_VALUE",
  "STRENGTH_ADD_PERCENT",
  "INTELLIGENCE_ADD_VALUE",
  "INTELLIGENCE_ADD_SECOND_VALUE",
  "INTELLIGENCE_ADD_PERCENT",
  "AGILE_ADD_VALUE",
  "AGILE_ADD_SECOND_VALUE",
  "AGILE_ADD_PERCENT",
  "SPIRIT_ADD_VALUE",
  "SPIRIT_ADD_SECOND_VALUE",
  "SPIRIT_ADD_PERCENT",
  "PHYSICS_ATTACK_ADD_VALUE",
  "PHYSICS_ATTACK_ADD_SECOND_VALUE",
  "PHYSICS_ATTACK_ADD_PERCENT",
  "PHYSICS_DEFENCE_ADD_VALUE",
  "PHYSICS_DEFENCE_ADD_SECOND_VALUE",
  "PHYSICS_DEFENCE_ADD_PERCENT",
  "MAGIC_ATTACK_ADD_VALUE",
  "MAGIC_ATTACK_ADD_SECOND_VALUE",
  "MAGIC_ATTACK_ADD_PERCENT",
  "MAGIC_DEFENCE_ADD_VALUE",
  "MAGIC_DEFENCE_ADD_SECOND_VALUE",
  "MAGIC_DEFENCE_ADD_PERCENT",
  "DODGE_ADD_VALUE",
  "DODGE_ADD_SECOND_VALUE",
  "DODGE_ADD_PERCENT",
  "DODGE_PERCENT_ADD_VALUE",
  "CRIT_ADD_VALUE",
  "CRIT_ADD_SECOND_VALUE",
  "CRIT_ADD_PERCENT",
  "CRIT_PERCENT_ADD_VALUE",
  "CRIT_EFFECT_PERCENT_ADD_VALUE",
  "IGNORE_DEFENCE_ADD_VALUE",
  "IGNORE_DEFENCE_ADD_SECOND_VALUE",
  "IGNORE_DEFENCE_ADD_PERCENT",
  "IGNORE_DEFENCE_PERCENT_ADD_VALUE",
  "PHYSICS_HURT_REDUCE_ADD_PERCENT",
  "MAGIC_HURT_REDUCE_ADD_PERCENT",
  "HURT_REDUCE_ADD_PERCENT",
  "HURT_RANDOM_PERCENT_ADD",
  "CURE_PERCENT_ADD",
  "MAX_ENERGY_ADD_VALUE",
  "MAX_ENERGY_ADD_SECOND_VALUE",
  "MAX_ENERGY_ADD_PERCENT",
  "ENERGY_INCREMENT_ADD_VALUE",
  "ENERGY_INCREMENT_ADD_SECOND_VALUE",
  "ENERGY_INCREMENT_ADD_PERCENT",
  "SERVER_END"
};
const std::map<int, const char*> _RoleServerFields_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(62, _kRoleServerFieldsValues, _kRoleServerFieldsNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRoleBasicStatusValues[] = {
  RoleBasicStatus::STATUS_MIN,
  RoleBasicStatus::STATUS_COMMON,
  RoleBasicStatus::STATUS_DIE,
  RoleBasicStatus::STATUS_ZAZEN,
  RoleBasicStatus::STATUS_MAX
};
const char* _kRoleBasicStatusNames[] = {
  "STATUS_MIN",
  "STATUS_COMMON",
  "STATUS_DIE",
  "STATUS_ZAZEN",
  "STATUS_MAX"
};
const std::map<int, const char*> _RoleBasicStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kRoleBasicStatusValues, _kRoleBasicStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRoleCommonStatusValues[] = {
  RoleCommonStatus::SOUL,
  RoleCommonStatus::FORBID_MOVE,
  RoleCommonStatus::FORBID_USE_SKILL,
  RoleCommonStatus::FORBID_USE_ITEM,
  RoleCommonStatus::FORBID_BEATEN_MAP
};
const char* _kRoleCommonStatusNames[] = {
  "SOUL",
  "FORBID_MOVE",
  "FORBID_USE_SKILL",
  "FORBID_USE_ITEM",
  "FORBID_BEATEN_MAP"
};
const std::map<int, const char*> _RoleCommonStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kRoleCommonStatusValues, _kRoleCommonStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRoleAfterDieStatusValues[] = {
  RoleAfterDieStatus::NORMAL,
  RoleAfterDieStatus::PROTECT
};
const char* _kRoleAfterDieStatusNames[] = {
  "NORMAL",
  "PROTECT"
};
const std::map<int, const char*> _RoleAfterDieStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kRoleAfterDieStatusValues, _kRoleAfterDieStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* RoleAoiField::ascii_fingerprint = "46A703A33337BED2F62F386FC66B2A5F";
const uint8_t RoleAoiField::binary_fingerprint[16] = {0x46,0xA7,0x03,0xA3,0x33,0x37,0xBE,0xD2,0xF6,0x2F,0x38,0x6F,0xC6,0x6B,0x2A,0x5F};

uint32_t RoleAoiField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_field_ = false;
  bool isset_value_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->field_ = (RoleAoiFields::type)ecast0;
          isset_field_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->value_);
          isset_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_field_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RoleAoiField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RoleAoiField");

  xfer += oprot->writeFieldBegin("field_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->field_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RoleAoiField &a, RoleAoiField &b) {
  using ::std::swap;
  swap(a.field_, b.field_);
  swap(a.value_, b.value_);
}

const char* RoleClientField::ascii_fingerprint = "46A703A33337BED2F62F386FC66B2A5F";
const uint8_t RoleClientField::binary_fingerprint[16] = {0x46,0xA7,0x03,0xA3,0x33,0x37,0xBE,0xD2,0xF6,0x2F,0x38,0x6F,0xC6,0x6B,0x2A,0x5F};

uint32_t RoleClientField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_field_ = false;
  bool isset_value_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->field_ = (RoleClientFields::type)ecast1;
          isset_field_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->value_);
          isset_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_field_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RoleClientField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RoleClientField");

  xfer += oprot->writeFieldBegin("field_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->field_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RoleClientField &a, RoleClientField &b) {
  using ::std::swap;
  swap(a.field_, b.field_);
  swap(a.value_, b.value_);
}

} // namespace
