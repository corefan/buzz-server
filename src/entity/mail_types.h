/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef mail_TYPES_H
#define mail_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace entity {

struct MailType {
  enum type {
    INVALID = 0,
    SYSTEM = 1,
    OPERATING = 2,
    GENERAL = 3
  };
};

extern const std::map<int, const char*> _MailType_VALUES_TO_NAMES;

struct MailAffixType {
  enum type {
    NONE = 0,
    EXIST = 1,
    PICKED = 2
  };
};

extern const std::map<int, const char*> _MailAffixType_VALUES_TO_NAMES;

struct MailReadState {
  enum type {
    UNREAD = 0,
    READ = 1
  };
};

extern const std::map<int, const char*> _MailReadState_VALUES_TO_NAMES;


class MailAffix {
 public:

  static const char* ascii_fingerprint; // = "C85359CE002BF2903A76E0958B7216DE";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x53,0x59,0xCE,0x00,0x2B,0xF2,0x90,0x3A,0x76,0xE0,0x95,0x8B,0x72,0x16,0xDE};

  MailAffix() : item1_(0), item1_num_(0), item2_(0), item2_num_(0), item3_(0), item3_num_(0), item4_(0), item4_num_(0), item5_(0), item5_num_(0), gold_(0), restrict_dollars_(0) {
  }

  virtual ~MailAffix() throw() {}

  int32_t item1_;
  int32_t item1_num_;
  int32_t item2_;
  int32_t item2_num_;
  int32_t item3_;
  int32_t item3_num_;
  int32_t item4_;
  int32_t item4_num_;
  int32_t item5_;
  int32_t item5_num_;
  int32_t gold_;
  int32_t restrict_dollars_;

  void __set_item1_(const int32_t val) {
    item1_ = val;
  }

  void __set_item1_num_(const int32_t val) {
    item1_num_ = val;
  }

  void __set_item2_(const int32_t val) {
    item2_ = val;
  }

  void __set_item2_num_(const int32_t val) {
    item2_num_ = val;
  }

  void __set_item3_(const int32_t val) {
    item3_ = val;
  }

  void __set_item3_num_(const int32_t val) {
    item3_num_ = val;
  }

  void __set_item4_(const int32_t val) {
    item4_ = val;
  }

  void __set_item4_num_(const int32_t val) {
    item4_num_ = val;
  }

  void __set_item5_(const int32_t val) {
    item5_ = val;
  }

  void __set_item5_num_(const int32_t val) {
    item5_num_ = val;
  }

  void __set_gold_(const int32_t val) {
    gold_ = val;
  }

  void __set_restrict_dollars_(const int32_t val) {
    restrict_dollars_ = val;
  }

  bool operator == (const MailAffix & rhs) const
  {
    if (!(item1_ == rhs.item1_))
      return false;
    if (!(item1_num_ == rhs.item1_num_))
      return false;
    if (!(item2_ == rhs.item2_))
      return false;
    if (!(item2_num_ == rhs.item2_num_))
      return false;
    if (!(item3_ == rhs.item3_))
      return false;
    if (!(item3_num_ == rhs.item3_num_))
      return false;
    if (!(item4_ == rhs.item4_))
      return false;
    if (!(item4_num_ == rhs.item4_num_))
      return false;
    if (!(item5_ == rhs.item5_))
      return false;
    if (!(item5_num_ == rhs.item5_num_))
      return false;
    if (!(gold_ == rhs.gold_))
      return false;
    if (!(restrict_dollars_ == rhs.restrict_dollars_))
      return false;
    return true;
  }
  bool operator != (const MailAffix &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MailAffix & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MailAffix &a, MailAffix &b);

} // namespace

#endif
