/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "gateway_cooling_protocol_types.h"

#include <algorithm>

namespace gateway { namespace protocol {

const char* MessageCoolingInitialize::ascii_fingerprint = "40D820C749878A3E856908735933CAA2";
const uint8_t MessageCoolingInitialize::binary_fingerprint[16] = {0x40,0xD8,0x20,0xC7,0x49,0x87,0x8A,0x3E,0x85,0x69,0x08,0x73,0x59,0x33,0xCA,0xA2};

uint32_t MessageCoolingInitialize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_coolings_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->coolings_.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->coolings_.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->coolings_[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_coolings_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_coolings_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageCoolingInitialize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageCoolingInitialize");

  xfer += oprot->writeFieldBegin("coolings_", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->coolings_.size()));
    std::vector< ::entity::CoolingFields> ::const_iterator _iter5;
    for (_iter5 = this->coolings_.begin(); _iter5 != this->coolings_.end(); ++_iter5)
    {
      xfer += (*_iter5).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageCoolingInitialize &a, MessageCoolingInitialize &b) {
  using ::std::swap;
  swap(a.coolings_, b.coolings_);
}

}} // namespace
