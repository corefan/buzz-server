/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef gateway_bar_protocol_TYPES_H
#define gateway_bar_protocol_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "bar_types.h"
#include "gateway_protocol_types.h"


namespace gateway { namespace protocol {


class MessageBarInterrupt {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

  MessageBarInterrupt() : interrupt_type_(( ::entity::BarEventType::type)0) {
  }

  virtual ~MessageBarInterrupt() throw() {}

   ::entity::BarEventType::type interrupt_type_;

  void __set_interrupt_type_(const  ::entity::BarEventType::type val) {
    interrupt_type_ = val;
  }

  bool operator == (const MessageBarInterrupt & rhs) const
  {
    if (!(interrupt_type_ == rhs.interrupt_type_))
      return false;
    return true;
  }
  bool operator != (const MessageBarInterrupt &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageBarInterrupt & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageBarInterrupt &a, MessageBarInterrupt &b);


class MessageBarFinishRequest {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MessageBarFinishRequest() : bar_id_(0) {
  }

  virtual ~MessageBarFinishRequest() throw() {}

  int32_t bar_id_;

  void __set_bar_id_(const int32_t val) {
    bar_id_ = val;
  }

  bool operator == (const MessageBarFinishRequest & rhs) const
  {
    if (!(bar_id_ == rhs.bar_id_))
      return false;
    return true;
  }
  bool operator != (const MessageBarFinishRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageBarFinishRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageBarFinishRequest &a, MessageBarFinishRequest &b);


class MessageBarFinishResponse {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

  MessageBarFinishResponse() : type_(( ::entity::BarModuleType::type)0) {
  }

  virtual ~MessageBarFinishResponse() throw() {}

   ::entity::BarModuleType::type type_;

  void __set_type_(const  ::entity::BarModuleType::type val) {
    type_ = val;
  }

  bool operator == (const MessageBarFinishResponse & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    return true;
  }
  bool operator != (const MessageBarFinishResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageBarFinishResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageBarFinishResponse &a, MessageBarFinishResponse &b);


class MessageBarStartSynchoronize {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MessageBarStartSynchoronize() : bar_id_(0) {
  }

  virtual ~MessageBarStartSynchoronize() throw() {}

  int32_t bar_id_;

  void __set_bar_id_(const int32_t val) {
    bar_id_ = val;
  }

  bool operator == (const MessageBarStartSynchoronize & rhs) const
  {
    if (!(bar_id_ == rhs.bar_id_))
      return false;
    return true;
  }
  bool operator != (const MessageBarStartSynchoronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageBarStartSynchoronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageBarStartSynchoronize &a, MessageBarStartSynchoronize &b);

}} // namespace

#endif
