/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "gateway_guild_protocol_types.h"

#include <algorithm>

namespace gateway { namespace protocol {

int _kGuildErrorCodeValues[] = {
  GuildErrorCode::SUCCESS,
  GuildErrorCode::GUILD_NAME_EXIST,
  GuildErrorCode::GUILD_NAME_INVALID,
  GuildErrorCode::PENDING_MEMBER_FULL,
  GuildErrorCode::MEMBER_FULL,
  GuildErrorCode::TARGET_OFFLINE,
  GuildErrorCode::TARGET_GUILD_MODULE_DISABLED,
  GuildErrorCode::TARGET_ALREADY_IN_GUILD,
  GuildErrorCode::ERROR_UNKNOWN
};
const char* _kGuildErrorCodeNames[] = {
  "SUCCESS",
  "GUILD_NAME_EXIST",
  "GUILD_NAME_INVALID",
  "PENDING_MEMBER_FULL",
  "MEMBER_FULL",
  "TARGET_OFFLINE",
  "TARGET_GUILD_MODULE_DISABLED",
  "TARGET_ALREADY_IN_GUILD",
  "ERROR_UNKNOWN"
};
const std::map<int, const char*> _GuildErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(9, _kGuildErrorCodeValues, _kGuildErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kGuildPendingMemberOperateTypeValues[] = {
  GuildPendingMemberOperateType::ADD,
  GuildPendingMemberOperateType::REMOVE,
  GuildPendingMemberOperateType::UPDATE
};
const char* _kGuildPendingMemberOperateTypeNames[] = {
  "ADD",
  "REMOVE",
  "UPDATE"
};
const std::map<int, const char*> _GuildPendingMemberOperateType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kGuildPendingMemberOperateTypeValues, _kGuildPendingMemberOperateTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kGuildMemberOperateTypeValues[] = {
  GuildMemberOperateType::ADD,
  GuildMemberOperateType::REMOVE,
  GuildMemberOperateType::UPDATE
};
const char* _kGuildMemberOperateTypeNames[] = {
  "ADD",
  "REMOVE",
  "UPDATE"
};
const std::map<int, const char*> _GuildMemberOperateType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kGuildMemberOperateTypeValues, _kGuildMemberOperateTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kGuildEventOperateTypeValues[] = {
  GuildEventOperateType::ADD
};
const char* _kGuildEventOperateTypeNames[] = {
  "ADD"
};
const std::map<int, const char*> _GuildEventOperateType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kGuildEventOperateTypeValues, _kGuildEventOperateTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kGuildSkillOperateTypeValues[] = {
  GuildSkillOperateType::ADD,
  GuildSkillOperateType::UPDATE
};
const char* _kGuildSkillOperateTypeNames[] = {
  "ADD",
  "UPDATE"
};
const std::map<int, const char*> _GuildSkillOperateType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kGuildSkillOperateTypeValues, _kGuildSkillOperateTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kGuildBuffOperateTypeValues[] = {
  GuildBuffOperateType::ADD,
  GuildBuffOperateType::CLEAR
};
const char* _kGuildBuffOperateTypeNames[] = {
  "ADD",
  "CLEAR"
};
const std::map<int, const char*> _GuildBuffOperateType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kGuildBuffOperateTypeValues, _kGuildBuffOperateTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kGuildListOperateTypeValues[] = {
  GuildListOperateType::ADD,
  GuildListOperateType::REMOVE,
  GuildListOperateType::UPDATE
};
const char* _kGuildListOperateTypeNames[] = {
  "ADD",
  "REMOVE",
  "UPDATE"
};
const std::map<int, const char*> _GuildListOperateType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kGuildListOperateTypeValues, _kGuildListOperateTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* GuildAoiData::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t GuildAoiData::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t GuildAoiData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_guild_name_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guild_name_);
          isset_guild_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_guild_name_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GuildAoiData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GuildAoiData");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guild_name_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->guild_name_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GuildAoiData &a, GuildAoiData &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.guild_name_, b.guild_name_);
}

const char* GuildPendingMemberData::ascii_fingerprint = "EF720E9FED0710433B3D5B55D1A223B6";
const uint8_t GuildPendingMemberData::binary_fingerprint[16] = {0xEF,0x72,0x0E,0x9F,0xED,0x07,0x10,0x43,0x3B,0x3D,0x5B,0x55,0xD1,0xA2,0x23,0xB6};

uint32_t GuildPendingMemberData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_name_);
          this->__isset.actor_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->online_);
          this->__isset.online_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->last_logout_time_);
          this->__isset.last_logout_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level_);
          this->__isset.level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->map_);
          this->__isset.map_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GuildPendingMemberData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GuildPendingMemberData");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.actor_name_) {
    xfer += oprot->writeFieldBegin("actor_name_", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->actor_name_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.online_) {
    xfer += oprot->writeFieldBegin("online_", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->online_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.last_logout_time_) {
    xfer += oprot->writeFieldBegin("last_logout_time_", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->last_logout_time_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.level_) {
    xfer += oprot->writeFieldBegin("level_", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.map_) {
    xfer += oprot->writeFieldBegin("map_", ::apache::thrift::protocol::T_I16, 6);
    xfer += oprot->writeI16(this->map_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GuildPendingMemberData &a, GuildPendingMemberData &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.actor_name_, b.actor_name_);
  swap(a.online_, b.online_);
  swap(a.last_logout_time_, b.last_logout_time_);
  swap(a.level_, b.level_);
  swap(a.map_, b.map_);
  swap(a.__isset, b.__isset);
}

const char* GuildMemberData::ascii_fingerprint = "58B29EAA45CA2DA86C6BC5F167CAEF60";
const uint8_t GuildMemberData::binary_fingerprint[16] = {0x58,0xB2,0x9E,0xAA,0x45,0xCA,0x2D,0xA8,0x6C,0x6B,0xC5,0xF1,0x67,0xCA,0xEF,0x60};

uint32_t GuildMemberData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_name_);
          this->__isset.actor_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->online_);
          this->__isset.online_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->last_logout_time_);
          this->__isset.last_logout_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level_);
          this->__isset.level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->map_);
          this->__isset.map_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_position_);
          this->__isset.guild_position_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->total_contribution_value_);
          this->__isset.total_contribution_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gold_contribution_);
          this->__isset.gold_contribution_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->freedom_dollars_contribution_);
          this->__isset.freedom_dollars_contribution_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->light_crystal_contribution_);
          this->__isset.light_crystal_contribution_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dark_crystal_contribution_);
          this->__isset.dark_crystal_contribution_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->holy_crystal_contribution_);
          this->__isset.holy_crystal_contribution_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->axe_fight_score_);
          this->__isset.axe_fight_score_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->shoot_fight_score_);
          this->__isset.shoot_fight_score_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->magic_fight_score_);
          this->__isset.magic_fight_score_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GuildMemberData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GuildMemberData");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.actor_name_) {
    xfer += oprot->writeFieldBegin("actor_name_", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->actor_name_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.online_) {
    xfer += oprot->writeFieldBegin("online_", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->online_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.last_logout_time_) {
    xfer += oprot->writeFieldBegin("last_logout_time_", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->last_logout_time_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.level_) {
    xfer += oprot->writeFieldBegin("level_", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.map_) {
    xfer += oprot->writeFieldBegin("map_", ::apache::thrift::protocol::T_I16, 6);
    xfer += oprot->writeI16(this->map_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guild_position_) {
    xfer += oprot->writeFieldBegin("guild_position_", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->guild_position_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.total_contribution_value_) {
    xfer += oprot->writeFieldBegin("total_contribution_value_", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->total_contribution_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gold_contribution_) {
    xfer += oprot->writeFieldBegin("gold_contribution_", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32(this->gold_contribution_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.freedom_dollars_contribution_) {
    xfer += oprot->writeFieldBegin("freedom_dollars_contribution_", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->freedom_dollars_contribution_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.light_crystal_contribution_) {
    xfer += oprot->writeFieldBegin("light_crystal_contribution_", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32(this->light_crystal_contribution_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dark_crystal_contribution_) {
    xfer += oprot->writeFieldBegin("dark_crystal_contribution_", ::apache::thrift::protocol::T_I32, 12);
    xfer += oprot->writeI32(this->dark_crystal_contribution_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.holy_crystal_contribution_) {
    xfer += oprot->writeFieldBegin("holy_crystal_contribution_", ::apache::thrift::protocol::T_I32, 13);
    xfer += oprot->writeI32(this->holy_crystal_contribution_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.axe_fight_score_) {
    xfer += oprot->writeFieldBegin("axe_fight_score_", ::apache::thrift::protocol::T_I32, 14);
    xfer += oprot->writeI32(this->axe_fight_score_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.shoot_fight_score_) {
    xfer += oprot->writeFieldBegin("shoot_fight_score_", ::apache::thrift::protocol::T_I32, 15);
    xfer += oprot->writeI32(this->shoot_fight_score_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.magic_fight_score_) {
    xfer += oprot->writeFieldBegin("magic_fight_score_", ::apache::thrift::protocol::T_I32, 16);
    xfer += oprot->writeI32(this->magic_fight_score_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GuildMemberData &a, GuildMemberData &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.actor_name_, b.actor_name_);
  swap(a.online_, b.online_);
  swap(a.last_logout_time_, b.last_logout_time_);
  swap(a.level_, b.level_);
  swap(a.map_, b.map_);
  swap(a.guild_position_, b.guild_position_);
  swap(a.total_contribution_value_, b.total_contribution_value_);
  swap(a.gold_contribution_, b.gold_contribution_);
  swap(a.freedom_dollars_contribution_, b.freedom_dollars_contribution_);
  swap(a.light_crystal_contribution_, b.light_crystal_contribution_);
  swap(a.dark_crystal_contribution_, b.dark_crystal_contribution_);
  swap(a.holy_crystal_contribution_, b.holy_crystal_contribution_);
  swap(a.axe_fight_score_, b.axe_fight_score_);
  swap(a.shoot_fight_score_, b.shoot_fight_score_);
  swap(a.magic_fight_score_, b.magic_fight_score_);
  swap(a.__isset, b.__isset);
}

const char* GuildEventData::ascii_fingerprint = "D121591FCC85D0E17C727CA264A5F46D";
const uint8_t GuildEventData::binary_fingerprint[16] = {0xD1,0x21,0x59,0x1F,0xCC,0x85,0xD0,0xE1,0x7C,0x72,0x7C,0xA2,0x64,0xA5,0xF4,0x6D};

uint32_t GuildEventData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_event_type_ = false;
  bool isset_timestamp_ = false;
  bool isset_vars_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->event_type_ = ( ::entity::GuildEventType::type)ecast0;
          isset_event_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->timestamp_);
          isset_timestamp_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vars_.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readListBegin(_etype4, _size1);
            this->vars_.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += iprot->readString(this->vars_[_i5]);
            }
            xfer += iprot->readListEnd();
          }
          isset_vars_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_event_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_timestamp_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_vars_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GuildEventData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GuildEventData");

  xfer += oprot->writeFieldBegin("event_type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->event_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamp_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->timestamp_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vars_", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->vars_.size()));
    std::vector<std::string> ::const_iterator _iter6;
    for (_iter6 = this->vars_.begin(); _iter6 != this->vars_.end(); ++_iter6)
    {
      xfer += oprot->writeString((*_iter6));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GuildEventData &a, GuildEventData &b) {
  using ::std::swap;
  swap(a.event_type_, b.event_type_);
  swap(a.timestamp_, b.timestamp_);
  swap(a.vars_, b.vars_);
}

const char* GuildSkillData::ascii_fingerprint = "78FEDFFD0F15205A6AA143E353A0D9B9";
const uint8_t GuildSkillData::binary_fingerprint[16] = {0x78,0xFE,0xDF,0xFD,0x0F,0x15,0x20,0x5A,0x6A,0xA1,0x43,0xE3,0x53,0xA0,0xD9,0xB9};

uint32_t GuildSkillData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level_);
          this->__isset.level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->effective_level_);
          this->__isset.effective_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GuildSkillData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GuildSkillData");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.level_) {
    xfer += oprot->writeFieldBegin("level_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.effective_level_) {
    xfer += oprot->writeFieldBegin("effective_level_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->effective_level_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GuildSkillData &a, GuildSkillData &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.level_, b.level_);
  swap(a.effective_level_, b.effective_level_);
  swap(a.__isset, b.__isset);
}

const char* GuildListData::ascii_fingerprint = "2085C8AC127F65FD7F35304D221F21B4";
const uint8_t GuildListData::binary_fingerprint[16] = {0x20,0x85,0xC8,0xAC,0x12,0x7F,0x65,0xFD,0x7F,0x35,0x30,0x4D,0x22,0x1F,0x21,0xB4};

uint32_t GuildListData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_guild_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guild_id_);
          isset_guild_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guild_name_);
          this->__isset.guild_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_level_);
          this->__isset.guild_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->member_num_);
          this->__isset.member_num_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->leader_actor_id_);
          this->__isset.leader_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->leader_actor_name_);
          this->__isset.leader_actor_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->leader_online_);
          this->__isset.leader_online_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->total_fight_score_);
          this->__isset.total_fight_score_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->suppress_join_);
          this->__isset.suppress_join_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->joined_);
          this->__isset.joined_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_guild_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GuildListData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GuildListData");

  xfer += oprot->writeFieldBegin("guild_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->guild_id_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.guild_name_) {
    xfer += oprot->writeFieldBegin("guild_name_", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->guild_name_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guild_level_) {
    xfer += oprot->writeFieldBegin("guild_level_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->guild_level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.member_num_) {
    xfer += oprot->writeFieldBegin("member_num_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->member_num_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.leader_actor_id_) {
    xfer += oprot->writeFieldBegin("leader_actor_id_", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->leader_actor_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.leader_actor_name_) {
    xfer += oprot->writeFieldBegin("leader_actor_name_", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->leader_actor_name_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.leader_online_) {
    xfer += oprot->writeFieldBegin("leader_online_", ::apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->leader_online_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.total_fight_score_) {
    xfer += oprot->writeFieldBegin("total_fight_score_", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->total_fight_score_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.suppress_join_) {
    xfer += oprot->writeFieldBegin("suppress_join_", ::apache::thrift::protocol::T_BOOL, 9);
    xfer += oprot->writeBool(this->suppress_join_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.joined_) {
    xfer += oprot->writeFieldBegin("joined_", ::apache::thrift::protocol::T_BOOL, 10);
    xfer += oprot->writeBool(this->joined_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GuildListData &a, GuildListData &b) {
  using ::std::swap;
  swap(a.guild_id_, b.guild_id_);
  swap(a.guild_name_, b.guild_name_);
  swap(a.guild_level_, b.guild_level_);
  swap(a.member_num_, b.member_num_);
  swap(a.leader_actor_id_, b.leader_actor_id_);
  swap(a.leader_actor_name_, b.leader_actor_name_);
  swap(a.leader_online_, b.leader_online_);
  swap(a.total_fight_score_, b.total_fight_score_);
  swap(a.suppress_join_, b.suppress_join_);
  swap(a.joined_, b.joined_);
  swap(a.__isset, b.__isset);
}

const char* MessageGuildAoiSynchronize::ascii_fingerprint = "006EFB9C0A4E436459CDFDF617590BB4";
const uint8_t MessageGuildAoiSynchronize::binary_fingerprint[16] = {0x00,0x6E,0xFB,0x9C,0x0A,0x4E,0x43,0x64,0x59,0xCD,0xFD,0xF6,0x17,0x59,0x0B,0xB4};

uint32_t MessageGuildAoiSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_aoi_data_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->aoi_data_.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _etype10;
            xfer += iprot->readListBegin(_etype10, _size7);
            this->aoi_data_.resize(_size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              xfer += this->aoi_data_[_i11].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_aoi_data_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_aoi_data_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildAoiSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildAoiSynchronize");

  xfer += oprot->writeFieldBegin("aoi_data_", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->aoi_data_.size()));
    std::vector<GuildAoiData> ::const_iterator _iter12;
    for (_iter12 = this->aoi_data_.begin(); _iter12 != this->aoi_data_.end(); ++_iter12)
    {
      xfer += (*_iter12).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildAoiSynchronize &a, MessageGuildAoiSynchronize &b) {
  using ::std::swap;
  swap(a.aoi_data_, b.aoi_data_);
}

const char* MessageGuildInitialize::ascii_fingerprint = "92D741A0180B5403DEFFAC78404D2DF1";
const uint8_t MessageGuildInitialize::binary_fingerprint[16] = {0x92,0xD7,0x41,0xA0,0x18,0x0B,0x54,0x03,0xDE,0xFF,0xAC,0x78,0x40,0x4D,0x2D,0xF1};

uint32_t MessageGuildInitialize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_guild_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guild_id_);
          isset_guild_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guild_name_);
          this->__isset.guild_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_logo_);
          this->__isset.guild_logo_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_level_);
          this->__isset.guild_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guild_announcement_);
          this->__isset.guild_announcement_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_gold_);
          this->__isset.guild_gold_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_light_crystal_);
          this->__isset.guild_light_crystal_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_dark_crystal_);
          this->__isset.guild_dark_crystal_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_holy_crystal_);
          this->__isset.guild_holy_crystal_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_light_attribute_);
          this->__isset.guild_light_attribute_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_dark_attribute_);
          this->__isset.guild_dark_attribute_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_holy_attribute_);
          this->__isset.guild_holy_attribute_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_shop_level_);
          this->__isset.guild_shop_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_college_level_);
          this->__isset.guild_college_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_barrack_level_);
          this->__isset.guild_barrack_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->suppress_join_);
          this->__isset.suppress_join_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->pending_members_.clear();
            uint32_t _size13;
            ::apache::thrift::protocol::TType _etype16;
            xfer += iprot->readListBegin(_etype16, _size13);
            this->pending_members_.resize(_size13);
            uint32_t _i17;
            for (_i17 = 0; _i17 < _size13; ++_i17)
            {
              xfer += this->pending_members_[_i17].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.pending_members_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->members_.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _etype21;
            xfer += iprot->readListBegin(_etype21, _size18);
            this->members_.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += this->members_[_i22].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.members_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->events_.clear();
            uint32_t _size23;
            ::apache::thrift::protocol::TType _etype26;
            xfer += iprot->readListBegin(_etype26, _size23);
            this->events_.resize(_size23);
            uint32_t _i27;
            for (_i27 = 0; _i27 < _size23; ++_i27)
            {
              xfer += this->events_[_i27].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.events_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->current_contribution_value_);
          this->__isset.current_contribution_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->guild_skills_.clear();
            uint32_t _size28;
            ::apache::thrift::protocol::TType _etype31;
            xfer += iprot->readListBegin(_etype31, _size28);
            this->guild_skills_.resize(_size28);
            uint32_t _i32;
            for (_i32 = 0; _i32 < _size28; ++_i32)
            {
              xfer += this->guild_skills_[_i32].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.guild_skills_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->guild_buffs_.clear();
            uint32_t _size33;
            ::apache::thrift::protocol::TType _etype36;
            xfer += iprot->readListBegin(_etype36, _size33);
            this->guild_buffs_.resize(_size33);
            uint32_t _i37;
            for (_i37 = 0; _i37 < _size33; ++_i37)
            {
              xfer += iprot->readI32(this->guild_buffs_[_i37]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.guild_buffs_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->current_playing_id_);
          this->__isset.current_playing_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->current_playing_template_id_);
          this->__isset.current_playing_template_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->opened_playing_groups_.clear();
            uint32_t _size38;
            ::apache::thrift::protocol::TType _etype41;
            xfer += iprot->readListBegin(_etype41, _size38);
            this->opened_playing_groups_.resize(_size38);
            uint32_t _i42;
            for (_i42 = 0; _i42 < _size38; ++_i42)
            {
              xfer += iprot->readI32(this->opened_playing_groups_[_i42]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.opened_playing_groups_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->finished_playings_.clear();
            uint32_t _size43;
            ::apache::thrift::protocol::TType _etype46;
            xfer += iprot->readListBegin(_etype46, _size43);
            this->finished_playings_.resize(_size43);
            uint32_t _i47;
            for (_i47 = 0; _i47 < _size43; ++_i47)
            {
              xfer += iprot->readI32(this->finished_playings_[_i47]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.finished_playings_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->awarded_playings_.clear();
            uint32_t _size48;
            ::apache::thrift::protocol::TType _etype51;
            xfer += iprot->readListBegin(_etype51, _size48);
            this->awarded_playings_.resize(_size48);
            uint32_t _i52;
            for (_i52 = 0; _i52 < _size48; ++_i52)
            {
              xfer += iprot->readI32(this->awarded_playings_[_i52]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.awarded_playings_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_guild_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildInitialize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildInitialize");

  xfer += oprot->writeFieldBegin("guild_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->guild_id_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.guild_name_) {
    xfer += oprot->writeFieldBegin("guild_name_", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->guild_name_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guild_logo_) {
    xfer += oprot->writeFieldBegin("guild_logo_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->guild_logo_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guild_level_) {
    xfer += oprot->writeFieldBegin("guild_level_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->guild_level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guild_announcement_) {
    xfer += oprot->writeFieldBegin("guild_announcement_", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->guild_announcement_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guild_gold_) {
    xfer += oprot->writeFieldBegin("guild_gold_", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->guild_gold_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guild_light_crystal_) {
    xfer += oprot->writeFieldBegin("guild_light_crystal_", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->guild_light_crystal_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guild_dark_crystal_) {
    xfer += oprot->writeFieldBegin("guild_dark_crystal_", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->guild_dark_crystal_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guild_holy_crystal_) {
    xfer += oprot->writeFieldBegin("guild_holy_crystal_", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32(this->guild_holy_crystal_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guild_light_attribute_) {
    xfer += oprot->writeFieldBegin("guild_light_attribute_", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->guild_light_attribute_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guild_dark_attribute_) {
    xfer += oprot->writeFieldBegin("guild_dark_attribute_", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32(this->guild_dark_attribute_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guild_holy_attribute_) {
    xfer += oprot->writeFieldBegin("guild_holy_attribute_", ::apache::thrift::protocol::T_I32, 12);
    xfer += oprot->writeI32(this->guild_holy_attribute_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guild_shop_level_) {
    xfer += oprot->writeFieldBegin("guild_shop_level_", ::apache::thrift::protocol::T_I32, 13);
    xfer += oprot->writeI32(this->guild_shop_level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guild_college_level_) {
    xfer += oprot->writeFieldBegin("guild_college_level_", ::apache::thrift::protocol::T_I32, 14);
    xfer += oprot->writeI32(this->guild_college_level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guild_barrack_level_) {
    xfer += oprot->writeFieldBegin("guild_barrack_level_", ::apache::thrift::protocol::T_I32, 15);
    xfer += oprot->writeI32(this->guild_barrack_level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.suppress_join_) {
    xfer += oprot->writeFieldBegin("suppress_join_", ::apache::thrift::protocol::T_BOOL, 16);
    xfer += oprot->writeBool(this->suppress_join_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.pending_members_) {
    xfer += oprot->writeFieldBegin("pending_members_", ::apache::thrift::protocol::T_LIST, 17);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->pending_members_.size()));
      std::vector<GuildPendingMemberData> ::const_iterator _iter53;
      for (_iter53 = this->pending_members_.begin(); _iter53 != this->pending_members_.end(); ++_iter53)
      {
        xfer += (*_iter53).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.members_) {
    xfer += oprot->writeFieldBegin("members_", ::apache::thrift::protocol::T_LIST, 18);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->members_.size()));
      std::vector<GuildMemberData> ::const_iterator _iter54;
      for (_iter54 = this->members_.begin(); _iter54 != this->members_.end(); ++_iter54)
      {
        xfer += (*_iter54).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.events_) {
    xfer += oprot->writeFieldBegin("events_", ::apache::thrift::protocol::T_LIST, 19);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->events_.size()));
      std::vector<GuildEventData> ::const_iterator _iter55;
      for (_iter55 = this->events_.begin(); _iter55 != this->events_.end(); ++_iter55)
      {
        xfer += (*_iter55).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.current_contribution_value_) {
    xfer += oprot->writeFieldBegin("current_contribution_value_", ::apache::thrift::protocol::T_I32, 20);
    xfer += oprot->writeI32(this->current_contribution_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guild_skills_) {
    xfer += oprot->writeFieldBegin("guild_skills_", ::apache::thrift::protocol::T_LIST, 21);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->guild_skills_.size()));
      std::vector<GuildSkillData> ::const_iterator _iter56;
      for (_iter56 = this->guild_skills_.begin(); _iter56 != this->guild_skills_.end(); ++_iter56)
      {
        xfer += (*_iter56).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guild_buffs_) {
    xfer += oprot->writeFieldBegin("guild_buffs_", ::apache::thrift::protocol::T_LIST, 22);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->guild_buffs_.size()));
      std::vector<int32_t> ::const_iterator _iter57;
      for (_iter57 = this->guild_buffs_.begin(); _iter57 != this->guild_buffs_.end(); ++_iter57)
      {
        xfer += oprot->writeI32((*_iter57));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.current_playing_id_) {
    xfer += oprot->writeFieldBegin("current_playing_id_", ::apache::thrift::protocol::T_STRING, 23);
    xfer += oprot->writeString(this->current_playing_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.current_playing_template_id_) {
    xfer += oprot->writeFieldBegin("current_playing_template_id_", ::apache::thrift::protocol::T_I32, 24);
    xfer += oprot->writeI32(this->current_playing_template_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.opened_playing_groups_) {
    xfer += oprot->writeFieldBegin("opened_playing_groups_", ::apache::thrift::protocol::T_LIST, 25);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->opened_playing_groups_.size()));
      std::vector<int32_t> ::const_iterator _iter58;
      for (_iter58 = this->opened_playing_groups_.begin(); _iter58 != this->opened_playing_groups_.end(); ++_iter58)
      {
        xfer += oprot->writeI32((*_iter58));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.finished_playings_) {
    xfer += oprot->writeFieldBegin("finished_playings_", ::apache::thrift::protocol::T_LIST, 26);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->finished_playings_.size()));
      std::vector<int32_t> ::const_iterator _iter59;
      for (_iter59 = this->finished_playings_.begin(); _iter59 != this->finished_playings_.end(); ++_iter59)
      {
        xfer += oprot->writeI32((*_iter59));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.awarded_playings_) {
    xfer += oprot->writeFieldBegin("awarded_playings_", ::apache::thrift::protocol::T_LIST, 27);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->awarded_playings_.size()));
      std::vector<int32_t> ::const_iterator _iter60;
      for (_iter60 = this->awarded_playings_.begin(); _iter60 != this->awarded_playings_.end(); ++_iter60)
      {
        xfer += oprot->writeI32((*_iter60));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildInitialize &a, MessageGuildInitialize &b) {
  using ::std::swap;
  swap(a.guild_id_, b.guild_id_);
  swap(a.guild_name_, b.guild_name_);
  swap(a.guild_logo_, b.guild_logo_);
  swap(a.guild_level_, b.guild_level_);
  swap(a.guild_announcement_, b.guild_announcement_);
  swap(a.guild_gold_, b.guild_gold_);
  swap(a.guild_light_crystal_, b.guild_light_crystal_);
  swap(a.guild_dark_crystal_, b.guild_dark_crystal_);
  swap(a.guild_holy_crystal_, b.guild_holy_crystal_);
  swap(a.guild_light_attribute_, b.guild_light_attribute_);
  swap(a.guild_dark_attribute_, b.guild_dark_attribute_);
  swap(a.guild_holy_attribute_, b.guild_holy_attribute_);
  swap(a.guild_shop_level_, b.guild_shop_level_);
  swap(a.guild_college_level_, b.guild_college_level_);
  swap(a.guild_barrack_level_, b.guild_barrack_level_);
  swap(a.suppress_join_, b.suppress_join_);
  swap(a.pending_members_, b.pending_members_);
  swap(a.members_, b.members_);
  swap(a.events_, b.events_);
  swap(a.current_contribution_value_, b.current_contribution_value_);
  swap(a.guild_skills_, b.guild_skills_);
  swap(a.guild_buffs_, b.guild_buffs_);
  swap(a.current_playing_id_, b.current_playing_id_);
  swap(a.current_playing_template_id_, b.current_playing_template_id_);
  swap(a.opened_playing_groups_, b.opened_playing_groups_);
  swap(a.finished_playings_, b.finished_playings_);
  swap(a.awarded_playings_, b.awarded_playings_);
  swap(a.__isset, b.__isset);
}

const char* MessageGuildSynchronize::ascii_fingerprint = "AE1A36B29CB467995C6C79AF99FB4CA9";
const uint8_t MessageGuildSynchronize::binary_fingerprint[16] = {0xAE,0x1A,0x36,0xB2,0x9C,0xB4,0x67,0x99,0x5C,0x6C,0x79,0xAF,0x99,0xFB,0x4C,0xA9};

uint32_t MessageGuildSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_level_);
          this->__isset.guild_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guild_announcement_);
          this->__isset.guild_announcement_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_gold_);
          this->__isset.guild_gold_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_light_crystal_);
          this->__isset.guild_light_crystal_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_dark_crystal_);
          this->__isset.guild_dark_crystal_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_holy_crystal_);
          this->__isset.guild_holy_crystal_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_light_attribute_);
          this->__isset.guild_light_attribute_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_dark_attribute_);
          this->__isset.guild_dark_attribute_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_holy_attribute_);
          this->__isset.guild_holy_attribute_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_shop_level_);
          this->__isset.guild_shop_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_college_level_);
          this->__isset.guild_college_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_barrack_level_);
          this->__isset.guild_barrack_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->suppress_join_);
          this->__isset.suppress_join_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->current_contribution_value_);
          this->__isset.current_contribution_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->current_playing_id_);
          this->__isset.current_playing_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->current_playing_template_id_);
          this->__isset.current_playing_template_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageGuildSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildSynchronize");

  if (this->__isset.guild_level_) {
    xfer += oprot->writeFieldBegin("guild_level_", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->guild_level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guild_announcement_) {
    xfer += oprot->writeFieldBegin("guild_announcement_", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->guild_announcement_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guild_gold_) {
    xfer += oprot->writeFieldBegin("guild_gold_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->guild_gold_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guild_light_crystal_) {
    xfer += oprot->writeFieldBegin("guild_light_crystal_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->guild_light_crystal_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guild_dark_crystal_) {
    xfer += oprot->writeFieldBegin("guild_dark_crystal_", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->guild_dark_crystal_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guild_holy_crystal_) {
    xfer += oprot->writeFieldBegin("guild_holy_crystal_", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->guild_holy_crystal_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guild_light_attribute_) {
    xfer += oprot->writeFieldBegin("guild_light_attribute_", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->guild_light_attribute_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guild_dark_attribute_) {
    xfer += oprot->writeFieldBegin("guild_dark_attribute_", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->guild_dark_attribute_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guild_holy_attribute_) {
    xfer += oprot->writeFieldBegin("guild_holy_attribute_", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32(this->guild_holy_attribute_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guild_shop_level_) {
    xfer += oprot->writeFieldBegin("guild_shop_level_", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->guild_shop_level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guild_college_level_) {
    xfer += oprot->writeFieldBegin("guild_college_level_", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32(this->guild_college_level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guild_barrack_level_) {
    xfer += oprot->writeFieldBegin("guild_barrack_level_", ::apache::thrift::protocol::T_I32, 12);
    xfer += oprot->writeI32(this->guild_barrack_level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.suppress_join_) {
    xfer += oprot->writeFieldBegin("suppress_join_", ::apache::thrift::protocol::T_BOOL, 13);
    xfer += oprot->writeBool(this->suppress_join_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.current_contribution_value_) {
    xfer += oprot->writeFieldBegin("current_contribution_value_", ::apache::thrift::protocol::T_I32, 14);
    xfer += oprot->writeI32(this->current_contribution_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.current_playing_id_) {
    xfer += oprot->writeFieldBegin("current_playing_id_", ::apache::thrift::protocol::T_STRING, 15);
    xfer += oprot->writeString(this->current_playing_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.current_playing_template_id_) {
    xfer += oprot->writeFieldBegin("current_playing_template_id_", ::apache::thrift::protocol::T_I32, 16);
    xfer += oprot->writeI32(this->current_playing_template_id_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildSynchronize &a, MessageGuildSynchronize &b) {
  using ::std::swap;
  swap(a.guild_level_, b.guild_level_);
  swap(a.guild_announcement_, b.guild_announcement_);
  swap(a.guild_gold_, b.guild_gold_);
  swap(a.guild_light_crystal_, b.guild_light_crystal_);
  swap(a.guild_dark_crystal_, b.guild_dark_crystal_);
  swap(a.guild_holy_crystal_, b.guild_holy_crystal_);
  swap(a.guild_light_attribute_, b.guild_light_attribute_);
  swap(a.guild_dark_attribute_, b.guild_dark_attribute_);
  swap(a.guild_holy_attribute_, b.guild_holy_attribute_);
  swap(a.guild_shop_level_, b.guild_shop_level_);
  swap(a.guild_college_level_, b.guild_college_level_);
  swap(a.guild_barrack_level_, b.guild_barrack_level_);
  swap(a.suppress_join_, b.suppress_join_);
  swap(a.current_contribution_value_, b.current_contribution_value_);
  swap(a.current_playing_id_, b.current_playing_id_);
  swap(a.current_playing_template_id_, b.current_playing_template_id_);
  swap(a.__isset, b.__isset);
}

const char* MessageGuildPendingMemberSynchronize::ascii_fingerprint = "B54BACECA977B00DADB2219E8767FCF5";
const uint8_t MessageGuildPendingMemberSynchronize::binary_fingerprint[16] = {0xB5,0x4B,0xAC,0xEC,0xA9,0x77,0xB0,0x0D,0xAD,0xB2,0x21,0x9E,0x87,0x67,0xFC,0xF5};

uint32_t MessageGuildPendingMemberSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_data_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast61;
          xfer += iprot->readI32(ecast61);
          this->type_ = (GuildPendingMemberOperateType::type)ecast61;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data_.read(iprot);
          isset_data_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_data_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildPendingMemberSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildPendingMemberSynchronize");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->data_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildPendingMemberSynchronize &a, MessageGuildPendingMemberSynchronize &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.data_, b.data_);
}

const char* MessageGuildMemberSynchronize::ascii_fingerprint = "3623D7B0333169D1D27BB5180EC93D84";
const uint8_t MessageGuildMemberSynchronize::binary_fingerprint[16] = {0x36,0x23,0xD7,0xB0,0x33,0x31,0x69,0xD1,0xD2,0x7B,0xB5,0x18,0x0E,0xC9,0x3D,0x84};

uint32_t MessageGuildMemberSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_data_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast62;
          xfer += iprot->readI32(ecast62);
          this->type_ = (GuildMemberOperateType::type)ecast62;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data_.read(iprot);
          isset_data_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_data_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildMemberSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildMemberSynchronize");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->data_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildMemberSynchronize &a, MessageGuildMemberSynchronize &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.data_, b.data_);
}

const char* MessageGuildEventSynchronize::ascii_fingerprint = "69CFAA92E04882F6EA54F81504CDEB9C";
const uint8_t MessageGuildEventSynchronize::binary_fingerprint[16] = {0x69,0xCF,0xAA,0x92,0xE0,0x48,0x82,0xF6,0xEA,0x54,0xF8,0x15,0x04,0xCD,0xEB,0x9C};

uint32_t MessageGuildEventSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_data_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast63;
          xfer += iprot->readI32(ecast63);
          this->type_ = (GuildEventOperateType::type)ecast63;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data_.read(iprot);
          isset_data_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_data_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildEventSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildEventSynchronize");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->data_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildEventSynchronize &a, MessageGuildEventSynchronize &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.data_, b.data_);
}

const char* MessageGuildSkillSynchronize::ascii_fingerprint = "756852F7097195E6CC24D5C5717D820B";
const uint8_t MessageGuildSkillSynchronize::binary_fingerprint[16] = {0x75,0x68,0x52,0xF7,0x09,0x71,0x95,0xE6,0xCC,0x24,0xD5,0xC5,0x71,0x7D,0x82,0x0B};

uint32_t MessageGuildSkillSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_data_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast64;
          xfer += iprot->readI32(ecast64);
          this->type_ = (GuildSkillOperateType::type)ecast64;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data_.read(iprot);
          isset_data_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_data_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildSkillSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildSkillSynchronize");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->data_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildSkillSynchronize &a, MessageGuildSkillSynchronize &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.data_, b.data_);
}

const char* MessageGuildBuffSynchronize::ascii_fingerprint = "46A703A33337BED2F62F386FC66B2A5F";
const uint8_t MessageGuildBuffSynchronize::binary_fingerprint[16] = {0x46,0xA7,0x03,0xA3,0x33,0x37,0xBE,0xD2,0xF6,0x2F,0x38,0x6F,0xC6,0x6B,0x2A,0x5F};

uint32_t MessageGuildBuffSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_guild_buff_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast65;
          xfer += iprot->readI32(ecast65);
          this->type_ = (GuildBuffOperateType::type)ecast65;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_buff_id_);
          isset_guild_buff_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_guild_buff_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildBuffSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildBuffSynchronize");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guild_buff_id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->guild_buff_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildBuffSynchronize &a, MessageGuildBuffSynchronize &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.guild_buff_id_, b.guild_buff_id_);
}

const char* MessageGuildListRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageGuildListRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageGuildListRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageGuildListRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildListRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildListRequest &a, MessageGuildListRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageGuildListResponse::ascii_fingerprint = "532A893BD08AD0F0B6B3E11A8E9254EF";
const uint8_t MessageGuildListResponse::binary_fingerprint[16] = {0x53,0x2A,0x89,0x3B,0xD0,0x8A,0xD0,0xF0,0xB6,0xB3,0xE1,0x1A,0x8E,0x92,0x54,0xEF};

uint32_t MessageGuildListResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->guilds_.clear();
            uint32_t _size66;
            ::apache::thrift::protocol::TType _etype69;
            xfer += iprot->readListBegin(_etype69, _size66);
            this->guilds_.resize(_size66);
            uint32_t _i70;
            for (_i70 = 0; _i70 < _size66; ++_i70)
            {
              xfer += this->guilds_[_i70].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.guilds_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildListResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildListResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.guilds_) {
    xfer += oprot->writeFieldBegin("guilds_", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->guilds_.size()));
      std::vector<GuildListData> ::const_iterator _iter71;
      for (_iter71 = this->guilds_.begin(); _iter71 != this->guilds_.end(); ++_iter71)
      {
        xfer += (*_iter71).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildListResponse &a, MessageGuildListResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.guilds_, b.guilds_);
  swap(a.__isset, b.__isset);
}

const char* MessageGuildListSynchronize::ascii_fingerprint = "32087E370CE0F994EF6EF3921FBE1370";
const uint8_t MessageGuildListSynchronize::binary_fingerprint[16] = {0x32,0x08,0x7E,0x37,0x0C,0xE0,0xF9,0x94,0xEF,0x6E,0xF3,0x92,0x1F,0xBE,0x13,0x70};

uint32_t MessageGuildListSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_data_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast72;
          xfer += iprot->readI32(ecast72);
          this->type_ = (GuildListOperateType::type)ecast72;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data_.read(iprot);
          isset_data_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_data_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildListSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildListSynchronize");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->data_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildListSynchronize &a, MessageGuildListSynchronize &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.data_, b.data_);
}

const char* MessageGuildCreateRequest::ascii_fingerprint = "EEBC915CE44901401D881E6091423036";
const uint8_t MessageGuildCreateRequest::binary_fingerprint[16] = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

uint32_t MessageGuildCreateRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_guild_name_ = false;
  bool isset_guild_logo_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guild_name_);
          isset_guild_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_logo_);
          isset_guild_logo_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_guild_name_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_guild_logo_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildCreateRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildCreateRequest");

  xfer += oprot->writeFieldBegin("guild_name_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->guild_name_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guild_logo_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->guild_logo_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildCreateRequest &a, MessageGuildCreateRequest &b) {
  using ::std::swap;
  swap(a.guild_name_, b.guild_name_);
  swap(a.guild_logo_, b.guild_logo_);
}

const char* MessageGuildCreateResponse::ascii_fingerprint = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
const uint8_t MessageGuildCreateResponse::binary_fingerprint[16] = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

uint32_t MessageGuildCreateResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast73;
          xfer += iprot->readI32(ecast73);
          this->result_ = (GuildErrorCode::type)ecast73;
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildCreateResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildCreateResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildCreateResponse &a, MessageGuildCreateResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageGuildDismissNotify::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageGuildDismissNotify::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageGuildDismissNotify::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageGuildDismissNotify::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildDismissNotify");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildDismissNotify &a, MessageGuildDismissNotify &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageGuildSuppressJoinRequest::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageGuildSuppressJoinRequest::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageGuildSuppressJoinRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_suppress_join_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->suppress_join_);
          isset_suppress_join_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_suppress_join_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildSuppressJoinRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildSuppressJoinRequest");

  xfer += oprot->writeFieldBegin("suppress_join_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->suppress_join_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildSuppressJoinRequest &a, MessageGuildSuppressJoinRequest &b) {
  using ::std::swap;
  swap(a.suppress_join_, b.suppress_join_);
}

const char* MessageGuildSuppressJoinResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageGuildSuppressJoinResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageGuildSuppressJoinResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildSuppressJoinResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildSuppressJoinResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildSuppressJoinResponse &a, MessageGuildSuppressJoinResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageGuildJoinRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MessageGuildJoinRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MessageGuildJoinRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_guild_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guild_id_);
          isset_guild_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_guild_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildJoinRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildJoinRequest");

  xfer += oprot->writeFieldBegin("guild_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->guild_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildJoinRequest &a, MessageGuildJoinRequest &b) {
  using ::std::swap;
  swap(a.guild_id_, b.guild_id_);
}

const char* MessageGuildJoinResponse::ascii_fingerprint = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
const uint8_t MessageGuildJoinResponse::binary_fingerprint[16] = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

uint32_t MessageGuildJoinResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast74;
          xfer += iprot->readI32(ecast74);
          this->result_ = (GuildErrorCode::type)ecast74;
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildJoinResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildJoinResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildJoinResponse &a, MessageGuildJoinResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageGuildCancelJoinRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MessageGuildCancelJoinRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MessageGuildCancelJoinRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_guild_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guild_id_);
          isset_guild_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_guild_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildCancelJoinRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildCancelJoinRequest");

  xfer += oprot->writeFieldBegin("guild_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->guild_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildCancelJoinRequest &a, MessageGuildCancelJoinRequest &b) {
  using ::std::swap;
  swap(a.guild_id_, b.guild_id_);
}

const char* MessageGuildCancelJoinResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageGuildCancelJoinResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageGuildCancelJoinResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildCancelJoinResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildCancelJoinResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildCancelJoinResponse &a, MessageGuildCancelJoinResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageGuildAuditPendingMemberRequest::ascii_fingerprint = "7D61C9AA00102AB4D8F72A1DA58297DC";
const uint8_t MessageGuildAuditPendingMemberRequest::binary_fingerprint[16] = {0x7D,0x61,0xC9,0xAA,0x00,0x10,0x2A,0xB4,0xD8,0xF7,0x2A,0x1D,0xA5,0x82,0x97,0xDC};

uint32_t MessageGuildAuditPendingMemberRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_audit_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->audit_result_);
          isset_audit_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_audit_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildAuditPendingMemberRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildAuditPendingMemberRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("audit_result_", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->audit_result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildAuditPendingMemberRequest &a, MessageGuildAuditPendingMemberRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.audit_result_, b.audit_result_);
}

const char* MessageGuildAuditPendingMemberResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageGuildAuditPendingMemberResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageGuildAuditPendingMemberResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildAuditPendingMemberResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildAuditPendingMemberResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildAuditPendingMemberResponse &a, MessageGuildAuditPendingMemberResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageGuildInviteRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MessageGuildInviteRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MessageGuildInviteRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_name_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_name_);
          isset_actor_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_name_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildInviteRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildInviteRequest");

  xfer += oprot->writeFieldBegin("actor_name_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_name_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildInviteRequest &a, MessageGuildInviteRequest &b) {
  using ::std::swap;
  swap(a.actor_name_, b.actor_name_);
}

const char* MessageGuildInviteResponse::ascii_fingerprint = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
const uint8_t MessageGuildInviteResponse::binary_fingerprint[16] = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

uint32_t MessageGuildInviteResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast75;
          xfer += iprot->readI32(ecast75);
          this->result_ = (GuildErrorCode::type)ecast75;
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildInviteResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildInviteResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildInviteResponse &a, MessageGuildInviteResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageGuildInviteNotify::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MessageGuildInviteNotify::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MessageGuildInviteNotify::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_guild_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guild_id_);
          isset_guild_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_guild_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildInviteNotify::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildInviteNotify");

  xfer += oprot->writeFieldBegin("guild_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->guild_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildInviteNotify &a, MessageGuildInviteNotify &b) {
  using ::std::swap;
  swap(a.guild_id_, b.guild_id_);
}

const char* MessageGuildInviteDisposeRequest::ascii_fingerprint = "7D61C9AA00102AB4D8F72A1DA58297DC";
const uint8_t MessageGuildInviteDisposeRequest::binary_fingerprint[16] = {0x7D,0x61,0xC9,0xAA,0x00,0x10,0x2A,0xB4,0xD8,0xF7,0x2A,0x1D,0xA5,0x82,0x97,0xDC};

uint32_t MessageGuildInviteDisposeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_guild_id_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guild_id_);
          isset_guild_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_guild_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildInviteDisposeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildInviteDisposeRequest");

  xfer += oprot->writeFieldBegin("guild_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->guild_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildInviteDisposeRequest &a, MessageGuildInviteDisposeRequest &b) {
  using ::std::swap;
  swap(a.guild_id_, b.guild_id_);
  swap(a.result_, b.result_);
}

const char* MessageGuildInviteDisposeResponse::ascii_fingerprint = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
const uint8_t MessageGuildInviteDisposeResponse::binary_fingerprint[16] = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

uint32_t MessageGuildInviteDisposeResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast76;
          xfer += iprot->readI32(ecast76);
          this->result_ = (GuildErrorCode::type)ecast76;
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildInviteDisposeResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildInviteDisposeResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildInviteDisposeResponse &a, MessageGuildInviteDisposeResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageGuildLeaveRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageGuildLeaveRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageGuildLeaveRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageGuildLeaveRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildLeaveRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildLeaveRequest &a, MessageGuildLeaveRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageGuildLeaveResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageGuildLeaveResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageGuildLeaveResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildLeaveResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildLeaveResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildLeaveResponse &a, MessageGuildLeaveResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageGuildKickMemberRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MessageGuildKickMemberRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MessageGuildKickMemberRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildKickMemberRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildKickMemberRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildKickMemberRequest &a, MessageGuildKickMemberRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
}

const char* MessageGuildKickMemberResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageGuildKickMemberResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageGuildKickMemberResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildKickMemberResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildKickMemberResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildKickMemberResponse &a, MessageGuildKickMemberResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageGuildKickMemberNotify::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageGuildKickMemberNotify::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageGuildKickMemberNotify::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageGuildKickMemberNotify::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildKickMemberNotify");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildKickMemberNotify &a, MessageGuildKickMemberNotify &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageGuildGiveUpLeaderPositionRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MessageGuildGiveUpLeaderPositionRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MessageGuildGiveUpLeaderPositionRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_new_leader_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->new_leader_actor_id_);
          isset_new_leader_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_new_leader_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildGiveUpLeaderPositionRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildGiveUpLeaderPositionRequest");

  xfer += oprot->writeFieldBegin("new_leader_actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->new_leader_actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildGiveUpLeaderPositionRequest &a, MessageGuildGiveUpLeaderPositionRequest &b) {
  using ::std::swap;
  swap(a.new_leader_actor_id_, b.new_leader_actor_id_);
}

const char* MessageGuildGiveUpLeaderPositionResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageGuildGiveUpLeaderPositionResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageGuildGiveUpLeaderPositionResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildGiveUpLeaderPositionResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildGiveUpLeaderPositionResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildGiveUpLeaderPositionResponse &a, MessageGuildGiveUpLeaderPositionResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageGuildGiveUpPositionRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageGuildGiveUpPositionRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageGuildGiveUpPositionRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageGuildGiveUpPositionRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildGiveUpPositionRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildGiveUpPositionRequest &a, MessageGuildGiveUpPositionRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageGuildGiveUpPositionResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageGuildGiveUpPositionResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageGuildGiveUpPositionResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildGiveUpPositionResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildGiveUpPositionResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildGiveUpPositionResponse &a, MessageGuildGiveUpPositionResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageGuildSetMemberPositionRequest::ascii_fingerprint = "EEBC915CE44901401D881E6091423036";
const uint8_t MessageGuildSetMemberPositionRequest::binary_fingerprint[16] = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

uint32_t MessageGuildSetMemberPositionRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_guild_position_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_position_);
          isset_guild_position_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_guild_position_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildSetMemberPositionRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildSetMemberPositionRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guild_position_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->guild_position_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildSetMemberPositionRequest &a, MessageGuildSetMemberPositionRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.guild_position_, b.guild_position_);
}

const char* MessageGuildSetMemberPositionResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageGuildSetMemberPositionResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageGuildSetMemberPositionResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildSetMemberPositionResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildSetMemberPositionResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildSetMemberPositionResponse &a, MessageGuildSetMemberPositionResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageGuildEditAnnouncementRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MessageGuildEditAnnouncementRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MessageGuildEditAnnouncementRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_guild_announcement_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guild_announcement_);
          isset_guild_announcement_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_guild_announcement_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildEditAnnouncementRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildEditAnnouncementRequest");

  xfer += oprot->writeFieldBegin("guild_announcement_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->guild_announcement_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildEditAnnouncementRequest &a, MessageGuildEditAnnouncementRequest &b) {
  using ::std::swap;
  swap(a.guild_announcement_, b.guild_announcement_);
}

const char* MessageGuildEditAnnouncementResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageGuildEditAnnouncementResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageGuildEditAnnouncementResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildEditAnnouncementResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildEditAnnouncementResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildEditAnnouncementResponse &a, MessageGuildEditAnnouncementResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageGuildUpgradeRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageGuildUpgradeRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageGuildUpgradeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageGuildUpgradeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildUpgradeRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildUpgradeRequest &a, MessageGuildUpgradeRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageGuildUpgradeResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageGuildUpgradeResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageGuildUpgradeResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildUpgradeResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildUpgradeResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildUpgradeResponse &a, MessageGuildUpgradeResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageGuildDonateRequest::ascii_fingerprint = "46A703A33337BED2F62F386FC66B2A5F";
const uint8_t MessageGuildDonateRequest::binary_fingerprint[16] = {0x46,0xA7,0x03,0xA3,0x33,0x37,0xBE,0xD2,0xF6,0x2F,0x38,0x6F,0xC6,0x6B,0x2A,0x5F};

uint32_t MessageGuildDonateRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_num_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast77;
          xfer += iprot->readI32(ecast77);
          this->type_ = ( ::entity::GuildDonateType::type)ecast77;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num_);
          isset_num_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_num_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildDonateRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildDonateRequest");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->num_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildDonateRequest &a, MessageGuildDonateRequest &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.num_, b.num_);
}

const char* MessageGuildDonateResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageGuildDonateResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageGuildDonateResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildDonateResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildDonateResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildDonateResponse &a, MessageGuildDonateResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageGuildShopUpgradeRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageGuildShopUpgradeRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageGuildShopUpgradeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageGuildShopUpgradeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildShopUpgradeRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildShopUpgradeRequest &a, MessageGuildShopUpgradeRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageGuildShopUpgradeResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageGuildShopUpgradeResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageGuildShopUpgradeResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildShopUpgradeResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildShopUpgradeResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildShopUpgradeResponse &a, MessageGuildShopUpgradeResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageGuildShopBuyItemRequest::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t MessageGuildShopBuyItemRequest::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

uint32_t MessageGuildShopBuyItemRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_item_id_ = false;
  bool isset_item_count_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item_id_);
          isset_item_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item_count_);
          isset_item_count_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_item_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item_count_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildShopBuyItemRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildShopBuyItemRequest");

  xfer += oprot->writeFieldBegin("item_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->item_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item_count_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->item_count_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildShopBuyItemRequest &a, MessageGuildShopBuyItemRequest &b) {
  using ::std::swap;
  swap(a.item_id_, b.item_id_);
  swap(a.item_count_, b.item_count_);
}

const char* MessageGuildShopBuyItemResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageGuildShopBuyItemResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageGuildShopBuyItemResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildShopBuyItemResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildShopBuyItemResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildShopBuyItemResponse &a, MessageGuildShopBuyItemResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageGuildCollegeUpgradeRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageGuildCollegeUpgradeRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageGuildCollegeUpgradeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageGuildCollegeUpgradeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildCollegeUpgradeRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildCollegeUpgradeRequest &a, MessageGuildCollegeUpgradeRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageGuildCollegeUpgradeResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageGuildCollegeUpgradeResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageGuildCollegeUpgradeResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildCollegeUpgradeResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildCollegeUpgradeResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildCollegeUpgradeResponse &a, MessageGuildCollegeUpgradeResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageGuildCollegeLearnSkillRequest::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t MessageGuildCollegeLearnSkillRequest::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t MessageGuildCollegeLearnSkillRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_guild_skill_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_skill_id_);
          isset_guild_skill_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_guild_skill_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildCollegeLearnSkillRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildCollegeLearnSkillRequest");

  xfer += oprot->writeFieldBegin("guild_skill_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->guild_skill_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildCollegeLearnSkillRequest &a, MessageGuildCollegeLearnSkillRequest &b) {
  using ::std::swap;
  swap(a.guild_skill_id_, b.guild_skill_id_);
}

const char* MessageGuildCollegeLearnSkillResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageGuildCollegeLearnSkillResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageGuildCollegeLearnSkillResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildCollegeLearnSkillResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildCollegeLearnSkillResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildCollegeLearnSkillResponse &a, MessageGuildCollegeLearnSkillResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageGuildIdolPrayRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageGuildIdolPrayRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageGuildIdolPrayRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageGuildIdolPrayRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildIdolPrayRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildIdolPrayRequest &a, MessageGuildIdolPrayRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageGuildIdolPrayResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageGuildIdolPrayResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageGuildIdolPrayResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildIdolPrayResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildIdolPrayResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildIdolPrayResponse &a, MessageGuildIdolPrayResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageGuildBarrackUpgradeRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageGuildBarrackUpgradeRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageGuildBarrackUpgradeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageGuildBarrackUpgradeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildBarrackUpgradeRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildBarrackUpgradeRequest &a, MessageGuildBarrackUpgradeRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageGuildBarrackUpgradeResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageGuildBarrackUpgradeResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageGuildBarrackUpgradeResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildBarrackUpgradeResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildBarrackUpgradeResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildBarrackUpgradeResponse &a, MessageGuildBarrackUpgradeResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageGuildPlayingGroupOpenRequest::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t MessageGuildPlayingGroupOpenRequest::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t MessageGuildPlayingGroupOpenRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_playing_group_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_group_id_);
          isset_playing_group_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_playing_group_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildPlayingGroupOpenRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildPlayingGroupOpenRequest");

  xfer += oprot->writeFieldBegin("playing_group_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->playing_group_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildPlayingGroupOpenRequest &a, MessageGuildPlayingGroupOpenRequest &b) {
  using ::std::swap;
  swap(a.playing_group_id_, b.playing_group_id_);
}

const char* MessageGuildPlayingGroupOpenResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageGuildPlayingGroupOpenResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageGuildPlayingGroupOpenResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildPlayingGroupOpenResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildPlayingGroupOpenResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildPlayingGroupOpenResponse &a, MessageGuildPlayingGroupOpenResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageGuildPlayingGroupOpenNotify::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t MessageGuildPlayingGroupOpenNotify::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t MessageGuildPlayingGroupOpenNotify::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_playing_group_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_group_id_);
          isset_playing_group_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_playing_group_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildPlayingGroupOpenNotify::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildPlayingGroupOpenNotify");

  xfer += oprot->writeFieldBegin("playing_group_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->playing_group_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildPlayingGroupOpenNotify &a, MessageGuildPlayingGroupOpenNotify &b) {
  using ::std::swap;
  swap(a.playing_group_id_, b.playing_group_id_);
}

const char* MessageGuildPlayingFinishedNotify::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t MessageGuildPlayingFinishedNotify::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t MessageGuildPlayingFinishedNotify::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_playing_template_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_template_id_);
          isset_playing_template_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_playing_template_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildPlayingFinishedNotify::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildPlayingFinishedNotify");

  xfer += oprot->writeFieldBegin("playing_template_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->playing_template_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildPlayingFinishedNotify &a, MessageGuildPlayingFinishedNotify &b) {
  using ::std::swap;
  swap(a.playing_template_id_, b.playing_template_id_);
}

const char* MessageGuildPlayingAwardRequest::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t MessageGuildPlayingAwardRequest::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t MessageGuildPlayingAwardRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_playing_template_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_template_id_);
          isset_playing_template_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_playing_template_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildPlayingAwardRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildPlayingAwardRequest");

  xfer += oprot->writeFieldBegin("playing_template_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->playing_template_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildPlayingAwardRequest &a, MessageGuildPlayingAwardRequest &b) {
  using ::std::swap;
  swap(a.playing_template_id_, b.playing_template_id_);
}

const char* MessageGuildPlayingAwardResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageGuildPlayingAwardResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageGuildPlayingAwardResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildPlayingAwardResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildPlayingAwardResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildPlayingAwardResponse &a, MessageGuildPlayingAwardResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageGuildPlayingResetNotify::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageGuildPlayingResetNotify::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageGuildPlayingResetNotify::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageGuildPlayingResetNotify::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildPlayingResetNotify");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildPlayingResetNotify &a, MessageGuildPlayingResetNotify &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

}} // namespace
