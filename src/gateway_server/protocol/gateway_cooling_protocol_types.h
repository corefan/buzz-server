/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef gateway_cooling_protocol_TYPES_H
#define gateway_cooling_protocol_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "gateway_protocol_types.h"
#include "cooling_types.h"


namespace gateway { namespace protocol {


class MessageCoolingInitialize {
 public:

  static const char* ascii_fingerprint; // = "40D820C749878A3E856908735933CAA2";
  static const uint8_t binary_fingerprint[16]; // = {0x40,0xD8,0x20,0xC7,0x49,0x87,0x8A,0x3E,0x85,0x69,0x08,0x73,0x59,0x33,0xCA,0xA2};

  MessageCoolingInitialize() {
  }

  virtual ~MessageCoolingInitialize() throw() {}

  std::vector< ::entity::CoolingFields>  coolings_;

  void __set_coolings_(const std::vector< ::entity::CoolingFields> & val) {
    coolings_ = val;
  }

  bool operator == (const MessageCoolingInitialize & rhs) const
  {
    if (!(coolings_ == rhs.coolings_))
      return false;
    return true;
  }
  bool operator != (const MessageCoolingInitialize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageCoolingInitialize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageCoolingInitialize &a, MessageCoolingInitialize &b);

}} // namespace

#endif
