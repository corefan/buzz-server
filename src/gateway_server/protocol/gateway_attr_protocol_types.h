/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef gateway_attr_protocol_TYPES_H
#define gateway_attr_protocol_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "spirit_types.h"
#include "gateway_protocol_types.h"


namespace gateway { namespace protocol {

struct SpiritFacadeOperateType {
  enum type {
    ADD = 0,
    REMOVE = 1,
    UPDATE = 2
  };
};

extern const std::map<int, const char*> _SpiritFacadeOperateType_VALUES_TO_NAMES;

struct RuneMoveType {
  enum type {
    PACKET = 1,
    RUNE_SLOT = 2
  };
};

extern const std::map<int, const char*> _RuneMoveType_VALUES_TO_NAMES;

typedef struct _AttrAoiData__isset {
  _AttrAoiData__isset() : noble_level_(false) {}
  bool noble_level_;
} _AttrAoiData__isset;

class AttrAoiData {
 public:

  static const char* ascii_fingerprint; // = "18B162B1D15D8D46509D3911A9F1C2AA";
  static const uint8_t binary_fingerprint[16]; // = {0x18,0xB1,0x62,0xB1,0xD1,0x5D,0x8D,0x46,0x50,0x9D,0x39,0x11,0xA9,0xF1,0xC2,0xAA};

  AttrAoiData() : actor_id_(), noble_level_(0) {
  }

  virtual ~AttrAoiData() throw() {}

  std::string actor_id_;
  int32_t noble_level_;

  _AttrAoiData__isset __isset;

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
  }

  void __set_noble_level_(const int32_t val) {
    noble_level_ = val;
    __isset.noble_level_ = true;
  }

  bool operator == (const AttrAoiData & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (__isset.noble_level_ != rhs.__isset.noble_level_)
      return false;
    else if (__isset.noble_level_ && !(noble_level_ == rhs.noble_level_))
      return false;
    return true;
  }
  bool operator != (const AttrAoiData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AttrAoiData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AttrAoiData &a, AttrAoiData &b);


class MessageAttrAoiSynchronize {
 public:

  static const char* ascii_fingerprint; // = "1D71AFF15C0262F52C49B4BA20FC18F7";
  static const uint8_t binary_fingerprint[16]; // = {0x1D,0x71,0xAF,0xF1,0x5C,0x02,0x62,0xF5,0x2C,0x49,0xB4,0xBA,0x20,0xFC,0x18,0xF7};

  MessageAttrAoiSynchronize() {
  }

  virtual ~MessageAttrAoiSynchronize() throw() {}

  std::vector<AttrAoiData>  aoi_data_;

  void __set_aoi_data_(const std::vector<AttrAoiData> & val) {
    aoi_data_ = val;
  }

  bool operator == (const MessageAttrAoiSynchronize & rhs) const
  {
    if (!(aoi_data_ == rhs.aoi_data_))
      return false;
    return true;
  }
  bool operator != (const MessageAttrAoiSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrAoiSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrAoiSynchronize &a, MessageAttrAoiSynchronize &b);


class MessageAttrSwordInitialize {
 public:

  static const char* ascii_fingerprint; // = "4086F12A5C2D615560236565C542F3C3";
  static const uint8_t binary_fingerprint[16]; // = {0x40,0x86,0xF1,0x2A,0x5C,0x2D,0x61,0x55,0x60,0x23,0x65,0x65,0xC5,0x42,0xF3,0xC3};

  MessageAttrSwordInitialize() : step_(0), lucky_value_(0), gain_time_() {
  }

  virtual ~MessageAttrSwordInitialize() throw() {}

  int32_t step_;
  int32_t lucky_value_;
  std::string gain_time_;

  void __set_step_(const int32_t val) {
    step_ = val;
  }

  void __set_lucky_value_(const int32_t val) {
    lucky_value_ = val;
  }

  void __set_gain_time_(const std::string& val) {
    gain_time_ = val;
  }

  bool operator == (const MessageAttrSwordInitialize & rhs) const
  {
    if (!(step_ == rhs.step_))
      return false;
    if (!(lucky_value_ == rhs.lucky_value_))
      return false;
    if (!(gain_time_ == rhs.gain_time_))
      return false;
    return true;
  }
  bool operator != (const MessageAttrSwordInitialize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrSwordInitialize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrSwordInitialize &a, MessageAttrSwordInitialize &b);


class MessageAttrSwordUpgradeRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageAttrSwordUpgradeRequest() {
  }

  virtual ~MessageAttrSwordUpgradeRequest() throw() {}


  bool operator == (const MessageAttrSwordUpgradeRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageAttrSwordUpgradeRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrSwordUpgradeRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrSwordUpgradeRequest &a, MessageAttrSwordUpgradeRequest &b);


class MessageAttrSwordUpgradeResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageAttrSwordUpgradeResponse() : result_(0) {
  }

  virtual ~MessageAttrSwordUpgradeResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageAttrSwordUpgradeResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageAttrSwordUpgradeResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrSwordUpgradeResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrSwordUpgradeResponse &a, MessageAttrSwordUpgradeResponse &b);

typedef struct _MessageAttrSwordSynchronize__isset {
  _MessageAttrSwordSynchronize__isset() : step_(false), lucky_value_(false) {}
  bool step_;
  bool lucky_value_;
} _MessageAttrSwordSynchronize__isset;

class MessageAttrSwordSynchronize {
 public:

  static const char* ascii_fingerprint; // = "C1241AF5AA92C586B664FD41DC97C576";
  static const uint8_t binary_fingerprint[16]; // = {0xC1,0x24,0x1A,0xF5,0xAA,0x92,0xC5,0x86,0xB6,0x64,0xFD,0x41,0xDC,0x97,0xC5,0x76};

  MessageAttrSwordSynchronize() : step_(0), lucky_value_(0) {
  }

  virtual ~MessageAttrSwordSynchronize() throw() {}

  int32_t step_;
  int32_t lucky_value_;

  _MessageAttrSwordSynchronize__isset __isset;

  void __set_step_(const int32_t val) {
    step_ = val;
    __isset.step_ = true;
  }

  void __set_lucky_value_(const int32_t val) {
    lucky_value_ = val;
    __isset.lucky_value_ = true;
  }

  bool operator == (const MessageAttrSwordSynchronize & rhs) const
  {
    if (__isset.step_ != rhs.__isset.step_)
      return false;
    else if (__isset.step_ && !(step_ == rhs.step_))
      return false;
    if (__isset.lucky_value_ != rhs.__isset.lucky_value_)
      return false;
    else if (__isset.lucky_value_ && !(lucky_value_ == rhs.lucky_value_))
      return false;
    return true;
  }
  bool operator != (const MessageAttrSwordSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrSwordSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrSwordSynchronize &a, MessageAttrSwordSynchronize &b);


class MessageAttrSwordEquip {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MessageAttrSwordEquip() : step_(0) {
  }

  virtual ~MessageAttrSwordEquip() throw() {}

  int32_t step_;

  void __set_step_(const int32_t val) {
    step_ = val;
  }

  bool operator == (const MessageAttrSwordEquip & rhs) const
  {
    if (!(step_ == rhs.step_))
      return false;
    return true;
  }
  bool operator != (const MessageAttrSwordEquip &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrSwordEquip & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrSwordEquip &a, MessageAttrSwordEquip &b);


class MessageAttrSwordUnequip {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageAttrSwordUnequip() {
  }

  virtual ~MessageAttrSwordUnequip() throw() {}


  bool operator == (const MessageAttrSwordUnequip & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageAttrSwordUnequip &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrSwordUnequip & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrSwordUnequip &a, MessageAttrSwordUnequip &b);


class MessageAttrSwordCompareRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MessageAttrSwordCompareRequest() : actor_id_() {
  }

  virtual ~MessageAttrSwordCompareRequest() throw() {}

  std::string actor_id_;

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
  }

  bool operator == (const MessageAttrSwordCompareRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    return true;
  }
  bool operator != (const MessageAttrSwordCompareRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrSwordCompareRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrSwordCompareRequest &a, MessageAttrSwordCompareRequest &b);


class MessageAttrSwordCompareResponse {
 public:

  static const char* ascii_fingerprint; // = "28C2ECC89260BADB9C70330FBF47BFA8";
  static const uint8_t binary_fingerprint[16]; // = {0x28,0xC2,0xEC,0xC8,0x92,0x60,0xBA,0xDB,0x9C,0x70,0x33,0x0F,0xBF,0x47,0xBF,0xA8};

  MessageAttrSwordCompareResponse() : actor_id_(), step_(0), level_(0) {
  }

  virtual ~MessageAttrSwordCompareResponse() throw() {}

  std::string actor_id_;
  int32_t step_;
  int32_t level_;

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
  }

  void __set_step_(const int32_t val) {
    step_ = val;
  }

  void __set_level_(const int32_t val) {
    level_ = val;
  }

  bool operator == (const MessageAttrSwordCompareResponse & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(step_ == rhs.step_))
      return false;
    if (!(level_ == rhs.level_))
      return false;
    return true;
  }
  bool operator != (const MessageAttrSwordCompareResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrSwordCompareResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrSwordCompareResponse &a, MessageAttrSwordCompareResponse &b);


class MessageAttrNobleInitialize {
 public:

  static const char* ascii_fingerprint; // = "6F6919054DD34A5D1D1B2263AA643451";
  static const uint8_t binary_fingerprint[16]; // = {0x6F,0x69,0x19,0x05,0x4D,0xD3,0x4A,0x5D,0x1D,0x1B,0x22,0x63,0xAA,0x64,0x34,0x51};

  MessageAttrNobleInitialize() : level_(0), used_item_count_(0), max_hp_add_value_(0), max_mp_add_value_(0), physics_attack_add_value_(0), physics_defence_add_value_(0), magic_attack_add_value_(0), magic_defence_add_value_(0), dodge_add_value_(0), crit_add_value_(0), ignore_defence_add_value_(0) {
  }

  virtual ~MessageAttrNobleInitialize() throw() {}

  int32_t level_;
  int32_t used_item_count_;
  int32_t max_hp_add_value_;
  int32_t max_mp_add_value_;
  int32_t physics_attack_add_value_;
  int32_t physics_defence_add_value_;
  int32_t magic_attack_add_value_;
  int32_t magic_defence_add_value_;
  int32_t dodge_add_value_;
  int32_t crit_add_value_;
  int32_t ignore_defence_add_value_;

  void __set_level_(const int32_t val) {
    level_ = val;
  }

  void __set_used_item_count_(const int32_t val) {
    used_item_count_ = val;
  }

  void __set_max_hp_add_value_(const int32_t val) {
    max_hp_add_value_ = val;
  }

  void __set_max_mp_add_value_(const int32_t val) {
    max_mp_add_value_ = val;
  }

  void __set_physics_attack_add_value_(const int32_t val) {
    physics_attack_add_value_ = val;
  }

  void __set_physics_defence_add_value_(const int32_t val) {
    physics_defence_add_value_ = val;
  }

  void __set_magic_attack_add_value_(const int32_t val) {
    magic_attack_add_value_ = val;
  }

  void __set_magic_defence_add_value_(const int32_t val) {
    magic_defence_add_value_ = val;
  }

  void __set_dodge_add_value_(const int32_t val) {
    dodge_add_value_ = val;
  }

  void __set_crit_add_value_(const int32_t val) {
    crit_add_value_ = val;
  }

  void __set_ignore_defence_add_value_(const int32_t val) {
    ignore_defence_add_value_ = val;
  }

  bool operator == (const MessageAttrNobleInitialize & rhs) const
  {
    if (!(level_ == rhs.level_))
      return false;
    if (!(used_item_count_ == rhs.used_item_count_))
      return false;
    if (!(max_hp_add_value_ == rhs.max_hp_add_value_))
      return false;
    if (!(max_mp_add_value_ == rhs.max_mp_add_value_))
      return false;
    if (!(physics_attack_add_value_ == rhs.physics_attack_add_value_))
      return false;
    if (!(physics_defence_add_value_ == rhs.physics_defence_add_value_))
      return false;
    if (!(magic_attack_add_value_ == rhs.magic_attack_add_value_))
      return false;
    if (!(magic_defence_add_value_ == rhs.magic_defence_add_value_))
      return false;
    if (!(dodge_add_value_ == rhs.dodge_add_value_))
      return false;
    if (!(crit_add_value_ == rhs.crit_add_value_))
      return false;
    if (!(ignore_defence_add_value_ == rhs.ignore_defence_add_value_))
      return false;
    return true;
  }
  bool operator != (const MessageAttrNobleInitialize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrNobleInitialize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrNobleInitialize &a, MessageAttrNobleInitialize &b);


class MessageAttrNoblePromoteRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageAttrNoblePromoteRequest() {
  }

  virtual ~MessageAttrNoblePromoteRequest() throw() {}


  bool operator == (const MessageAttrNoblePromoteRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageAttrNoblePromoteRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrNoblePromoteRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrNoblePromoteRequest &a, MessageAttrNoblePromoteRequest &b);

typedef struct _MessageAttrNoblePromoteResponse__isset {
  _MessageAttrNoblePromoteResponse__isset() : max_hp_add_value_(false), max_mp_add_value_(false), physics_attack_add_value_(false), physics_defence_add_value_(false), magic_attack_add_value_(false), magic_defence_add_value_(false), dodge_add_value_(false), crit_add_value_(false), ignore_defence_add_value_(false) {}
  bool max_hp_add_value_;
  bool max_mp_add_value_;
  bool physics_attack_add_value_;
  bool physics_defence_add_value_;
  bool magic_attack_add_value_;
  bool magic_defence_add_value_;
  bool dodge_add_value_;
  bool crit_add_value_;
  bool ignore_defence_add_value_;
} _MessageAttrNoblePromoteResponse__isset;

class MessageAttrNoblePromoteResponse {
 public:

  static const char* ascii_fingerprint; // = "C98765BC3F0889FA13BF96FE024FBFC1";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x87,0x65,0xBC,0x3F,0x08,0x89,0xFA,0x13,0xBF,0x96,0xFE,0x02,0x4F,0xBF,0xC1};

  MessageAttrNoblePromoteResponse() : result_(0), max_hp_add_value_(0), max_mp_add_value_(0), physics_attack_add_value_(0), physics_defence_add_value_(0), magic_attack_add_value_(0), magic_defence_add_value_(0), dodge_add_value_(0), crit_add_value_(0), ignore_defence_add_value_(0) {
  }

  virtual ~MessageAttrNoblePromoteResponse() throw() {}

  bool result_;
  int32_t max_hp_add_value_;
  int32_t max_mp_add_value_;
  int32_t physics_attack_add_value_;
  int32_t physics_defence_add_value_;
  int32_t magic_attack_add_value_;
  int32_t magic_defence_add_value_;
  int32_t dodge_add_value_;
  int32_t crit_add_value_;
  int32_t ignore_defence_add_value_;

  _MessageAttrNoblePromoteResponse__isset __isset;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_max_hp_add_value_(const int32_t val) {
    max_hp_add_value_ = val;
    __isset.max_hp_add_value_ = true;
  }

  void __set_max_mp_add_value_(const int32_t val) {
    max_mp_add_value_ = val;
    __isset.max_mp_add_value_ = true;
  }

  void __set_physics_attack_add_value_(const int32_t val) {
    physics_attack_add_value_ = val;
    __isset.physics_attack_add_value_ = true;
  }

  void __set_physics_defence_add_value_(const int32_t val) {
    physics_defence_add_value_ = val;
    __isset.physics_defence_add_value_ = true;
  }

  void __set_magic_attack_add_value_(const int32_t val) {
    magic_attack_add_value_ = val;
    __isset.magic_attack_add_value_ = true;
  }

  void __set_magic_defence_add_value_(const int32_t val) {
    magic_defence_add_value_ = val;
    __isset.magic_defence_add_value_ = true;
  }

  void __set_dodge_add_value_(const int32_t val) {
    dodge_add_value_ = val;
    __isset.dodge_add_value_ = true;
  }

  void __set_crit_add_value_(const int32_t val) {
    crit_add_value_ = val;
    __isset.crit_add_value_ = true;
  }

  void __set_ignore_defence_add_value_(const int32_t val) {
    ignore_defence_add_value_ = val;
    __isset.ignore_defence_add_value_ = true;
  }

  bool operator == (const MessageAttrNoblePromoteResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.max_hp_add_value_ != rhs.__isset.max_hp_add_value_)
      return false;
    else if (__isset.max_hp_add_value_ && !(max_hp_add_value_ == rhs.max_hp_add_value_))
      return false;
    if (__isset.max_mp_add_value_ != rhs.__isset.max_mp_add_value_)
      return false;
    else if (__isset.max_mp_add_value_ && !(max_mp_add_value_ == rhs.max_mp_add_value_))
      return false;
    if (__isset.physics_attack_add_value_ != rhs.__isset.physics_attack_add_value_)
      return false;
    else if (__isset.physics_attack_add_value_ && !(physics_attack_add_value_ == rhs.physics_attack_add_value_))
      return false;
    if (__isset.physics_defence_add_value_ != rhs.__isset.physics_defence_add_value_)
      return false;
    else if (__isset.physics_defence_add_value_ && !(physics_defence_add_value_ == rhs.physics_defence_add_value_))
      return false;
    if (__isset.magic_attack_add_value_ != rhs.__isset.magic_attack_add_value_)
      return false;
    else if (__isset.magic_attack_add_value_ && !(magic_attack_add_value_ == rhs.magic_attack_add_value_))
      return false;
    if (__isset.magic_defence_add_value_ != rhs.__isset.magic_defence_add_value_)
      return false;
    else if (__isset.magic_defence_add_value_ && !(magic_defence_add_value_ == rhs.magic_defence_add_value_))
      return false;
    if (__isset.dodge_add_value_ != rhs.__isset.dodge_add_value_)
      return false;
    else if (__isset.dodge_add_value_ && !(dodge_add_value_ == rhs.dodge_add_value_))
      return false;
    if (__isset.crit_add_value_ != rhs.__isset.crit_add_value_)
      return false;
    else if (__isset.crit_add_value_ && !(crit_add_value_ == rhs.crit_add_value_))
      return false;
    if (__isset.ignore_defence_add_value_ != rhs.__isset.ignore_defence_add_value_)
      return false;
    else if (__isset.ignore_defence_add_value_ && !(ignore_defence_add_value_ == rhs.ignore_defence_add_value_))
      return false;
    return true;
  }
  bool operator != (const MessageAttrNoblePromoteResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrNoblePromoteResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrNoblePromoteResponse &a, MessageAttrNoblePromoteResponse &b);


class MessageAttrNobleBreakthroughRequest {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MessageAttrNobleBreakthroughRequest() : use_item_count_(0) {
  }

  virtual ~MessageAttrNobleBreakthroughRequest() throw() {}

  int32_t use_item_count_;

  void __set_use_item_count_(const int32_t val) {
    use_item_count_ = val;
  }

  bool operator == (const MessageAttrNobleBreakthroughRequest & rhs) const
  {
    if (!(use_item_count_ == rhs.use_item_count_))
      return false;
    return true;
  }
  bool operator != (const MessageAttrNobleBreakthroughRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrNobleBreakthroughRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrNobleBreakthroughRequest &a, MessageAttrNobleBreakthroughRequest &b);

typedef struct _MessageAttrNobleBreakthroughResponse__isset {
  _MessageAttrNobleBreakthroughResponse__isset() : level_(false), used_item_count_(false) {}
  bool level_;
  bool used_item_count_;
} _MessageAttrNobleBreakthroughResponse__isset;

class MessageAttrNobleBreakthroughResponse {
 public:

  static const char* ascii_fingerprint; // = "BFE20425629D93BB485E108BC04B77E7";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0xE2,0x04,0x25,0x62,0x9D,0x93,0xBB,0x48,0x5E,0x10,0x8B,0xC0,0x4B,0x77,0xE7};

  MessageAttrNobleBreakthroughResponse() : result_(0), level_(0), used_item_count_(0) {
  }

  virtual ~MessageAttrNobleBreakthroughResponse() throw() {}

  bool result_;
  int32_t level_;
  int32_t used_item_count_;

  _MessageAttrNobleBreakthroughResponse__isset __isset;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_level_(const int32_t val) {
    level_ = val;
    __isset.level_ = true;
  }

  void __set_used_item_count_(const int32_t val) {
    used_item_count_ = val;
    __isset.used_item_count_ = true;
  }

  bool operator == (const MessageAttrNobleBreakthroughResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.level_ != rhs.__isset.level_)
      return false;
    else if (__isset.level_ && !(level_ == rhs.level_))
      return false;
    if (__isset.used_item_count_ != rhs.__isset.used_item_count_)
      return false;
    else if (__isset.used_item_count_ && !(used_item_count_ == rhs.used_item_count_))
      return false;
    return true;
  }
  bool operator != (const MessageAttrNobleBreakthroughResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrNobleBreakthroughResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrNobleBreakthroughResponse &a, MessageAttrNobleBreakthroughResponse &b);


class MessageAttrNobleCompareRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MessageAttrNobleCompareRequest() : actor_id_() {
  }

  virtual ~MessageAttrNobleCompareRequest() throw() {}

  std::string actor_id_;

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
  }

  bool operator == (const MessageAttrNobleCompareRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    return true;
  }
  bool operator != (const MessageAttrNobleCompareRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrNobleCompareRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrNobleCompareRequest &a, MessageAttrNobleCompareRequest &b);

typedef struct _MessageAttrNobleCompareResponse__isset {
  _MessageAttrNobleCompareResponse__isset() : level_(false), max_hp_add_value_(false), max_mp_add_value_(false), physics_attack_add_value_(false), physics_defence_add_value_(false), magic_attack_add_value_(false), magic_defence_add_value_(false), dodge_add_value_(false), crit_add_value_(false), ignore_defence_add_value_(false) {}
  bool level_;
  bool max_hp_add_value_;
  bool max_mp_add_value_;
  bool physics_attack_add_value_;
  bool physics_defence_add_value_;
  bool magic_attack_add_value_;
  bool magic_defence_add_value_;
  bool dodge_add_value_;
  bool crit_add_value_;
  bool ignore_defence_add_value_;
} _MessageAttrNobleCompareResponse__isset;

class MessageAttrNobleCompareResponse {
 public:

  static const char* ascii_fingerprint; // = "7C3708B4775E2EBDCA2A827D941837D0";
  static const uint8_t binary_fingerprint[16]; // = {0x7C,0x37,0x08,0xB4,0x77,0x5E,0x2E,0xBD,0xCA,0x2A,0x82,0x7D,0x94,0x18,0x37,0xD0};

  MessageAttrNobleCompareResponse() : actor_id_(), result_(0), level_(0), max_hp_add_value_(0), max_mp_add_value_(0), physics_attack_add_value_(0), physics_defence_add_value_(0), magic_attack_add_value_(0), magic_defence_add_value_(0), dodge_add_value_(0), crit_add_value_(0), ignore_defence_add_value_(0) {
  }

  virtual ~MessageAttrNobleCompareResponse() throw() {}

  std::string actor_id_;
  bool result_;
  int32_t level_;
  int32_t max_hp_add_value_;
  int32_t max_mp_add_value_;
  int32_t physics_attack_add_value_;
  int32_t physics_defence_add_value_;
  int32_t magic_attack_add_value_;
  int32_t magic_defence_add_value_;
  int32_t dodge_add_value_;
  int32_t crit_add_value_;
  int32_t ignore_defence_add_value_;

  _MessageAttrNobleCompareResponse__isset __isset;

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_level_(const int32_t val) {
    level_ = val;
    __isset.level_ = true;
  }

  void __set_max_hp_add_value_(const int32_t val) {
    max_hp_add_value_ = val;
    __isset.max_hp_add_value_ = true;
  }

  void __set_max_mp_add_value_(const int32_t val) {
    max_mp_add_value_ = val;
    __isset.max_mp_add_value_ = true;
  }

  void __set_physics_attack_add_value_(const int32_t val) {
    physics_attack_add_value_ = val;
    __isset.physics_attack_add_value_ = true;
  }

  void __set_physics_defence_add_value_(const int32_t val) {
    physics_defence_add_value_ = val;
    __isset.physics_defence_add_value_ = true;
  }

  void __set_magic_attack_add_value_(const int32_t val) {
    magic_attack_add_value_ = val;
    __isset.magic_attack_add_value_ = true;
  }

  void __set_magic_defence_add_value_(const int32_t val) {
    magic_defence_add_value_ = val;
    __isset.magic_defence_add_value_ = true;
  }

  void __set_dodge_add_value_(const int32_t val) {
    dodge_add_value_ = val;
    __isset.dodge_add_value_ = true;
  }

  void __set_crit_add_value_(const int32_t val) {
    crit_add_value_ = val;
    __isset.crit_add_value_ = true;
  }

  void __set_ignore_defence_add_value_(const int32_t val) {
    ignore_defence_add_value_ = val;
    __isset.ignore_defence_add_value_ = true;
  }

  bool operator == (const MessageAttrNobleCompareResponse & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.level_ != rhs.__isset.level_)
      return false;
    else if (__isset.level_ && !(level_ == rhs.level_))
      return false;
    if (__isset.max_hp_add_value_ != rhs.__isset.max_hp_add_value_)
      return false;
    else if (__isset.max_hp_add_value_ && !(max_hp_add_value_ == rhs.max_hp_add_value_))
      return false;
    if (__isset.max_mp_add_value_ != rhs.__isset.max_mp_add_value_)
      return false;
    else if (__isset.max_mp_add_value_ && !(max_mp_add_value_ == rhs.max_mp_add_value_))
      return false;
    if (__isset.physics_attack_add_value_ != rhs.__isset.physics_attack_add_value_)
      return false;
    else if (__isset.physics_attack_add_value_ && !(physics_attack_add_value_ == rhs.physics_attack_add_value_))
      return false;
    if (__isset.physics_defence_add_value_ != rhs.__isset.physics_defence_add_value_)
      return false;
    else if (__isset.physics_defence_add_value_ && !(physics_defence_add_value_ == rhs.physics_defence_add_value_))
      return false;
    if (__isset.magic_attack_add_value_ != rhs.__isset.magic_attack_add_value_)
      return false;
    else if (__isset.magic_attack_add_value_ && !(magic_attack_add_value_ == rhs.magic_attack_add_value_))
      return false;
    if (__isset.magic_defence_add_value_ != rhs.__isset.magic_defence_add_value_)
      return false;
    else if (__isset.magic_defence_add_value_ && !(magic_defence_add_value_ == rhs.magic_defence_add_value_))
      return false;
    if (__isset.dodge_add_value_ != rhs.__isset.dodge_add_value_)
      return false;
    else if (__isset.dodge_add_value_ && !(dodge_add_value_ == rhs.dodge_add_value_))
      return false;
    if (__isset.crit_add_value_ != rhs.__isset.crit_add_value_)
      return false;
    else if (__isset.crit_add_value_ && !(crit_add_value_ == rhs.crit_add_value_))
      return false;
    if (__isset.ignore_defence_add_value_ != rhs.__isset.ignore_defence_add_value_)
      return false;
    else if (__isset.ignore_defence_add_value_ && !(ignore_defence_add_value_ == rhs.ignore_defence_add_value_))
      return false;
    return true;
  }
  bool operator != (const MessageAttrNobleCompareResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrNobleCompareResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrNobleCompareResponse &a, MessageAttrNobleCompareResponse &b);


class MessageAttrElementInitialize {
 public:

  static const char* ascii_fingerprint; // = "908BA636099DA6568DBB360822A4B2C4";
  static const uint8_t binary_fingerprint[16]; // = {0x90,0x8B,0xA6,0x36,0x09,0x9D,0xA6,0x56,0x8D,0xBB,0x36,0x08,0x22,0xA4,0xB2,0xC4};

  MessageAttrElementInitialize() : level_(0), max_hp_add_value_(0), max_mp_add_value_(0), physics_attack_add_value_(0), physics_defence_add_value_(0), magic_attack_add_value_(0), magic_defence_add_value_(0), dodge_add_value_(0), crit_add_value_(0), ignore_defence_add_value_(0) {
  }

  virtual ~MessageAttrElementInitialize() throw() {}

  int32_t level_;
  int32_t max_hp_add_value_;
  int32_t max_mp_add_value_;
  int32_t physics_attack_add_value_;
  int32_t physics_defence_add_value_;
  int32_t magic_attack_add_value_;
  int32_t magic_defence_add_value_;
  int32_t dodge_add_value_;
  int32_t crit_add_value_;
  int32_t ignore_defence_add_value_;

  void __set_level_(const int32_t val) {
    level_ = val;
  }

  void __set_max_hp_add_value_(const int32_t val) {
    max_hp_add_value_ = val;
  }

  void __set_max_mp_add_value_(const int32_t val) {
    max_mp_add_value_ = val;
  }

  void __set_physics_attack_add_value_(const int32_t val) {
    physics_attack_add_value_ = val;
  }

  void __set_physics_defence_add_value_(const int32_t val) {
    physics_defence_add_value_ = val;
  }

  void __set_magic_attack_add_value_(const int32_t val) {
    magic_attack_add_value_ = val;
  }

  void __set_magic_defence_add_value_(const int32_t val) {
    magic_defence_add_value_ = val;
  }

  void __set_dodge_add_value_(const int32_t val) {
    dodge_add_value_ = val;
  }

  void __set_crit_add_value_(const int32_t val) {
    crit_add_value_ = val;
  }

  void __set_ignore_defence_add_value_(const int32_t val) {
    ignore_defence_add_value_ = val;
  }

  bool operator == (const MessageAttrElementInitialize & rhs) const
  {
    if (!(level_ == rhs.level_))
      return false;
    if (!(max_hp_add_value_ == rhs.max_hp_add_value_))
      return false;
    if (!(max_mp_add_value_ == rhs.max_mp_add_value_))
      return false;
    if (!(physics_attack_add_value_ == rhs.physics_attack_add_value_))
      return false;
    if (!(physics_defence_add_value_ == rhs.physics_defence_add_value_))
      return false;
    if (!(magic_attack_add_value_ == rhs.magic_attack_add_value_))
      return false;
    if (!(magic_defence_add_value_ == rhs.magic_defence_add_value_))
      return false;
    if (!(dodge_add_value_ == rhs.dodge_add_value_))
      return false;
    if (!(crit_add_value_ == rhs.crit_add_value_))
      return false;
    if (!(ignore_defence_add_value_ == rhs.ignore_defence_add_value_))
      return false;
    return true;
  }
  bool operator != (const MessageAttrElementInitialize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrElementInitialize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrElementInitialize &a, MessageAttrElementInitialize &b);


class MessageAttrElementUpgradeRequest {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MessageAttrElementUpgradeRequest() : level_(0) {
  }

  virtual ~MessageAttrElementUpgradeRequest() throw() {}

  int32_t level_;

  void __set_level_(const int32_t val) {
    level_ = val;
  }

  bool operator == (const MessageAttrElementUpgradeRequest & rhs) const
  {
    if (!(level_ == rhs.level_))
      return false;
    return true;
  }
  bool operator != (const MessageAttrElementUpgradeRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrElementUpgradeRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrElementUpgradeRequest &a, MessageAttrElementUpgradeRequest &b);

typedef struct _MessageAttrElementUpgradeResponse__isset {
  _MessageAttrElementUpgradeResponse__isset() : level_(false), max_hp_add_value_(false), max_mp_add_value_(false), physics_attack_add_value_(false), physics_defence_add_value_(false), magic_attack_add_value_(false), magic_defence_add_value_(false), dodge_add_value_(false), crit_add_value_(false), ignore_defence_add_value_(false) {}
  bool level_;
  bool max_hp_add_value_;
  bool max_mp_add_value_;
  bool physics_attack_add_value_;
  bool physics_defence_add_value_;
  bool magic_attack_add_value_;
  bool magic_defence_add_value_;
  bool dodge_add_value_;
  bool crit_add_value_;
  bool ignore_defence_add_value_;
} _MessageAttrElementUpgradeResponse__isset;

class MessageAttrElementUpgradeResponse {
 public:

  static const char* ascii_fingerprint; // = "4DC3D1B743DEF6F991660AD82570ACE5";
  static const uint8_t binary_fingerprint[16]; // = {0x4D,0xC3,0xD1,0xB7,0x43,0xDE,0xF6,0xF9,0x91,0x66,0x0A,0xD8,0x25,0x70,0xAC,0xE5};

  MessageAttrElementUpgradeResponse() : result_(0), level_(0), max_hp_add_value_(0), max_mp_add_value_(0), physics_attack_add_value_(0), physics_defence_add_value_(0), magic_attack_add_value_(0), magic_defence_add_value_(0), dodge_add_value_(0), crit_add_value_(0), ignore_defence_add_value_(0) {
  }

  virtual ~MessageAttrElementUpgradeResponse() throw() {}

  bool result_;
  int32_t level_;
  int32_t max_hp_add_value_;
  int32_t max_mp_add_value_;
  int32_t physics_attack_add_value_;
  int32_t physics_defence_add_value_;
  int32_t magic_attack_add_value_;
  int32_t magic_defence_add_value_;
  int32_t dodge_add_value_;
  int32_t crit_add_value_;
  int32_t ignore_defence_add_value_;

  _MessageAttrElementUpgradeResponse__isset __isset;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_level_(const int32_t val) {
    level_ = val;
    __isset.level_ = true;
  }

  void __set_max_hp_add_value_(const int32_t val) {
    max_hp_add_value_ = val;
    __isset.max_hp_add_value_ = true;
  }

  void __set_max_mp_add_value_(const int32_t val) {
    max_mp_add_value_ = val;
    __isset.max_mp_add_value_ = true;
  }

  void __set_physics_attack_add_value_(const int32_t val) {
    physics_attack_add_value_ = val;
    __isset.physics_attack_add_value_ = true;
  }

  void __set_physics_defence_add_value_(const int32_t val) {
    physics_defence_add_value_ = val;
    __isset.physics_defence_add_value_ = true;
  }

  void __set_magic_attack_add_value_(const int32_t val) {
    magic_attack_add_value_ = val;
    __isset.magic_attack_add_value_ = true;
  }

  void __set_magic_defence_add_value_(const int32_t val) {
    magic_defence_add_value_ = val;
    __isset.magic_defence_add_value_ = true;
  }

  void __set_dodge_add_value_(const int32_t val) {
    dodge_add_value_ = val;
    __isset.dodge_add_value_ = true;
  }

  void __set_crit_add_value_(const int32_t val) {
    crit_add_value_ = val;
    __isset.crit_add_value_ = true;
  }

  void __set_ignore_defence_add_value_(const int32_t val) {
    ignore_defence_add_value_ = val;
    __isset.ignore_defence_add_value_ = true;
  }

  bool operator == (const MessageAttrElementUpgradeResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.level_ != rhs.__isset.level_)
      return false;
    else if (__isset.level_ && !(level_ == rhs.level_))
      return false;
    if (__isset.max_hp_add_value_ != rhs.__isset.max_hp_add_value_)
      return false;
    else if (__isset.max_hp_add_value_ && !(max_hp_add_value_ == rhs.max_hp_add_value_))
      return false;
    if (__isset.max_mp_add_value_ != rhs.__isset.max_mp_add_value_)
      return false;
    else if (__isset.max_mp_add_value_ && !(max_mp_add_value_ == rhs.max_mp_add_value_))
      return false;
    if (__isset.physics_attack_add_value_ != rhs.__isset.physics_attack_add_value_)
      return false;
    else if (__isset.physics_attack_add_value_ && !(physics_attack_add_value_ == rhs.physics_attack_add_value_))
      return false;
    if (__isset.physics_defence_add_value_ != rhs.__isset.physics_defence_add_value_)
      return false;
    else if (__isset.physics_defence_add_value_ && !(physics_defence_add_value_ == rhs.physics_defence_add_value_))
      return false;
    if (__isset.magic_attack_add_value_ != rhs.__isset.magic_attack_add_value_)
      return false;
    else if (__isset.magic_attack_add_value_ && !(magic_attack_add_value_ == rhs.magic_attack_add_value_))
      return false;
    if (__isset.magic_defence_add_value_ != rhs.__isset.magic_defence_add_value_)
      return false;
    else if (__isset.magic_defence_add_value_ && !(magic_defence_add_value_ == rhs.magic_defence_add_value_))
      return false;
    if (__isset.dodge_add_value_ != rhs.__isset.dodge_add_value_)
      return false;
    else if (__isset.dodge_add_value_ && !(dodge_add_value_ == rhs.dodge_add_value_))
      return false;
    if (__isset.crit_add_value_ != rhs.__isset.crit_add_value_)
      return false;
    else if (__isset.crit_add_value_ && !(crit_add_value_ == rhs.crit_add_value_))
      return false;
    if (__isset.ignore_defence_add_value_ != rhs.__isset.ignore_defence_add_value_)
      return false;
    else if (__isset.ignore_defence_add_value_ && !(ignore_defence_add_value_ == rhs.ignore_defence_add_value_))
      return false;
    return true;
  }
  bool operator != (const MessageAttrElementUpgradeResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrElementUpgradeResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrElementUpgradeResponse &a, MessageAttrElementUpgradeResponse &b);


class MessageAttrElementCompareRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MessageAttrElementCompareRequest() : actor_id_() {
  }

  virtual ~MessageAttrElementCompareRequest() throw() {}

  std::string actor_id_;

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
  }

  bool operator == (const MessageAttrElementCompareRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    return true;
  }
  bool operator != (const MessageAttrElementCompareRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrElementCompareRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrElementCompareRequest &a, MessageAttrElementCompareRequest &b);

typedef struct _MessageAttrElementCompareResponse__isset {
  _MessageAttrElementCompareResponse__isset() : level_(false), max_hp_add_value_(false), max_mp_add_value_(false), physics_attack_add_value_(false), physics_defence_add_value_(false), magic_attack_add_value_(false), magic_defence_add_value_(false), dodge_add_value_(false), crit_add_value_(false), ignore_defence_add_value_(false) {}
  bool level_;
  bool max_hp_add_value_;
  bool max_mp_add_value_;
  bool physics_attack_add_value_;
  bool physics_defence_add_value_;
  bool magic_attack_add_value_;
  bool magic_defence_add_value_;
  bool dodge_add_value_;
  bool crit_add_value_;
  bool ignore_defence_add_value_;
} _MessageAttrElementCompareResponse__isset;

class MessageAttrElementCompareResponse {
 public:

  static const char* ascii_fingerprint; // = "7C3708B4775E2EBDCA2A827D941837D0";
  static const uint8_t binary_fingerprint[16]; // = {0x7C,0x37,0x08,0xB4,0x77,0x5E,0x2E,0xBD,0xCA,0x2A,0x82,0x7D,0x94,0x18,0x37,0xD0};

  MessageAttrElementCompareResponse() : actor_id_(), result_(0), level_(0), max_hp_add_value_(0), max_mp_add_value_(0), physics_attack_add_value_(0), physics_defence_add_value_(0), magic_attack_add_value_(0), magic_defence_add_value_(0), dodge_add_value_(0), crit_add_value_(0), ignore_defence_add_value_(0) {
  }

  virtual ~MessageAttrElementCompareResponse() throw() {}

  std::string actor_id_;
  bool result_;
  int32_t level_;
  int32_t max_hp_add_value_;
  int32_t max_mp_add_value_;
  int32_t physics_attack_add_value_;
  int32_t physics_defence_add_value_;
  int32_t magic_attack_add_value_;
  int32_t magic_defence_add_value_;
  int32_t dodge_add_value_;
  int32_t crit_add_value_;
  int32_t ignore_defence_add_value_;

  _MessageAttrElementCompareResponse__isset __isset;

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_level_(const int32_t val) {
    level_ = val;
    __isset.level_ = true;
  }

  void __set_max_hp_add_value_(const int32_t val) {
    max_hp_add_value_ = val;
    __isset.max_hp_add_value_ = true;
  }

  void __set_max_mp_add_value_(const int32_t val) {
    max_mp_add_value_ = val;
    __isset.max_mp_add_value_ = true;
  }

  void __set_physics_attack_add_value_(const int32_t val) {
    physics_attack_add_value_ = val;
    __isset.physics_attack_add_value_ = true;
  }

  void __set_physics_defence_add_value_(const int32_t val) {
    physics_defence_add_value_ = val;
    __isset.physics_defence_add_value_ = true;
  }

  void __set_magic_attack_add_value_(const int32_t val) {
    magic_attack_add_value_ = val;
    __isset.magic_attack_add_value_ = true;
  }

  void __set_magic_defence_add_value_(const int32_t val) {
    magic_defence_add_value_ = val;
    __isset.magic_defence_add_value_ = true;
  }

  void __set_dodge_add_value_(const int32_t val) {
    dodge_add_value_ = val;
    __isset.dodge_add_value_ = true;
  }

  void __set_crit_add_value_(const int32_t val) {
    crit_add_value_ = val;
    __isset.crit_add_value_ = true;
  }

  void __set_ignore_defence_add_value_(const int32_t val) {
    ignore_defence_add_value_ = val;
    __isset.ignore_defence_add_value_ = true;
  }

  bool operator == (const MessageAttrElementCompareResponse & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.level_ != rhs.__isset.level_)
      return false;
    else if (__isset.level_ && !(level_ == rhs.level_))
      return false;
    if (__isset.max_hp_add_value_ != rhs.__isset.max_hp_add_value_)
      return false;
    else if (__isset.max_hp_add_value_ && !(max_hp_add_value_ == rhs.max_hp_add_value_))
      return false;
    if (__isset.max_mp_add_value_ != rhs.__isset.max_mp_add_value_)
      return false;
    else if (__isset.max_mp_add_value_ && !(max_mp_add_value_ == rhs.max_mp_add_value_))
      return false;
    if (__isset.physics_attack_add_value_ != rhs.__isset.physics_attack_add_value_)
      return false;
    else if (__isset.physics_attack_add_value_ && !(physics_attack_add_value_ == rhs.physics_attack_add_value_))
      return false;
    if (__isset.physics_defence_add_value_ != rhs.__isset.physics_defence_add_value_)
      return false;
    else if (__isset.physics_defence_add_value_ && !(physics_defence_add_value_ == rhs.physics_defence_add_value_))
      return false;
    if (__isset.magic_attack_add_value_ != rhs.__isset.magic_attack_add_value_)
      return false;
    else if (__isset.magic_attack_add_value_ && !(magic_attack_add_value_ == rhs.magic_attack_add_value_))
      return false;
    if (__isset.magic_defence_add_value_ != rhs.__isset.magic_defence_add_value_)
      return false;
    else if (__isset.magic_defence_add_value_ && !(magic_defence_add_value_ == rhs.magic_defence_add_value_))
      return false;
    if (__isset.dodge_add_value_ != rhs.__isset.dodge_add_value_)
      return false;
    else if (__isset.dodge_add_value_ && !(dodge_add_value_ == rhs.dodge_add_value_))
      return false;
    if (__isset.crit_add_value_ != rhs.__isset.crit_add_value_)
      return false;
    else if (__isset.crit_add_value_ && !(crit_add_value_ == rhs.crit_add_value_))
      return false;
    if (__isset.ignore_defence_add_value_ != rhs.__isset.ignore_defence_add_value_)
      return false;
    else if (__isset.ignore_defence_add_value_ && !(ignore_defence_add_value_ == rhs.ignore_defence_add_value_))
      return false;
    return true;
  }
  bool operator != (const MessageAttrElementCompareResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrElementCompareResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrElementCompareResponse &a, MessageAttrElementCompareResponse &b);


class SpiritFacadeData {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  SpiritFacadeData() : id_(0), expire_time_(0) {
  }

  virtual ~SpiritFacadeData() throw() {}

  int32_t id_;
  int32_t expire_time_;

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  void __set_expire_time_(const int32_t val) {
    expire_time_ = val;
  }

  bool operator == (const SpiritFacadeData & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(expire_time_ == rhs.expire_time_))
      return false;
    return true;
  }
  bool operator != (const SpiritFacadeData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SpiritFacadeData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SpiritFacadeData &a, SpiritFacadeData &b);


class SpiritRuneData {
 public:

  static const char* ascii_fingerprint; // = "EFFD9F67D6D23CD85DFFD381B41885B5";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xFD,0x9F,0x67,0xD6,0xD2,0x3C,0xD8,0x5D,0xFF,0xD3,0x81,0xB4,0x18,0x85,0xB5};

  SpiritRuneData() : location_(0), template_id_(0) {
  }

  virtual ~SpiritRuneData() throw() {}

  int8_t location_;
  int32_t template_id_;

  void __set_location_(const int8_t val) {
    location_ = val;
  }

  void __set_template_id_(const int32_t val) {
    template_id_ = val;
  }

  bool operator == (const SpiritRuneData & rhs) const
  {
    if (!(location_ == rhs.location_))
      return false;
    if (!(template_id_ == rhs.template_id_))
      return false;
    return true;
  }
  bool operator != (const SpiritRuneData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SpiritRuneData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SpiritRuneData &a, SpiritRuneData &b);


class MessageAttrSpiritInitialize {
 public:

  static const char* ascii_fingerprint; // = "AC4A9F5730D2582FF2A678D1356C653C";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0x4A,0x9F,0x57,0x30,0xD2,0x58,0x2F,0xF2,0xA6,0x78,0xD1,0x35,0x6C,0x65,0x3C};

  MessageAttrSpiritInitialize() : level_(0), lucky_value_(0), current_facade_type_(( ::entity::SpiritFacadeType::type)0), horse_facade_id_(0), wing_facade_id_(0) {
  }

  virtual ~MessageAttrSpiritInitialize() throw() {}

  int32_t level_;
  int32_t lucky_value_;
   ::entity::SpiritFacadeType::type current_facade_type_;
  int32_t horse_facade_id_;
  int32_t wing_facade_id_;
  std::vector<SpiritFacadeData>  facades_;
  std::vector<SpiritRuneData>  runes_;

  void __set_level_(const int32_t val) {
    level_ = val;
  }

  void __set_lucky_value_(const int32_t val) {
    lucky_value_ = val;
  }

  void __set_current_facade_type_(const  ::entity::SpiritFacadeType::type val) {
    current_facade_type_ = val;
  }

  void __set_horse_facade_id_(const int32_t val) {
    horse_facade_id_ = val;
  }

  void __set_wing_facade_id_(const int32_t val) {
    wing_facade_id_ = val;
  }

  void __set_facades_(const std::vector<SpiritFacadeData> & val) {
    facades_ = val;
  }

  void __set_runes_(const std::vector<SpiritRuneData> & val) {
    runes_ = val;
  }

  bool operator == (const MessageAttrSpiritInitialize & rhs) const
  {
    if (!(level_ == rhs.level_))
      return false;
    if (!(lucky_value_ == rhs.lucky_value_))
      return false;
    if (!(current_facade_type_ == rhs.current_facade_type_))
      return false;
    if (!(horse_facade_id_ == rhs.horse_facade_id_))
      return false;
    if (!(wing_facade_id_ == rhs.wing_facade_id_))
      return false;
    if (!(facades_ == rhs.facades_))
      return false;
    if (!(runes_ == rhs.runes_))
      return false;
    return true;
  }
  bool operator != (const MessageAttrSpiritInitialize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrSpiritInitialize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrSpiritInitialize &a, MessageAttrSpiritInitialize &b);

typedef struct _MessageAttrSpiritSynchronize__isset {
  _MessageAttrSpiritSynchronize__isset() : level_(false), lucky_value_(false), current_facade_type_(false), horse_facade_id_(false), wing_facade_id_(false) {}
  bool level_;
  bool lucky_value_;
  bool current_facade_type_;
  bool horse_facade_id_;
  bool wing_facade_id_;
} _MessageAttrSpiritSynchronize__isset;

class MessageAttrSpiritSynchronize {
 public:

  static const char* ascii_fingerprint; // = "4C2AB747ED401AE86A7117B807642428";
  static const uint8_t binary_fingerprint[16]; // = {0x4C,0x2A,0xB7,0x47,0xED,0x40,0x1A,0xE8,0x6A,0x71,0x17,0xB8,0x07,0x64,0x24,0x28};

  MessageAttrSpiritSynchronize() : level_(0), lucky_value_(0), current_facade_type_(( ::entity::SpiritFacadeType::type)0), horse_facade_id_(0), wing_facade_id_(0) {
  }

  virtual ~MessageAttrSpiritSynchronize() throw() {}

  int32_t level_;
  int32_t lucky_value_;
   ::entity::SpiritFacadeType::type current_facade_type_;
  int32_t horse_facade_id_;
  int32_t wing_facade_id_;

  _MessageAttrSpiritSynchronize__isset __isset;

  void __set_level_(const int32_t val) {
    level_ = val;
    __isset.level_ = true;
  }

  void __set_lucky_value_(const int32_t val) {
    lucky_value_ = val;
    __isset.lucky_value_ = true;
  }

  void __set_current_facade_type_(const  ::entity::SpiritFacadeType::type val) {
    current_facade_type_ = val;
    __isset.current_facade_type_ = true;
  }

  void __set_horse_facade_id_(const int32_t val) {
    horse_facade_id_ = val;
    __isset.horse_facade_id_ = true;
  }

  void __set_wing_facade_id_(const int32_t val) {
    wing_facade_id_ = val;
    __isset.wing_facade_id_ = true;
  }

  bool operator == (const MessageAttrSpiritSynchronize & rhs) const
  {
    if (__isset.level_ != rhs.__isset.level_)
      return false;
    else if (__isset.level_ && !(level_ == rhs.level_))
      return false;
    if (__isset.lucky_value_ != rhs.__isset.lucky_value_)
      return false;
    else if (__isset.lucky_value_ && !(lucky_value_ == rhs.lucky_value_))
      return false;
    if (__isset.current_facade_type_ != rhs.__isset.current_facade_type_)
      return false;
    else if (__isset.current_facade_type_ && !(current_facade_type_ == rhs.current_facade_type_))
      return false;
    if (__isset.horse_facade_id_ != rhs.__isset.horse_facade_id_)
      return false;
    else if (__isset.horse_facade_id_ && !(horse_facade_id_ == rhs.horse_facade_id_))
      return false;
    if (__isset.wing_facade_id_ != rhs.__isset.wing_facade_id_)
      return false;
    else if (__isset.wing_facade_id_ && !(wing_facade_id_ == rhs.wing_facade_id_))
      return false;
    return true;
  }
  bool operator != (const MessageAttrSpiritSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrSpiritSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrSpiritSynchronize &a, MessageAttrSpiritSynchronize &b);


class MessageAttrSpiritFacadeSynchronize {
 public:

  static const char* ascii_fingerprint; // = "DAA93AAF37AE396A95CC0C5E62F555C1";
  static const uint8_t binary_fingerprint[16]; // = {0xDA,0xA9,0x3A,0xAF,0x37,0xAE,0x39,0x6A,0x95,0xCC,0x0C,0x5E,0x62,0xF5,0x55,0xC1};

  MessageAttrSpiritFacadeSynchronize() : type_((SpiritFacadeOperateType::type)0) {
  }

  virtual ~MessageAttrSpiritFacadeSynchronize() throw() {}

  SpiritFacadeOperateType::type type_;
  SpiritFacadeData facade_;

  void __set_type_(const SpiritFacadeOperateType::type val) {
    type_ = val;
  }

  void __set_facade_(const SpiritFacadeData& val) {
    facade_ = val;
  }

  bool operator == (const MessageAttrSpiritFacadeSynchronize & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(facade_ == rhs.facade_))
      return false;
    return true;
  }
  bool operator != (const MessageAttrSpiritFacadeSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrSpiritFacadeSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrSpiritFacadeSynchronize &a, MessageAttrSpiritFacadeSynchronize &b);


class MessageAttrSpiritUpgradeRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageAttrSpiritUpgradeRequest() {
  }

  virtual ~MessageAttrSpiritUpgradeRequest() throw() {}


  bool operator == (const MessageAttrSpiritUpgradeRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageAttrSpiritUpgradeRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrSpiritUpgradeRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrSpiritUpgradeRequest &a, MessageAttrSpiritUpgradeRequest &b);


class MessageAttrSpiritUpgradeResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageAttrSpiritUpgradeResponse() : result_(0) {
  }

  virtual ~MessageAttrSpiritUpgradeResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageAttrSpiritUpgradeResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageAttrSpiritUpgradeResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrSpiritUpgradeResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrSpiritUpgradeResponse &a, MessageAttrSpiritUpgradeResponse &b);


class MessageAttrSpiritTransformFacadeRequest {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MessageAttrSpiritTransformFacadeRequest() : facade_id_(0) {
  }

  virtual ~MessageAttrSpiritTransformFacadeRequest() throw() {}

  int32_t facade_id_;

  void __set_facade_id_(const int32_t val) {
    facade_id_ = val;
  }

  bool operator == (const MessageAttrSpiritTransformFacadeRequest & rhs) const
  {
    if (!(facade_id_ == rhs.facade_id_))
      return false;
    return true;
  }
  bool operator != (const MessageAttrSpiritTransformFacadeRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrSpiritTransformFacadeRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrSpiritTransformFacadeRequest &a, MessageAttrSpiritTransformFacadeRequest &b);


class MessageAttrSpiritTransformFacadeResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageAttrSpiritTransformFacadeResponse() : result_(0) {
  }

  virtual ~MessageAttrSpiritTransformFacadeResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageAttrSpiritTransformFacadeResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageAttrSpiritTransformFacadeResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrSpiritTransformFacadeResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrSpiritTransformFacadeResponse &a, MessageAttrSpiritTransformFacadeResponse &b);


class MessageAttrSpiritCompareRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MessageAttrSpiritCompareRequest() : actor_id_() {
  }

  virtual ~MessageAttrSpiritCompareRequest() throw() {}

  std::string actor_id_;

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
  }

  bool operator == (const MessageAttrSpiritCompareRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    return true;
  }
  bool operator != (const MessageAttrSpiritCompareRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrSpiritCompareRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrSpiritCompareRequest &a, MessageAttrSpiritCompareRequest &b);

typedef struct _MessageAttrSpiritCompareResponse__isset {
  _MessageAttrSpiritCompareResponse__isset() : level_(false), current_facade_type_(false), horse_facade_id_(false), wing_facade_id_(false), facades_(false), runes_(false) {}
  bool level_;
  bool current_facade_type_;
  bool horse_facade_id_;
  bool wing_facade_id_;
  bool facades_;
  bool runes_;
} _MessageAttrSpiritCompareResponse__isset;

class MessageAttrSpiritCompareResponse {
 public:

  static const char* ascii_fingerprint; // = "5B57978C017404B742CCCCA4BD5DD66D";
  static const uint8_t binary_fingerprint[16]; // = {0x5B,0x57,0x97,0x8C,0x01,0x74,0x04,0xB7,0x42,0xCC,0xCC,0xA4,0xBD,0x5D,0xD6,0x6D};

  MessageAttrSpiritCompareResponse() : result_(0), actor_id_(), level_(0), current_facade_type_(( ::entity::SpiritFacadeType::type)0), horse_facade_id_(0), wing_facade_id_(0) {
  }

  virtual ~MessageAttrSpiritCompareResponse() throw() {}

  bool result_;
  std::string actor_id_;
  int32_t level_;
   ::entity::SpiritFacadeType::type current_facade_type_;
  int32_t horse_facade_id_;
  int32_t wing_facade_id_;
  std::vector<SpiritFacadeData>  facades_;
  std::vector<SpiritRuneData>  runes_;

  _MessageAttrSpiritCompareResponse__isset __isset;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_actor_id_(const std::string& val) {
    actor_id_ = val;
  }

  void __set_level_(const int32_t val) {
    level_ = val;
    __isset.level_ = true;
  }

  void __set_current_facade_type_(const  ::entity::SpiritFacadeType::type val) {
    current_facade_type_ = val;
    __isset.current_facade_type_ = true;
  }

  void __set_horse_facade_id_(const int32_t val) {
    horse_facade_id_ = val;
    __isset.horse_facade_id_ = true;
  }

  void __set_wing_facade_id_(const int32_t val) {
    wing_facade_id_ = val;
    __isset.wing_facade_id_ = true;
  }

  void __set_facades_(const std::vector<SpiritFacadeData> & val) {
    facades_ = val;
    __isset.facades_ = true;
  }

  void __set_runes_(const std::vector<SpiritRuneData> & val) {
    runes_ = val;
    __isset.runes_ = true;
  }

  bool operator == (const MessageAttrSpiritCompareResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (__isset.level_ != rhs.__isset.level_)
      return false;
    else if (__isset.level_ && !(level_ == rhs.level_))
      return false;
    if (__isset.current_facade_type_ != rhs.__isset.current_facade_type_)
      return false;
    else if (__isset.current_facade_type_ && !(current_facade_type_ == rhs.current_facade_type_))
      return false;
    if (__isset.horse_facade_id_ != rhs.__isset.horse_facade_id_)
      return false;
    else if (__isset.horse_facade_id_ && !(horse_facade_id_ == rhs.horse_facade_id_))
      return false;
    if (__isset.wing_facade_id_ != rhs.__isset.wing_facade_id_)
      return false;
    else if (__isset.wing_facade_id_ && !(wing_facade_id_ == rhs.wing_facade_id_))
      return false;
    if (__isset.facades_ != rhs.__isset.facades_)
      return false;
    else if (__isset.facades_ && !(facades_ == rhs.facades_))
      return false;
    if (__isset.runes_ != rhs.__isset.runes_)
      return false;
    else if (__isset.runes_ && !(runes_ == rhs.runes_))
      return false;
    return true;
  }
  bool operator != (const MessageAttrSpiritCompareResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrSpiritCompareResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrSpiritCompareResponse &a, MessageAttrSpiritCompareResponse &b);


class MessageRuneComposeRequest {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  MessageRuneComposeRequest() : item_id_(), num_(0) {
  }

  virtual ~MessageRuneComposeRequest() throw() {}

  std::string item_id_;
  int32_t num_;

  void __set_item_id_(const std::string& val) {
    item_id_ = val;
  }

  void __set_num_(const int32_t val) {
    num_ = val;
  }

  bool operator == (const MessageRuneComposeRequest & rhs) const
  {
    if (!(item_id_ == rhs.item_id_))
      return false;
    if (!(num_ == rhs.num_))
      return false;
    return true;
  }
  bool operator != (const MessageRuneComposeRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageRuneComposeRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageRuneComposeRequest &a, MessageRuneComposeRequest &b);


class MessageRuneComposeResponse {
 public:

  static const char* ascii_fingerprint; // = "6435B39C87AB0E30F30BEDEFD7328C0D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

  MessageRuneComposeResponse() : template_id_(0), success_num_(0), fail_num_(0) {
  }

  virtual ~MessageRuneComposeResponse() throw() {}

  int32_t template_id_;
  int32_t success_num_;
  int32_t fail_num_;

  void __set_template_id_(const int32_t val) {
    template_id_ = val;
  }

  void __set_success_num_(const int32_t val) {
    success_num_ = val;
  }

  void __set_fail_num_(const int32_t val) {
    fail_num_ = val;
  }

  bool operator == (const MessageRuneComposeResponse & rhs) const
  {
    if (!(template_id_ == rhs.template_id_))
      return false;
    if (!(success_num_ == rhs.success_num_))
      return false;
    if (!(fail_num_ == rhs.fail_num_))
      return false;
    return true;
  }
  bool operator != (const MessageRuneComposeResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageRuneComposeResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageRuneComposeResponse &a, MessageRuneComposeResponse &b);


class MessageRuneMoveRequest {
 public:

  static const char* ascii_fingerprint; // = "127F71BDE833E4F5BF3B092C5F09EBD1";
  static const uint8_t binary_fingerprint[16]; // = {0x12,0x7F,0x71,0xBD,0xE8,0x33,0xE4,0xF5,0xBF,0x3B,0x09,0x2C,0x5F,0x09,0xEB,0xD1};

  MessageRuneMoveRequest() : src_location_(0), src_type_((RuneMoveType::type)0), dest_location_(0), dest_type_((RuneMoveType::type)0) {
  }

  virtual ~MessageRuneMoveRequest() throw() {}

  int16_t src_location_;
  RuneMoveType::type src_type_;
  int16_t dest_location_;
  RuneMoveType::type dest_type_;

  void __set_src_location_(const int16_t val) {
    src_location_ = val;
  }

  void __set_src_type_(const RuneMoveType::type val) {
    src_type_ = val;
  }

  void __set_dest_location_(const int16_t val) {
    dest_location_ = val;
  }

  void __set_dest_type_(const RuneMoveType::type val) {
    dest_type_ = val;
  }

  bool operator == (const MessageRuneMoveRequest & rhs) const
  {
    if (!(src_location_ == rhs.src_location_))
      return false;
    if (!(src_type_ == rhs.src_type_))
      return false;
    if (!(dest_location_ == rhs.dest_location_))
      return false;
    if (!(dest_type_ == rhs.dest_type_))
      return false;
    return true;
  }
  bool operator != (const MessageRuneMoveRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageRuneMoveRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageRuneMoveRequest &a, MessageRuneMoveRequest &b);


class MessageRuneMoveResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageRuneMoveResponse() : result_(0) {
  }

  virtual ~MessageRuneMoveResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageRuneMoveResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageRuneMoveResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageRuneMoveResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageRuneMoveResponse &a, MessageRuneMoveResponse &b);


class MessageRuneSynchronize {
 public:

  static const char* ascii_fingerprint; // = "9A45B17ABF10F0584B2B34A662D93AFC";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x45,0xB1,0x7A,0xBF,0x10,0xF0,0x58,0x4B,0x2B,0x34,0xA6,0x62,0xD9,0x3A,0xFC};

  MessageRuneSynchronize() {
  }

  virtual ~MessageRuneSynchronize() throw() {}

  SpiritRuneData data_;

  void __set_data_(const SpiritRuneData& val) {
    data_ = val;
  }

  bool operator == (const MessageRuneSynchronize & rhs) const
  {
    if (!(data_ == rhs.data_))
      return false;
    return true;
  }
  bool operator != (const MessageRuneSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageRuneSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageRuneSynchronize &a, MessageRuneSynchronize &b);


class LegendaryWeaponData {
 public:

  static const char* ascii_fingerprint; // = "ACBC8ECF4940BD768FA35CCD08154770";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xBC,0x8E,0xCF,0x49,0x40,0xBD,0x76,0x8F,0xA3,0x5C,0xCD,0x08,0x15,0x47,0x70};

  LegendaryWeaponData() : id_(0) {
  }

  virtual ~LegendaryWeaponData() throw() {}

  int32_t id_;
  std::vector<int32_t>  pieces_;

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  void __set_pieces_(const std::vector<int32_t> & val) {
    pieces_ = val;
  }

  bool operator == (const LegendaryWeaponData & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(pieces_ == rhs.pieces_))
      return false;
    return true;
  }
  bool operator != (const LegendaryWeaponData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LegendaryWeaponData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LegendaryWeaponData &a, LegendaryWeaponData &b);


class MessageAttrLegendaryWeaponInitialize {
 public:

  static const char* ascii_fingerprint; // = "6C6BD4E5CAE99738C975BFD2E5000B63";
  static const uint8_t binary_fingerprint[16]; // = {0x6C,0x6B,0xD4,0xE5,0xCA,0xE9,0x97,0x38,0xC9,0x75,0xBF,0xD2,0xE5,0x00,0x0B,0x63};

  MessageAttrLegendaryWeaponInitialize() {
  }

  virtual ~MessageAttrLegendaryWeaponInitialize() throw() {}

  std::vector<LegendaryWeaponData>  weapons_;

  void __set_weapons_(const std::vector<LegendaryWeaponData> & val) {
    weapons_ = val;
  }

  bool operator == (const MessageAttrLegendaryWeaponInitialize & rhs) const
  {
    if (!(weapons_ == rhs.weapons_))
      return false;
    return true;
  }
  bool operator != (const MessageAttrLegendaryWeaponInitialize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrLegendaryWeaponInitialize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrLegendaryWeaponInitialize &a, MessageAttrLegendaryWeaponInitialize &b);


class MessageAttrLegendaryWeaponPieceSynchronize {
 public:

  static const char* ascii_fingerprint; // = "6435B39C87AB0E30F30BEDEFD7328C0D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

  MessageAttrLegendaryWeaponPieceSynchronize() : weapon_id_(0), piece_index_(0), piece_count_(0) {
  }

  virtual ~MessageAttrLegendaryWeaponPieceSynchronize() throw() {}

  int32_t weapon_id_;
  int32_t piece_index_;
  int32_t piece_count_;

  void __set_weapon_id_(const int32_t val) {
    weapon_id_ = val;
  }

  void __set_piece_index_(const int32_t val) {
    piece_index_ = val;
  }

  void __set_piece_count_(const int32_t val) {
    piece_count_ = val;
  }

  bool operator == (const MessageAttrLegendaryWeaponPieceSynchronize & rhs) const
  {
    if (!(weapon_id_ == rhs.weapon_id_))
      return false;
    if (!(piece_index_ == rhs.piece_index_))
      return false;
    if (!(piece_count_ == rhs.piece_count_))
      return false;
    return true;
  }
  bool operator != (const MessageAttrLegendaryWeaponPieceSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrLegendaryWeaponPieceSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrLegendaryWeaponPieceSynchronize &a, MessageAttrLegendaryWeaponPieceSynchronize &b);


class LegendaryWeaponRepairData {
 public:

  static const char* ascii_fingerprint; // = "6435B39C87AB0E30F30BEDEFD7328C0D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

  LegendaryWeaponRepairData() : weapon_id_(0), piece_index_(0), use_item_count_(0) {
  }

  virtual ~LegendaryWeaponRepairData() throw() {}

  int32_t weapon_id_;
  int32_t piece_index_;
  int32_t use_item_count_;

  void __set_weapon_id_(const int32_t val) {
    weapon_id_ = val;
  }

  void __set_piece_index_(const int32_t val) {
    piece_index_ = val;
  }

  void __set_use_item_count_(const int32_t val) {
    use_item_count_ = val;
  }

  bool operator == (const LegendaryWeaponRepairData & rhs) const
  {
    if (!(weapon_id_ == rhs.weapon_id_))
      return false;
    if (!(piece_index_ == rhs.piece_index_))
      return false;
    if (!(use_item_count_ == rhs.use_item_count_))
      return false;
    return true;
  }
  bool operator != (const LegendaryWeaponRepairData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LegendaryWeaponRepairData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LegendaryWeaponRepairData &a, LegendaryWeaponRepairData &b);


class MessageAttrLegendaryWeaponRepairRequest {
 public:

  static const char* ascii_fingerprint; // = "472B8583FB07D1D9EA40FEBBDE10B800";
  static const uint8_t binary_fingerprint[16]; // = {0x47,0x2B,0x85,0x83,0xFB,0x07,0xD1,0xD9,0xEA,0x40,0xFE,0xBB,0xDE,0x10,0xB8,0x00};

  MessageAttrLegendaryWeaponRepairRequest() {
  }

  virtual ~MessageAttrLegendaryWeaponRepairRequest() throw() {}

  std::vector<LegendaryWeaponRepairData>  targets_;

  void __set_targets_(const std::vector<LegendaryWeaponRepairData> & val) {
    targets_ = val;
  }

  bool operator == (const MessageAttrLegendaryWeaponRepairRequest & rhs) const
  {
    if (!(targets_ == rhs.targets_))
      return false;
    return true;
  }
  bool operator != (const MessageAttrLegendaryWeaponRepairRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrLegendaryWeaponRepairRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrLegendaryWeaponRepairRequest &a, MessageAttrLegendaryWeaponRepairRequest &b);


class MessageAttrLegendaryWeaponRepairResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageAttrLegendaryWeaponRepairResponse() : result_(0) {
  }

  virtual ~MessageAttrLegendaryWeaponRepairResponse() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageAttrLegendaryWeaponRepairResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageAttrLegendaryWeaponRepairResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttrLegendaryWeaponRepairResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAttrLegendaryWeaponRepairResponse &a, MessageAttrLegendaryWeaponRepairResponse &b);

}} // namespace

#endif
