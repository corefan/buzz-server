/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef gateway_gm_protocol_TYPES_H
#define gateway_gm_protocol_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "gateway_protocol_types.h"


namespace gateway { namespace protocol {


class MessageGmAddItem {
 public:

  static const char* ascii_fingerprint; // = "D94643FAA64D148BA1A51D62125012BE";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0x46,0x43,0xFA,0xA6,0x4D,0x14,0x8B,0xA1,0xA5,0x1D,0x62,0x12,0x50,0x12,0xBE};

  MessageGmAddItem() : actor_name_(), item_template_(0), number_(0), bind_(0) {
  }

  virtual ~MessageGmAddItem() throw() {}

  std::string actor_name_;
  int32_t item_template_;
  int16_t number_;
  bool bind_;

  void __set_actor_name_(const std::string& val) {
    actor_name_ = val;
  }

  void __set_item_template_(const int32_t val) {
    item_template_ = val;
  }

  void __set_number_(const int16_t val) {
    number_ = val;
  }

  void __set_bind_(const bool val) {
    bind_ = val;
  }

  bool operator == (const MessageGmAddItem & rhs) const
  {
    if (!(actor_name_ == rhs.actor_name_))
      return false;
    if (!(item_template_ == rhs.item_template_))
      return false;
    if (!(number_ == rhs.number_))
      return false;
    if (!(bind_ == rhs.bind_))
      return false;
    return true;
  }
  bool operator != (const MessageGmAddItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageGmAddItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageGmAddItem &a, MessageGmAddItem &b);


class MessageGmSceneJump {
 public:

  static const char* ascii_fingerprint; // = "6435B39C87AB0E30F30BEDEFD7328C0D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

  MessageGmSceneJump() : map_(0), x_(0), y_(0) {
  }

  virtual ~MessageGmSceneJump() throw() {}

  int32_t map_;
  int32_t x_;
  int32_t y_;

  void __set_map_(const int32_t val) {
    map_ = val;
  }

  void __set_x_(const int32_t val) {
    x_ = val;
  }

  void __set_y_(const int32_t val) {
    y_ = val;
  }

  bool operator == (const MessageGmSceneJump & rhs) const
  {
    if (!(map_ == rhs.map_))
      return false;
    if (!(x_ == rhs.x_))
      return false;
    if (!(y_ == rhs.y_))
      return false;
    return true;
  }
  bool operator != (const MessageGmSceneJump &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageGmSceneJump & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageGmSceneJump &a, MessageGmSceneJump &b);


class MessageGmOpenSword {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageGmOpenSword() {
  }

  virtual ~MessageGmOpenSword() throw() {}


  bool operator == (const MessageGmOpenSword & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageGmOpenSword &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageGmOpenSword & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageGmOpenSword &a, MessageGmOpenSword &b);


class MessageGmCommand {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MessageGmCommand() : command_() {
  }

  virtual ~MessageGmCommand() throw() {}

  std::string command_;

  void __set_command_(const std::string& val) {
    command_ = val;
  }

  bool operator == (const MessageGmCommand & rhs) const
  {
    if (!(command_ == rhs.command_))
      return false;
    return true;
  }
  bool operator != (const MessageGmCommand &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageGmCommand & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageGmCommand &a, MessageGmCommand &b);

}} // namespace

#endif
