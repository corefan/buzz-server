/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "gateway_protocol_types.h"

#include <algorithm>

namespace gateway { namespace protocol {

int _kMessageTypeValues[] = {
  MessageType::MESSAGE_MIN,
  MessageType::MESSAGE_SYSTEM,
  MessageType::MESSAGE_VERIFY_QUESTION,
  MessageType::MESSAGE_VERIFY_QUESTION_REQUEST,
  MessageType::MESSAGE_VERIFY_QUESTION_RESPONSE,
  MessageType::MESSAGE_TEST,
  MessageType::MESSAGE_LOGIN_REQUEST,
  MessageType::MESSAGE_LOGIN_RESPONSE,
  MessageType::MESSAGE_LOGOUT_REQUEST,
  MessageType::MESSAGE_LOGOUT_RESPONSE,
  MessageType::MESSAGE_KICKOUT_ACTOR,
  MessageType::MESSAGE_CREATE_ACTOR,
  MessageType::MESSAGE_SYNCHRONIZE_ACTOR,
  MessageType::MESSAGE_SYNCHRONIZE_ACTOR_FUNCTIONALITY_STATE,
  MessageType::MESSAGE_SYNCHRONIZE_ACTOR_SUB_FIGHT_SCORE,
  MessageType::MESSAGE_SYNCHRONIZE_NPC,
  MessageType::MESSAGE_SYNCHRONIZE_SCENE_ITEM,
  MessageType::MESSAGE_ACTOR_ENTER_MAP,
  MessageType::MESSAGE_ACTOR_MOVE,
  MessageType::MESSAGE_ACTOR_RELOCATION,
  MessageType::MESSAGE_ROLE_MOVE_SYNCHRONIZE,
  MessageType::MESSAGE_CREATE_ACTOR_SYNCHRONIZE,
  MessageType::MESSAGE_CREATE_NPC_SYNCHRONIZE,
  MessageType::MESSAGE_CREATE_SCENE_ITEM_SYNCHRONIZE,
  MessageType::MESSAGE_DESTORY_ROLE_SYNCHRONIZE,
  MessageType::MESSAGE_ADD_EXP_SYNCHRONIZE,
  MessageType::MESSAGE_ACTOR_VIP_SYNCHRONIZE,
  MessageType::MESSAGE_WORLD_JUMP_VIP_NUM_SYNCHRONIZE,
  MessageType::MESSAGE_CREATE_AOI_ROLES,
  MessageType::MESSAGE_DESTORY_AOI_ROLES,
  MessageType::MESSAGE_ACTOR_FACADE_REQUEST,
  MessageType::MESSAGE_ACTOR_FACADE_RESPONSE,
  MessageType::MESSAGE_ACTOR_FUNCTIONALITY_OPEN_REQUEST,
  MessageType::MESSAGE_ACTOR_FUNCTIONALITY_OPEN_RESPONSE,
  MessageType::MESSAGE_ACTOR_USE_TASLIMAN_REQUEST,
  MessageType::MESSAGE_ACTOR_USE_TASLIMAN_RESPONSE,
  MessageType::MESSAGE_ACTOR_TASLIMAN_SYNCHRONIZE,
  MessageType::MESSAGE_ERROR_CODE,
  MessageType::MESSAGE_INFORM_NOTIFY,
  MessageType::MESSAGE_SKILL_OPERATE,
  MessageType::MESSAGE_SKILL_HIT,
  MessageType::MESSAGE_ACTOR_CHOOSE_PK_MODE,
  MessageType::MESSAGE_ENTER_FIGHTING_STATUS,
  MessageType::MESSAGE_LEAVE_FIGHTING_STATUS,
  MessageType::MESSAGE_ENTER_PVP_STATUS,
  MessageType::MESSAGE_LEAVE_PVP_STATUS,
  MessageType::MESSAGE_PVP_STATUS_BROADCAST,
  MessageType::MEESAGE_SKILL_BREAK_SYNCHRONIZE,
  MessageType::MESSAGE_SKILL_ATTRIBUTE_SYNCHRONIZE,
  MessageType::MESSAGE_BUFF_INITIALIZE,
  MessageType::MESSAGE_ADD_BUFF,
  MessageType::MESSAGE_REMOVE_BUFF,
  MessageType::MESSAGE_ITEM_CONTAINER_INITIALIZE,
  MessageType::MESSAGE_ITEM_CREATE_SYNCHRONIZE,
  MessageType::MESSAGE_SYNCHRONIZE_ITEM,
  MessageType::MESSAGE_ITEM_CONTAINER_OPERATE,
  MessageType::MESSAGE_ITEM_MOVE,
  MessageType::MESSAGE_ITEM_REMOVE,
  MessageType::MESSAGE_ITEM_USE,
  MessageType::MESSAGE_ITEM_SPLIT,
  MessageType::MESSAGE_ITEM_ARRANGE,
  MessageType::MESSAGE_ITEM_ARRANGE_RESULT,
  MessageType::MESSAGE_EXTEND_CONTAINER,
  MessageType::MESSAGE_ITEM_COMPOSE_REQUEST,
  MessageType::MESSAGE_ITEM_COMPOSE_RESPONSE,
  MessageType::MESSAGE_CREATE_ACTOR_EQUIP_BROADCAST,
  MessageType::MESSAGE_UPDATE_ACTOR_EQUIP_BROADCAST,
  MessageType::MESSAGE_EQUIP_COMPARE_REQUEST,
  MessageType::MESSAGE_EQUIP_COMPARE_RESPONSE,
  MessageType::MESSAGE_EQUIP_INTENSIFY_REQUEST,
  MessageType::MESSAGE_EQUIP_INTENSIFY_RESPONSE,
  MessageType::MESSAGE_EQUIP_REFINE_REQUEST,
  MessageType::MESSAGE_EQUIP_REFINE_RESPONSE,
  MessageType::MESSAGE_EQUIP_REFINE_CONFIRM_REQUEST,
  MessageType::MESSAGE_EQUIP_REFINE_CONFIRM_RESPONSE,
  MessageType::MESSAGE_EQUIP_UPGRADE_REQUEST,
  MessageType::MESSAGE_EQUIP_UPGRADE_RESPONSE,
  MessageType::MESSAGE_EQUIP_INHERIT_REQUEST,
  MessageType::MESSAGE_EQUIP_INHERIT_RESPONSE,
  MessageType::MESSAGE_GEM_INITIALIZE,
  MessageType::MESSAGE_GEM_SYNCHRONIZE,
  MessageType::MESSAGE_GEM_GATHER_REQUEST,
  MessageType::MESSAGE_GEM_GATHER_RESPONSE,
  MessageType::MESSAGE_GEM_SKIP_GATHERING_POINT_REQUEST,
  MessageType::MESSAGE_GEM_SKIP_GATHERING_POINT_RESPONSE,
  MessageType::MESSAGE_GEM_MOVE_REQUEST,
  MessageType::MESSAGE_GEM_MOVE_RESPONSE,
  MessageType::MESSAGE_GEM_PROMOTE_REQUEST,
  MessageType::MESSAGE_GEM_PROMOTE_RESPONSE,
  MessageType::MESSAGE_GEM_DECOMPOSE_REQUEST,
  MessageType::MESSAGE_GEM_DECOMPOSE_RESPONSE,
  MessageType::MESSAGE_GEM_LOCK_REQUEST,
  MessageType::MESSAGE_GEM_LOCK_RESPONSE,
  MessageType::MESSAGE_GEM_LOCK_ALL_REQUEST,
  MessageType::MESSAGE_GEM_LOCK_ALL_RESPONSE,
  MessageType::MESSAGE_SHORTCUT_INITIALIZE,
  MessageType::MESSAGE_SHORTCUT_SET_REQUEST,
  MessageType::MESSAGE_SHORTCUT_SET_RESPONSE,
  MessageType::MESSAGE_VIP_GIFTS_PICK_REQUEST,
  MessageType::MESSAGE_VIP_GIFTS_PICK_RESPONSE,
  MessageType::MESSAGE_VIP_GIFTS_SYNCHRONIZE,
  MessageType::MESSAGE_ITEM_TREASURE_HUNT_REQUEST,
  MessageType::MESSAGE_ITEM_TREASURE_HUNT_RESPONSE,
  MessageType::MESSAGE_ITEM_TREASURE_HUNT_NOTICE,
  MessageType::MESSAGE_GM_ADD_ITEM,
  MessageType::MESSAGE_GM_SCENE_JUMP,
  MessageType::MESSAGE_GM_OPEN_SWORD,
  MessageType::MESSAGE_GM_COMMAND,
  MessageType::MESSAGE_SCENE_REQUEST_JUMP,
  MessageType::MESSAGE_SCENE_ACTOR_JUMP,
  MessageType::MESSAGE_SCENE_DAYNIGHT_CHANGE,
  MessageType::MESSAGE_SCENE_ROLE_KILLED,
  MessageType::MESSAGE_SCENE_GATHER,
  MessageType::MESSAGE_SCENE_GATHER_RESPONSE,
  MessageType::MESSAGE_SCENE_PICK_UP_REQUEST,
  MessageType::MESSAGE_SCENE_PICK_UP_RESPONSE,
  MessageType::MESSAGE_SCENE_JUMP_REQUEST,
  MessageType::MESSAGE_SCENE_JUMP_RESPONSE,
  MessageType::MESSAGE_SCENE_WORLD_BOSS_INITIALIZE,
  MessageType::MESSAGE_SCENE_BOSS_KILLED,
  MessageType::MESSAGE_SCENE_SUMMON_WORLD_BOSS,
  MessageType::MESSAGE_SCENE_ACTOR_CHOOSE_REVIVE_MODE_REQUEST,
  MessageType::MESSAGE_SCENE_ACTOR_CHOOSE_REVIVE_MODE_RESPONSE,
  MessageType::MESSAGE_SCENE_ZAZEN_REQUEST,
  MessageType::MESSAGE_SCENE_ZAZEN_RESPONSE,
  MessageType::MESSAGE_SCENE_CANCEL_ZAZEN_REQUEST,
  MessageType::MESSAGE_SCENE_CANCEL_ZAZEN_RESPONSE,
  MessageType::MESSAGE_SCENE_ZAZEN_INCOME_NOTICE,
  MessageType::MESSAGE_SCENE_CONSECUTIVE_KILL_NOTICE,
  MessageType::MESSAGE_SCENE_BRANCH_SYNCHRONIZE,
  MessageType::MESSAGE_SCENE_BRANCH_STATUS_REQUEST,
  MessageType::MESSAGE_SCENE_BRANCH_STATUS_RESPONSE,
  MessageType::MESSAGE_SCENE_BRANCH_SWITCH_REQUEST,
  MessageType::MESSAGE_SCENE_BRANCH_SWITCH_RESPONSE,
  MessageType::MESSAGE_SOUL_INITIALIZE,
  MessageType::MESSAGE_SOUL_SYNCHRONIZE,
  MessageType::MESSAGE_SOUL_UNLOCK_REQUEST,
  MessageType::MESSAGE_SOUL_UNLOCK_RESPONSE,
  MessageType::MESSAGE_SOUL_UPGRADE_STEP_REQUEST,
  MessageType::MESSAGE_SOUL_UPGRADE_STEP_RESPONSE,
  MessageType::MESSAGE_SOUL_UPGRADE_LEVEL_REQUEST,
  MessageType::MESSAGE_SOUL_UPGRADE_LEVEL_RESPONSE,
  MessageType::MESSAGE_SOUL_SET_REQUEST,
  MessageType::MESSAGE_SOUL_SET_RESPONSE,
  MessageType::MESSAGE_SOUL_RESET_REQUEST,
  MessageType::MESSAGE_SOUL_RESET_RESPONSE,
  MessageType::MESSAGE_SOUL_SETTING_STAND_REQUEST,
  MessageType::MESSAGE_SOUL_SETTING_STAND_RESPONSE,
  MessageType::MESSAGE_SOUL_SKILL_UPGRADE_REQUEST,
  MessageType::MESSAGE_SOUL_SKILL_UPGRADE_RESPONSE,
  MessageType::MESSAGE_SOUL_ALTAR_INITIALIZE,
  MessageType::MESSAGE_SOUL_ALTAR_SYNCHRONIZE,
  MessageType::MESSAGE_SOUL_ALTAR_CARD_SYNCHRONIZE,
  MessageType::MESSAGE_SOUL_ALTAR_SUMMON_REQUEST,
  MessageType::MESSAGE_SOUL_ALTAR_SUMMON_RESPONSE,
  MessageType::MESSAGE_SOUL_ALTAR_TAKE_REQUEST,
  MessageType::MESSAGE_SOUL_ALTAR_TAKE_RESPONSE,
  MessageType::MESSAGE_SOUL_ALTAR_RESET_REQUEST,
  MessageType::MESSAGE_SOUL_ALTAR_RESET_RESPONSE,
  MessageType::MESSAGE_TASK_INITIALIZE,
  MessageType::MESSAGE_TASK_SYNCHRONIZE,
  MessageType::MESSAGE_TASK_ACCEPT,
  MessageType::MESSAGE_TASK_FINISH,
  MessageType::MESSAGE_TASK_ABANDON,
  MessageType::MESSAGE_TASK_TALK_NPC,
  MessageType::MESSAGE_TASK_CIRCLE_INITIALIZE,
  MessageType::MESSAGE_TASK_CIRCLE_OPT_REQUEST,
  MessageType::MESSAGE_TASK_CIRCLE_OPT_RESPONSE,
  MessageType::MESSAGE_TASK_TRIP_INITIALIZE,
  MessageType::MESSAGE_TASK_TRIP_OPT_REQUEST,
  MessageType::MESSAGE_TASK_TRIP_OPT_RESPONSE,
  MessageType::MESSAGE_TASK_SUMMON_NPC_REQUEST,
  MessageType::MESSAGE_TASK_SUMMON_NPC_RESPONSE,
  MessageType::MESSAGE_TASK_DAILY_INITIALIZE,
  MessageType::MESSAGE_TASK_DAILY_REQUEST,
  MessageType::MESSAGE_TASK_DAILY_RESPONSE,
  MessageType::MESSAGE_TASK_DAILY_AWARD_REQUEST,
  MessageType::MESSAGE_TASK_DAILY_AWARD_RESPONSE,
  MessageType::MESSAGE_TASK_TRANSPORT_INITIALIZE,
  MessageType::MESSAGE_TASK_TRANSPORT_SYNCHRONIZE,
  MessageType::MESSAGE_TASK_TRANSPORT_REFRESH_QUALITY_REQUEST,
  MessageType::MESSAGE_TASK_TRANSPORT_REFRESH_QUALITY_RESPONSE,
  MessageType::MESSAGE_TASK_TRANSPORT_ACCEPT_REQUEST,
  MessageType::MESSAGE_TASK_TRANSPORT_ACCEPT_RESPONSE,
  MessageType::MESSAGE_TASK_TRANSPORT_FINISH_REQUEST,
  MessageType::MESSAGE_TASK_TRANSPORT_FINISH_RESPONSE,
  MessageType::MESSAGE_ATTR_AOI_SYNCHRONIZE,
  MessageType::MESSAGE_ATTR_SWORD_INITIALIZE,
  MessageType::MESSAGE_ATTR_SWORD_UPGRADE_REQUEST,
  MessageType::MESSAGE_ATTR_SWORD_UPGRADE_RESPONSE,
  MessageType::MESSAGE_ATTR_SWORD_SYNCHRONIZE,
  MessageType::MESSAGE_ATTR_SWORD_EQUIP,
  MessageType::MESSAGE_ATTR_SWORD_UNEQUIP,
  MessageType::MESSAGE_ATTR_SWORD_COMPARE_REQUEST,
  MessageType::MESSAGE_ATTR_SWORD_COMPARE_RESPONSE,
  MessageType::MESSAGE_ATTR_NOBLE_INITIALIZE,
  MessageType::MESSAGE_ATTR_NOBLE_PROMOTE_REQUEST,
  MessageType::MESSAGE_ATTR_NOBLE_PROMOTE_RESPONSE,
  MessageType::MESSAGE_ATTR_NOBLE_BREAKTHROUGH_REQUEST,
  MessageType::MESSAGE_ATTR_NOBLE_BREAKTHROUGH_RESPONSE,
  MessageType::MESSAGE_ATTR_NOBLE_COMPARE_REQUEST,
  MessageType::MESSAGE_ATTR_NOBLE_COMPARE_RESPONSE,
  MessageType::MESSAGE_ATTR_ELEMENT_INITIALIZE,
  MessageType::MESSAGE_ATTR_ELEMENT_UPGRADE_REQUEST,
  MessageType::MESSAGE_ATTR_ELEMENT_UPGRADE_RESPONSE,
  MessageType::MESSAGE_ATTR_ELEMENT_COMPARE_REQUEST,
  MessageType::MESSAGE_ATTR_ELEMENT_COMPARE_RESPONSE,
  MessageType::MESSAGE_ATTR_SPIRIT_INITIALIZE,
  MessageType::MESSAGE_ATTR_SPIRIT_SYNCHRONIZE,
  MessageType::MESSAGE_ATTR_SPIRIT_FACADE_SYNCHRONIZE,
  MessageType::MESSAGE_ATTR_SPIRIT_UPGRADE_REQUEST,
  MessageType::MESSAGE_ATTR_SPIRIT_UPGRADE_RESPONSE,
  MessageType::MESSAGE_ATTR_SPIRIT_TRANSFORM_FACADE_REQUEST,
  MessageType::MESSAGE_ATTR_SPIRIT_TRANSFORM_FACADE_RESPONSE,
  MessageType::MESSAGE_ATTR_SPIRIT_COMPARE_REQUEST,
  MessageType::MESSAGE_ATTR_SPIRIT_COMPARE_RESPONSE,
  MessageType::MESSAGE_ATTR_RUNE_SYNCHRONIZE,
  MessageType::MESSAGE_ATTR_RUNE_COMPOSE_REQUEST,
  MessageType::MESSAGE_ATTR_RUNE_COMPOSE_RESPONSE,
  MessageType::MESSAGE_ATTR_RUNE_MOVE_REQUEST,
  MessageType::MESSAGE_ATTR_RUNE_MOVE_RESPONSE,
  MessageType::MESSAGE_ATTR_LEGENDARY_WEAPON_INITIALIZE,
  MessageType::MESSAGE_ATTR_LEGENDARY_WEAPON_PIECE_SYNCHRONIZE,
  MessageType::MESSAGE_ATTR_LEGENDARY_WEAPON_REPAIR_REQUEST,
  MessageType::MESSAGE_ATTR_LEGENDARY_WEAPON_REPAIR_RESPONSE,
  MessageType::MESSAGE_CHAT_REQUEST,
  MessageType::MESSAGE_CHAT_RESPONSE,
  MessageType::MESSAGE_CHAT_SYNCHRONIZE,
  MessageType::MESSAGE_MAIL_INITIALIZE,
  MessageType::MESSAGE_MAIL_ADD,
  MessageType::MESSAGE_MAIL_SEND_REQUEST,
  MessageType::MESSAGE_MAIL_SEND_RESPONSE,
  MessageType::MESSAGE_MAIL_DEL_REQUEST,
  MessageType::MESSAGE_MAIL_DEL_RESPONSE,
  MessageType::MESSAGE_MAIL_READ_REQUEST,
  MessageType::MESSAGE_MAIL_READ_RESPONSE,
  MessageType::MESSAGE_MAIL_PICK_AFFIX_REQUEST,
  MessageType::MESSAGE_MAIL_PICK_AFFIX_RESPONSE,
  MessageType::MESSAGE_MAIL_DEL,
  MessageType::MESSAGE_SHOP_BUYBACK_INITIALIZE,
  MessageType::MESSAGE_SHOP_BUY_REQUEST,
  MessageType::MESSAGE_SHOP_BUY_RESPONSE,
  MessageType::MESSAGE_SHOP_BUYBACK_REQUEST,
  MessageType::MESSAGE_SHOP_BUYBACK_RESPONSE,
  MessageType::MESSAGE_SHOP_SELL_REQUEST,
  MessageType::MESSAGE_SHOP_SELL_RESPONSE,
  MessageType::MESSAGE_SOCIAL_CONTACTS_INITIALIZE,
  MessageType::MESSAGE_SOCIAL_CONTACTS_SYNCHRONIZE,
  MessageType::MESSAGE_SOCIAL_CONTACTS_EDIT_SIGNATURE_REQUEST,
  MessageType::MESSAGE_SOCIAL_CONTACTS_EDIT_SIGNATURE_RESPONSE,
  MessageType::MESSAGE_SOCIAL_CONTACTS_ADD_REQUEST,
  MessageType::MESSAGE_SOCIAL_CONTACTS_ADD_RESPONSE,
  MessageType::MESSAGE_SOCIAL_CONTACTS_ADD_NOTIFY,
  MessageType::MESSAGE_SOCIAL_CONTACTS_REMOVE_REQUEST,
  MessageType::MESSAGE_SOCIAL_CONTACTS_REMOVE_RESPONSE,
  MessageType::MESSAGE_SOCIAL_CONTACTS_MOVE_REQUEST,
  MessageType::MESSAGE_SOCIAL_CONTACTS_MOVE_RESPONSE,
  MessageType::MESSAGE_SOCIAL_CONTACTS_RECOMMEND_REQUEST,
  MessageType::MESSAGE_SOCIAL_CONTACTS_RECOMMEND_RESPONSE,
  MessageType::MESSAGE_SOCIAL_ENEMY_INITIALIZE,
  MessageType::MESSAGE_SOCIAL_ENEMY_SYNCHRONIZE,
  MessageType::MESSAGE_SOCIAL_ENEMY_ADD_REQUEST,
  MessageType::MESSAGE_SOCIAL_ENEMY_ADD_RESPONSE,
  MessageType::MESSAGE_SOCIAL_ENEMY_REMOVE_REQUEST,
  MessageType::MESSAGE_SOCIAL_ENEMY_REMOVE_RESPONSE,
  MessageType::MESSAGE_HOMELAND_INITIALIZE,
  MessageType::MESSAGE_HOMELAND_SYNCHRONIZE,
  MessageType::MESSAGE_HOMELAND_FRIEND_SYNCHRONIZE,
  MessageType::MESSAGE_HOMELAND_INVADER_SYNCHRONIZE,
  MessageType::MESSAGE_HOMELAND_SUPPORTED_SOUL_SYNCHRONIZE,
  MessageType::MESSAGE_HOMELAND_SUPPORT_SOUL_SYNCHRONIZE,
  MessageType::MESSAGE_HOMELAND_EVENT_SYNCHRONIZE,
  MessageType::MESSAGE_HOMELAND_VISIT_REQUEST,
  MessageType::MESSAGE_HOMELAND_VISIT_RESPONSE,
  MessageType::MESSAGE_HOMELAND_CLEAR_UPGRADE_COOLING_REQUEST,
  MessageType::MESSAGE_HOMELAND_CLEAR_UPGRADE_COOLING_RESPONSE,
  MessageType::MESSAGE_HOMELAND_TEMPLE_UPGRADE_REQUEST,
  MessageType::MESSAGE_HOMELAND_TEMPLE_UPGRADE_RESPONSE,
  MessageType::MESSAGE_HOMELAND_TEMPLE_HARVEST_REQUEST,
  MessageType::MESSAGE_HOMELAND_TEMPLE_HARVEST_RESPONSE,
  MessageType::MESSAGE_HOMELAND_TEMPLE_CLEAR_HARVEST_COOLING_REQUEST,
  MessageType::MESSAGE_HOMELAND_TEMPLE_CLEAR_HARVEST_COOLING_RESPONSE,
  MessageType::MESSAGE_HOMELAND_TEMPLE_FORCE_HARVEST_REQUEST,
  MessageType::MESSAGE_HOMELAND_TEMPLE_FORCE_HARVEST_RESPONSE,
  MessageType::MESSAGE_HOMELAND_GOLDMINE_UPGRADE_REQUEST,
  MessageType::MESSAGE_HOMELAND_GOLDMINE_UPGRADE_RESPONSE,
  MessageType::MESSAGE_HOMELAND_GOLDMINE_HARVEST_REQUEST,
  MessageType::MESSAGE_HOMELAND_GOLDMINE_HARVEST_RESPONSE,
  MessageType::MESSAGE_HOMELAND_POOL_UPGRADE_REQUEST,
  MessageType::MESSAGE_HOMELAND_POOL_UPGRADE_RESPONSE,
  MessageType::MESSAGE_HOMELAND_POOL_HARVEST_REQUEST,
  MessageType::MESSAGE_HOMELAND_POOL_HARVEST_RESPONSE,
  MessageType::MESSAGE_HOMELAND_POOL_DOUBLE_HARVEST_REQUEST,
  MessageType::MESSAGE_HOMELAND_POOL_DOUBLE_HARVEST_RESPONSE,
  MessageType::MESSAGE_HOMELAND_CHURCH_PRAY_REQUEST,
  MessageType::MESSAGE_HOMELAND_CHURCH_PRAY_RESPONSE,
  MessageType::MESSAGE_HOMELAND_CHURCH_REFRESH_REQUEST,
  MessageType::MESSAGE_HOMELAND_CHURCH_REFRESH_RESPONSE,
  MessageType::MESSAGE_HOMELAND_CHURCH_VIP_REFRESH_REQUEST,
  MessageType::MESSAGE_HOMELAND_CHURCH_VIP_REFRESH_RESPONSE,
  MessageType::MESSAGE_HOMELAND_CHURCH_HARVEST_REQUEST,
  MessageType::MESSAGE_HOMELAND_CHURCH_HARVEST_RESPONSE,
  MessageType::MESSAGE_HOMELAND_TREE_WATER_REQUEST,
  MessageType::MESSAGE_HOMELAND_TREE_WATER_RESPONSE,
  MessageType::MESSAGE_HOMELAND_TREE_ASSIST_WATER_REQUEST,
  MessageType::MESSAGE_HOMELAND_TREE_ASSIST_WATER_RESPONSE,
  MessageType::MESSAGE_HOMELAND_TREE_STEAL_REQUEST,
  MessageType::MESSAGE_HOMELAND_TREE_STEAL_RESPONSE,
  MessageType::MESSAGE_HOMELAND_TREE_HARVEST_REQUEST,
  MessageType::MESSAGE_HOMELAND_TREE_HARVEST_RESPONSE,
  MessageType::MESSAGE_HOMELAND_TOWER_UPGRADE_REQUEST,
  MessageType::MESSAGE_HOMELAND_TOWER_UPGRADE_RESPONSE,
  MessageType::MESSAGE_HOMELAND_STRONGHOLD_UPGRADE_REQUEST,
  MessageType::MESSAGE_HOMELAND_STRONGHOLD_UPGRADE_RESPONSE,
  MessageType::MESSAGE_HOMELAND_STRONGHOLD_CALL_SUPPORT_REQUEST,
  MessageType::MESSAGE_HOMELAND_STRONGHOLD_CALL_SUPPORT_RESPONSE,
  MessageType::MESSAGE_HOMELAND_STRONGHOLD_CALL_SUPPORT_NOTIFY,
  MessageType::MESSAGE_HOMELAND_STRONGHOLD_SUPPORT_REQUEST,
  MessageType::MESSAGE_HOMELAND_STRONGHOLD_SUPPORT_RESPONSE,
  MessageType::MESSAGE_HOMELAND_BATTLE_MATCH_REQUEST,
  MessageType::MESSAGE_HOMELAND_BATTLE_MATCH_RESPONSE,
  MessageType::MESSAGE_HOMELAND_BATTLE_STRIKE_BACK_REQUEST,
  MessageType::MESSAGE_HOMELAND_BATTLE_STRIKE_BACK_RESPONSE,
  MessageType::MESSAGE_HOMELAND_BATTLE_FIGHT_DATA_NOTIFY,
  MessageType::MESSAGE_MALL_BUY_REQUEST,
  MessageType::MESSAGE_MALL_BUY_RESPONSE,
  MessageType::MESSAGE_MALL_SYNCHRONIZE,
  MessageType::MESSAGE_MALL_ITEM_BUY_NUM_INITIALIZE,
  MessageType::MESSAGE_TEAM_CREATE_REQUEST,
  MessageType::MESSAGE_TEAM_CREATE_RESPONSE,
  MessageType::MESSAGE_TEAM_JOIN_REQUEST,
  MessageType::MESSAGE_TEAM_JOIN_RESPONSE,
  MessageType::MESSAGE_TEAM_JOIN_NOTIFY,
  MessageType::MESSAGE_TEAM_JOIN_DISPOSE_REQUEST,
  MessageType::MESSAGE_TEAM_JOIN_DISPOSE_RESPONSE,
  MessageType::MESSAGE_TEAM_INVITE_REQUEST,
  MessageType::MESSAGE_TEAM_INVITE_RESPONSE,
  MessageType::MESSAGE_TEAM_INVITE_NOTIFY,
  MessageType::MESSAGE_TEAM_INVITE_DISPOSE_REQUEST,
  MessageType::MESSAGE_TEAM_INVITE_DISPOSE_RESPONSE,
  MessageType::MESSAGE_TEAM_MEMBER_ADD_SYNCHRONIZE,
  MessageType::MESSAGE_TEAM_MEMBER_REMOVE_SYNCHRONIZE,
  MessageType::MESSAGE_TEAM_SYNCHRONIZE,
  MessageType::MESSAGE_TEAM_MEMBER_SYNCHRONIZE,
  MessageType::MESSAGE_TEAM_DISMISS_REQUEST,
  MessageType::MESSAGE_TEAM_DISMISS_RESPONSE,
  MessageType::MESSAGE_TEAM_DISMISS_NOTIFY,
  MessageType::MESSAGE_TEAM_QUIT_REQUEST,
  MessageType::MESSAGE_TEAM_QUIT_RESPONSE,
  MessageType::MESSAGE_TEAM_KICKOUT_REQUEST,
  MessageType::MESSAGE_TEAM_KICKOUT_RESPONSE,
  MessageType::MESSAGE_TEAM_SET_CAPTAIN_REQUEST,
  MessageType::MESSAGE_TEAM_SET_CAPTAIN_RESPONSE,
  MessageType::MESSAGE_TEAM_MAP_TEAMS_REQUEST,
  MessageType::MESSAGE_TEAM_MAP_TEAMS_RESPONSE,
  MessageType::MESSAGE_TEAM_MAP_ACTORS_REQUEST,
  MessageType::MESSAGE_TEAM_MAP_ACTORS_RESPONSE,
  MessageType::MESSAGE_TEAM_MEMBER_REQUEST,
  MessageType::MESSAGE_TEAM_MEMBER_RESPONSE,
  MessageType::MESSAGE_TEAM_ACTORS_BROADCAST,
  MessageType::MESSAGE_GUILD_AOI_SYNCHRONIZE,
  MessageType::MESSAGE_GUILD_INITIALIZE,
  MessageType::MESSAGE_GUILD_SYNCHRONIZE,
  MessageType::MESSAGE_GUILD_PENDING_MEMBER_SYNCHRONIZE,
  MessageType::MESSAGE_GUILD_MEMBER_SYNCHRONIZE,
  MessageType::MESSAGE_GUILD_EVENT_SYNCHRONIZE,
  MessageType::MESSAGE_GUILD_SKILL_SYNCHRONIZE,
  MessageType::MESSAGE_GUILD_BUFF_SYNCHRONIZE,
  MessageType::MESSAGE_GUILD_LIST_REQUEST,
  MessageType::MESSAGE_GUILD_LIST_RESPONSE,
  MessageType::MESSAGE_GUILD_LIST_SYNCHRONIZE,
  MessageType::MESSAGE_GUILD_CREATE_REQUEST,
  MessageType::MESSAGE_GUILD_CREATE_RESPONSE,
  MessageType::MESSAGE_GUILD_DISMISS_NOTIFY,
  MessageType::MESSAGE_GUILD_SUPPRESS_JOIN_REQUEST,
  MessageType::MESSAGE_GUILD_SUPPRESS_JOIN_RESPONSE,
  MessageType::MESSAGE_GUILD_JOIN_REQUEST,
  MessageType::MESSAGE_GUILD_JOIN_RESPONSE,
  MessageType::MESSAGE_GUILD_CANCEL_JOIN_REQUEST,
  MessageType::MESSAGE_GUILD_CANCEL_JOIN_RESPONSE,
  MessageType::MESSAGE_GUILD_AUDIT_PENDING_MEMBER_REQUEST,
  MessageType::MESSAGE_GUILD_AUDIT_PENDING_MEMBER_RESPONSE,
  MessageType::MESSAGE_GUILD_INVITE_REQUEST,
  MessageType::MESSAGE_GUILD_INVITE_RESPONSE,
  MessageType::MESSAGE_GUILD_INVITE_NOTIFY,
  MessageType::MESSAGE_GUILD_INVITE_DISPOSE_REQUEST,
  MessageType::MESSAGE_GUILD_INVITE_DISPOSE_RESPONSE,
  MessageType::MESSAGE_GUILD_LEAVE_REQUEST,
  MessageType::MESSAGE_GUILD_LEAVE_RESPONSE,
  MessageType::MESSAGE_GUILD_KICK_MEMBER_REQUEST,
  MessageType::MESSAGE_GUILD_KICK_MEMBER_RESPONSE,
  MessageType::MESSAGE_GUILD_KICK_MEMBER_NOTIFY,
  MessageType::MESSAGE_GUILD_GIVE_UP_LEADER_POSITION_REQUEST,
  MessageType::MESSAGE_GUILD_GIVE_UP_LEADER_POSITION_RESPONSE,
  MessageType::MESSAGE_GUILD_GIVE_UP_POSITION_REQUEST,
  MessageType::MESSAGE_GUILD_GIVE_UP_POSITION_RESPONSE,
  MessageType::MESSAGE_GUILD_SET_MEMBER_POSITION_REQUEST,
  MessageType::MESSAGE_GUILD_SET_MEMBER_POSITION_RESPONSE,
  MessageType::MESSAGE_GUILD_EDIT_ANNOUNCEMENT_REQUEST,
  MessageType::MESSAGE_GUILD_EDIT_ANNOUNCEMENT_RESPONSE,
  MessageType::MESSAGE_GUILD_UPGRADE_REQUEST,
  MessageType::MESSAGE_GUILD_UPGRADE_RESPONSE,
  MessageType::MESSAGE_GUILD_DONATE_REQUEST,
  MessageType::MESSAGE_GUILD_DONATE_RESPONSE,
  MessageType::MESSAGE_GUILD_SHOP_UPGRADE_REQUEST,
  MessageType::MESSAGE_GUILD_SHOP_UPGRADE_RESPONSE,
  MessageType::MESSAGE_GUILD_SHOP_BUY_ITEM_REQUEST,
  MessageType::MESSAGE_GUILD_SHOP_BUY_ITEM_RESPONSE,
  MessageType::MESSAGE_GUILD_COLLEGE_UPGRADE_REQUEST,
  MessageType::MESSAGE_GUILD_COLLEGE_UPGRADE_RESPONSE,
  MessageType::MESSAGE_GUILD_COLLEGE_LEARN_SKILL_REQUEST,
  MessageType::MESSAGE_GUILD_COLLEGE_LEARN_SKILL_RESPONSE,
  MessageType::MESSAGE_GUILD_IDOL_PRAY_REQUEST,
  MessageType::MESSAGE_GUILD_IDOL_PRAY_RESPONSE,
  MessageType::MESSAGE_GUILD_BARRACK_UPGRADE_REQUEST,
  MessageType::MESSAGE_GUILD_BARRACK_UPGRADE_RESPONSE,
  MessageType::MESSAGE_GUILD_PLAYING_GROUP_OPEN_REQUEST,
  MessageType::MESSAGE_GUILD_PLAYING_GROUP_OPEN_RESPONSE,
  MessageType::MESSAGE_GUILD_PLAYING_GROUP_OPEN_NOTIFY,
  MessageType::MESSAGE_GUILD_PLAYING_FINISHED_NOTIFY,
  MessageType::MESSAGE_GUILD_PLAYING_AWARD_REQUEST,
  MessageType::MESSAGE_GUILD_PLAYING_AWARD_RESPONSE,
  MessageType::MESSAGE_GUILD_PLAYING_RESET_NOTIFY,
  MessageType::MESSAGE_PLAYING_INITIALIZE,
  MessageType::MESSAGE_PLAYING_CREATE_REQUEST,
  MessageType::MESSAGE_PLAYING_CREATE_RESPONSE,
  MessageType::MESSAGE_PLAYING_CREATE_FINISH_NOTICE,
  MessageType::MESSAGE_PLAYING_ENTER_REQUEST,
  MessageType::MESSAGE_PLAYING_ENTER_RESPONSE,
  MessageType::MESSAGE_PLAYING_ENTER_INITIALIZE,
  MessageType::MESSAGE_PLAYING_SCORE_SYNCHRONIZE,
  MessageType::MESSAGE_PLAYING_RANKING_SYNCHRONIZE,
  MessageType::MESSAGE_PLAYING_COMPLETE_REQUEST,
  MessageType::MESSAGE_PLAYING_COMPLETE_RESPONSE,
  MessageType::MESSAGE_PLAYING_COMPLETE_SYNCHRONIZE,
  MessageType::MESSAGE_PLAYING_LEAVE_REQUEST,
  MessageType::MESSAGE_PLAYING_LEAVE_RESPONSE,
  MessageType::MESSAGE_PLAYING_LEAVE_SYNCHRONIZE,
  MessageType::MESSAGE_PLAYING_AWARD_REQUEST,
  MessageType::MESSAGE_PLAYING_AWARD_RESPONSE,
  MessageType::MESSAGE_PLAYING_RECORD_SYNCHRONIZE,
  MessageType::MESSAGE_PLAYING_AUTO_REQUEST,
  MessageType::MESSAGE_PLAYING_AUTO_RESPONSE,
  MessageType::MESSAGE_PLAYING_AUTO_STOP_SYNCHRONIZE,
  MessageType::MESSAGE_PLAYING_AUTO_FINISH_REQUEST,
  MessageType::MESSAGE_PLAYING_AUTO_FINISH_RESPONSE,
  MessageType::MESSAGE_PLAYING_PAID_AWARD_REQUEST,
  MessageType::MESSAGE_PLAYING_PAID_AWARD_RESPONSE,
  MessageType::MESSAGE_PLAYING_TEAM_LIST_REQUEST,
  MessageType::MESSAGE_PLAYING_TEAM_LIST_RESPONSE,
  MessageType::MESSAGE_PLAYING_TEAM_CREATE_REQUEST,
  MessageType::MESSAGE_PLAYING_TEAM_CREATE_RESPONSE,
  MessageType::MESSAGE_PLAYING_TEAM_SYNCHRONIZE,
  MessageType::MESSAGE_PLAYING_TEAM_MEMBER_SYNCHRONIZE,
  MessageType::MESSAGE_PLAYING_TEAM_JOIN_REQUEST,
  MessageType::MESSAGE_PLAYING_TEAM_JOIN_RESPONSE,
  MessageType::MESSAGE_PLAYING_TEAM_JOIN_SYNCHRONIZE,
  MessageType::MESSAGE_PLAYING_TEAM_QUIT_REQUEST,
  MessageType::MESSAGE_PLAYING_TEAM_QUIT_RESPONSE,
  MessageType::MESSAGE_PLAYING_TEAM_QUIT_SYNCHRONIZE,
  MessageType::MESSAGE_PLAYING_TEAM_READY_REQUEST,
  MessageType::MESSAGE_PLAYING_TEAM_READY_RESPONSE,
  MessageType::MESSAGE_PLAYING_TEAM_KICKOUT_REQUEST,
  MessageType::MESSAGE_PLAYING_TEAM_KICKOUT_RESPONSE,
  MessageType::MESSAGE_PLAYING_TEAM_CAPACITY_SET_REQUEST,
  MessageType::MESSAGE_PLAYING_TEAM_CAPACITY_SET_RESPONSE,
  MessageType::MESSAGE_MAZE_INITIALIZE,
  MessageType::MESSAGE_MAZE_SYNCHRONIZE,
  MessageType::MESSAGE_MAZE_ENTER_NEXT_FLOOR_NOTIFY,
  MessageType::MESSAGE_MAZE_MOVE_REQUEST,
  MessageType::MESSAGE_MAZE_MOVE_RESPONSE,
  MessageType::MESSAGE_MAZE_CONFIRM_MOVE_REQUEST,
  MessageType::MESSAGE_MAZE_CONFIRM_MOVE_RESPONSE,
  MessageType::MESSAGE_MAZE_AWARD_REQUEST,
  MessageType::MESSAGE_MAZE_AWARD_RESPONSE,
  MessageType::MESSAGE_BAR_INTERRUPT,
  MessageType::MESSAGE_BAR_FINISH_REQUEST,
  MessageType::MESSAGE_BAR_FINISH_RESPONSE,
  MessageType::MESSAGE_BAR_START_SYNCHRONIZE,
  MessageType::MESSAGE_COOLING_INITIALIZE,
  MessageType::MESSAGE_AUCTION_INITIALIZE,
  MessageType::MESSAGE_AUCTION_SELL_ITEM_SYNCHRONIZE,
  MessageType::MESSAGE_AUCTION_BUY_ITEM_SYNCHRONIZE,
  MessageType::MESSAGE_AUCTION_HISTORY_SYNCHRONIZE,
  MessageType::MESSAGE_AUCTION_QUERY_TRANSACTION_REQUEST,
  MessageType::MESSAGE_AUCTION_QUERY_TRANSACTION_RESPONSE,
  MessageType::MESSAGE_AUCTION_SEARCH_REQUEST,
  MessageType::MESSAGE_AUCTION_SEARCH_RESPONSE,
  MessageType::MESSAGE_AUCTION_SELL_REQUEST,
  MessageType::MESSAGE_AUCTION_SELL_RESPONSE,
  MessageType::MESSAGE_AUCTION_CANCEL_SELL_REQUEST,
  MessageType::MESSAGE_AUCTION_CANCEL_SELL_RESPONSE,
  MessageType::MESSAGE_AUCTION_BID_REQUEST,
  MessageType::MESSAGE_AUCTION_BID_RESPONSE,
  MessageType::MESSAGE_AUCTION_BUYOUT_REQUEST,
  MessageType::MESSAGE_AUCTION_BUYOUT_RESPONSE,
  MessageType::MESSAGE_AUCTION_WITHDRAW_REQUEST,
  MessageType::MESSAGE_AUCTION_WITHDRAW_RESPONSE,
  MessageType::MESSAGE_WELFARE_INITILIZE,
  MessageType::MESSAGE_ACHIEVE_INITILIZE,
  MessageType::MESSAGE_ACHIEVE_CONDITION_SYSNCHRONIZATION,
  MessageType::MESSAGE_CHECKINS_SYNCHRONIZATION,
  MessageType::MESSAGE_WELFARE_TITLE_BROADCAST,
  MessageType::MESSAGE_ACHIEVE_AWARD_REQUEST,
  MessageType::MESSAGE_ACHIEVE_AWARD_RESPONSE,
  MessageType::MESSAGE_ACHIEVE_CHANGE_TITLE_REQUEST,
  MessageType::MESSAGE_ACHIEVE_CHANGE_TITLE_RESPONSE,
  MessageType::MESSAGE_CHECKINS_OPT_REQUEST,
  MessageType::MESSAGE_CHECKINS_OPT_RESPONSE,
  MessageType::MESSAGE_ONLINE_AWARD_ITEM_REQUEST,
  MessageType::MESSAGE_ONLINE_AWARD_ITEM_RESPONSE,
  MessageType::MESSAGE_ONLINE_AWARD_RESOURCE_REQUEST,
  MessageType::MESSAGE_ONLINE_AWARD_ITEM_RESOURCE_RESPONSE,
  MessageType::MESSAGE_TRANSPORT_AOI_SYNCHRONIZE,
  MessageType::MESSAGE_TRANSPORT_INITIALIZE,
  MessageType::MESSAGE_TRANSPORT_SYNCHRONIZE,
  MessageType::MESSAGE_MAX
};
const char* _kMessageTypeNames[] = {
  "MESSAGE_MIN",
  "MESSAGE_SYSTEM",
  "MESSAGE_VERIFY_QUESTION",
  "MESSAGE_VERIFY_QUESTION_REQUEST",
  "MESSAGE_VERIFY_QUESTION_RESPONSE",
  "MESSAGE_TEST",
  "MESSAGE_LOGIN_REQUEST",
  "MESSAGE_LOGIN_RESPONSE",
  "MESSAGE_LOGOUT_REQUEST",
  "MESSAGE_LOGOUT_RESPONSE",
  "MESSAGE_KICKOUT_ACTOR",
  "MESSAGE_CREATE_ACTOR",
  "MESSAGE_SYNCHRONIZE_ACTOR",
  "MESSAGE_SYNCHRONIZE_ACTOR_FUNCTIONALITY_STATE",
  "MESSAGE_SYNCHRONIZE_ACTOR_SUB_FIGHT_SCORE",
  "MESSAGE_SYNCHRONIZE_NPC",
  "MESSAGE_SYNCHRONIZE_SCENE_ITEM",
  "MESSAGE_ACTOR_ENTER_MAP",
  "MESSAGE_ACTOR_MOVE",
  "MESSAGE_ACTOR_RELOCATION",
  "MESSAGE_ROLE_MOVE_SYNCHRONIZE",
  "MESSAGE_CREATE_ACTOR_SYNCHRONIZE",
  "MESSAGE_CREATE_NPC_SYNCHRONIZE",
  "MESSAGE_CREATE_SCENE_ITEM_SYNCHRONIZE",
  "MESSAGE_DESTORY_ROLE_SYNCHRONIZE",
  "MESSAGE_ADD_EXP_SYNCHRONIZE",
  "MESSAGE_ACTOR_VIP_SYNCHRONIZE",
  "MESSAGE_WORLD_JUMP_VIP_NUM_SYNCHRONIZE",
  "MESSAGE_CREATE_AOI_ROLES",
  "MESSAGE_DESTORY_AOI_ROLES",
  "MESSAGE_ACTOR_FACADE_REQUEST",
  "MESSAGE_ACTOR_FACADE_RESPONSE",
  "MESSAGE_ACTOR_FUNCTIONALITY_OPEN_REQUEST",
  "MESSAGE_ACTOR_FUNCTIONALITY_OPEN_RESPONSE",
  "MESSAGE_ACTOR_USE_TASLIMAN_REQUEST",
  "MESSAGE_ACTOR_USE_TASLIMAN_RESPONSE",
  "MESSAGE_ACTOR_TASLIMAN_SYNCHRONIZE",
  "MESSAGE_ERROR_CODE",
  "MESSAGE_INFORM_NOTIFY",
  "MESSAGE_SKILL_OPERATE",
  "MESSAGE_SKILL_HIT",
  "MESSAGE_ACTOR_CHOOSE_PK_MODE",
  "MESSAGE_ENTER_FIGHTING_STATUS",
  "MESSAGE_LEAVE_FIGHTING_STATUS",
  "MESSAGE_ENTER_PVP_STATUS",
  "MESSAGE_LEAVE_PVP_STATUS",
  "MESSAGE_PVP_STATUS_BROADCAST",
  "MEESAGE_SKILL_BREAK_SYNCHRONIZE",
  "MESSAGE_SKILL_ATTRIBUTE_SYNCHRONIZE",
  "MESSAGE_BUFF_INITIALIZE",
  "MESSAGE_ADD_BUFF",
  "MESSAGE_REMOVE_BUFF",
  "MESSAGE_ITEM_CONTAINER_INITIALIZE",
  "MESSAGE_ITEM_CREATE_SYNCHRONIZE",
  "MESSAGE_SYNCHRONIZE_ITEM",
  "MESSAGE_ITEM_CONTAINER_OPERATE",
  "MESSAGE_ITEM_MOVE",
  "MESSAGE_ITEM_REMOVE",
  "MESSAGE_ITEM_USE",
  "MESSAGE_ITEM_SPLIT",
  "MESSAGE_ITEM_ARRANGE",
  "MESSAGE_ITEM_ARRANGE_RESULT",
  "MESSAGE_EXTEND_CONTAINER",
  "MESSAGE_ITEM_COMPOSE_REQUEST",
  "MESSAGE_ITEM_COMPOSE_RESPONSE",
  "MESSAGE_CREATE_ACTOR_EQUIP_BROADCAST",
  "MESSAGE_UPDATE_ACTOR_EQUIP_BROADCAST",
  "MESSAGE_EQUIP_COMPARE_REQUEST",
  "MESSAGE_EQUIP_COMPARE_RESPONSE",
  "MESSAGE_EQUIP_INTENSIFY_REQUEST",
  "MESSAGE_EQUIP_INTENSIFY_RESPONSE",
  "MESSAGE_EQUIP_REFINE_REQUEST",
  "MESSAGE_EQUIP_REFINE_RESPONSE",
  "MESSAGE_EQUIP_REFINE_CONFIRM_REQUEST",
  "MESSAGE_EQUIP_REFINE_CONFIRM_RESPONSE",
  "MESSAGE_EQUIP_UPGRADE_REQUEST",
  "MESSAGE_EQUIP_UPGRADE_RESPONSE",
  "MESSAGE_EQUIP_INHERIT_REQUEST",
  "MESSAGE_EQUIP_INHERIT_RESPONSE",
  "MESSAGE_GEM_INITIALIZE",
  "MESSAGE_GEM_SYNCHRONIZE",
  "MESSAGE_GEM_GATHER_REQUEST",
  "MESSAGE_GEM_GATHER_RESPONSE",
  "MESSAGE_GEM_SKIP_GATHERING_POINT_REQUEST",
  "MESSAGE_GEM_SKIP_GATHERING_POINT_RESPONSE",
  "MESSAGE_GEM_MOVE_REQUEST",
  "MESSAGE_GEM_MOVE_RESPONSE",
  "MESSAGE_GEM_PROMOTE_REQUEST",
  "MESSAGE_GEM_PROMOTE_RESPONSE",
  "MESSAGE_GEM_DECOMPOSE_REQUEST",
  "MESSAGE_GEM_DECOMPOSE_RESPONSE",
  "MESSAGE_GEM_LOCK_REQUEST",
  "MESSAGE_GEM_LOCK_RESPONSE",
  "MESSAGE_GEM_LOCK_ALL_REQUEST",
  "MESSAGE_GEM_LOCK_ALL_RESPONSE",
  "MESSAGE_SHORTCUT_INITIALIZE",
  "MESSAGE_SHORTCUT_SET_REQUEST",
  "MESSAGE_SHORTCUT_SET_RESPONSE",
  "MESSAGE_VIP_GIFTS_PICK_REQUEST",
  "MESSAGE_VIP_GIFTS_PICK_RESPONSE",
  "MESSAGE_VIP_GIFTS_SYNCHRONIZE",
  "MESSAGE_ITEM_TREASURE_HUNT_REQUEST",
  "MESSAGE_ITEM_TREASURE_HUNT_RESPONSE",
  "MESSAGE_ITEM_TREASURE_HUNT_NOTICE",
  "MESSAGE_GM_ADD_ITEM",
  "MESSAGE_GM_SCENE_JUMP",
  "MESSAGE_GM_OPEN_SWORD",
  "MESSAGE_GM_COMMAND",
  "MESSAGE_SCENE_REQUEST_JUMP",
  "MESSAGE_SCENE_ACTOR_JUMP",
  "MESSAGE_SCENE_DAYNIGHT_CHANGE",
  "MESSAGE_SCENE_ROLE_KILLED",
  "MESSAGE_SCENE_GATHER",
  "MESSAGE_SCENE_GATHER_RESPONSE",
  "MESSAGE_SCENE_PICK_UP_REQUEST",
  "MESSAGE_SCENE_PICK_UP_RESPONSE",
  "MESSAGE_SCENE_JUMP_REQUEST",
  "MESSAGE_SCENE_JUMP_RESPONSE",
  "MESSAGE_SCENE_WORLD_BOSS_INITIALIZE",
  "MESSAGE_SCENE_BOSS_KILLED",
  "MESSAGE_SCENE_SUMMON_WORLD_BOSS",
  "MESSAGE_SCENE_ACTOR_CHOOSE_REVIVE_MODE_REQUEST",
  "MESSAGE_SCENE_ACTOR_CHOOSE_REVIVE_MODE_RESPONSE",
  "MESSAGE_SCENE_ZAZEN_REQUEST",
  "MESSAGE_SCENE_ZAZEN_RESPONSE",
  "MESSAGE_SCENE_CANCEL_ZAZEN_REQUEST",
  "MESSAGE_SCENE_CANCEL_ZAZEN_RESPONSE",
  "MESSAGE_SCENE_ZAZEN_INCOME_NOTICE",
  "MESSAGE_SCENE_CONSECUTIVE_KILL_NOTICE",
  "MESSAGE_SCENE_BRANCH_SYNCHRONIZE",
  "MESSAGE_SCENE_BRANCH_STATUS_REQUEST",
  "MESSAGE_SCENE_BRANCH_STATUS_RESPONSE",
  "MESSAGE_SCENE_BRANCH_SWITCH_REQUEST",
  "MESSAGE_SCENE_BRANCH_SWITCH_RESPONSE",
  "MESSAGE_SOUL_INITIALIZE",
  "MESSAGE_SOUL_SYNCHRONIZE",
  "MESSAGE_SOUL_UNLOCK_REQUEST",
  "MESSAGE_SOUL_UNLOCK_RESPONSE",
  "MESSAGE_SOUL_UPGRADE_STEP_REQUEST",
  "MESSAGE_SOUL_UPGRADE_STEP_RESPONSE",
  "MESSAGE_SOUL_UPGRADE_LEVEL_REQUEST",
  "MESSAGE_SOUL_UPGRADE_LEVEL_RESPONSE",
  "MESSAGE_SOUL_SET_REQUEST",
  "MESSAGE_SOUL_SET_RESPONSE",
  "MESSAGE_SOUL_RESET_REQUEST",
  "MESSAGE_SOUL_RESET_RESPONSE",
  "MESSAGE_SOUL_SETTING_STAND_REQUEST",
  "MESSAGE_SOUL_SETTING_STAND_RESPONSE",
  "MESSAGE_SOUL_SKILL_UPGRADE_REQUEST",
  "MESSAGE_SOUL_SKILL_UPGRADE_RESPONSE",
  "MESSAGE_SOUL_ALTAR_INITIALIZE",
  "MESSAGE_SOUL_ALTAR_SYNCHRONIZE",
  "MESSAGE_SOUL_ALTAR_CARD_SYNCHRONIZE",
  "MESSAGE_SOUL_ALTAR_SUMMON_REQUEST",
  "MESSAGE_SOUL_ALTAR_SUMMON_RESPONSE",
  "MESSAGE_SOUL_ALTAR_TAKE_REQUEST",
  "MESSAGE_SOUL_ALTAR_TAKE_RESPONSE",
  "MESSAGE_SOUL_ALTAR_RESET_REQUEST",
  "MESSAGE_SOUL_ALTAR_RESET_RESPONSE",
  "MESSAGE_TASK_INITIALIZE",
  "MESSAGE_TASK_SYNCHRONIZE",
  "MESSAGE_TASK_ACCEPT",
  "MESSAGE_TASK_FINISH",
  "MESSAGE_TASK_ABANDON",
  "MESSAGE_TASK_TALK_NPC",
  "MESSAGE_TASK_CIRCLE_INITIALIZE",
  "MESSAGE_TASK_CIRCLE_OPT_REQUEST",
  "MESSAGE_TASK_CIRCLE_OPT_RESPONSE",
  "MESSAGE_TASK_TRIP_INITIALIZE",
  "MESSAGE_TASK_TRIP_OPT_REQUEST",
  "MESSAGE_TASK_TRIP_OPT_RESPONSE",
  "MESSAGE_TASK_SUMMON_NPC_REQUEST",
  "MESSAGE_TASK_SUMMON_NPC_RESPONSE",
  "MESSAGE_TASK_DAILY_INITIALIZE",
  "MESSAGE_TASK_DAILY_REQUEST",
  "MESSAGE_TASK_DAILY_RESPONSE",
  "MESSAGE_TASK_DAILY_AWARD_REQUEST",
  "MESSAGE_TASK_DAILY_AWARD_RESPONSE",
  "MESSAGE_TASK_TRANSPORT_INITIALIZE",
  "MESSAGE_TASK_TRANSPORT_SYNCHRONIZE",
  "MESSAGE_TASK_TRANSPORT_REFRESH_QUALITY_REQUEST",
  "MESSAGE_TASK_TRANSPORT_REFRESH_QUALITY_RESPONSE",
  "MESSAGE_TASK_TRANSPORT_ACCEPT_REQUEST",
  "MESSAGE_TASK_TRANSPORT_ACCEPT_RESPONSE",
  "MESSAGE_TASK_TRANSPORT_FINISH_REQUEST",
  "MESSAGE_TASK_TRANSPORT_FINISH_RESPONSE",
  "MESSAGE_ATTR_AOI_SYNCHRONIZE",
  "MESSAGE_ATTR_SWORD_INITIALIZE",
  "MESSAGE_ATTR_SWORD_UPGRADE_REQUEST",
  "MESSAGE_ATTR_SWORD_UPGRADE_RESPONSE",
  "MESSAGE_ATTR_SWORD_SYNCHRONIZE",
  "MESSAGE_ATTR_SWORD_EQUIP",
  "MESSAGE_ATTR_SWORD_UNEQUIP",
  "MESSAGE_ATTR_SWORD_COMPARE_REQUEST",
  "MESSAGE_ATTR_SWORD_COMPARE_RESPONSE",
  "MESSAGE_ATTR_NOBLE_INITIALIZE",
  "MESSAGE_ATTR_NOBLE_PROMOTE_REQUEST",
  "MESSAGE_ATTR_NOBLE_PROMOTE_RESPONSE",
  "MESSAGE_ATTR_NOBLE_BREAKTHROUGH_REQUEST",
  "MESSAGE_ATTR_NOBLE_BREAKTHROUGH_RESPONSE",
  "MESSAGE_ATTR_NOBLE_COMPARE_REQUEST",
  "MESSAGE_ATTR_NOBLE_COMPARE_RESPONSE",
  "MESSAGE_ATTR_ELEMENT_INITIALIZE",
  "MESSAGE_ATTR_ELEMENT_UPGRADE_REQUEST",
  "MESSAGE_ATTR_ELEMENT_UPGRADE_RESPONSE",
  "MESSAGE_ATTR_ELEMENT_COMPARE_REQUEST",
  "MESSAGE_ATTR_ELEMENT_COMPARE_RESPONSE",
  "MESSAGE_ATTR_SPIRIT_INITIALIZE",
  "MESSAGE_ATTR_SPIRIT_SYNCHRONIZE",
  "MESSAGE_ATTR_SPIRIT_FACADE_SYNCHRONIZE",
  "MESSAGE_ATTR_SPIRIT_UPGRADE_REQUEST",
  "MESSAGE_ATTR_SPIRIT_UPGRADE_RESPONSE",
  "MESSAGE_ATTR_SPIRIT_TRANSFORM_FACADE_REQUEST",
  "MESSAGE_ATTR_SPIRIT_TRANSFORM_FACADE_RESPONSE",
  "MESSAGE_ATTR_SPIRIT_COMPARE_REQUEST",
  "MESSAGE_ATTR_SPIRIT_COMPARE_RESPONSE",
  "MESSAGE_ATTR_RUNE_SYNCHRONIZE",
  "MESSAGE_ATTR_RUNE_COMPOSE_REQUEST",
  "MESSAGE_ATTR_RUNE_COMPOSE_RESPONSE",
  "MESSAGE_ATTR_RUNE_MOVE_REQUEST",
  "MESSAGE_ATTR_RUNE_MOVE_RESPONSE",
  "MESSAGE_ATTR_LEGENDARY_WEAPON_INITIALIZE",
  "MESSAGE_ATTR_LEGENDARY_WEAPON_PIECE_SYNCHRONIZE",
  "MESSAGE_ATTR_LEGENDARY_WEAPON_REPAIR_REQUEST",
  "MESSAGE_ATTR_LEGENDARY_WEAPON_REPAIR_RESPONSE",
  "MESSAGE_CHAT_REQUEST",
  "MESSAGE_CHAT_RESPONSE",
  "MESSAGE_CHAT_SYNCHRONIZE",
  "MESSAGE_MAIL_INITIALIZE",
  "MESSAGE_MAIL_ADD",
  "MESSAGE_MAIL_SEND_REQUEST",
  "MESSAGE_MAIL_SEND_RESPONSE",
  "MESSAGE_MAIL_DEL_REQUEST",
  "MESSAGE_MAIL_DEL_RESPONSE",
  "MESSAGE_MAIL_READ_REQUEST",
  "MESSAGE_MAIL_READ_RESPONSE",
  "MESSAGE_MAIL_PICK_AFFIX_REQUEST",
  "MESSAGE_MAIL_PICK_AFFIX_RESPONSE",
  "MESSAGE_MAIL_DEL",
  "MESSAGE_SHOP_BUYBACK_INITIALIZE",
  "MESSAGE_SHOP_BUY_REQUEST",
  "MESSAGE_SHOP_BUY_RESPONSE",
  "MESSAGE_SHOP_BUYBACK_REQUEST",
  "MESSAGE_SHOP_BUYBACK_RESPONSE",
  "MESSAGE_SHOP_SELL_REQUEST",
  "MESSAGE_SHOP_SELL_RESPONSE",
  "MESSAGE_SOCIAL_CONTACTS_INITIALIZE",
  "MESSAGE_SOCIAL_CONTACTS_SYNCHRONIZE",
  "MESSAGE_SOCIAL_CONTACTS_EDIT_SIGNATURE_REQUEST",
  "MESSAGE_SOCIAL_CONTACTS_EDIT_SIGNATURE_RESPONSE",
  "MESSAGE_SOCIAL_CONTACTS_ADD_REQUEST",
  "MESSAGE_SOCIAL_CONTACTS_ADD_RESPONSE",
  "MESSAGE_SOCIAL_CONTACTS_ADD_NOTIFY",
  "MESSAGE_SOCIAL_CONTACTS_REMOVE_REQUEST",
  "MESSAGE_SOCIAL_CONTACTS_REMOVE_RESPONSE",
  "MESSAGE_SOCIAL_CONTACTS_MOVE_REQUEST",
  "MESSAGE_SOCIAL_CONTACTS_MOVE_RESPONSE",
  "MESSAGE_SOCIAL_CONTACTS_RECOMMEND_REQUEST",
  "MESSAGE_SOCIAL_CONTACTS_RECOMMEND_RESPONSE",
  "MESSAGE_SOCIAL_ENEMY_INITIALIZE",
  "MESSAGE_SOCIAL_ENEMY_SYNCHRONIZE",
  "MESSAGE_SOCIAL_ENEMY_ADD_REQUEST",
  "MESSAGE_SOCIAL_ENEMY_ADD_RESPONSE",
  "MESSAGE_SOCIAL_ENEMY_REMOVE_REQUEST",
  "MESSAGE_SOCIAL_ENEMY_REMOVE_RESPONSE",
  "MESSAGE_HOMELAND_INITIALIZE",
  "MESSAGE_HOMELAND_SYNCHRONIZE",
  "MESSAGE_HOMELAND_FRIEND_SYNCHRONIZE",
  "MESSAGE_HOMELAND_INVADER_SYNCHRONIZE",
  "MESSAGE_HOMELAND_SUPPORTED_SOUL_SYNCHRONIZE",
  "MESSAGE_HOMELAND_SUPPORT_SOUL_SYNCHRONIZE",
  "MESSAGE_HOMELAND_EVENT_SYNCHRONIZE",
  "MESSAGE_HOMELAND_VISIT_REQUEST",
  "MESSAGE_HOMELAND_VISIT_RESPONSE",
  "MESSAGE_HOMELAND_CLEAR_UPGRADE_COOLING_REQUEST",
  "MESSAGE_HOMELAND_CLEAR_UPGRADE_COOLING_RESPONSE",
  "MESSAGE_HOMELAND_TEMPLE_UPGRADE_REQUEST",
  "MESSAGE_HOMELAND_TEMPLE_UPGRADE_RESPONSE",
  "MESSAGE_HOMELAND_TEMPLE_HARVEST_REQUEST",
  "MESSAGE_HOMELAND_TEMPLE_HARVEST_RESPONSE",
  "MESSAGE_HOMELAND_TEMPLE_CLEAR_HARVEST_COOLING_REQUEST",
  "MESSAGE_HOMELAND_TEMPLE_CLEAR_HARVEST_COOLING_RESPONSE",
  "MESSAGE_HOMELAND_TEMPLE_FORCE_HARVEST_REQUEST",
  "MESSAGE_HOMELAND_TEMPLE_FORCE_HARVEST_RESPONSE",
  "MESSAGE_HOMELAND_GOLDMINE_UPGRADE_REQUEST",
  "MESSAGE_HOMELAND_GOLDMINE_UPGRADE_RESPONSE",
  "MESSAGE_HOMELAND_GOLDMINE_HARVEST_REQUEST",
  "MESSAGE_HOMELAND_GOLDMINE_HARVEST_RESPONSE",
  "MESSAGE_HOMELAND_POOL_UPGRADE_REQUEST",
  "MESSAGE_HOMELAND_POOL_UPGRADE_RESPONSE",
  "MESSAGE_HOMELAND_POOL_HARVEST_REQUEST",
  "MESSAGE_HOMELAND_POOL_HARVEST_RESPONSE",
  "MESSAGE_HOMELAND_POOL_DOUBLE_HARVEST_REQUEST",
  "MESSAGE_HOMELAND_POOL_DOUBLE_HARVEST_RESPONSE",
  "MESSAGE_HOMELAND_CHURCH_PRAY_REQUEST",
  "MESSAGE_HOMELAND_CHURCH_PRAY_RESPONSE",
  "MESSAGE_HOMELAND_CHURCH_REFRESH_REQUEST",
  "MESSAGE_HOMELAND_CHURCH_REFRESH_RESPONSE",
  "MESSAGE_HOMELAND_CHURCH_VIP_REFRESH_REQUEST",
  "MESSAGE_HOMELAND_CHURCH_VIP_REFRESH_RESPONSE",
  "MESSAGE_HOMELAND_CHURCH_HARVEST_REQUEST",
  "MESSAGE_HOMELAND_CHURCH_HARVEST_RESPONSE",
  "MESSAGE_HOMELAND_TREE_WATER_REQUEST",
  "MESSAGE_HOMELAND_TREE_WATER_RESPONSE",
  "MESSAGE_HOMELAND_TREE_ASSIST_WATER_REQUEST",
  "MESSAGE_HOMELAND_TREE_ASSIST_WATER_RESPONSE",
  "MESSAGE_HOMELAND_TREE_STEAL_REQUEST",
  "MESSAGE_HOMELAND_TREE_STEAL_RESPONSE",
  "MESSAGE_HOMELAND_TREE_HARVEST_REQUEST",
  "MESSAGE_HOMELAND_TREE_HARVEST_RESPONSE",
  "MESSAGE_HOMELAND_TOWER_UPGRADE_REQUEST",
  "MESSAGE_HOMELAND_TOWER_UPGRADE_RESPONSE",
  "MESSAGE_HOMELAND_STRONGHOLD_UPGRADE_REQUEST",
  "MESSAGE_HOMELAND_STRONGHOLD_UPGRADE_RESPONSE",
  "MESSAGE_HOMELAND_STRONGHOLD_CALL_SUPPORT_REQUEST",
  "MESSAGE_HOMELAND_STRONGHOLD_CALL_SUPPORT_RESPONSE",
  "MESSAGE_HOMELAND_STRONGHOLD_CALL_SUPPORT_NOTIFY",
  "MESSAGE_HOMELAND_STRONGHOLD_SUPPORT_REQUEST",
  "MESSAGE_HOMELAND_STRONGHOLD_SUPPORT_RESPONSE",
  "MESSAGE_HOMELAND_BATTLE_MATCH_REQUEST",
  "MESSAGE_HOMELAND_BATTLE_MATCH_RESPONSE",
  "MESSAGE_HOMELAND_BATTLE_STRIKE_BACK_REQUEST",
  "MESSAGE_HOMELAND_BATTLE_STRIKE_BACK_RESPONSE",
  "MESSAGE_HOMELAND_BATTLE_FIGHT_DATA_NOTIFY",
  "MESSAGE_MALL_BUY_REQUEST",
  "MESSAGE_MALL_BUY_RESPONSE",
  "MESSAGE_MALL_SYNCHRONIZE",
  "MESSAGE_MALL_ITEM_BUY_NUM_INITIALIZE",
  "MESSAGE_TEAM_CREATE_REQUEST",
  "MESSAGE_TEAM_CREATE_RESPONSE",
  "MESSAGE_TEAM_JOIN_REQUEST",
  "MESSAGE_TEAM_JOIN_RESPONSE",
  "MESSAGE_TEAM_JOIN_NOTIFY",
  "MESSAGE_TEAM_JOIN_DISPOSE_REQUEST",
  "MESSAGE_TEAM_JOIN_DISPOSE_RESPONSE",
  "MESSAGE_TEAM_INVITE_REQUEST",
  "MESSAGE_TEAM_INVITE_RESPONSE",
  "MESSAGE_TEAM_INVITE_NOTIFY",
  "MESSAGE_TEAM_INVITE_DISPOSE_REQUEST",
  "MESSAGE_TEAM_INVITE_DISPOSE_RESPONSE",
  "MESSAGE_TEAM_MEMBER_ADD_SYNCHRONIZE",
  "MESSAGE_TEAM_MEMBER_REMOVE_SYNCHRONIZE",
  "MESSAGE_TEAM_SYNCHRONIZE",
  "MESSAGE_TEAM_MEMBER_SYNCHRONIZE",
  "MESSAGE_TEAM_DISMISS_REQUEST",
  "MESSAGE_TEAM_DISMISS_RESPONSE",
  "MESSAGE_TEAM_DISMISS_NOTIFY",
  "MESSAGE_TEAM_QUIT_REQUEST",
  "MESSAGE_TEAM_QUIT_RESPONSE",
  "MESSAGE_TEAM_KICKOUT_REQUEST",
  "MESSAGE_TEAM_KICKOUT_RESPONSE",
  "MESSAGE_TEAM_SET_CAPTAIN_REQUEST",
  "MESSAGE_TEAM_SET_CAPTAIN_RESPONSE",
  "MESSAGE_TEAM_MAP_TEAMS_REQUEST",
  "MESSAGE_TEAM_MAP_TEAMS_RESPONSE",
  "MESSAGE_TEAM_MAP_ACTORS_REQUEST",
  "MESSAGE_TEAM_MAP_ACTORS_RESPONSE",
  "MESSAGE_TEAM_MEMBER_REQUEST",
  "MESSAGE_TEAM_MEMBER_RESPONSE",
  "MESSAGE_TEAM_ACTORS_BROADCAST",
  "MESSAGE_GUILD_AOI_SYNCHRONIZE",
  "MESSAGE_GUILD_INITIALIZE",
  "MESSAGE_GUILD_SYNCHRONIZE",
  "MESSAGE_GUILD_PENDING_MEMBER_SYNCHRONIZE",
  "MESSAGE_GUILD_MEMBER_SYNCHRONIZE",
  "MESSAGE_GUILD_EVENT_SYNCHRONIZE",
  "MESSAGE_GUILD_SKILL_SYNCHRONIZE",
  "MESSAGE_GUILD_BUFF_SYNCHRONIZE",
  "MESSAGE_GUILD_LIST_REQUEST",
  "MESSAGE_GUILD_LIST_RESPONSE",
  "MESSAGE_GUILD_LIST_SYNCHRONIZE",
  "MESSAGE_GUILD_CREATE_REQUEST",
  "MESSAGE_GUILD_CREATE_RESPONSE",
  "MESSAGE_GUILD_DISMISS_NOTIFY",
  "MESSAGE_GUILD_SUPPRESS_JOIN_REQUEST",
  "MESSAGE_GUILD_SUPPRESS_JOIN_RESPONSE",
  "MESSAGE_GUILD_JOIN_REQUEST",
  "MESSAGE_GUILD_JOIN_RESPONSE",
  "MESSAGE_GUILD_CANCEL_JOIN_REQUEST",
  "MESSAGE_GUILD_CANCEL_JOIN_RESPONSE",
  "MESSAGE_GUILD_AUDIT_PENDING_MEMBER_REQUEST",
  "MESSAGE_GUILD_AUDIT_PENDING_MEMBER_RESPONSE",
  "MESSAGE_GUILD_INVITE_REQUEST",
  "MESSAGE_GUILD_INVITE_RESPONSE",
  "MESSAGE_GUILD_INVITE_NOTIFY",
  "MESSAGE_GUILD_INVITE_DISPOSE_REQUEST",
  "MESSAGE_GUILD_INVITE_DISPOSE_RESPONSE",
  "MESSAGE_GUILD_LEAVE_REQUEST",
  "MESSAGE_GUILD_LEAVE_RESPONSE",
  "MESSAGE_GUILD_KICK_MEMBER_REQUEST",
  "MESSAGE_GUILD_KICK_MEMBER_RESPONSE",
  "MESSAGE_GUILD_KICK_MEMBER_NOTIFY",
  "MESSAGE_GUILD_GIVE_UP_LEADER_POSITION_REQUEST",
  "MESSAGE_GUILD_GIVE_UP_LEADER_POSITION_RESPONSE",
  "MESSAGE_GUILD_GIVE_UP_POSITION_REQUEST",
  "MESSAGE_GUILD_GIVE_UP_POSITION_RESPONSE",
  "MESSAGE_GUILD_SET_MEMBER_POSITION_REQUEST",
  "MESSAGE_GUILD_SET_MEMBER_POSITION_RESPONSE",
  "MESSAGE_GUILD_EDIT_ANNOUNCEMENT_REQUEST",
  "MESSAGE_GUILD_EDIT_ANNOUNCEMENT_RESPONSE",
  "MESSAGE_GUILD_UPGRADE_REQUEST",
  "MESSAGE_GUILD_UPGRADE_RESPONSE",
  "MESSAGE_GUILD_DONATE_REQUEST",
  "MESSAGE_GUILD_DONATE_RESPONSE",
  "MESSAGE_GUILD_SHOP_UPGRADE_REQUEST",
  "MESSAGE_GUILD_SHOP_UPGRADE_RESPONSE",
  "MESSAGE_GUILD_SHOP_BUY_ITEM_REQUEST",
  "MESSAGE_GUILD_SHOP_BUY_ITEM_RESPONSE",
  "MESSAGE_GUILD_COLLEGE_UPGRADE_REQUEST",
  "MESSAGE_GUILD_COLLEGE_UPGRADE_RESPONSE",
  "MESSAGE_GUILD_COLLEGE_LEARN_SKILL_REQUEST",
  "MESSAGE_GUILD_COLLEGE_LEARN_SKILL_RESPONSE",
  "MESSAGE_GUILD_IDOL_PRAY_REQUEST",
  "MESSAGE_GUILD_IDOL_PRAY_RESPONSE",
  "MESSAGE_GUILD_BARRACK_UPGRADE_REQUEST",
  "MESSAGE_GUILD_BARRACK_UPGRADE_RESPONSE",
  "MESSAGE_GUILD_PLAYING_GROUP_OPEN_REQUEST",
  "MESSAGE_GUILD_PLAYING_GROUP_OPEN_RESPONSE",
  "MESSAGE_GUILD_PLAYING_GROUP_OPEN_NOTIFY",
  "MESSAGE_GUILD_PLAYING_FINISHED_NOTIFY",
  "MESSAGE_GUILD_PLAYING_AWARD_REQUEST",
  "MESSAGE_GUILD_PLAYING_AWARD_RESPONSE",
  "MESSAGE_GUILD_PLAYING_RESET_NOTIFY",
  "MESSAGE_PLAYING_INITIALIZE",
  "MESSAGE_PLAYING_CREATE_REQUEST",
  "MESSAGE_PLAYING_CREATE_RESPONSE",
  "MESSAGE_PLAYING_CREATE_FINISH_NOTICE",
  "MESSAGE_PLAYING_ENTER_REQUEST",
  "MESSAGE_PLAYING_ENTER_RESPONSE",
  "MESSAGE_PLAYING_ENTER_INITIALIZE",
  "MESSAGE_PLAYING_SCORE_SYNCHRONIZE",
  "MESSAGE_PLAYING_RANKING_SYNCHRONIZE",
  "MESSAGE_PLAYING_COMPLETE_REQUEST",
  "MESSAGE_PLAYING_COMPLETE_RESPONSE",
  "MESSAGE_PLAYING_COMPLETE_SYNCHRONIZE",
  "MESSAGE_PLAYING_LEAVE_REQUEST",
  "MESSAGE_PLAYING_LEAVE_RESPONSE",
  "MESSAGE_PLAYING_LEAVE_SYNCHRONIZE",
  "MESSAGE_PLAYING_AWARD_REQUEST",
  "MESSAGE_PLAYING_AWARD_RESPONSE",
  "MESSAGE_PLAYING_RECORD_SYNCHRONIZE",
  "MESSAGE_PLAYING_AUTO_REQUEST",
  "MESSAGE_PLAYING_AUTO_RESPONSE",
  "MESSAGE_PLAYING_AUTO_STOP_SYNCHRONIZE",
  "MESSAGE_PLAYING_AUTO_FINISH_REQUEST",
  "MESSAGE_PLAYING_AUTO_FINISH_RESPONSE",
  "MESSAGE_PLAYING_PAID_AWARD_REQUEST",
  "MESSAGE_PLAYING_PAID_AWARD_RESPONSE",
  "MESSAGE_PLAYING_TEAM_LIST_REQUEST",
  "MESSAGE_PLAYING_TEAM_LIST_RESPONSE",
  "MESSAGE_PLAYING_TEAM_CREATE_REQUEST",
  "MESSAGE_PLAYING_TEAM_CREATE_RESPONSE",
  "MESSAGE_PLAYING_TEAM_SYNCHRONIZE",
  "MESSAGE_PLAYING_TEAM_MEMBER_SYNCHRONIZE",
  "MESSAGE_PLAYING_TEAM_JOIN_REQUEST",
  "MESSAGE_PLAYING_TEAM_JOIN_RESPONSE",
  "MESSAGE_PLAYING_TEAM_JOIN_SYNCHRONIZE",
  "MESSAGE_PLAYING_TEAM_QUIT_REQUEST",
  "MESSAGE_PLAYING_TEAM_QUIT_RESPONSE",
  "MESSAGE_PLAYING_TEAM_QUIT_SYNCHRONIZE",
  "MESSAGE_PLAYING_TEAM_READY_REQUEST",
  "MESSAGE_PLAYING_TEAM_READY_RESPONSE",
  "MESSAGE_PLAYING_TEAM_KICKOUT_REQUEST",
  "MESSAGE_PLAYING_TEAM_KICKOUT_RESPONSE",
  "MESSAGE_PLAYING_TEAM_CAPACITY_SET_REQUEST",
  "MESSAGE_PLAYING_TEAM_CAPACITY_SET_RESPONSE",
  "MESSAGE_MAZE_INITIALIZE",
  "MESSAGE_MAZE_SYNCHRONIZE",
  "MESSAGE_MAZE_ENTER_NEXT_FLOOR_NOTIFY",
  "MESSAGE_MAZE_MOVE_REQUEST",
  "MESSAGE_MAZE_MOVE_RESPONSE",
  "MESSAGE_MAZE_CONFIRM_MOVE_REQUEST",
  "MESSAGE_MAZE_CONFIRM_MOVE_RESPONSE",
  "MESSAGE_MAZE_AWARD_REQUEST",
  "MESSAGE_MAZE_AWARD_RESPONSE",
  "MESSAGE_BAR_INTERRUPT",
  "MESSAGE_BAR_FINISH_REQUEST",
  "MESSAGE_BAR_FINISH_RESPONSE",
  "MESSAGE_BAR_START_SYNCHRONIZE",
  "MESSAGE_COOLING_INITIALIZE",
  "MESSAGE_AUCTION_INITIALIZE",
  "MESSAGE_AUCTION_SELL_ITEM_SYNCHRONIZE",
  "MESSAGE_AUCTION_BUY_ITEM_SYNCHRONIZE",
  "MESSAGE_AUCTION_HISTORY_SYNCHRONIZE",
  "MESSAGE_AUCTION_QUERY_TRANSACTION_REQUEST",
  "MESSAGE_AUCTION_QUERY_TRANSACTION_RESPONSE",
  "MESSAGE_AUCTION_SEARCH_REQUEST",
  "MESSAGE_AUCTION_SEARCH_RESPONSE",
  "MESSAGE_AUCTION_SELL_REQUEST",
  "MESSAGE_AUCTION_SELL_RESPONSE",
  "MESSAGE_AUCTION_CANCEL_SELL_REQUEST",
  "MESSAGE_AUCTION_CANCEL_SELL_RESPONSE",
  "MESSAGE_AUCTION_BID_REQUEST",
  "MESSAGE_AUCTION_BID_RESPONSE",
  "MESSAGE_AUCTION_BUYOUT_REQUEST",
  "MESSAGE_AUCTION_BUYOUT_RESPONSE",
  "MESSAGE_AUCTION_WITHDRAW_REQUEST",
  "MESSAGE_AUCTION_WITHDRAW_RESPONSE",
  "MESSAGE_WELFARE_INITILIZE",
  "MESSAGE_ACHIEVE_INITILIZE",
  "MESSAGE_ACHIEVE_CONDITION_SYSNCHRONIZATION",
  "MESSAGE_CHECKINS_SYNCHRONIZATION",
  "MESSAGE_WELFARE_TITLE_BROADCAST",
  "MESSAGE_ACHIEVE_AWARD_REQUEST",
  "MESSAGE_ACHIEVE_AWARD_RESPONSE",
  "MESSAGE_ACHIEVE_CHANGE_TITLE_REQUEST",
  "MESSAGE_ACHIEVE_CHANGE_TITLE_RESPONSE",
  "MESSAGE_CHECKINS_OPT_REQUEST",
  "MESSAGE_CHECKINS_OPT_RESPONSE",
  "MESSAGE_ONLINE_AWARD_ITEM_REQUEST",
  "MESSAGE_ONLINE_AWARD_ITEM_RESPONSE",
  "MESSAGE_ONLINE_AWARD_RESOURCE_REQUEST",
  "MESSAGE_ONLINE_AWARD_ITEM_RESOURCE_RESPONSE",
  "MESSAGE_TRANSPORT_AOI_SYNCHRONIZE",
  "MESSAGE_TRANSPORT_INITIALIZE",
  "MESSAGE_TRANSPORT_SYNCHRONIZE",
  "MESSAGE_MAX"
};
const std::map<int, const char*> _MessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(517, _kMessageTypeValues, _kMessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMessageSystemTypeValues[] = {
  MessageSystemType::UNKNOWN_ERROR,
  MessageSystemType::USER_UPPER_LIMITED,
  MessageSystemType::MAX
};
const char* _kMessageSystemTypeNames[] = {
  "UNKNOWN_ERROR",
  "USER_UPPER_LIMITED",
  "MAX"
};
const std::map<int, const char*> _MessageSystemType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kMessageSystemTypeValues, _kMessageSystemTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* Message::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t Message::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t Message::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_message_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type_ = (MessageType::type)ecast0;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->message_);
          isset_message_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_message_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Message::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Message");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->message_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Message &a, Message &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.message_, b.message_);
}

const char* MessageTest::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t MessageTest::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t MessageTest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_serialize_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->serialize_);
          isset_serialize_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_serialize_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageTest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageTest");

  xfer += oprot->writeFieldBegin("serialize_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->serialize_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageTest &a, MessageTest &b) {
  using ::std::swap;
  swap(a.serialize_, b.serialize_);
}

const char* MessageSystem::ascii_fingerprint = "24652790C81ECE22B629CB60A19F1E93";
const uint8_t MessageSystem::binary_fingerprint[16] = {0x24,0x65,0x27,0x90,0xC8,0x1E,0xCE,0x22,0xB6,0x29,0xCB,0x60,0xA1,0x9F,0x1E,0x93};

uint32_t MessageSystem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->type_ = (MessageSystemType::type)ecast1;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->details_);
          this->__isset.details_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSystem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSystem");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.details_) {
    xfer += oprot->writeFieldBegin("details_", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->details_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSystem &a, MessageSystem &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.details_, b.details_);
  swap(a.__isset, b.__isset);
}

const char* MessageVerifyQuestion::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t MessageVerifyQuestion::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

uint32_t MessageVerifyQuestion::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_code_ = false;
  bool isset_key_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code_);
          isset_code_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key_);
          isset_key_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_code_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_key_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageVerifyQuestion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageVerifyQuestion");

  xfer += oprot->writeFieldBegin("code_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("key_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->key_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageVerifyQuestion &a, MessageVerifyQuestion &b) {
  using ::std::swap;
  swap(a.code_, b.code_);
  swap(a.key_, b.key_);
}

const char* MessageVerifyQuestionRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MessageVerifyQuestionRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MessageVerifyQuestionRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_value_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->value_);
          isset_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageVerifyQuestionRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageVerifyQuestionRequest");

  xfer += oprot->writeFieldBegin("value_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageVerifyQuestionRequest &a, MessageVerifyQuestionRequest &b) {
  using ::std::swap;
  swap(a.value_, b.value_);
}

const char* MessageVerifyQuestionResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageVerifyQuestionResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageVerifyQuestionResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_pass_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->pass_);
          isset_pass_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_pass_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageVerifyQuestionResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageVerifyQuestionResponse");

  xfer += oprot->writeFieldBegin("pass_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->pass_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageVerifyQuestionResponse &a, MessageVerifyQuestionResponse &b) {
  using ::std::swap;
  swap(a.pass_, b.pass_);
}

const char* MessageLoginRequest::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t MessageLoginRequest::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t MessageLoginRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_session_key_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->session_key_);
          isset_session_key_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_session_key_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageLoginRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageLoginRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_key_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->session_key_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageLoginRequest &a, MessageLoginRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.session_key_, b.session_key_);
}

const char* MessageLoginResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageLoginResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageLoginResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_logined_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->logined_);
          isset_logined_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_logined_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageLoginResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageLoginResponse");

  xfer += oprot->writeFieldBegin("logined_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->logined_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageLoginResponse &a, MessageLoginResponse &b) {
  using ::std::swap;
  swap(a.logined_, b.logined_);
}

const char* MessageLogoutRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageLogoutRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageLogoutRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageLogoutRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageLogoutRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageLogoutRequest &a, MessageLogoutRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageLogoutResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageLogoutResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageLogoutResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_logouted_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->logouted_);
          isset_logouted_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_logouted_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageLogoutResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageLogoutResponse");

  xfer += oprot->writeFieldBegin("logouted_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->logouted_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageLogoutResponse &a, MessageLogoutResponse &b) {
  using ::std::swap;
  swap(a.logouted_, b.logouted_);
}

const char* MessageKickoutActor::ascii_fingerprint = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
const uint8_t MessageKickoutActor::binary_fingerprint[16] = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

uint32_t MessageKickoutActor::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->type_ = ( ::global::protocol::KickoutActorType::type)ecast2;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageKickoutActor::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageKickoutActor");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageKickoutActor &a, MessageKickoutActor &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
}

}} // namespace
