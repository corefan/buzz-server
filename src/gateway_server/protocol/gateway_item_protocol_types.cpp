/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "gateway_item_protocol_types.h"

#include <algorithm>

namespace gateway { namespace protocol {

int _kContainerOperateTypeValues[] = {
  ContainerOperateType::ADD,
  ContainerOperateType::REMOVE,
  ContainerOperateType::MAX
};
const char* _kContainerOperateTypeNames[] = {
  "ADD",
  "REMOVE",
  "MAX"
};
const std::map<int, const char*> _ContainerOperateType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kContainerOperateTypeValues, _kContainerOperateTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kGemOperateTypeValues[] = {
  GemOperateType::ADD,
  GemOperateType::REMOVE,
  GemOperateType::UPDATE
};
const char* _kGemOperateTypeNames[] = {
  "ADD",
  "REMOVE",
  "UPDATE"
};
const std::map<int, const char*> _GemOperateType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kGemOperateTypeValues, _kGemOperateTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTreasureSpendTypeValues[] = {
  TreasureSpendType::DIAMOND,
  TreasureSpendType::GOLD
};
const char* _kTreasureSpendTypeNames[] = {
  "DIAMOND",
  "GOLD"
};
const std::map<int, const char*> _TreasureSpendType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTreasureSpendTypeValues, _kTreasureSpendTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* MessageItemContainerInitialize::ascii_fingerprint = "5BEFF128FBD1DF8A76C1601AACBF9686";
const uint8_t MessageItemContainerInitialize::binary_fingerprint[16] = {0x5B,0xEF,0xF1,0x28,0xFB,0xD1,0xDF,0x8A,0x76,0xC1,0x60,0x1A,0xAC,0xBF,0x96,0x86};

uint32_t MessageItemContainerInitialize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_container_type_ = false;
  bool isset_items_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->container_type_ = ( ::entity::ItemContainerType::type)ecast0;
          isset_container_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->vocation_ = ( ::entity::VocationType::type)ecast1;
          this->__isset.vocation_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->items_.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->items_.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += this->items_[_i6].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_items_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_container_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_items_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageItemContainerInitialize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageItemContainerInitialize");

  xfer += oprot->writeFieldBegin("container_type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->container_type_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.vocation_) {
    xfer += oprot->writeFieldBegin("vocation_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->vocation_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("items_", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->items_.size()));
    std::vector< ::entity::ItemFields> ::const_iterator _iter7;
    for (_iter7 = this->items_.begin(); _iter7 != this->items_.end(); ++_iter7)
    {
      xfer += (*_iter7).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageItemContainerInitialize &a, MessageItemContainerInitialize &b) {
  using ::std::swap;
  swap(a.container_type_, b.container_type_);
  swap(a.vocation_, b.vocation_);
  swap(a.items_, b.items_);
  swap(a.__isset, b.__isset);
}

const char* MessageItemCreateSynchronize::ascii_fingerprint = "6BE8F077800A85FB35A5B3EA794FFF39";
const uint8_t MessageItemCreateSynchronize::binary_fingerprint[16] = {0x6B,0xE8,0xF0,0x77,0x80,0x0A,0x85,0xFB,0x35,0xA5,0xB3,0xEA,0x79,0x4F,0xFF,0x39};

uint32_t MessageItemCreateSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;
  bool isset_template_id_ = false;
  bool isset_type_ = false;
  bool isset_item_client_fields_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->template_id_);
          isset_template_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast8;
          xfer += iprot->readI32(ecast8);
          this->type_ = ( ::entity::ItemType::type)ecast8;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->item_client_fields_.clear();
            uint32_t _size9;
            ::apache::thrift::protocol::TType _etype12;
            xfer += iprot->readListBegin(_etype12, _size9);
            this->item_client_fields_.resize(_size9);
            uint32_t _i13;
            for (_i13 = 0; _i13 < _size9; ++_i13)
            {
              xfer += iprot->readI32(this->item_client_fields_[_i13]);
            }
            xfer += iprot->readListEnd();
          }
          isset_item_client_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->equipment_client_fields_.clear();
            uint32_t _size14;
            ::apache::thrift::protocol::TType _etype17;
            xfer += iprot->readListBegin(_etype17, _size14);
            this->equipment_client_fields_.resize(_size14);
            uint32_t _i18;
            for (_i18 = 0; _i18 < _size14; ++_i18)
            {
              xfer += iprot->readI32(this->equipment_client_fields_[_i18]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.equipment_client_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->first_equip_time_);
          this->__isset.first_equip_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_template_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item_client_fields_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageItemCreateSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageItemCreateSynchronize");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("template_id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->template_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item_client_fields_", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->item_client_fields_.size()));
    std::vector<int32_t> ::const_iterator _iter19;
    for (_iter19 = this->item_client_fields_.begin(); _iter19 != this->item_client_fields_.end(); ++_iter19)
    {
      xfer += oprot->writeI32((*_iter19));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.equipment_client_fields_) {
    xfer += oprot->writeFieldBegin("equipment_client_fields_", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->equipment_client_fields_.size()));
      std::vector<int32_t> ::const_iterator _iter20;
      for (_iter20 = this->equipment_client_fields_.begin(); _iter20 != this->equipment_client_fields_.end(); ++_iter20)
      {
        xfer += oprot->writeI32((*_iter20));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.first_equip_time_) {
    xfer += oprot->writeFieldBegin("first_equip_time_", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->first_equip_time_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageItemCreateSynchronize &a, MessageItemCreateSynchronize &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.template_id_, b.template_id_);
  swap(a.type_, b.type_);
  swap(a.item_client_fields_, b.item_client_fields_);
  swap(a.equipment_client_fields_, b.equipment_client_fields_);
  swap(a.first_equip_time_, b.first_equip_time_);
  swap(a.__isset, b.__isset);
}

const char* MessageSynchronizeItem::ascii_fingerprint = "46313D61BA406A784CB114072C488249";
const uint8_t MessageSynchronizeItem::binary_fingerprint[16] = {0x46,0x31,0x3D,0x61,0xBA,0x40,0x6A,0x78,0x4C,0xB1,0x14,0x07,0x2C,0x48,0x82,0x49};

uint32_t MessageSynchronizeItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_item_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->item_id_);
          isset_item_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->item_client_fields_.clear();
            uint32_t _size21;
            ::apache::thrift::protocol::TType _etype24;
            xfer += iprot->readListBegin(_etype24, _size21);
            this->item_client_fields_.resize(_size21);
            uint32_t _i25;
            for (_i25 = 0; _i25 < _size21; ++_i25)
            {
              xfer += this->item_client_fields_[_i25].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.item_client_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->equip_client_fields_.clear();
            uint32_t _size26;
            ::apache::thrift::protocol::TType _etype29;
            xfer += iprot->readListBegin(_etype29, _size26);
            this->equip_client_fields_.resize(_size26);
            uint32_t _i30;
            for (_i30 = 0; _i30 < _size26; ++_i30)
            {
              xfer += this->equip_client_fields_[_i30].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.equip_client_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_item_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSynchronizeItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSynchronizeItem");

  xfer += oprot->writeFieldBegin("item_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->item_id_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.item_client_fields_) {
    xfer += oprot->writeFieldBegin("item_client_fields_", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->item_client_fields_.size()));
      std::vector< ::entity::ItemClientField> ::const_iterator _iter31;
      for (_iter31 = this->item_client_fields_.begin(); _iter31 != this->item_client_fields_.end(); ++_iter31)
      {
        xfer += (*_iter31).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.equip_client_fields_) {
    xfer += oprot->writeFieldBegin("equip_client_fields_", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->equip_client_fields_.size()));
      std::vector< ::entity::EquipClientField> ::const_iterator _iter32;
      for (_iter32 = this->equip_client_fields_.begin(); _iter32 != this->equip_client_fields_.end(); ++_iter32)
      {
        xfer += (*_iter32).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageSynchronizeItem &a, MessageSynchronizeItem &b) {
  using ::std::swap;
  swap(a.item_id_, b.item_id_);
  swap(a.item_client_fields_, b.item_client_fields_);
  swap(a.equip_client_fields_, b.equip_client_fields_);
  swap(a.__isset, b.__isset);
}

const char* MessageItemContainerOperate::ascii_fingerprint = "CDBB94917307EACC6A667B9F351FCF4D";
const uint8_t MessageItemContainerOperate::binary_fingerprint[16] = {0xCD,0xBB,0x94,0x91,0x73,0x07,0xEA,0xCC,0x6A,0x66,0x7B,0x9F,0x35,0x1F,0xCF,0x4D};

uint32_t MessageItemContainerOperate::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_container_type_ = false;
  bool isset_location_ = false;
  bool isset_operate_ = false;
  bool isset_item_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast33;
          xfer += iprot->readI32(ecast33);
          this->container_type_ = ( ::entity::ItemContainerType::type)ecast33;
          isset_container_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->location_);
          isset_location_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast34;
          xfer += iprot->readI32(ecast34);
          this->vocation_ = ( ::entity::VocationType::type)ecast34;
          this->__isset.vocation_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast35;
          xfer += iprot->readI32(ecast35);
          this->operate_ = (ContainerOperateType::type)ecast35;
          isset_operate_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->item_id_);
          isset_item_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_container_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_location_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_operate_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageItemContainerOperate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageItemContainerOperate");

  xfer += oprot->writeFieldBegin("container_type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->container_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("location_", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->location_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.vocation_) {
    xfer += oprot->writeFieldBegin("vocation_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->vocation_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("operate_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->operate_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item_id_", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->item_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageItemContainerOperate &a, MessageItemContainerOperate &b) {
  using ::std::swap;
  swap(a.container_type_, b.container_type_);
  swap(a.location_, b.location_);
  swap(a.vocation_, b.vocation_);
  swap(a.operate_, b.operate_);
  swap(a.item_id_, b.item_id_);
  swap(a.__isset, b.__isset);
}

const char* MessageItemMove::ascii_fingerprint = "C1434287F32F949710ADCAB0F9C5095A";
const uint8_t MessageItemMove::binary_fingerprint[16] = {0xC1,0x43,0x42,0x87,0xF3,0x2F,0x94,0x97,0x10,0xAD,0xCA,0xB0,0xF9,0xC5,0x09,0x5A};

uint32_t MessageItemMove::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_item_id_ = false;
  bool isset_src_container_ = false;
  bool isset_src_location_ = false;
  bool isset_dest_container_ = false;
  bool isset_dest_location_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->item_id_);
          isset_item_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast36;
          xfer += iprot->readI32(ecast36);
          this->src_container_ = ( ::entity::ItemContainerType::type)ecast36;
          isset_src_container_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->src_location_);
          isset_src_location_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast37;
          xfer += iprot->readI32(ecast37);
          this->src_vocation_ = ( ::entity::VocationType::type)ecast37;
          this->__isset.src_vocation_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast38;
          xfer += iprot->readI32(ecast38);
          this->dest_container_ = ( ::entity::ItemContainerType::type)ecast38;
          isset_dest_container_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->dest_location_);
          isset_dest_location_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast39;
          xfer += iprot->readI32(ecast39);
          this->dest_vocation_ = ( ::entity::VocationType::type)ecast39;
          this->__isset.dest_vocation_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_item_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_src_container_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_src_location_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dest_container_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dest_location_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageItemMove::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageItemMove");

  xfer += oprot->writeFieldBegin("item_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->item_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("src_container_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->src_container_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("src_location_", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->src_location_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.src_vocation_) {
    xfer += oprot->writeFieldBegin("src_vocation_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32((int32_t)this->src_vocation_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("dest_container_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->dest_container_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dest_location_", ::apache::thrift::protocol::T_I16, 6);
  xfer += oprot->writeI16(this->dest_location_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.dest_vocation_) {
    xfer += oprot->writeFieldBegin("dest_vocation_", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32((int32_t)this->dest_vocation_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageItemMove &a, MessageItemMove &b) {
  using ::std::swap;
  swap(a.item_id_, b.item_id_);
  swap(a.src_container_, b.src_container_);
  swap(a.src_location_, b.src_location_);
  swap(a.src_vocation_, b.src_vocation_);
  swap(a.dest_container_, b.dest_container_);
  swap(a.dest_location_, b.dest_location_);
  swap(a.dest_vocation_, b.dest_vocation_);
  swap(a.__isset, b.__isset);
}

const char* MessageItemRemove::ascii_fingerprint = "7B052C60DA14835A51FB6D3DDE3BF548";
const uint8_t MessageItemRemove::binary_fingerprint[16] = {0x7B,0x05,0x2C,0x60,0xDA,0x14,0x83,0x5A,0x51,0xFB,0x6D,0x3D,0xDE,0x3B,0xF5,0x48};

uint32_t MessageItemRemove::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_item_id_ = false;
  bool isset_container_ = false;
  bool isset_location_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->item_id_);
          isset_item_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast40;
          xfer += iprot->readI32(ecast40);
          this->container_ = ( ::entity::ItemContainerType::type)ecast40;
          isset_container_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->location_);
          isset_location_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast41;
          xfer += iprot->readI32(ecast41);
          this->vocation_ = ( ::entity::VocationType::type)ecast41;
          this->__isset.vocation_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_item_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_container_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_location_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageItemRemove::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageItemRemove");

  xfer += oprot->writeFieldBegin("item_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->item_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("container_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->container_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("location_", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->location_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.vocation_) {
    xfer += oprot->writeFieldBegin("vocation_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32((int32_t)this->vocation_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageItemRemove &a, MessageItemRemove &b) {
  using ::std::swap;
  swap(a.item_id_, b.item_id_);
  swap(a.container_, b.container_);
  swap(a.location_, b.location_);
  swap(a.vocation_, b.vocation_);
  swap(a.__isset, b.__isset);
}

const char* MessageItemUse::ascii_fingerprint = "55B5FD3EFAA118689720F36AFE6445D9";
const uint8_t MessageItemUse::binary_fingerprint[16] = {0x55,0xB5,0xFD,0x3E,0xFA,0xA1,0x18,0x68,0x97,0x20,0xF3,0x6A,0xFE,0x64,0x45,0xD9};

uint32_t MessageItemUse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_item_id_ = false;
  bool isset_container_ = false;
  bool isset_location_ = false;
  bool isset_number_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->item_id_);
          isset_item_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast42;
          xfer += iprot->readI32(ecast42);
          this->container_ = ( ::entity::ItemContainerType::type)ecast42;
          isset_container_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->location_);
          isset_location_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->number_);
          isset_number_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_item_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_container_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_location_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_number_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageItemUse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageItemUse");

  xfer += oprot->writeFieldBegin("item_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->item_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("container_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->container_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("location_", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->location_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->number_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageItemUse &a, MessageItemUse &b) {
  using ::std::swap;
  swap(a.item_id_, b.item_id_);
  swap(a.container_, b.container_);
  swap(a.location_, b.location_);
  swap(a.number_, b.number_);
}

const char* MessageItemSplit::ascii_fingerprint = "AFF7C60B3B95A51058EF1383F5A75154";
const uint8_t MessageItemSplit::binary_fingerprint[16] = {0xAF,0xF7,0xC6,0x0B,0x3B,0x95,0xA5,0x10,0x58,0xEF,0x13,0x83,0xF5,0xA7,0x51,0x54};

uint32_t MessageItemSplit::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_item_id_ = false;
  bool isset_src_location_ = false;
  bool isset_dest_location_ = false;
  bool isset_number_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->item_id_);
          isset_item_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->src_location_);
          isset_src_location_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->dest_location_);
          isset_dest_location_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->number_);
          isset_number_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_item_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_src_location_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dest_location_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_number_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageItemSplit::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageItemSplit");

  xfer += oprot->writeFieldBegin("item_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->item_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("src_location_", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->src_location_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dest_location_", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->dest_location_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->number_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageItemSplit &a, MessageItemSplit &b) {
  using ::std::swap;
  swap(a.item_id_, b.item_id_);
  swap(a.src_location_, b.src_location_);
  swap(a.dest_location_, b.dest_location_);
  swap(a.number_, b.number_);
}

const char* MessageItemArrange::ascii_fingerprint = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
const uint8_t MessageItemArrange::binary_fingerprint[16] = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

uint32_t MessageItemArrange::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_container_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast43;
          xfer += iprot->readI32(ecast43);
          this->container_ = ( ::entity::ItemContainerType::type)ecast43;
          isset_container_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_container_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageItemArrange::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageItemArrange");

  xfer += oprot->writeFieldBegin("container_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->container_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageItemArrange &a, MessageItemArrange &b) {
  using ::std::swap;
  swap(a.container_, b.container_);
}

const char* MessageItemArrageResult::ascii_fingerprint = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
const uint8_t MessageItemArrageResult::binary_fingerprint[16] = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};

uint32_t MessageItemArrageResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_items_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->items_.clear();
            uint32_t _size44;
            ::apache::thrift::protocol::TType _etype47;
            xfer += iprot->readListBegin(_etype47, _size44);
            this->items_.resize(_size44);
            uint32_t _i48;
            for (_i48 = 0; _i48 < _size44; ++_i48)
            {
              xfer += iprot->readString(this->items_[_i48]);
            }
            xfer += iprot->readListEnd();
          }
          isset_items_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_items_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageItemArrageResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageItemArrageResult");

  xfer += oprot->writeFieldBegin("items_", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->items_.size()));
    std::vector<std::string> ::const_iterator _iter49;
    for (_iter49 = this->items_.begin(); _iter49 != this->items_.end(); ++_iter49)
    {
      xfer += oprot->writeString((*_iter49));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageItemArrageResult &a, MessageItemArrageResult &b) {
  using ::std::swap;
  swap(a.items_, b.items_);
}

const char* MessageExtendContainer::ascii_fingerprint = "7E45131B6619DD5D7A5FB9DC011E869F";
const uint8_t MessageExtendContainer::binary_fingerprint[16] = {0x7E,0x45,0x13,0x1B,0x66,0x19,0xDD,0x5D,0x7A,0x5F,0xB9,0xDC,0x01,0x1E,0x86,0x9F};

uint32_t MessageExtendContainer::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_container_ = false;
  bool isset_extend_number_ = false;
  bool isset_cost_type_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast50;
          xfer += iprot->readI32(ecast50);
          this->container_ = ( ::entity::ItemContainerType::type)ecast50;
          isset_container_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->extend_number_);
          isset_extend_number_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->cost_type_);
          isset_cost_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_container_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_extend_number_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cost_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageExtendContainer::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageExtendContainer");

  xfer += oprot->writeFieldBegin("container_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->container_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("extend_number_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->extend_number_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cost_type_", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->cost_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageExtendContainer &a, MessageExtendContainer &b) {
  using ::std::swap;
  swap(a.container_, b.container_);
  swap(a.extend_number_, b.extend_number_);
  swap(a.cost_type_, b.cost_type_);
}

const char* MessageItemComposeRequest::ascii_fingerprint = "EA677F0CF85BB87AC959E6C8734FC9A4";
const uint8_t MessageItemComposeRequest::binary_fingerprint[16] = {0xEA,0x67,0x7F,0x0C,0xF8,0x5B,0xB8,0x7A,0xC9,0x59,0xE6,0xC8,0x73,0x4F,0xC9,0xA4};

uint32_t MessageItemComposeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_recipe_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->recipe_id_);
          isset_recipe_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->item_ids_.clear();
            uint32_t _size51;
            ::apache::thrift::protocol::TType _etype54;
            xfer += iprot->readListBegin(_etype54, _size51);
            this->item_ids_.resize(_size51);
            uint32_t _i55;
            for (_i55 = 0; _i55 < _size51; ++_i55)
            {
              xfer += iprot->readString(this->item_ids_[_i55]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.item_ids_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->number_);
          this->__isset.number_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->bind_);
          this->__isset.bind_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_recipe_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageItemComposeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageItemComposeRequest");

  xfer += oprot->writeFieldBegin("recipe_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->recipe_id_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.item_ids_) {
    xfer += oprot->writeFieldBegin("item_ids_", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->item_ids_.size()));
      std::vector<std::string> ::const_iterator _iter56;
      for (_iter56 = this->item_ids_.begin(); _iter56 != this->item_ids_.end(); ++_iter56)
      {
        xfer += oprot->writeString((*_iter56));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.number_) {
    xfer += oprot->writeFieldBegin("number_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->number_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bind_) {
    xfer += oprot->writeFieldBegin("bind_", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->bind_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageItemComposeRequest &a, MessageItemComposeRequest &b) {
  using ::std::swap;
  swap(a.recipe_id_, b.recipe_id_);
  swap(a.item_ids_, b.item_ids_);
  swap(a.number_, b.number_);
  swap(a.bind_, b.bind_);
  swap(a.__isset, b.__isset);
}

const char* MessageItemComposeResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageItemComposeResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageItemComposeResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageItemComposeResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageItemComposeResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageItemComposeResponse &a, MessageItemComposeResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* EquipInformation::ascii_fingerprint = "7E45131B6619DD5D7A5FB9DC011E869F";
const uint8_t EquipInformation::binary_fingerprint[16] = {0x7E,0x45,0x13,0x1B,0x66,0x19,0xDD,0x5D,0x7A,0x5F,0xB9,0xDC,0x01,0x1E,0x86,0x9F};

uint32_t EquipInformation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_location_ = false;
  bool isset_template_id_ = false;
  bool isset_intensify_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast57;
          xfer += iprot->readI32(ecast57);
          this->location_ = ( ::entity::EquipmentType::type)ecast57;
          isset_location_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->template_id_);
          isset_template_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->intensify_);
          isset_intensify_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_location_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_template_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_intensify_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EquipInformation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EquipInformation");

  xfer += oprot->writeFieldBegin("location_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->location_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("template_id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->template_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("intensify_", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->intensify_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EquipInformation &a, EquipInformation &b) {
  using ::std::swap;
  swap(a.location_, b.location_);
  swap(a.template_id_, b.template_id_);
  swap(a.intensify_, b.intensify_);
}

const char* ActorEquipInformation::ascii_fingerprint = "7E8361146817C56720FF6899E90271FE";
const uint8_t ActorEquipInformation::binary_fingerprint[16] = {0x7E,0x83,0x61,0x14,0x68,0x17,0xC5,0x67,0x20,0xFF,0x68,0x99,0xE9,0x02,0x71,0xFE};

uint32_t ActorEquipInformation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_equips_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->equips_.clear();
            uint32_t _size58;
            ::apache::thrift::protocol::TType _etype61;
            xfer += iprot->readListBegin(_etype61, _size58);
            this->equips_.resize(_size58);
            uint32_t _i62;
            for (_i62 = 0; _i62 < _size58; ++_i62)
            {
              xfer += this->equips_[_i62].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_equips_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_equips_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ActorEquipInformation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ActorEquipInformation");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("equips_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->equips_.size()));
    std::vector<EquipInformation> ::const_iterator _iter63;
    for (_iter63 = this->equips_.begin(); _iter63 != this->equips_.end(); ++_iter63)
    {
      xfer += (*_iter63).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ActorEquipInformation &a, ActorEquipInformation &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.equips_, b.equips_);
}

const char* MessageCreateActorEquipBroadcast::ascii_fingerprint = "B779FA8760BB3C09A48FCBC41DE49935";
const uint8_t MessageCreateActorEquipBroadcast::binary_fingerprint[16] = {0xB7,0x79,0xFA,0x87,0x60,0xBB,0x3C,0x09,0xA4,0x8F,0xCB,0xC4,0x1D,0xE4,0x99,0x35};

uint32_t MessageCreateActorEquipBroadcast::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actors_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->actors_.clear();
            uint32_t _size64;
            ::apache::thrift::protocol::TType _etype67;
            xfer += iprot->readListBegin(_etype67, _size64);
            this->actors_.resize(_size64);
            uint32_t _i68;
            for (_i68 = 0; _i68 < _size64; ++_i68)
            {
              xfer += this->actors_[_i68].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_actors_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actors_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageCreateActorEquipBroadcast::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageCreateActorEquipBroadcast");

  xfer += oprot->writeFieldBegin("actors_", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->actors_.size()));
    std::vector<ActorEquipInformation> ::const_iterator _iter69;
    for (_iter69 = this->actors_.begin(); _iter69 != this->actors_.end(); ++_iter69)
    {
      xfer += (*_iter69).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageCreateActorEquipBroadcast &a, MessageCreateActorEquipBroadcast &b) {
  using ::std::swap;
  swap(a.actors_, b.actors_);
}

const char* MessageUpdateActorEquipBroadcast::ascii_fingerprint = "63C748D0E943B6AAF59CC52663E682B0";
const uint8_t MessageUpdateActorEquipBroadcast::binary_fingerprint[16] = {0x63,0xC7,0x48,0xD0,0xE9,0x43,0xB6,0xAA,0xF5,0x9C,0xC5,0x26,0x63,0xE6,0x82,0xB0};

uint32_t MessageUpdateActorEquipBroadcast::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_equip_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->equip_.read(iprot);
          isset_equip_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_equip_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageUpdateActorEquipBroadcast::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageUpdateActorEquipBroadcast");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("equip_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->equip_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageUpdateActorEquipBroadcast &a, MessageUpdateActorEquipBroadcast &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.equip_, b.equip_);
}

const char* MessageEquipCompareRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MessageEquipCompareRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MessageEquipCompareRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageEquipCompareRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageEquipCompareRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageEquipCompareRequest &a, MessageEquipCompareRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
}

const char* CompareEquip::ascii_fingerprint = "ACBC8ECF4940BD768FA35CCD08154770";
const uint8_t CompareEquip::binary_fingerprint[16] = {0xAC,0xBC,0x8E,0xCF,0x49,0x40,0xBD,0x76,0x8F,0xA3,0x5C,0xCD,0x08,0x15,0x47,0x70};

uint32_t CompareEquip::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_template_id_ = false;
  bool isset_fields_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->template_id_);
          isset_template_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->fields_.clear();
            uint32_t _size70;
            ::apache::thrift::protocol::TType _etype73;
            xfer += iprot->readListBegin(_etype73, _size70);
            this->fields_.resize(_size70);
            uint32_t _i74;
            for (_i74 = 0; _i74 < _size70; ++_i74)
            {
              xfer += iprot->readI32(this->fields_[_i74]);
            }
            xfer += iprot->readListEnd();
          }
          isset_fields_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_template_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fields_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CompareEquip::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CompareEquip");

  xfer += oprot->writeFieldBegin("template_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->template_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fields_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->fields_.size()));
    std::vector<int32_t> ::const_iterator _iter75;
    for (_iter75 = this->fields_.begin(); _iter75 != this->fields_.end(); ++_iter75)
    {
      xfer += oprot->writeI32((*_iter75));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CompareEquip &a, CompareEquip &b) {
  using ::std::swap;
  swap(a.template_id_, b.template_id_);
  swap(a.fields_, b.fields_);
}

const char* MessageEquipCompareResponse::ascii_fingerprint = "CD41F1C3515F8A150FA87284EACF4C41";
const uint8_t MessageEquipCompareResponse::binary_fingerprint[16] = {0xCD,0x41,0xF1,0xC3,0x51,0x5F,0x8A,0x15,0x0F,0xA8,0x72,0x84,0xEA,0xCF,0x4C,0x41};

uint32_t MessageEquipCompareResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_name_ = false;
  bool isset_guild_name_ = false;
  bool isset_level_ = false;
  bool isset_vocation_ = false;
  bool isset_gender_ = false;
  bool isset_appearance_ = false;
  bool isset_current_hp_ = false;
  bool isset_max_hp_ = false;
  bool isset_current_mp_ = false;
  bool isset_max_mp_ = false;
  bool isset_physique_ = false;
  bool isset_strength_ = false;
  bool isset_intelligence_ = false;
  bool isset_agile_ = false;
  bool isset_spirit_ = false;
  bool isset_physics_attack_ = false;
  bool isset_physics_defence_ = false;
  bool isset_magic_attack_ = false;
  bool isset_magic_defence_ = false;
  bool isset_dodge_ = false;
  bool isset_crit_ = false;
  bool isset_ignore_defence_ = false;
  bool isset_speed_ = false;
  bool isset_current_exp_ = false;
  bool isset_nimbus_ = false;
  bool isset_task_layer_ = false;
  bool isset_spirit_facade_ = false;
  bool isset_sub_fight_scores_ = false;
  bool isset_functionality_state_ = false;
  bool isset_equipments_ = false;
  bool isset_title_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name_);
          isset_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guild_name_);
          isset_guild_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level_);
          isset_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vocation_);
          isset_vocation_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gender_);
          isset_gender_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->appearance_);
          isset_appearance_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->current_hp_);
          isset_current_hp_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_hp_);
          isset_max_hp_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->current_mp_);
          isset_current_mp_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_mp_);
          isset_max_mp_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->physique_);
          isset_physique_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->strength_);
          isset_strength_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->intelligence_);
          isset_intelligence_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->agile_);
          isset_agile_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->spirit_);
          isset_spirit_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->physics_attack_);
          isset_physics_attack_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->physics_defence_);
          isset_physics_defence_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->magic_attack_);
          isset_magic_attack_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->magic_defence_);
          isset_magic_defence_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dodge_);
          isset_dodge_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->crit_);
          isset_crit_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ignore_defence_);
          isset_ignore_defence_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->speed_);
          isset_speed_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->current_exp_);
          isset_current_exp_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->nimbus_);
          isset_nimbus_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->task_layer_);
          isset_task_layer_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->spirit_facade_);
          isset_spirit_facade_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sub_fight_scores_.clear();
            uint32_t _size76;
            ::apache::thrift::protocol::TType _etype79;
            xfer += iprot->readListBegin(_etype79, _size76);
            this->sub_fight_scores_.resize(_size76);
            uint32_t _i80;
            for (_i80 = 0; _i80 < _size76; ++_i80)
            {
              xfer += iprot->readI32(this->sub_fight_scores_[_i80]);
            }
            xfer += iprot->readListEnd();
          }
          isset_sub_fight_scores_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->functionality_state_);
          isset_functionality_state_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->equipments_.clear();
            uint32_t _size81;
            ::apache::thrift::protocol::TType _etype84;
            xfer += iprot->readListBegin(_etype84, _size81);
            this->equipments_.resize(_size81);
            uint32_t _i85;
            for (_i85 = 0; _i85 < _size81; ++_i85)
            {
              xfer += this->equipments_[_i85].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_equipments_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->title_);
          isset_title_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_name_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_guild_name_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_vocation_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gender_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_appearance_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_current_hp_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_max_hp_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_current_mp_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_max_mp_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_physique_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_strength_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_intelligence_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_agile_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_spirit_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_physics_attack_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_physics_defence_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_magic_attack_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_magic_defence_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dodge_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_crit_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ignore_defence_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_speed_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_current_exp_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_nimbus_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_task_layer_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_spirit_facade_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sub_fight_scores_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_functionality_state_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_equipments_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_title_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageEquipCompareResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageEquipCompareResponse");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guild_name_", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->guild_name_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("level_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vocation_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->vocation_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gender_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->gender_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("appearance_", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->appearance_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("current_hp_", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->current_hp_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_hp_", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->max_hp_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("current_mp_", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->current_mp_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_mp_", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->max_mp_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("physique_", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->physique_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("strength_", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->strength_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("intelligence_", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->intelligence_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("agile_", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->agile_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("spirit_", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->spirit_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("physics_attack_", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->physics_attack_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("physics_defence_", ::apache::thrift::protocol::T_I32, 18);
  xfer += oprot->writeI32(this->physics_defence_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("magic_attack_", ::apache::thrift::protocol::T_I32, 19);
  xfer += oprot->writeI32(this->magic_attack_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("magic_defence_", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32(this->magic_defence_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dodge_", ::apache::thrift::protocol::T_I32, 21);
  xfer += oprot->writeI32(this->dodge_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("crit_", ::apache::thrift::protocol::T_I32, 22);
  xfer += oprot->writeI32(this->crit_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ignore_defence_", ::apache::thrift::protocol::T_I32, 23);
  xfer += oprot->writeI32(this->ignore_defence_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("speed_", ::apache::thrift::protocol::T_I32, 24);
  xfer += oprot->writeI32(this->speed_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("current_exp_", ::apache::thrift::protocol::T_I32, 25);
  xfer += oprot->writeI32(this->current_exp_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nimbus_", ::apache::thrift::protocol::T_I32, 26);
  xfer += oprot->writeI32(this->nimbus_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("task_layer_", ::apache::thrift::protocol::T_I32, 27);
  xfer += oprot->writeI32(this->task_layer_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("spirit_facade_", ::apache::thrift::protocol::T_I32, 28);
  xfer += oprot->writeI32(this->spirit_facade_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sub_fight_scores_", ::apache::thrift::protocol::T_LIST, 29);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->sub_fight_scores_.size()));
    std::vector<int32_t> ::const_iterator _iter86;
    for (_iter86 = this->sub_fight_scores_.begin(); _iter86 != this->sub_fight_scores_.end(); ++_iter86)
    {
      xfer += oprot->writeI32((*_iter86));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("functionality_state_", ::apache::thrift::protocol::T_STRING, 30);
  xfer += oprot->writeString(this->functionality_state_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("equipments_", ::apache::thrift::protocol::T_LIST, 31);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->equipments_.size()));
    std::vector<CompareEquip> ::const_iterator _iter87;
    for (_iter87 = this->equipments_.begin(); _iter87 != this->equipments_.end(); ++_iter87)
    {
      xfer += (*_iter87).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title_", ::apache::thrift::protocol::T_I32, 32);
  xfer += oprot->writeI32(this->title_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageEquipCompareResponse &a, MessageEquipCompareResponse &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.name_, b.name_);
  swap(a.guild_name_, b.guild_name_);
  swap(a.level_, b.level_);
  swap(a.vocation_, b.vocation_);
  swap(a.gender_, b.gender_);
  swap(a.appearance_, b.appearance_);
  swap(a.current_hp_, b.current_hp_);
  swap(a.max_hp_, b.max_hp_);
  swap(a.current_mp_, b.current_mp_);
  swap(a.max_mp_, b.max_mp_);
  swap(a.physique_, b.physique_);
  swap(a.strength_, b.strength_);
  swap(a.intelligence_, b.intelligence_);
  swap(a.agile_, b.agile_);
  swap(a.spirit_, b.spirit_);
  swap(a.physics_attack_, b.physics_attack_);
  swap(a.physics_defence_, b.physics_defence_);
  swap(a.magic_attack_, b.magic_attack_);
  swap(a.magic_defence_, b.magic_defence_);
  swap(a.dodge_, b.dodge_);
  swap(a.crit_, b.crit_);
  swap(a.ignore_defence_, b.ignore_defence_);
  swap(a.speed_, b.speed_);
  swap(a.current_exp_, b.current_exp_);
  swap(a.nimbus_, b.nimbus_);
  swap(a.task_layer_, b.task_layer_);
  swap(a.spirit_facade_, b.spirit_facade_);
  swap(a.sub_fight_scores_, b.sub_fight_scores_);
  swap(a.functionality_state_, b.functionality_state_);
  swap(a.equipments_, b.equipments_);
  swap(a.title_, b.title_);
}

const char* MessageEquipIntensifyRequest::ascii_fingerprint = "24A3C4C74512596F121D13CAA45DDA02";
const uint8_t MessageEquipIntensifyRequest::binary_fingerprint[16] = {0x24,0xA3,0xC4,0xC7,0x45,0x12,0x59,0x6F,0x12,0x1D,0x13,0xCA,0xA4,0x5D,0xDA,0x02};

uint32_t MessageEquipIntensifyRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;
  bool isset_container_ = false;
  bool isset_location_ = false;
  bool isset_spend_freedom_item_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast88;
          xfer += iprot->readI32(ecast88);
          this->container_ = ( ::entity::ItemContainerType::type)ecast88;
          isset_container_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->location_);
          isset_location_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast89;
          xfer += iprot->readI32(ecast89);
          this->vocation_ = ( ::entity::VocationType::type)ecast89;
          this->__isset.vocation_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->spend_freedom_item_);
          isset_spend_freedom_item_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_container_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_location_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_spend_freedom_item_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageEquipIntensifyRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageEquipIntensifyRequest");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("container_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->container_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("location_", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->location_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.vocation_) {
    xfer += oprot->writeFieldBegin("vocation_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32((int32_t)this->vocation_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("spend_freedom_item_", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->spend_freedom_item_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageEquipIntensifyRequest &a, MessageEquipIntensifyRequest &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.container_, b.container_);
  swap(a.location_, b.location_);
  swap(a.vocation_, b.vocation_);
  swap(a.spend_freedom_item_, b.spend_freedom_item_);
  swap(a.__isset, b.__isset);
}

const char* MessageEquipIntensifyResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageEquipIntensifyResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageEquipIntensifyResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageEquipIntensifyResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageEquipIntensifyResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageEquipIntensifyResponse &a, MessageEquipIntensifyResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageEquipRefineRequest::ascii_fingerprint = "B085B1AF77EDCC59BEF60B9D934120EC";
const uint8_t MessageEquipRefineRequest::binary_fingerprint[16] = {0xB0,0x85,0xB1,0xAF,0x77,0xED,0xCC,0x59,0xBE,0xF6,0x0B,0x9D,0x93,0x41,0x20,0xEC};

uint32_t MessageEquipRefineRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_container_ = false;
  bool isset_location_ = false;
  bool isset_lock1_ = false;
  bool isset_lock2_ = false;
  bool isset_lock3_ = false;
  bool isset_lock4_ = false;
  bool isset_lock5_ = false;
  bool isset_lock6_ = false;
  bool isset_spend_freedom_item_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast90;
          xfer += iprot->readI32(ecast90);
          this->container_ = ( ::entity::ItemContainerType::type)ecast90;
          isset_container_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->location_);
          isset_location_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast91;
          xfer += iprot->readI32(ecast91);
          this->vocation_ = ( ::entity::VocationType::type)ecast91;
          this->__isset.vocation_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->lock1_);
          isset_lock1_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->lock2_);
          isset_lock2_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->lock3_);
          isset_lock3_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->lock4_);
          isset_lock4_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->lock5_);
          isset_lock5_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->lock6_);
          isset_lock6_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->spend_freedom_item_);
          isset_spend_freedom_item_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_container_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_location_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lock1_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lock2_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lock3_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lock4_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lock5_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lock6_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_spend_freedom_item_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageEquipRefineRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageEquipRefineRequest");

  xfer += oprot->writeFieldBegin("container_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->container_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("location_", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->location_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.vocation_) {
    xfer += oprot->writeFieldBegin("vocation_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->vocation_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("lock1_", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->lock1_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lock2_", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->lock2_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lock3_", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->lock3_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lock4_", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->lock4_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lock5_", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->lock5_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lock6_", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->lock6_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("spend_freedom_item_", ::apache::thrift::protocol::T_BOOL, 10);
  xfer += oprot->writeBool(this->spend_freedom_item_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageEquipRefineRequest &a, MessageEquipRefineRequest &b) {
  using ::std::swap;
  swap(a.container_, b.container_);
  swap(a.location_, b.location_);
  swap(a.vocation_, b.vocation_);
  swap(a.lock1_, b.lock1_);
  swap(a.lock2_, b.lock2_);
  swap(a.lock3_, b.lock3_);
  swap(a.lock4_, b.lock4_);
  swap(a.lock5_, b.lock5_);
  swap(a.lock6_, b.lock6_);
  swap(a.spend_freedom_item_, b.spend_freedom_item_);
  swap(a.__isset, b.__isset);
}

const char* MessageEquipRefineResponse::ascii_fingerprint = "FD06DADDA5F04D0793B97EFED06F5FDB";
const uint8_t MessageEquipRefineResponse::binary_fingerprint[16] = {0xFD,0x06,0xDA,0xDD,0xA5,0xF0,0x4D,0x07,0x93,0xB9,0x7E,0xFE,0xD0,0x6F,0x5F,0xDB};

uint32_t MessageEquipRefineResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_ret_ok_ = false;
  bool isset_id_ = false;
  bool isset_new_random_type1_ = false;
  bool isset_new_random_value1_ = false;
  bool isset_new_random_type2_ = false;
  bool isset_new_random_value2_ = false;
  bool isset_new_random_type3_ = false;
  bool isset_new_random_value3_ = false;
  bool isset_new_random_type4_ = false;
  bool isset_new_random_value4_ = false;
  bool isset_new_random_type5_ = false;
  bool isset_new_random_value5_ = false;
  bool isset_new_random_type6_ = false;
  bool isset_new_random_value6_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ret_ok_);
          isset_ret_ok_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->new_random_type1_);
          isset_new_random_type1_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->new_random_value1_);
          isset_new_random_value1_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->new_random_type2_);
          isset_new_random_type2_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->new_random_value2_);
          isset_new_random_value2_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->new_random_type3_);
          isset_new_random_type3_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->new_random_value3_);
          isset_new_random_value3_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->new_random_type4_);
          isset_new_random_type4_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->new_random_value4_);
          isset_new_random_value4_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->new_random_type5_);
          isset_new_random_type5_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->new_random_value5_);
          isset_new_random_value5_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->new_random_type6_);
          isset_new_random_type6_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->new_random_value6_);
          isset_new_random_value6_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_ret_ok_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_new_random_type1_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_new_random_value1_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_new_random_type2_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_new_random_value2_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_new_random_type3_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_new_random_value3_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_new_random_type4_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_new_random_value4_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_new_random_type5_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_new_random_value5_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_new_random_type6_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_new_random_value6_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageEquipRefineResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageEquipRefineResponse");

  xfer += oprot->writeFieldBegin("ret_ok_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->ret_ok_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("new_random_type1_", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->new_random_type1_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("new_random_value1_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->new_random_value1_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("new_random_type2_", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->new_random_type2_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("new_random_value2_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->new_random_value2_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("new_random_type3_", ::apache::thrift::protocol::T_BYTE, 7);
  xfer += oprot->writeByte(this->new_random_type3_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("new_random_value3_", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->new_random_value3_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("new_random_type4_", ::apache::thrift::protocol::T_BYTE, 9);
  xfer += oprot->writeByte(this->new_random_type4_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("new_random_value4_", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->new_random_value4_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("new_random_type5_", ::apache::thrift::protocol::T_BYTE, 11);
  xfer += oprot->writeByte(this->new_random_type5_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("new_random_value5_", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->new_random_value5_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("new_random_type6_", ::apache::thrift::protocol::T_BYTE, 13);
  xfer += oprot->writeByte(this->new_random_type6_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("new_random_value6_", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->new_random_value6_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageEquipRefineResponse &a, MessageEquipRefineResponse &b) {
  using ::std::swap;
  swap(a.ret_ok_, b.ret_ok_);
  swap(a.id_, b.id_);
  swap(a.new_random_type1_, b.new_random_type1_);
  swap(a.new_random_value1_, b.new_random_value1_);
  swap(a.new_random_type2_, b.new_random_type2_);
  swap(a.new_random_value2_, b.new_random_value2_);
  swap(a.new_random_type3_, b.new_random_type3_);
  swap(a.new_random_value3_, b.new_random_value3_);
  swap(a.new_random_type4_, b.new_random_type4_);
  swap(a.new_random_value4_, b.new_random_value4_);
  swap(a.new_random_type5_, b.new_random_type5_);
  swap(a.new_random_value5_, b.new_random_value5_);
  swap(a.new_random_type6_, b.new_random_type6_);
  swap(a.new_random_value6_, b.new_random_value6_);
}

const char* MessageEquipRefineConfirmRequest::ascii_fingerprint = "580DD29FB3E80F337156221D935DE27C";
const uint8_t MessageEquipRefineConfirmRequest::binary_fingerprint[16] = {0x58,0x0D,0xD2,0x9F,0xB3,0xE8,0x0F,0x33,0x71,0x56,0x22,0x1D,0x93,0x5D,0xE2,0x7C};

uint32_t MessageEquipRefineConfirmRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_ok_ = false;
  bool isset_container_ = false;
  bool isset_location_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ok_);
          isset_ok_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast92;
          xfer += iprot->readI32(ecast92);
          this->container_ = ( ::entity::ItemContainerType::type)ecast92;
          isset_container_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->location_);
          isset_location_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast93;
          xfer += iprot->readI32(ecast93);
          this->vocation_ = ( ::entity::VocationType::type)ecast93;
          this->__isset.vocation_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_ok_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_container_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_location_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageEquipRefineConfirmRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageEquipRefineConfirmRequest");

  xfer += oprot->writeFieldBegin("ok_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->ok_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("container_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->container_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("location_", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->location_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.vocation_) {
    xfer += oprot->writeFieldBegin("vocation_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32((int32_t)this->vocation_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageEquipRefineConfirmRequest &a, MessageEquipRefineConfirmRequest &b) {
  using ::std::swap;
  swap(a.ok_, b.ok_);
  swap(a.container_, b.container_);
  swap(a.location_, b.location_);
  swap(a.vocation_, b.vocation_);
  swap(a.__isset, b.__isset);
}

const char* MessageEquipRefineConfirmResponse::ascii_fingerprint = "1767FFB0CB3D9275BC64B198AB3B8A8B";
const uint8_t MessageEquipRefineConfirmResponse::binary_fingerprint[16] = {0x17,0x67,0xFF,0xB0,0xCB,0x3D,0x92,0x75,0xBC,0x64,0xB1,0x98,0xAB,0x3B,0x8A,0x8B};

uint32_t MessageEquipRefineConfirmResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_ok_ = false;
  bool isset_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ok_);
          isset_ok_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_ok_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageEquipRefineConfirmResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageEquipRefineConfirmResponse");

  xfer += oprot->writeFieldBegin("ok_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->ok_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageEquipRefineConfirmResponse &a, MessageEquipRefineConfirmResponse &b) {
  using ::std::swap;
  swap(a.ok_, b.ok_);
  swap(a.id_, b.id_);
}

const char* MessageEquipUpgradeRequest::ascii_fingerprint = "24A3C4C74512596F121D13CAA45DDA02";
const uint8_t MessageEquipUpgradeRequest::binary_fingerprint[16] = {0x24,0xA3,0xC4,0xC7,0x45,0x12,0x59,0x6F,0x12,0x1D,0x13,0xCA,0xA4,0x5D,0xDA,0x02};

uint32_t MessageEquipUpgradeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;
  bool isset_type_ = false;
  bool isset_location_ = false;
  bool isset_spend_freedom_item_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast94;
          xfer += iprot->readI32(ecast94);
          this->type_ = ( ::entity::ItemContainerType::type)ecast94;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->location_);
          isset_location_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast95;
          xfer += iprot->readI32(ecast95);
          this->vocation_ = ( ::entity::VocationType::type)ecast95;
          this->__isset.vocation_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->spend_freedom_item_);
          isset_spend_freedom_item_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_location_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_spend_freedom_item_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageEquipUpgradeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageEquipUpgradeRequest");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("location_", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->location_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.vocation_) {
    xfer += oprot->writeFieldBegin("vocation_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32((int32_t)this->vocation_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("spend_freedom_item_", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->spend_freedom_item_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageEquipUpgradeRequest &a, MessageEquipUpgradeRequest &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.type_, b.type_);
  swap(a.location_, b.location_);
  swap(a.vocation_, b.vocation_);
  swap(a.spend_freedom_item_, b.spend_freedom_item_);
  swap(a.__isset, b.__isset);
}

const char* MessageEquipUpgradeResponse::ascii_fingerprint = "EB04A806CFFC9025AEE48CFFDC378A86";
const uint8_t MessageEquipUpgradeResponse::binary_fingerprint[16] = {0xEB,0x04,0xA8,0x06,0xCF,0xFC,0x90,0x25,0xAE,0xE4,0x8C,0xFF,0xDC,0x37,0x8A,0x86};

uint32_t MessageEquipUpgradeResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id_);
          this->__isset.id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageEquipUpgradeResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageEquipUpgradeResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.id_) {
    xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->id_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageEquipUpgradeResponse &a, MessageEquipUpgradeResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.id_, b.id_);
  swap(a.__isset, b.__isset);
}

const char* MessageEquipInheritRequest::ascii_fingerprint = "9B2E28418A255E9B28D1C7FC04F7EDE2";
const uint8_t MessageEquipInheritRequest::binary_fingerprint[16] = {0x9B,0x2E,0x28,0x41,0x8A,0x25,0x5E,0x9B,0x28,0xD1,0xC7,0xFC,0x04,0xF7,0xED,0xE2};

uint32_t MessageEquipInheritRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_src_type_ = false;
  bool isset_src_location_ = false;
  bool isset_dest_type_ = false;
  bool isset_dest_location_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast96;
          xfer += iprot->readI32(ecast96);
          this->src_type_ = ( ::entity::ItemContainerType::type)ecast96;
          isset_src_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->src_location_);
          isset_src_location_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast97;
          xfer += iprot->readI32(ecast97);
          this->src_vocation_ = ( ::entity::VocationType::type)ecast97;
          this->__isset.src_vocation_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast98;
          xfer += iprot->readI32(ecast98);
          this->dest_type_ = ( ::entity::ItemContainerType::type)ecast98;
          isset_dest_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->dest_location_);
          isset_dest_location_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast99;
          xfer += iprot->readI32(ecast99);
          this->dest_vocation_ = ( ::entity::VocationType::type)ecast99;
          this->__isset.dest_vocation_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_src_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_src_location_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dest_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dest_location_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageEquipInheritRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageEquipInheritRequest");

  xfer += oprot->writeFieldBegin("src_type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->src_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("src_location_", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->src_location_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.src_vocation_) {
    xfer += oprot->writeFieldBegin("src_vocation_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->src_vocation_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("dest_type_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->dest_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dest_location_", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->dest_location_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.dest_vocation_) {
    xfer += oprot->writeFieldBegin("dest_vocation_", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32((int32_t)this->dest_vocation_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageEquipInheritRequest &a, MessageEquipInheritRequest &b) {
  using ::std::swap;
  swap(a.src_type_, b.src_type_);
  swap(a.src_location_, b.src_location_);
  swap(a.src_vocation_, b.src_vocation_);
  swap(a.dest_type_, b.dest_type_);
  swap(a.dest_location_, b.dest_location_);
  swap(a.dest_vocation_, b.dest_vocation_);
  swap(a.__isset, b.__isset);
}

const char* MessageEquipInheritResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageEquipInheritResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageEquipInheritResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageEquipInheritResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageEquipInheritResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageEquipInheritResponse &a, MessageEquipInheritResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* GemData::ascii_fingerprint = "A21CD6FC680B6F6B78EF815C48AA551B";
const uint8_t GemData::binary_fingerprint[16] = {0xA2,0x1C,0xD6,0xFC,0x68,0x0B,0x6F,0x6B,0x78,0xEF,0x81,0x5C,0x48,0xAA,0x55,0x1B};

uint32_t GemData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_location_type_ = false;
  bool isset_location_index_ = false;
  bool isset_id_ = false;
  bool isset_level_ = false;
  bool isset_exp_ = false;
  bool isset_locked_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast100;
          xfer += iprot->readI32(ecast100);
          this->location_type_ = ( ::entity::GemLocationType::type)ecast100;
          isset_location_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->location_index_);
          isset_location_index_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level_);
          isset_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->exp_);
          isset_exp_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->locked_);
          isset_locked_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_location_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_location_index_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_exp_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_locked_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GemData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GemData");

  xfer += oprot->writeFieldBegin("location_type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->location_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("location_index_", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->location_index_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("level_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("exp_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->exp_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("locked_", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->locked_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GemData &a, GemData &b) {
  using ::std::swap;
  swap(a.location_type_, b.location_type_);
  swap(a.location_index_, b.location_index_);
  swap(a.id_, b.id_);
  swap(a.level_, b.level_);
  swap(a.exp_, b.exp_);
  swap(a.locked_, b.locked_);
}

const char* MessageGemInitialize::ascii_fingerprint = "8BF1D8208C1E60ED6E8B86495D0C2B08";
const uint8_t MessageGemInitialize::binary_fingerprint[16] = {0x8B,0xF1,0xD8,0x20,0x8C,0x1E,0x60,0xED,0x6E,0x8B,0x86,0x49,0x5D,0x0C,0x2B,0x08};

uint32_t MessageGemInitialize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_gems_ = false;
  bool isset_gathering_point_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->gems_.clear();
            uint32_t _size101;
            ::apache::thrift::protocol::TType _etype104;
            xfer += iprot->readListBegin(_etype104, _size101);
            this->gems_.resize(_size101);
            uint32_t _i105;
            for (_i105 = 0; _i105 < _size101; ++_i105)
            {
              xfer += this->gems_[_i105].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_gems_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gathering_point_);
          isset_gathering_point_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_gems_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gathering_point_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGemInitialize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGemInitialize");

  xfer += oprot->writeFieldBegin("gems_", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->gems_.size()));
    std::vector<GemData> ::const_iterator _iter106;
    for (_iter106 = this->gems_.begin(); _iter106 != this->gems_.end(); ++_iter106)
    {
      xfer += (*_iter106).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gathering_point_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->gathering_point_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGemInitialize &a, MessageGemInitialize &b) {
  using ::std::swap;
  swap(a.gems_, b.gems_);
  swap(a.gathering_point_, b.gathering_point_);
}

const char* MessageGemSynchronize::ascii_fingerprint = "CA4E1E08C7F35EF26768078865C72EEA";
const uint8_t MessageGemSynchronize::binary_fingerprint[16] = {0xCA,0x4E,0x1E,0x08,0xC7,0xF3,0x5E,0xF2,0x67,0x68,0x07,0x88,0x65,0xC7,0x2E,0xEA};

uint32_t MessageGemSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_gem_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast107;
          xfer += iprot->readI32(ecast107);
          this->type_ = (GemOperateType::type)ecast107;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->gem_.read(iprot);
          isset_gem_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gem_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGemSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGemSynchronize");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gem_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->gem_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGemSynchronize &a, MessageGemSynchronize &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.gem_, b.gem_);
}

const char* MessageGemGatherRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageGemGatherRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageGemGatherRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageGemGatherRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGemGatherRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGemGatherRequest &a, MessageGemGatherRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageGemGatherResponse::ascii_fingerprint = "0221E6F365401E5EF98D7210120C5D0A";
const uint8_t MessageGemGatherResponse::binary_fingerprint[16] = {0x02,0x21,0xE6,0xF3,0x65,0x40,0x1E,0x5E,0xF9,0x8D,0x72,0x10,0x12,0x0C,0x5D,0x0A};

uint32_t MessageGemGatherResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gathering_point_);
          this->__isset.gathering_point_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->bonus_id_);
          this->__isset.bonus_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->bonus_count_);
          this->__isset.bonus_count_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGemGatherResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGemGatherResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.gathering_point_) {
    xfer += oprot->writeFieldBegin("gathering_point_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->gathering_point_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bonus_id_) {
    xfer += oprot->writeFieldBegin("bonus_id_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->bonus_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bonus_count_) {
    xfer += oprot->writeFieldBegin("bonus_count_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->bonus_count_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGemGatherResponse &a, MessageGemGatherResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.gathering_point_, b.gathering_point_);
  swap(a.bonus_id_, b.bonus_id_);
  swap(a.bonus_count_, b.bonus_count_);
  swap(a.__isset, b.__isset);
}

const char* MessageGemSkipGatheringPointRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageGemSkipGatheringPointRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageGemSkipGatheringPointRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageGemSkipGatheringPointRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGemSkipGatheringPointRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGemSkipGatheringPointRequest &a, MessageGemSkipGatheringPointRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageGemSkipGatheringPointResponse::ascii_fingerprint = "3409A6BAF48299E7727EECFEBEC3BDA9";
const uint8_t MessageGemSkipGatheringPointResponse::binary_fingerprint[16] = {0x34,0x09,0xA6,0xBA,0xF4,0x82,0x99,0xE7,0x72,0x7E,0xEC,0xFE,0xBE,0xC3,0xBD,0xA9};

uint32_t MessageGemSkipGatheringPointResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gathering_point_);
          this->__isset.gathering_point_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGemSkipGatheringPointResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGemSkipGatheringPointResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.gathering_point_) {
    xfer += oprot->writeFieldBegin("gathering_point_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->gathering_point_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGemSkipGatheringPointResponse &a, MessageGemSkipGatheringPointResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.gathering_point_, b.gathering_point_);
  swap(a.__isset, b.__isset);
}

const char* MessageGemMoveRequest::ascii_fingerprint = "48F36A250CE99F96A1E1CA020E6BDC8B";
const uint8_t MessageGemMoveRequest::binary_fingerprint[16] = {0x48,0xF3,0x6A,0x25,0x0C,0xE9,0x9F,0x96,0xA1,0xE1,0xCA,0x02,0x0E,0x6B,0xDC,0x8B};

uint32_t MessageGemMoveRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_src_location_type_ = false;
  bool isset_src_location_index_ = false;
  bool isset_dest_location_type_ = false;
  bool isset_dest_location_index_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast108;
          xfer += iprot->readI32(ecast108);
          this->src_location_type_ = ( ::entity::GemLocationType::type)ecast108;
          isset_src_location_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->src_location_index_);
          isset_src_location_index_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast109;
          xfer += iprot->readI32(ecast109);
          this->dest_location_type_ = ( ::entity::GemLocationType::type)ecast109;
          isset_dest_location_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->dest_location_index_);
          isset_dest_location_index_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_src_location_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_src_location_index_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dest_location_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dest_location_index_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGemMoveRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGemMoveRequest");

  xfer += oprot->writeFieldBegin("src_location_type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->src_location_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("src_location_index_", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->src_location_index_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dest_location_type_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->dest_location_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dest_location_index_", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->dest_location_index_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGemMoveRequest &a, MessageGemMoveRequest &b) {
  using ::std::swap;
  swap(a.src_location_type_, b.src_location_type_);
  swap(a.src_location_index_, b.src_location_index_);
  swap(a.dest_location_type_, b.dest_location_type_);
  swap(a.dest_location_index_, b.dest_location_index_);
}

const char* MessageGemMoveResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageGemMoveResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageGemMoveResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGemMoveResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGemMoveResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGemMoveResponse &a, MessageGemMoveResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageGemPromoteRequest::ascii_fingerprint = "95AE3CF840D157028DD90017CC1063BD";
const uint8_t MessageGemPromoteRequest::binary_fingerprint[16] = {0x95,0xAE,0x3C,0xF8,0x40,0xD1,0x57,0x02,0x8D,0xD9,0x00,0x17,0xCC,0x10,0x63,0xBD};

uint32_t MessageGemPromoteRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_location_type_ = false;
  bool isset_location_index_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast110;
          xfer += iprot->readI32(ecast110);
          this->location_type_ = ( ::entity::GemLocationType::type)ecast110;
          isset_location_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->location_index_);
          isset_location_index_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_location_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_location_index_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGemPromoteRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGemPromoteRequest");

  xfer += oprot->writeFieldBegin("location_type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->location_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("location_index_", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->location_index_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGemPromoteRequest &a, MessageGemPromoteRequest &b) {
  using ::std::swap;
  swap(a.location_type_, b.location_type_);
  swap(a.location_index_, b.location_index_);
}

const char* MessageGemPromoteResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageGemPromoteResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageGemPromoteResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGemPromoteResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGemPromoteResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGemPromoteResponse &a, MessageGemPromoteResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageGemDecomposeRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageGemDecomposeRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageGemDecomposeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageGemDecomposeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGemDecomposeRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGemDecomposeRequest &a, MessageGemDecomposeRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageGemDecomposeResponse::ascii_fingerprint = "3409A6BAF48299E7727EECFEBEC3BDA9";
const uint8_t MessageGemDecomposeResponse::binary_fingerprint[16] = {0x34,0x09,0xA6,0xBA,0xF4,0x82,0x99,0xE7,0x72,0x7E,0xEC,0xFE,0xBE,0xC3,0xBD,0xA9};

uint32_t MessageGemDecomposeResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->shard_count_);
          this->__isset.shard_count_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGemDecomposeResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGemDecomposeResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.shard_count_) {
    xfer += oprot->writeFieldBegin("shard_count_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->shard_count_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGemDecomposeResponse &a, MessageGemDecomposeResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.shard_count_, b.shard_count_);
  swap(a.__isset, b.__isset);
}

const char* MessageGemLockRequest::ascii_fingerprint = "D3B54AFC9AF8373704180068CDCC6876";
const uint8_t MessageGemLockRequest::binary_fingerprint[16] = {0xD3,0xB5,0x4A,0xFC,0x9A,0xF8,0x37,0x37,0x04,0x18,0x00,0x68,0xCD,0xCC,0x68,0x76};

uint32_t MessageGemLockRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_location_type_ = false;
  bool isset_location_index_ = false;
  bool isset_locked_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast111;
          xfer += iprot->readI32(ecast111);
          this->location_type_ = ( ::entity::GemLocationType::type)ecast111;
          isset_location_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->location_index_);
          isset_location_index_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->locked_);
          isset_locked_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_location_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_location_index_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_locked_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGemLockRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGemLockRequest");

  xfer += oprot->writeFieldBegin("location_type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->location_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("location_index_", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->location_index_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("locked_", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->locked_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGemLockRequest &a, MessageGemLockRequest &b) {
  using ::std::swap;
  swap(a.location_type_, b.location_type_);
  swap(a.location_index_, b.location_index_);
  swap(a.locked_, b.locked_);
}

const char* MessageGemLockResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageGemLockResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageGemLockResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGemLockResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGemLockResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGemLockResponse &a, MessageGemLockResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageGemLockAllRequest::ascii_fingerprint = "30794F3DFF142367286651DDA884035D";
const uint8_t MessageGemLockAllRequest::binary_fingerprint[16] = {0x30,0x79,0x4F,0x3D,0xFF,0x14,0x23,0x67,0x28,0x66,0x51,0xDD,0xA8,0x84,0x03,0x5D};

uint32_t MessageGemLockAllRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_locked_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->locked_);
          isset_locked_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_locked_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGemLockAllRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGemLockAllRequest");

  xfer += oprot->writeFieldBegin("locked_", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->locked_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGemLockAllRequest &a, MessageGemLockAllRequest &b) {
  using ::std::swap;
  swap(a.locked_, b.locked_);
}

const char* MessageGemLockAllResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageGemLockAllResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageGemLockAllResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGemLockAllResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGemLockAllResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGemLockAllResponse &a, MessageGemLockAllResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageShortcutInitialize::ascii_fingerprint = "A803C54EAD95E24D90C5E66FB98EA72B";
const uint8_t MessageShortcutInitialize::binary_fingerprint[16] = {0xA8,0x03,0xC5,0x4E,0xAD,0x95,0xE2,0x4D,0x90,0xC5,0xE6,0x6F,0xB9,0x8E,0xA7,0x2B};

uint32_t MessageShortcutInitialize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_shortcuts_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->shortcuts_.clear();
            uint32_t _size112;
            ::apache::thrift::protocol::TType _etype115;
            xfer += iprot->readListBegin(_etype115, _size112);
            this->shortcuts_.resize(_size112);
            uint32_t _i116;
            for (_i116 = 0; _i116 < _size112; ++_i116)
            {
              xfer += iprot->readI32(this->shortcuts_[_i116]);
            }
            xfer += iprot->readListEnd();
          }
          isset_shortcuts_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_shortcuts_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageShortcutInitialize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageShortcutInitialize");

  xfer += oprot->writeFieldBegin("shortcuts_", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->shortcuts_.size()));
    std::vector<int32_t> ::const_iterator _iter117;
    for (_iter117 = this->shortcuts_.begin(); _iter117 != this->shortcuts_.end(); ++_iter117)
    {
      xfer += oprot->writeI32((*_iter117));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageShortcutInitialize &a, MessageShortcutInitialize &b) {
  using ::std::swap;
  swap(a.shortcuts_, b.shortcuts_);
}

const char* MessageShortcutSetRequest::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t MessageShortcutSetRequest::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

uint32_t MessageShortcutSetRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_index_ = false;
  bool isset_item_template_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index_);
          isset_index_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item_template_);
          isset_item_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_index_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageShortcutSetRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageShortcutSetRequest");

  xfer += oprot->writeFieldBegin("index_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->index_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item_template_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->item_template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageShortcutSetRequest &a, MessageShortcutSetRequest &b) {
  using ::std::swap;
  swap(a.index_, b.index_);
  swap(a.item_template_, b.item_template_);
}

const char* MessageShortcutSetResponse::ascii_fingerprint = "5C4D84321B3CBB236930D75F16BF3C14";
const uint8_t MessageShortcutSetResponse::binary_fingerprint[16] = {0x5C,0x4D,0x84,0x32,0x1B,0x3C,0xBB,0x23,0x69,0x30,0xD7,0x5F,0x16,0xBF,0x3C,0x14};

uint32_t MessageShortcutSetResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;
  bool isset_index_ = false;
  bool isset_item_template_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index_);
          isset_index_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item_template_);
          isset_item_template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_index_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item_template_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageShortcutSetResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageShortcutSetResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->index_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item_template_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->item_template_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageShortcutSetResponse &a, MessageShortcutSetResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.index_, b.index_);
  swap(a.item_template_, b.item_template_);
}

const char* MessageVipGiftsPickRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageVipGiftsPickRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageVipGiftsPickRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageVipGiftsPickRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageVipGiftsPickRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageVipGiftsPickRequest &a, MessageVipGiftsPickRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageVipGiftsPickResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageVipGiftsPickResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageVipGiftsPickResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageVipGiftsPickResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageVipGiftsPickResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageVipGiftsPickResponse &a, MessageVipGiftsPickResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageVipGiftsSynchronize::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageVipGiftsSynchronize::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageVipGiftsSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_status_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->status_);
          isset_status_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_status_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageVipGiftsSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageVipGiftsSynchronize");

  xfer += oprot->writeFieldBegin("status_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->status_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageVipGiftsSynchronize &a, MessageVipGiftsSynchronize &b) {
  using ::std::swap;
  swap(a.status_, b.status_);
}

const char* MessageItemTreasureHuntRequest::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t MessageItemTreasureHuntRequest::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

uint32_t MessageItemTreasureHuntRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_num_ = false;
  bool isset_tab_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num_);
          isset_num_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tab_id_);
          isset_tab_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_num_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tab_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageItemTreasureHuntRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageItemTreasureHuntRequest");

  xfer += oprot->writeFieldBegin("num_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->num_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tab_id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->tab_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageItemTreasureHuntRequest &a, MessageItemTreasureHuntRequest &b) {
  using ::std::swap;
  swap(a.num_, b.num_);
  swap(a.tab_id_, b.tab_id_);
}

const char* MessageItemTreasureHuntResponse::ascii_fingerprint = "544E78FB61F11E1E70D5970BE82A4F2D";
const uint8_t MessageItemTreasureHuntResponse::binary_fingerprint[16] = {0x54,0x4E,0x78,0xFB,0x61,0xF1,0x1E,0x1E,0x70,0xD5,0x97,0x0B,0xE8,0x2A,0x4F,0x2D};

uint32_t MessageItemTreasureHuntResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_tab_id_ = false;
  bool isset_template_id_list_ = false;
  bool isset_rand_pos_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tab_id_);
          isset_tab_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->template_id_list_.clear();
            uint32_t _size118;
            ::apache::thrift::protocol::TType _etype121;
            xfer += iprot->readListBegin(_etype121, _size118);
            this->template_id_list_.resize(_size118);
            uint32_t _i122;
            for (_i122 = 0; _i122 < _size118; ++_i122)
            {
              xfer += iprot->readI32(this->template_id_list_[_i122]);
            }
            xfer += iprot->readListEnd();
          }
          isset_template_id_list_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->rand_pos_.clear();
            uint32_t _size123;
            ::apache::thrift::protocol::TType _etype126;
            xfer += iprot->readListBegin(_etype126, _size123);
            this->rand_pos_.resize(_size123);
            uint32_t _i127;
            for (_i127 = 0; _i127 < _size123; ++_i127)
            {
              xfer += iprot->readI32(this->rand_pos_[_i127]);
            }
            xfer += iprot->readListEnd();
          }
          isset_rand_pos_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_tab_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_template_id_list_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rand_pos_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageItemTreasureHuntResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageItemTreasureHuntResponse");

  xfer += oprot->writeFieldBegin("tab_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->tab_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("template_id_list_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->template_id_list_.size()));
    std::vector<int32_t> ::const_iterator _iter128;
    for (_iter128 = this->template_id_list_.begin(); _iter128 != this->template_id_list_.end(); ++_iter128)
    {
      xfer += oprot->writeI32((*_iter128));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rand_pos_", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->rand_pos_.size()));
    std::vector<int32_t> ::const_iterator _iter129;
    for (_iter129 = this->rand_pos_.begin(); _iter129 != this->rand_pos_.end(); ++_iter129)
    {
      xfer += oprot->writeI32((*_iter129));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageItemTreasureHuntResponse &a, MessageItemTreasureHuntResponse &b) {
  using ::std::swap;
  swap(a.tab_id_, b.tab_id_);
  swap(a.template_id_list_, b.template_id_list_);
  swap(a.rand_pos_, b.rand_pos_);
}

const char* MessageItemTreasureHuntNotice::ascii_fingerprint = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
const uint8_t MessageItemTreasureHuntNotice::binary_fingerprint[16] = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};

uint32_t MessageItemTreasureHuntNotice::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_notices_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->notices_.clear();
            uint32_t _size130;
            ::apache::thrift::protocol::TType _etype133;
            xfer += iprot->readListBegin(_etype133, _size130);
            this->notices_.resize(_size130);
            uint32_t _i134;
            for (_i134 = 0; _i134 < _size130; ++_i134)
            {
              xfer += iprot->readString(this->notices_[_i134]);
            }
            xfer += iprot->readListEnd();
          }
          isset_notices_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_notices_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageItemTreasureHuntNotice::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageItemTreasureHuntNotice");

  xfer += oprot->writeFieldBegin("notices_", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->notices_.size()));
    std::vector<std::string> ::const_iterator _iter135;
    for (_iter135 = this->notices_.begin(); _iter135 != this->notices_.end(); ++_iter135)
    {
      xfer += oprot->writeString((*_iter135));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageItemTreasureHuntNotice &a, MessageItemTreasureHuntNotice &b) {
  using ::std::swap;
  swap(a.notices_, b.notices_);
}

}} // namespace
