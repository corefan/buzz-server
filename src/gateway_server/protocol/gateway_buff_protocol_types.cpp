/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "gateway_buff_protocol_types.h"

#include <algorithm>

namespace gateway { namespace protocol {

const char* BuffField::ascii_fingerprint = "6435B39C87AB0E30F30BEDEFD7328C0D";
const uint8_t BuffField::binary_fingerprint[16] = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

uint32_t BuffField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_buff_ = false;
  bool isset_left_time_ = false;
  bool isset_stack_count_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->buff_);
          isset_buff_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->left_time_);
          isset_left_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->stack_count_);
          isset_stack_count_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_buff_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_left_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_stack_count_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BuffField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BuffField");

  xfer += oprot->writeFieldBegin("buff_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->buff_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("left_time_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->left_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stack_count_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->stack_count_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BuffField &a, BuffField &b) {
  using ::std::swap;
  swap(a.buff_, b.buff_);
  swap(a.left_time_, b.left_time_);
  swap(a.stack_count_, b.stack_count_);
}

const char* BuffRoleField::ascii_fingerprint = "DD353FCD0C93524745B9C9EB8050E41F";
const uint8_t BuffRoleField::binary_fingerprint[16] = {0xDD,0x35,0x3F,0xCD,0x0C,0x93,0x52,0x47,0x45,0xB9,0xC9,0xEB,0x80,0x50,0xE4,0x1F};

uint32_t BuffRoleField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_id_ = false;
  bool isset_buffs_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type_ = ( ::entity::EntityType::type)ecast0;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->buffs_.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readListBegin(_etype4, _size1);
            this->buffs_.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += this->buffs_[_i5].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_buffs_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_buffs_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BuffRoleField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BuffRoleField");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buffs_", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->buffs_.size()));
    std::vector<BuffField> ::const_iterator _iter6;
    for (_iter6 = this->buffs_.begin(); _iter6 != this->buffs_.end(); ++_iter6)
    {
      xfer += (*_iter6).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BuffRoleField &a, BuffRoleField &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.id_, b.id_);
  swap(a.buffs_, b.buffs_);
}

const char* MessageBuffInitialize::ascii_fingerprint = "5E294FA449B7CDF4ACBBFBBEB5AEFE8F";
const uint8_t MessageBuffInitialize::binary_fingerprint[16] = {0x5E,0x29,0x4F,0xA4,0x49,0xB7,0xCD,0xF4,0xAC,0xBB,0xFB,0xBE,0xB5,0xAE,0xFE,0x8F};

uint32_t MessageBuffInitialize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_roles_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->roles_.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _etype10;
            xfer += iprot->readListBegin(_etype10, _size7);
            this->roles_.resize(_size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              xfer += this->roles_[_i11].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_roles_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_roles_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageBuffInitialize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageBuffInitialize");

  xfer += oprot->writeFieldBegin("roles_", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->roles_.size()));
    std::vector<BuffRoleField> ::const_iterator _iter12;
    for (_iter12 = this->roles_.begin(); _iter12 != this->roles_.end(); ++_iter12)
    {
      xfer += (*_iter12).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageBuffInitialize &a, MessageBuffInitialize &b) {
  using ::std::swap;
  swap(a.roles_, b.roles_);
}

const char* MessageAddBuff::ascii_fingerprint = "31BFBC55E24CCAB83D9E1E9DED82F2A1";
const uint8_t MessageAddBuff::binary_fingerprint[16] = {0x31,0xBF,0xBC,0x55,0xE2,0x4C,0xCA,0xB8,0x3D,0x9E,0x1E,0x9D,0xED,0x82,0xF2,0xA1};

uint32_t MessageAddBuff::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_id_ = false;
  bool isset_buff_ = false;
  bool isset_stack_count_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast13;
          xfer += iprot->readI32(ecast13);
          this->type_ = ( ::entity::EntityType::type)ecast13;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->buff_);
          isset_buff_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->stack_count_);
          isset_stack_count_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_buff_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_stack_count_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAddBuff::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAddBuff");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buff_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->buff_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stack_count_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->stack_count_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAddBuff &a, MessageAddBuff &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.id_, b.id_);
  swap(a.buff_, b.buff_);
  swap(a.stack_count_, b.stack_count_);
}

const char* MessageRemoveBuff::ascii_fingerprint = "45749EB04CE5156B16C44184AF7EEA6C";
const uint8_t MessageRemoveBuff::binary_fingerprint[16] = {0x45,0x74,0x9E,0xB0,0x4C,0xE5,0x15,0x6B,0x16,0xC4,0x41,0x84,0xAF,0x7E,0xEA,0x6C};

uint32_t MessageRemoveBuff::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_id_ = false;
  bool isset_buff_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast14;
          xfer += iprot->readI32(ecast14);
          this->type_ = ( ::entity::EntityType::type)ecast14;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->buff_);
          isset_buff_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_buff_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageRemoveBuff::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageRemoveBuff");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buff_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->buff_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageRemoveBuff &a, MessageRemoveBuff &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.id_, b.id_);
  swap(a.buff_, b.buff_);
}

}} // namespace
