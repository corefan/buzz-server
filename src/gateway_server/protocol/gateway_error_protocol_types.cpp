/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "gateway_error_protocol_types.h"

#include <algorithm>

namespace gateway { namespace protocol {

const char* MessageErrorCode::ascii_fingerprint = "B8D94EBFFE99C6E7010418EB2DF36DC3";
const uint8_t MessageErrorCode::binary_fingerprint[16] = {0xB8,0xD9,0x4E,0xBF,0xFE,0x99,0xC6,0xE7,0x01,0x04,0x18,0xEB,0x2D,0xF3,0x6D,0xC3};

uint32_t MessageErrorCode::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_code_ = false;
  bool isset_params_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code_);
          isset_code_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->params_.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->params_.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readString(this->params_[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          isset_params_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_code_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_params_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageErrorCode::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageErrorCode");

  xfer += oprot->writeFieldBegin("code_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("params_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->params_.size()));
    std::vector<std::string> ::const_iterator _iter5;
    for (_iter5 = this->params_.begin(); _iter5 != this->params_.end(); ++_iter5)
    {
      xfer += oprot->writeString((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageErrorCode &a, MessageErrorCode &b) {
  using ::std::swap;
  swap(a.code_, b.code_);
  swap(a.params_, b.params_);
}

}} // namespace
