/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef gateway_transport_protocol_TYPES_H
#define gateway_transport_protocol_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "gateway_protocol_types.h"


namespace gateway { namespace protocol {


class TransportAoiData {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  TransportAoiData() : npc_id_(), master_name_() {
  }

  virtual ~TransportAoiData() throw() {}

  std::string npc_id_;
  std::string master_name_;

  void __set_npc_id_(const std::string& val) {
    npc_id_ = val;
  }

  void __set_master_name_(const std::string& val) {
    master_name_ = val;
  }

  bool operator == (const TransportAoiData & rhs) const
  {
    if (!(npc_id_ == rhs.npc_id_))
      return false;
    if (!(master_name_ == rhs.master_name_))
      return false;
    return true;
  }
  bool operator != (const TransportAoiData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TransportAoiData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TransportAoiData &a, TransportAoiData &b);


class MessageTransportAoiSynchronize {
 public:

  static const char* ascii_fingerprint; // = "006EFB9C0A4E436459CDFDF617590BB4";
  static const uint8_t binary_fingerprint[16]; // = {0x00,0x6E,0xFB,0x9C,0x0A,0x4E,0x43,0x64,0x59,0xCD,0xFD,0xF6,0x17,0x59,0x0B,0xB4};

  MessageTransportAoiSynchronize() {
  }

  virtual ~MessageTransportAoiSynchronize() throw() {}

  std::vector<TransportAoiData>  aoi_data_;

  void __set_aoi_data_(const std::vector<TransportAoiData> & val) {
    aoi_data_ = val;
  }

  bool operator == (const MessageTransportAoiSynchronize & rhs) const
  {
    if (!(aoi_data_ == rhs.aoi_data_))
      return false;
    return true;
  }
  bool operator != (const MessageTransportAoiSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTransportAoiSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTransportAoiSynchronize &a, MessageTransportAoiSynchronize &b);


class MessageTransportInitialize {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MessageTransportInitialize() : npc_id_() {
  }

  virtual ~MessageTransportInitialize() throw() {}

  std::string npc_id_;

  void __set_npc_id_(const std::string& val) {
    npc_id_ = val;
  }

  bool operator == (const MessageTransportInitialize & rhs) const
  {
    if (!(npc_id_ == rhs.npc_id_))
      return false;
    return true;
  }
  bool operator != (const MessageTransportInitialize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTransportInitialize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTransportInitialize &a, MessageTransportInitialize &b);

typedef struct _MessageTransportSynchronize__isset {
  _MessageTransportSynchronize__isset() : npc_id_(false) {}
  bool npc_id_;
} _MessageTransportSynchronize__isset;

class MessageTransportSynchronize {
 public:

  static const char* ascii_fingerprint; // = "66E694018C17E5B65A59AE8F55CCA3CD";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

  MessageTransportSynchronize() : npc_id_() {
  }

  virtual ~MessageTransportSynchronize() throw() {}

  std::string npc_id_;

  _MessageTransportSynchronize__isset __isset;

  void __set_npc_id_(const std::string& val) {
    npc_id_ = val;
    __isset.npc_id_ = true;
  }

  bool operator == (const MessageTransportSynchronize & rhs) const
  {
    if (__isset.npc_id_ != rhs.__isset.npc_id_)
      return false;
    else if (__isset.npc_id_ && !(npc_id_ == rhs.npc_id_))
      return false;
    return true;
  }
  bool operator != (const MessageTransportSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTransportSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTransportSynchronize &a, MessageTransportSynchronize &b);

}} // namespace

#endif
