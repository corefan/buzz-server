/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "gateway_attr_protocol_types.h"

#include <algorithm>

namespace gateway { namespace protocol {

int _kSpiritFacadeOperateTypeValues[] = {
  SpiritFacadeOperateType::ADD,
  SpiritFacadeOperateType::REMOVE,
  SpiritFacadeOperateType::UPDATE
};
const char* _kSpiritFacadeOperateTypeNames[] = {
  "ADD",
  "REMOVE",
  "UPDATE"
};
const std::map<int, const char*> _SpiritFacadeOperateType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kSpiritFacadeOperateTypeValues, _kSpiritFacadeOperateTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRuneMoveTypeValues[] = {
  RuneMoveType::PACKET,
  RuneMoveType::RUNE_SLOT
};
const char* _kRuneMoveTypeNames[] = {
  "PACKET",
  "RUNE_SLOT"
};
const std::map<int, const char*> _RuneMoveType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kRuneMoveTypeValues, _kRuneMoveTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* AttrAoiData::ascii_fingerprint = "18B162B1D15D8D46509D3911A9F1C2AA";
const uint8_t AttrAoiData::binary_fingerprint[16] = {0x18,0xB1,0x62,0xB1,0xD1,0x5D,0x8D,0x46,0x50,0x9D,0x39,0x11,0xA9,0xF1,0xC2,0xAA};

uint32_t AttrAoiData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->noble_level_);
          this->__isset.noble_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AttrAoiData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AttrAoiData");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.noble_level_) {
    xfer += oprot->writeFieldBegin("noble_level_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->noble_level_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AttrAoiData &a, AttrAoiData &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.noble_level_, b.noble_level_);
  swap(a.__isset, b.__isset);
}

const char* MessageAttrAoiSynchronize::ascii_fingerprint = "1D71AFF15C0262F52C49B4BA20FC18F7";
const uint8_t MessageAttrAoiSynchronize::binary_fingerprint[16] = {0x1D,0x71,0xAF,0xF1,0x5C,0x02,0x62,0xF5,0x2C,0x49,0xB4,0xBA,0x20,0xFC,0x18,0xF7};

uint32_t MessageAttrAoiSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_aoi_data_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->aoi_data_.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->aoi_data_.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->aoi_data_[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_aoi_data_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_aoi_data_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAttrAoiSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrAoiSynchronize");

  xfer += oprot->writeFieldBegin("aoi_data_", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->aoi_data_.size()));
    std::vector<AttrAoiData> ::const_iterator _iter5;
    for (_iter5 = this->aoi_data_.begin(); _iter5 != this->aoi_data_.end(); ++_iter5)
    {
      xfer += (*_iter5).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrAoiSynchronize &a, MessageAttrAoiSynchronize &b) {
  using ::std::swap;
  swap(a.aoi_data_, b.aoi_data_);
}

const char* MessageAttrSwordInitialize::ascii_fingerprint = "4086F12A5C2D615560236565C542F3C3";
const uint8_t MessageAttrSwordInitialize::binary_fingerprint[16] = {0x40,0x86,0xF1,0x2A,0x5C,0x2D,0x61,0x55,0x60,0x23,0x65,0x65,0xC5,0x42,0xF3,0xC3};

uint32_t MessageAttrSwordInitialize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_step_ = false;
  bool isset_lucky_value_ = false;
  bool isset_gain_time_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->step_);
          isset_step_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lucky_value_);
          isset_lucky_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gain_time_);
          isset_gain_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_step_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lucky_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gain_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAttrSwordInitialize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrSwordInitialize");

  xfer += oprot->writeFieldBegin("step_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->step_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lucky_value_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->lucky_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gain_time_", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->gain_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrSwordInitialize &a, MessageAttrSwordInitialize &b) {
  using ::std::swap;
  swap(a.step_, b.step_);
  swap(a.lucky_value_, b.lucky_value_);
  swap(a.gain_time_, b.gain_time_);
}

const char* MessageAttrSwordUpgradeRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageAttrSwordUpgradeRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageAttrSwordUpgradeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageAttrSwordUpgradeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrSwordUpgradeRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrSwordUpgradeRequest &a, MessageAttrSwordUpgradeRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageAttrSwordUpgradeResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageAttrSwordUpgradeResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageAttrSwordUpgradeResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAttrSwordUpgradeResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrSwordUpgradeResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrSwordUpgradeResponse &a, MessageAttrSwordUpgradeResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageAttrSwordSynchronize::ascii_fingerprint = "C1241AF5AA92C586B664FD41DC97C576";
const uint8_t MessageAttrSwordSynchronize::binary_fingerprint[16] = {0xC1,0x24,0x1A,0xF5,0xAA,0x92,0xC5,0x86,0xB6,0x64,0xFD,0x41,0xDC,0x97,0xC5,0x76};

uint32_t MessageAttrSwordSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->step_);
          this->__isset.step_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lucky_value_);
          this->__isset.lucky_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageAttrSwordSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrSwordSynchronize");

  if (this->__isset.step_) {
    xfer += oprot->writeFieldBegin("step_", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->step_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lucky_value_) {
    xfer += oprot->writeFieldBegin("lucky_value_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->lucky_value_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrSwordSynchronize &a, MessageAttrSwordSynchronize &b) {
  using ::std::swap;
  swap(a.step_, b.step_);
  swap(a.lucky_value_, b.lucky_value_);
  swap(a.__isset, b.__isset);
}

const char* MessageAttrSwordEquip::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t MessageAttrSwordEquip::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t MessageAttrSwordEquip::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_step_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->step_);
          isset_step_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_step_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAttrSwordEquip::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrSwordEquip");

  xfer += oprot->writeFieldBegin("step_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->step_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrSwordEquip &a, MessageAttrSwordEquip &b) {
  using ::std::swap;
  swap(a.step_, b.step_);
}

const char* MessageAttrSwordUnequip::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageAttrSwordUnequip::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageAttrSwordUnequip::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageAttrSwordUnequip::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrSwordUnequip");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrSwordUnequip &a, MessageAttrSwordUnequip &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageAttrSwordCompareRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MessageAttrSwordCompareRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MessageAttrSwordCompareRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAttrSwordCompareRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrSwordCompareRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrSwordCompareRequest &a, MessageAttrSwordCompareRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
}

const char* MessageAttrSwordCompareResponse::ascii_fingerprint = "28C2ECC89260BADB9C70330FBF47BFA8";
const uint8_t MessageAttrSwordCompareResponse::binary_fingerprint[16] = {0x28,0xC2,0xEC,0xC8,0x92,0x60,0xBA,0xDB,0x9C,0x70,0x33,0x0F,0xBF,0x47,0xBF,0xA8};

uint32_t MessageAttrSwordCompareResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_step_ = false;
  bool isset_level_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->step_);
          isset_step_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level_);
          isset_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_step_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAttrSwordCompareResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrSwordCompareResponse");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("step_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->step_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("level_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrSwordCompareResponse &a, MessageAttrSwordCompareResponse &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.step_, b.step_);
  swap(a.level_, b.level_);
}

const char* MessageAttrNobleInitialize::ascii_fingerprint = "6F6919054DD34A5D1D1B2263AA643451";
const uint8_t MessageAttrNobleInitialize::binary_fingerprint[16] = {0x6F,0x69,0x19,0x05,0x4D,0xD3,0x4A,0x5D,0x1D,0x1B,0x22,0x63,0xAA,0x64,0x34,0x51};

uint32_t MessageAttrNobleInitialize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_level_ = false;
  bool isset_used_item_count_ = false;
  bool isset_max_hp_add_value_ = false;
  bool isset_max_mp_add_value_ = false;
  bool isset_physics_attack_add_value_ = false;
  bool isset_physics_defence_add_value_ = false;
  bool isset_magic_attack_add_value_ = false;
  bool isset_magic_defence_add_value_ = false;
  bool isset_dodge_add_value_ = false;
  bool isset_crit_add_value_ = false;
  bool isset_ignore_defence_add_value_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level_);
          isset_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->used_item_count_);
          isset_used_item_count_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_hp_add_value_);
          isset_max_hp_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_mp_add_value_);
          isset_max_mp_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->physics_attack_add_value_);
          isset_physics_attack_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->physics_defence_add_value_);
          isset_physics_defence_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->magic_attack_add_value_);
          isset_magic_attack_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->magic_defence_add_value_);
          isset_magic_defence_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dodge_add_value_);
          isset_dodge_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->crit_add_value_);
          isset_crit_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ignore_defence_add_value_);
          isset_ignore_defence_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_used_item_count_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_max_hp_add_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_max_mp_add_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_physics_attack_add_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_physics_defence_add_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_magic_attack_add_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_magic_defence_add_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dodge_add_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_crit_add_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ignore_defence_add_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAttrNobleInitialize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrNobleInitialize");

  xfer += oprot->writeFieldBegin("level_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("used_item_count_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->used_item_count_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_hp_add_value_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->max_hp_add_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_mp_add_value_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->max_mp_add_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("physics_attack_add_value_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->physics_attack_add_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("physics_defence_add_value_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->physics_defence_add_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("magic_attack_add_value_", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->magic_attack_add_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("magic_defence_add_value_", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->magic_defence_add_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dodge_add_value_", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->dodge_add_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("crit_add_value_", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->crit_add_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ignore_defence_add_value_", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->ignore_defence_add_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrNobleInitialize &a, MessageAttrNobleInitialize &b) {
  using ::std::swap;
  swap(a.level_, b.level_);
  swap(a.used_item_count_, b.used_item_count_);
  swap(a.max_hp_add_value_, b.max_hp_add_value_);
  swap(a.max_mp_add_value_, b.max_mp_add_value_);
  swap(a.physics_attack_add_value_, b.physics_attack_add_value_);
  swap(a.physics_defence_add_value_, b.physics_defence_add_value_);
  swap(a.magic_attack_add_value_, b.magic_attack_add_value_);
  swap(a.magic_defence_add_value_, b.magic_defence_add_value_);
  swap(a.dodge_add_value_, b.dodge_add_value_);
  swap(a.crit_add_value_, b.crit_add_value_);
  swap(a.ignore_defence_add_value_, b.ignore_defence_add_value_);
}

const char* MessageAttrNoblePromoteRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageAttrNoblePromoteRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageAttrNoblePromoteRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageAttrNoblePromoteRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrNoblePromoteRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrNoblePromoteRequest &a, MessageAttrNoblePromoteRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageAttrNoblePromoteResponse::ascii_fingerprint = "C98765BC3F0889FA13BF96FE024FBFC1";
const uint8_t MessageAttrNoblePromoteResponse::binary_fingerprint[16] = {0xC9,0x87,0x65,0xBC,0x3F,0x08,0x89,0xFA,0x13,0xBF,0x96,0xFE,0x02,0x4F,0xBF,0xC1};

uint32_t MessageAttrNoblePromoteResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_hp_add_value_);
          this->__isset.max_hp_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_mp_add_value_);
          this->__isset.max_mp_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->physics_attack_add_value_);
          this->__isset.physics_attack_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->physics_defence_add_value_);
          this->__isset.physics_defence_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->magic_attack_add_value_);
          this->__isset.magic_attack_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->magic_defence_add_value_);
          this->__isset.magic_defence_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dodge_add_value_);
          this->__isset.dodge_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->crit_add_value_);
          this->__isset.crit_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ignore_defence_add_value_);
          this->__isset.ignore_defence_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAttrNoblePromoteResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrNoblePromoteResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.max_hp_add_value_) {
    xfer += oprot->writeFieldBegin("max_hp_add_value_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->max_hp_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.max_mp_add_value_) {
    xfer += oprot->writeFieldBegin("max_mp_add_value_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->max_mp_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.physics_attack_add_value_) {
    xfer += oprot->writeFieldBegin("physics_attack_add_value_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->physics_attack_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.physics_defence_add_value_) {
    xfer += oprot->writeFieldBegin("physics_defence_add_value_", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->physics_defence_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.magic_attack_add_value_) {
    xfer += oprot->writeFieldBegin("magic_attack_add_value_", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->magic_attack_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.magic_defence_add_value_) {
    xfer += oprot->writeFieldBegin("magic_defence_add_value_", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->magic_defence_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dodge_add_value_) {
    xfer += oprot->writeFieldBegin("dodge_add_value_", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->dodge_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.crit_add_value_) {
    xfer += oprot->writeFieldBegin("crit_add_value_", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32(this->crit_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ignore_defence_add_value_) {
    xfer += oprot->writeFieldBegin("ignore_defence_add_value_", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->ignore_defence_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrNoblePromoteResponse &a, MessageAttrNoblePromoteResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.max_hp_add_value_, b.max_hp_add_value_);
  swap(a.max_mp_add_value_, b.max_mp_add_value_);
  swap(a.physics_attack_add_value_, b.physics_attack_add_value_);
  swap(a.physics_defence_add_value_, b.physics_defence_add_value_);
  swap(a.magic_attack_add_value_, b.magic_attack_add_value_);
  swap(a.magic_defence_add_value_, b.magic_defence_add_value_);
  swap(a.dodge_add_value_, b.dodge_add_value_);
  swap(a.crit_add_value_, b.crit_add_value_);
  swap(a.ignore_defence_add_value_, b.ignore_defence_add_value_);
  swap(a.__isset, b.__isset);
}

const char* MessageAttrNobleBreakthroughRequest::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t MessageAttrNobleBreakthroughRequest::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t MessageAttrNobleBreakthroughRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_use_item_count_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->use_item_count_);
          isset_use_item_count_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_use_item_count_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAttrNobleBreakthroughRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrNobleBreakthroughRequest");

  xfer += oprot->writeFieldBegin("use_item_count_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->use_item_count_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrNobleBreakthroughRequest &a, MessageAttrNobleBreakthroughRequest &b) {
  using ::std::swap;
  swap(a.use_item_count_, b.use_item_count_);
}

const char* MessageAttrNobleBreakthroughResponse::ascii_fingerprint = "BFE20425629D93BB485E108BC04B77E7";
const uint8_t MessageAttrNobleBreakthroughResponse::binary_fingerprint[16] = {0xBF,0xE2,0x04,0x25,0x62,0x9D,0x93,0xBB,0x48,0x5E,0x10,0x8B,0xC0,0x4B,0x77,0xE7};

uint32_t MessageAttrNobleBreakthroughResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level_);
          this->__isset.level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->used_item_count_);
          this->__isset.used_item_count_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAttrNobleBreakthroughResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrNobleBreakthroughResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.level_) {
    xfer += oprot->writeFieldBegin("level_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.used_item_count_) {
    xfer += oprot->writeFieldBegin("used_item_count_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->used_item_count_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrNobleBreakthroughResponse &a, MessageAttrNobleBreakthroughResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.level_, b.level_);
  swap(a.used_item_count_, b.used_item_count_);
  swap(a.__isset, b.__isset);
}

const char* MessageAttrNobleCompareRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MessageAttrNobleCompareRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MessageAttrNobleCompareRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAttrNobleCompareRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrNobleCompareRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrNobleCompareRequest &a, MessageAttrNobleCompareRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
}

const char* MessageAttrNobleCompareResponse::ascii_fingerprint = "7C3708B4775E2EBDCA2A827D941837D0";
const uint8_t MessageAttrNobleCompareResponse::binary_fingerprint[16] = {0x7C,0x37,0x08,0xB4,0x77,0x5E,0x2E,0xBD,0xCA,0x2A,0x82,0x7D,0x94,0x18,0x37,0xD0};

uint32_t MessageAttrNobleCompareResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level_);
          this->__isset.level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_hp_add_value_);
          this->__isset.max_hp_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_mp_add_value_);
          this->__isset.max_mp_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->physics_attack_add_value_);
          this->__isset.physics_attack_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->physics_defence_add_value_);
          this->__isset.physics_defence_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->magic_attack_add_value_);
          this->__isset.magic_attack_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->magic_defence_add_value_);
          this->__isset.magic_defence_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dodge_add_value_);
          this->__isset.dodge_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->crit_add_value_);
          this->__isset.crit_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ignore_defence_add_value_);
          this->__isset.ignore_defence_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAttrNobleCompareResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrNobleCompareResponse");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.level_) {
    xfer += oprot->writeFieldBegin("level_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.max_hp_add_value_) {
    xfer += oprot->writeFieldBegin("max_hp_add_value_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->max_hp_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.max_mp_add_value_) {
    xfer += oprot->writeFieldBegin("max_mp_add_value_", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->max_mp_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.physics_attack_add_value_) {
    xfer += oprot->writeFieldBegin("physics_attack_add_value_", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->physics_attack_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.physics_defence_add_value_) {
    xfer += oprot->writeFieldBegin("physics_defence_add_value_", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->physics_defence_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.magic_attack_add_value_) {
    xfer += oprot->writeFieldBegin("magic_attack_add_value_", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->magic_attack_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.magic_defence_add_value_) {
    xfer += oprot->writeFieldBegin("magic_defence_add_value_", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32(this->magic_defence_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dodge_add_value_) {
    xfer += oprot->writeFieldBegin("dodge_add_value_", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->dodge_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.crit_add_value_) {
    xfer += oprot->writeFieldBegin("crit_add_value_", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32(this->crit_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ignore_defence_add_value_) {
    xfer += oprot->writeFieldBegin("ignore_defence_add_value_", ::apache::thrift::protocol::T_I32, 12);
    xfer += oprot->writeI32(this->ignore_defence_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrNobleCompareResponse &a, MessageAttrNobleCompareResponse &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.result_, b.result_);
  swap(a.level_, b.level_);
  swap(a.max_hp_add_value_, b.max_hp_add_value_);
  swap(a.max_mp_add_value_, b.max_mp_add_value_);
  swap(a.physics_attack_add_value_, b.physics_attack_add_value_);
  swap(a.physics_defence_add_value_, b.physics_defence_add_value_);
  swap(a.magic_attack_add_value_, b.magic_attack_add_value_);
  swap(a.magic_defence_add_value_, b.magic_defence_add_value_);
  swap(a.dodge_add_value_, b.dodge_add_value_);
  swap(a.crit_add_value_, b.crit_add_value_);
  swap(a.ignore_defence_add_value_, b.ignore_defence_add_value_);
  swap(a.__isset, b.__isset);
}

const char* MessageAttrElementInitialize::ascii_fingerprint = "908BA636099DA6568DBB360822A4B2C4";
const uint8_t MessageAttrElementInitialize::binary_fingerprint[16] = {0x90,0x8B,0xA6,0x36,0x09,0x9D,0xA6,0x56,0x8D,0xBB,0x36,0x08,0x22,0xA4,0xB2,0xC4};

uint32_t MessageAttrElementInitialize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_level_ = false;
  bool isset_max_hp_add_value_ = false;
  bool isset_max_mp_add_value_ = false;
  bool isset_physics_attack_add_value_ = false;
  bool isset_physics_defence_add_value_ = false;
  bool isset_magic_attack_add_value_ = false;
  bool isset_magic_defence_add_value_ = false;
  bool isset_dodge_add_value_ = false;
  bool isset_crit_add_value_ = false;
  bool isset_ignore_defence_add_value_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level_);
          isset_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_hp_add_value_);
          isset_max_hp_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_mp_add_value_);
          isset_max_mp_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->physics_attack_add_value_);
          isset_physics_attack_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->physics_defence_add_value_);
          isset_physics_defence_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->magic_attack_add_value_);
          isset_magic_attack_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->magic_defence_add_value_);
          isset_magic_defence_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dodge_add_value_);
          isset_dodge_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->crit_add_value_);
          isset_crit_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ignore_defence_add_value_);
          isset_ignore_defence_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_max_hp_add_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_max_mp_add_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_physics_attack_add_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_physics_defence_add_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_magic_attack_add_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_magic_defence_add_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dodge_add_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_crit_add_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ignore_defence_add_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAttrElementInitialize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrElementInitialize");

  xfer += oprot->writeFieldBegin("level_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_hp_add_value_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->max_hp_add_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_mp_add_value_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->max_mp_add_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("physics_attack_add_value_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->physics_attack_add_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("physics_defence_add_value_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->physics_defence_add_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("magic_attack_add_value_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->magic_attack_add_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("magic_defence_add_value_", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->magic_defence_add_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dodge_add_value_", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->dodge_add_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("crit_add_value_", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->crit_add_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ignore_defence_add_value_", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->ignore_defence_add_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrElementInitialize &a, MessageAttrElementInitialize &b) {
  using ::std::swap;
  swap(a.level_, b.level_);
  swap(a.max_hp_add_value_, b.max_hp_add_value_);
  swap(a.max_mp_add_value_, b.max_mp_add_value_);
  swap(a.physics_attack_add_value_, b.physics_attack_add_value_);
  swap(a.physics_defence_add_value_, b.physics_defence_add_value_);
  swap(a.magic_attack_add_value_, b.magic_attack_add_value_);
  swap(a.magic_defence_add_value_, b.magic_defence_add_value_);
  swap(a.dodge_add_value_, b.dodge_add_value_);
  swap(a.crit_add_value_, b.crit_add_value_);
  swap(a.ignore_defence_add_value_, b.ignore_defence_add_value_);
}

const char* MessageAttrElementUpgradeRequest::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t MessageAttrElementUpgradeRequest::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t MessageAttrElementUpgradeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_level_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level_);
          isset_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAttrElementUpgradeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrElementUpgradeRequest");

  xfer += oprot->writeFieldBegin("level_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrElementUpgradeRequest &a, MessageAttrElementUpgradeRequest &b) {
  using ::std::swap;
  swap(a.level_, b.level_);
}

const char* MessageAttrElementUpgradeResponse::ascii_fingerprint = "4DC3D1B743DEF6F991660AD82570ACE5";
const uint8_t MessageAttrElementUpgradeResponse::binary_fingerprint[16] = {0x4D,0xC3,0xD1,0xB7,0x43,0xDE,0xF6,0xF9,0x91,0x66,0x0A,0xD8,0x25,0x70,0xAC,0xE5};

uint32_t MessageAttrElementUpgradeResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level_);
          this->__isset.level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_hp_add_value_);
          this->__isset.max_hp_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_mp_add_value_);
          this->__isset.max_mp_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->physics_attack_add_value_);
          this->__isset.physics_attack_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->physics_defence_add_value_);
          this->__isset.physics_defence_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->magic_attack_add_value_);
          this->__isset.magic_attack_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->magic_defence_add_value_);
          this->__isset.magic_defence_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dodge_add_value_);
          this->__isset.dodge_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->crit_add_value_);
          this->__isset.crit_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ignore_defence_add_value_);
          this->__isset.ignore_defence_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAttrElementUpgradeResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrElementUpgradeResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.level_) {
    xfer += oprot->writeFieldBegin("level_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.max_hp_add_value_) {
    xfer += oprot->writeFieldBegin("max_hp_add_value_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->max_hp_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.max_mp_add_value_) {
    xfer += oprot->writeFieldBegin("max_mp_add_value_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->max_mp_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.physics_attack_add_value_) {
    xfer += oprot->writeFieldBegin("physics_attack_add_value_", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->physics_attack_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.physics_defence_add_value_) {
    xfer += oprot->writeFieldBegin("physics_defence_add_value_", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->physics_defence_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.magic_attack_add_value_) {
    xfer += oprot->writeFieldBegin("magic_attack_add_value_", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->magic_attack_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.magic_defence_add_value_) {
    xfer += oprot->writeFieldBegin("magic_defence_add_value_", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->magic_defence_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dodge_add_value_) {
    xfer += oprot->writeFieldBegin("dodge_add_value_", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32(this->dodge_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.crit_add_value_) {
    xfer += oprot->writeFieldBegin("crit_add_value_", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->crit_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ignore_defence_add_value_) {
    xfer += oprot->writeFieldBegin("ignore_defence_add_value_", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32(this->ignore_defence_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrElementUpgradeResponse &a, MessageAttrElementUpgradeResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.level_, b.level_);
  swap(a.max_hp_add_value_, b.max_hp_add_value_);
  swap(a.max_mp_add_value_, b.max_mp_add_value_);
  swap(a.physics_attack_add_value_, b.physics_attack_add_value_);
  swap(a.physics_defence_add_value_, b.physics_defence_add_value_);
  swap(a.magic_attack_add_value_, b.magic_attack_add_value_);
  swap(a.magic_defence_add_value_, b.magic_defence_add_value_);
  swap(a.dodge_add_value_, b.dodge_add_value_);
  swap(a.crit_add_value_, b.crit_add_value_);
  swap(a.ignore_defence_add_value_, b.ignore_defence_add_value_);
  swap(a.__isset, b.__isset);
}

const char* MessageAttrElementCompareRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MessageAttrElementCompareRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MessageAttrElementCompareRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAttrElementCompareRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrElementCompareRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrElementCompareRequest &a, MessageAttrElementCompareRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
}

const char* MessageAttrElementCompareResponse::ascii_fingerprint = "7C3708B4775E2EBDCA2A827D941837D0";
const uint8_t MessageAttrElementCompareResponse::binary_fingerprint[16] = {0x7C,0x37,0x08,0xB4,0x77,0x5E,0x2E,0xBD,0xCA,0x2A,0x82,0x7D,0x94,0x18,0x37,0xD0};

uint32_t MessageAttrElementCompareResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level_);
          this->__isset.level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_hp_add_value_);
          this->__isset.max_hp_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_mp_add_value_);
          this->__isset.max_mp_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->physics_attack_add_value_);
          this->__isset.physics_attack_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->physics_defence_add_value_);
          this->__isset.physics_defence_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->magic_attack_add_value_);
          this->__isset.magic_attack_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->magic_defence_add_value_);
          this->__isset.magic_defence_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dodge_add_value_);
          this->__isset.dodge_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->crit_add_value_);
          this->__isset.crit_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ignore_defence_add_value_);
          this->__isset.ignore_defence_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAttrElementCompareResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrElementCompareResponse");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.level_) {
    xfer += oprot->writeFieldBegin("level_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.max_hp_add_value_) {
    xfer += oprot->writeFieldBegin("max_hp_add_value_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->max_hp_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.max_mp_add_value_) {
    xfer += oprot->writeFieldBegin("max_mp_add_value_", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->max_mp_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.physics_attack_add_value_) {
    xfer += oprot->writeFieldBegin("physics_attack_add_value_", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->physics_attack_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.physics_defence_add_value_) {
    xfer += oprot->writeFieldBegin("physics_defence_add_value_", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->physics_defence_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.magic_attack_add_value_) {
    xfer += oprot->writeFieldBegin("magic_attack_add_value_", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->magic_attack_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.magic_defence_add_value_) {
    xfer += oprot->writeFieldBegin("magic_defence_add_value_", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32(this->magic_defence_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dodge_add_value_) {
    xfer += oprot->writeFieldBegin("dodge_add_value_", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->dodge_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.crit_add_value_) {
    xfer += oprot->writeFieldBegin("crit_add_value_", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32(this->crit_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ignore_defence_add_value_) {
    xfer += oprot->writeFieldBegin("ignore_defence_add_value_", ::apache::thrift::protocol::T_I32, 12);
    xfer += oprot->writeI32(this->ignore_defence_add_value_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrElementCompareResponse &a, MessageAttrElementCompareResponse &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.result_, b.result_);
  swap(a.level_, b.level_);
  swap(a.max_hp_add_value_, b.max_hp_add_value_);
  swap(a.max_mp_add_value_, b.max_mp_add_value_);
  swap(a.physics_attack_add_value_, b.physics_attack_add_value_);
  swap(a.physics_defence_add_value_, b.physics_defence_add_value_);
  swap(a.magic_attack_add_value_, b.magic_attack_add_value_);
  swap(a.magic_defence_add_value_, b.magic_defence_add_value_);
  swap(a.dodge_add_value_, b.dodge_add_value_);
  swap(a.crit_add_value_, b.crit_add_value_);
  swap(a.ignore_defence_add_value_, b.ignore_defence_add_value_);
  swap(a.__isset, b.__isset);
}

const char* SpiritFacadeData::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t SpiritFacadeData::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

uint32_t SpiritFacadeData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;
  bool isset_expire_time_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->expire_time_);
          isset_expire_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_expire_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SpiritFacadeData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SpiritFacadeData");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("expire_time_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->expire_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SpiritFacadeData &a, SpiritFacadeData &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.expire_time_, b.expire_time_);
}

const char* SpiritRuneData::ascii_fingerprint = "EFFD9F67D6D23CD85DFFD381B41885B5";
const uint8_t SpiritRuneData::binary_fingerprint[16] = {0xEF,0xFD,0x9F,0x67,0xD6,0xD2,0x3C,0xD8,0x5D,0xFF,0xD3,0x81,0xB4,0x18,0x85,0xB5};

uint32_t SpiritRuneData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_location_ = false;
  bool isset_template_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->location_);
          isset_location_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->template_id_);
          isset_template_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_location_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_template_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SpiritRuneData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SpiritRuneData");

  xfer += oprot->writeFieldBegin("location_", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->location_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("template_id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->template_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SpiritRuneData &a, SpiritRuneData &b) {
  using ::std::swap;
  swap(a.location_, b.location_);
  swap(a.template_id_, b.template_id_);
}

const char* MessageAttrSpiritInitialize::ascii_fingerprint = "AC4A9F5730D2582FF2A678D1356C653C";
const uint8_t MessageAttrSpiritInitialize::binary_fingerprint[16] = {0xAC,0x4A,0x9F,0x57,0x30,0xD2,0x58,0x2F,0xF2,0xA6,0x78,0xD1,0x35,0x6C,0x65,0x3C};

uint32_t MessageAttrSpiritInitialize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_level_ = false;
  bool isset_lucky_value_ = false;
  bool isset_current_facade_type_ = false;
  bool isset_horse_facade_id_ = false;
  bool isset_wing_facade_id_ = false;
  bool isset_facades_ = false;
  bool isset_runes_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level_);
          isset_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lucky_value_);
          isset_lucky_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast6;
          xfer += iprot->readI32(ecast6);
          this->current_facade_type_ = ( ::entity::SpiritFacadeType::type)ecast6;
          isset_current_facade_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->horse_facade_id_);
          isset_horse_facade_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->wing_facade_id_);
          isset_wing_facade_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->facades_.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _etype10;
            xfer += iprot->readListBegin(_etype10, _size7);
            this->facades_.resize(_size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              xfer += this->facades_[_i11].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_facades_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->runes_.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->runes_.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += this->runes_[_i16].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_runes_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lucky_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_current_facade_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_horse_facade_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_wing_facade_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_facades_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_runes_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAttrSpiritInitialize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrSpiritInitialize");

  xfer += oprot->writeFieldBegin("level_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lucky_value_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->lucky_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("current_facade_type_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->current_facade_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("horse_facade_id_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->horse_facade_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wing_facade_id_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->wing_facade_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("facades_", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->facades_.size()));
    std::vector<SpiritFacadeData> ::const_iterator _iter17;
    for (_iter17 = this->facades_.begin(); _iter17 != this->facades_.end(); ++_iter17)
    {
      xfer += (*_iter17).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("runes_", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->runes_.size()));
    std::vector<SpiritRuneData> ::const_iterator _iter18;
    for (_iter18 = this->runes_.begin(); _iter18 != this->runes_.end(); ++_iter18)
    {
      xfer += (*_iter18).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrSpiritInitialize &a, MessageAttrSpiritInitialize &b) {
  using ::std::swap;
  swap(a.level_, b.level_);
  swap(a.lucky_value_, b.lucky_value_);
  swap(a.current_facade_type_, b.current_facade_type_);
  swap(a.horse_facade_id_, b.horse_facade_id_);
  swap(a.wing_facade_id_, b.wing_facade_id_);
  swap(a.facades_, b.facades_);
  swap(a.runes_, b.runes_);
}

const char* MessageAttrSpiritSynchronize::ascii_fingerprint = "4C2AB747ED401AE86A7117B807642428";
const uint8_t MessageAttrSpiritSynchronize::binary_fingerprint[16] = {0x4C,0x2A,0xB7,0x47,0xED,0x40,0x1A,0xE8,0x6A,0x71,0x17,0xB8,0x07,0x64,0x24,0x28};

uint32_t MessageAttrSpiritSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level_);
          this->__isset.level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lucky_value_);
          this->__isset.lucky_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast19;
          xfer += iprot->readI32(ecast19);
          this->current_facade_type_ = ( ::entity::SpiritFacadeType::type)ecast19;
          this->__isset.current_facade_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->horse_facade_id_);
          this->__isset.horse_facade_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->wing_facade_id_);
          this->__isset.wing_facade_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageAttrSpiritSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrSpiritSynchronize");

  if (this->__isset.level_) {
    xfer += oprot->writeFieldBegin("level_", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lucky_value_) {
    xfer += oprot->writeFieldBegin("lucky_value_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->lucky_value_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.current_facade_type_) {
    xfer += oprot->writeFieldBegin("current_facade_type_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->current_facade_type_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.horse_facade_id_) {
    xfer += oprot->writeFieldBegin("horse_facade_id_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->horse_facade_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.wing_facade_id_) {
    xfer += oprot->writeFieldBegin("wing_facade_id_", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->wing_facade_id_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrSpiritSynchronize &a, MessageAttrSpiritSynchronize &b) {
  using ::std::swap;
  swap(a.level_, b.level_);
  swap(a.lucky_value_, b.lucky_value_);
  swap(a.current_facade_type_, b.current_facade_type_);
  swap(a.horse_facade_id_, b.horse_facade_id_);
  swap(a.wing_facade_id_, b.wing_facade_id_);
  swap(a.__isset, b.__isset);
}

const char* MessageAttrSpiritFacadeSynchronize::ascii_fingerprint = "DAA93AAF37AE396A95CC0C5E62F555C1";
const uint8_t MessageAttrSpiritFacadeSynchronize::binary_fingerprint[16] = {0xDA,0xA9,0x3A,0xAF,0x37,0xAE,0x39,0x6A,0x95,0xCC,0x0C,0x5E,0x62,0xF5,0x55,0xC1};

uint32_t MessageAttrSpiritFacadeSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_facade_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast20;
          xfer += iprot->readI32(ecast20);
          this->type_ = (SpiritFacadeOperateType::type)ecast20;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->facade_.read(iprot);
          isset_facade_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_facade_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAttrSpiritFacadeSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrSpiritFacadeSynchronize");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("facade_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->facade_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrSpiritFacadeSynchronize &a, MessageAttrSpiritFacadeSynchronize &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.facade_, b.facade_);
}

const char* MessageAttrSpiritUpgradeRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageAttrSpiritUpgradeRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageAttrSpiritUpgradeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageAttrSpiritUpgradeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrSpiritUpgradeRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrSpiritUpgradeRequest &a, MessageAttrSpiritUpgradeRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageAttrSpiritUpgradeResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageAttrSpiritUpgradeResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageAttrSpiritUpgradeResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAttrSpiritUpgradeResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrSpiritUpgradeResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrSpiritUpgradeResponse &a, MessageAttrSpiritUpgradeResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageAttrSpiritTransformFacadeRequest::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t MessageAttrSpiritTransformFacadeRequest::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t MessageAttrSpiritTransformFacadeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_facade_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->facade_id_);
          isset_facade_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_facade_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAttrSpiritTransformFacadeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrSpiritTransformFacadeRequest");

  xfer += oprot->writeFieldBegin("facade_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->facade_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrSpiritTransformFacadeRequest &a, MessageAttrSpiritTransformFacadeRequest &b) {
  using ::std::swap;
  swap(a.facade_id_, b.facade_id_);
}

const char* MessageAttrSpiritTransformFacadeResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageAttrSpiritTransformFacadeResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageAttrSpiritTransformFacadeResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAttrSpiritTransformFacadeResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrSpiritTransformFacadeResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrSpiritTransformFacadeResponse &a, MessageAttrSpiritTransformFacadeResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageAttrSpiritCompareRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MessageAttrSpiritCompareRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MessageAttrSpiritCompareRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAttrSpiritCompareRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrSpiritCompareRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrSpiritCompareRequest &a, MessageAttrSpiritCompareRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
}

const char* MessageAttrSpiritCompareResponse::ascii_fingerprint = "5B57978C017404B742CCCCA4BD5DD66D";
const uint8_t MessageAttrSpiritCompareResponse::binary_fingerprint[16] = {0x5B,0x57,0x97,0x8C,0x01,0x74,0x04,0xB7,0x42,0xCC,0xCC,0xA4,0xBD,0x5D,0xD6,0x6D};

uint32_t MessageAttrSpiritCompareResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;
  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level_);
          this->__isset.level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast21;
          xfer += iprot->readI32(ecast21);
          this->current_facade_type_ = ( ::entity::SpiritFacadeType::type)ecast21;
          this->__isset.current_facade_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->horse_facade_id_);
          this->__isset.horse_facade_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->wing_facade_id_);
          this->__isset.wing_facade_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->facades_.clear();
            uint32_t _size22;
            ::apache::thrift::protocol::TType _etype25;
            xfer += iprot->readListBegin(_etype25, _size22);
            this->facades_.resize(_size22);
            uint32_t _i26;
            for (_i26 = 0; _i26 < _size22; ++_i26)
            {
              xfer += this->facades_[_i26].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.facades_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->runes_.clear();
            uint32_t _size27;
            ::apache::thrift::protocol::TType _etype30;
            xfer += iprot->readListBegin(_etype30, _size27);
            this->runes_.resize(_size27);
            uint32_t _i31;
            for (_i31 = 0; _i31 < _size27; ++_i31)
            {
              xfer += this->runes_[_i31].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.runes_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAttrSpiritCompareResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrSpiritCompareResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.level_) {
    xfer += oprot->writeFieldBegin("level_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.current_facade_type_) {
    xfer += oprot->writeFieldBegin("current_facade_type_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32((int32_t)this->current_facade_type_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.horse_facade_id_) {
    xfer += oprot->writeFieldBegin("horse_facade_id_", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->horse_facade_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.wing_facade_id_) {
    xfer += oprot->writeFieldBegin("wing_facade_id_", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->wing_facade_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.facades_) {
    xfer += oprot->writeFieldBegin("facades_", ::apache::thrift::protocol::T_LIST, 7);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->facades_.size()));
      std::vector<SpiritFacadeData> ::const_iterator _iter32;
      for (_iter32 = this->facades_.begin(); _iter32 != this->facades_.end(); ++_iter32)
      {
        xfer += (*_iter32).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.runes_) {
    xfer += oprot->writeFieldBegin("runes_", ::apache::thrift::protocol::T_LIST, 8);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->runes_.size()));
      std::vector<SpiritRuneData> ::const_iterator _iter33;
      for (_iter33 = this->runes_.begin(); _iter33 != this->runes_.end(); ++_iter33)
      {
        xfer += (*_iter33).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrSpiritCompareResponse &a, MessageAttrSpiritCompareResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.actor_id_, b.actor_id_);
  swap(a.level_, b.level_);
  swap(a.current_facade_type_, b.current_facade_type_);
  swap(a.horse_facade_id_, b.horse_facade_id_);
  swap(a.wing_facade_id_, b.wing_facade_id_);
  swap(a.facades_, b.facades_);
  swap(a.runes_, b.runes_);
  swap(a.__isset, b.__isset);
}

const char* MessageRuneComposeRequest::ascii_fingerprint = "EEBC915CE44901401D881E6091423036";
const uint8_t MessageRuneComposeRequest::binary_fingerprint[16] = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

uint32_t MessageRuneComposeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_item_id_ = false;
  bool isset_num_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->item_id_);
          isset_item_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num_);
          isset_num_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_item_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_num_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageRuneComposeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageRuneComposeRequest");

  xfer += oprot->writeFieldBegin("item_id_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->item_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->num_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageRuneComposeRequest &a, MessageRuneComposeRequest &b) {
  using ::std::swap;
  swap(a.item_id_, b.item_id_);
  swap(a.num_, b.num_);
}

const char* MessageRuneComposeResponse::ascii_fingerprint = "6435B39C87AB0E30F30BEDEFD7328C0D";
const uint8_t MessageRuneComposeResponse::binary_fingerprint[16] = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

uint32_t MessageRuneComposeResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_template_id_ = false;
  bool isset_success_num_ = false;
  bool isset_fail_num_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->template_id_);
          isset_template_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success_num_);
          isset_success_num_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->fail_num_);
          isset_fail_num_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_template_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_success_num_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fail_num_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageRuneComposeResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageRuneComposeResponse");

  xfer += oprot->writeFieldBegin("template_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->template_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("success_num_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->success_num_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fail_num_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->fail_num_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageRuneComposeResponse &a, MessageRuneComposeResponse &b) {
  using ::std::swap;
  swap(a.template_id_, b.template_id_);
  swap(a.success_num_, b.success_num_);
  swap(a.fail_num_, b.fail_num_);
}

const char* MessageRuneMoveRequest::ascii_fingerprint = "127F71BDE833E4F5BF3B092C5F09EBD1";
const uint8_t MessageRuneMoveRequest::binary_fingerprint[16] = {0x12,0x7F,0x71,0xBD,0xE8,0x33,0xE4,0xF5,0xBF,0x3B,0x09,0x2C,0x5F,0x09,0xEB,0xD1};

uint32_t MessageRuneMoveRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_src_location_ = false;
  bool isset_src_type_ = false;
  bool isset_dest_location_ = false;
  bool isset_dest_type_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->src_location_);
          isset_src_location_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast34;
          xfer += iprot->readI32(ecast34);
          this->src_type_ = (RuneMoveType::type)ecast34;
          isset_src_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->dest_location_);
          isset_dest_location_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast35;
          xfer += iprot->readI32(ecast35);
          this->dest_type_ = (RuneMoveType::type)ecast35;
          isset_dest_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_src_location_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_src_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dest_location_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dest_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageRuneMoveRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageRuneMoveRequest");

  xfer += oprot->writeFieldBegin("src_location_", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->src_location_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("src_type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->src_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dest_location_", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->dest_location_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dest_type_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->dest_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageRuneMoveRequest &a, MessageRuneMoveRequest &b) {
  using ::std::swap;
  swap(a.src_location_, b.src_location_);
  swap(a.src_type_, b.src_type_);
  swap(a.dest_location_, b.dest_location_);
  swap(a.dest_type_, b.dest_type_);
}

const char* MessageRuneMoveResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageRuneMoveResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageRuneMoveResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageRuneMoveResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageRuneMoveResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageRuneMoveResponse &a, MessageRuneMoveResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

const char* MessageRuneSynchronize::ascii_fingerprint = "9A45B17ABF10F0584B2B34A662D93AFC";
const uint8_t MessageRuneSynchronize::binary_fingerprint[16] = {0x9A,0x45,0xB1,0x7A,0xBF,0x10,0xF0,0x58,0x4B,0x2B,0x34,0xA6,0x62,0xD9,0x3A,0xFC};

uint32_t MessageRuneSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_data_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data_.read(iprot);
          isset_data_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_data_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageRuneSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageRuneSynchronize");

  xfer += oprot->writeFieldBegin("data_", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->data_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageRuneSynchronize &a, MessageRuneSynchronize &b) {
  using ::std::swap;
  swap(a.data_, b.data_);
}

const char* LegendaryWeaponData::ascii_fingerprint = "ACBC8ECF4940BD768FA35CCD08154770";
const uint8_t LegendaryWeaponData::binary_fingerprint[16] = {0xAC,0xBC,0x8E,0xCF,0x49,0x40,0xBD,0x76,0x8F,0xA3,0x5C,0xCD,0x08,0x15,0x47,0x70};

uint32_t LegendaryWeaponData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;
  bool isset_pieces_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->pieces_.clear();
            uint32_t _size36;
            ::apache::thrift::protocol::TType _etype39;
            xfer += iprot->readListBegin(_etype39, _size36);
            this->pieces_.resize(_size36);
            uint32_t _i40;
            for (_i40 = 0; _i40 < _size36; ++_i40)
            {
              xfer += iprot->readI32(this->pieces_[_i40]);
            }
            xfer += iprot->readListEnd();
          }
          isset_pieces_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pieces_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LegendaryWeaponData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LegendaryWeaponData");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pieces_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->pieces_.size()));
    std::vector<int32_t> ::const_iterator _iter41;
    for (_iter41 = this->pieces_.begin(); _iter41 != this->pieces_.end(); ++_iter41)
    {
      xfer += oprot->writeI32((*_iter41));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LegendaryWeaponData &a, LegendaryWeaponData &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.pieces_, b.pieces_);
}

const char* MessageAttrLegendaryWeaponInitialize::ascii_fingerprint = "6C6BD4E5CAE99738C975BFD2E5000B63";
const uint8_t MessageAttrLegendaryWeaponInitialize::binary_fingerprint[16] = {0x6C,0x6B,0xD4,0xE5,0xCA,0xE9,0x97,0x38,0xC9,0x75,0xBF,0xD2,0xE5,0x00,0x0B,0x63};

uint32_t MessageAttrLegendaryWeaponInitialize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_weapons_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->weapons_.clear();
            uint32_t _size42;
            ::apache::thrift::protocol::TType _etype45;
            xfer += iprot->readListBegin(_etype45, _size42);
            this->weapons_.resize(_size42);
            uint32_t _i46;
            for (_i46 = 0; _i46 < _size42; ++_i46)
            {
              xfer += this->weapons_[_i46].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_weapons_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_weapons_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAttrLegendaryWeaponInitialize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrLegendaryWeaponInitialize");

  xfer += oprot->writeFieldBegin("weapons_", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->weapons_.size()));
    std::vector<LegendaryWeaponData> ::const_iterator _iter47;
    for (_iter47 = this->weapons_.begin(); _iter47 != this->weapons_.end(); ++_iter47)
    {
      xfer += (*_iter47).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrLegendaryWeaponInitialize &a, MessageAttrLegendaryWeaponInitialize &b) {
  using ::std::swap;
  swap(a.weapons_, b.weapons_);
}

const char* MessageAttrLegendaryWeaponPieceSynchronize::ascii_fingerprint = "6435B39C87AB0E30F30BEDEFD7328C0D";
const uint8_t MessageAttrLegendaryWeaponPieceSynchronize::binary_fingerprint[16] = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

uint32_t MessageAttrLegendaryWeaponPieceSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_weapon_id_ = false;
  bool isset_piece_index_ = false;
  bool isset_piece_count_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->weapon_id_);
          isset_weapon_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->piece_index_);
          isset_piece_index_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->piece_count_);
          isset_piece_count_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_weapon_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_piece_index_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_piece_count_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAttrLegendaryWeaponPieceSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrLegendaryWeaponPieceSynchronize");

  xfer += oprot->writeFieldBegin("weapon_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->weapon_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("piece_index_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->piece_index_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("piece_count_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->piece_count_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrLegendaryWeaponPieceSynchronize &a, MessageAttrLegendaryWeaponPieceSynchronize &b) {
  using ::std::swap;
  swap(a.weapon_id_, b.weapon_id_);
  swap(a.piece_index_, b.piece_index_);
  swap(a.piece_count_, b.piece_count_);
}

const char* LegendaryWeaponRepairData::ascii_fingerprint = "6435B39C87AB0E30F30BEDEFD7328C0D";
const uint8_t LegendaryWeaponRepairData::binary_fingerprint[16] = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

uint32_t LegendaryWeaponRepairData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_weapon_id_ = false;
  bool isset_piece_index_ = false;
  bool isset_use_item_count_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->weapon_id_);
          isset_weapon_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->piece_index_);
          isset_piece_index_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->use_item_count_);
          isset_use_item_count_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_weapon_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_piece_index_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_use_item_count_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LegendaryWeaponRepairData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LegendaryWeaponRepairData");

  xfer += oprot->writeFieldBegin("weapon_id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->weapon_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("piece_index_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->piece_index_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("use_item_count_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->use_item_count_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LegendaryWeaponRepairData &a, LegendaryWeaponRepairData &b) {
  using ::std::swap;
  swap(a.weapon_id_, b.weapon_id_);
  swap(a.piece_index_, b.piece_index_);
  swap(a.use_item_count_, b.use_item_count_);
}

const char* MessageAttrLegendaryWeaponRepairRequest::ascii_fingerprint = "472B8583FB07D1D9EA40FEBBDE10B800";
const uint8_t MessageAttrLegendaryWeaponRepairRequest::binary_fingerprint[16] = {0x47,0x2B,0x85,0x83,0xFB,0x07,0xD1,0xD9,0xEA,0x40,0xFE,0xBB,0xDE,0x10,0xB8,0x00};

uint32_t MessageAttrLegendaryWeaponRepairRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_targets_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->targets_.clear();
            uint32_t _size48;
            ::apache::thrift::protocol::TType _etype51;
            xfer += iprot->readListBegin(_etype51, _size48);
            this->targets_.resize(_size48);
            uint32_t _i52;
            for (_i52 = 0; _i52 < _size48; ++_i52)
            {
              xfer += this->targets_[_i52].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_targets_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_targets_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAttrLegendaryWeaponRepairRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrLegendaryWeaponRepairRequest");

  xfer += oprot->writeFieldBegin("targets_", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->targets_.size()));
    std::vector<LegendaryWeaponRepairData> ::const_iterator _iter53;
    for (_iter53 = this->targets_.begin(); _iter53 != this->targets_.end(); ++_iter53)
    {
      xfer += (*_iter53).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrLegendaryWeaponRepairRequest &a, MessageAttrLegendaryWeaponRepairRequest &b) {
  using ::std::swap;
  swap(a.targets_, b.targets_);
}

const char* MessageAttrLegendaryWeaponRepairResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageAttrLegendaryWeaponRepairResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageAttrLegendaryWeaponRepairResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAttrLegendaryWeaponRepairResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAttrLegendaryWeaponRepairResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAttrLegendaryWeaponRepairResponse &a, MessageAttrLegendaryWeaponRepairResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
}

}} // namespace
