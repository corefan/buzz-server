/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef gateway_mall_protocol_TYPES_H
#define gateway_mall_protocol_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "gateway_protocol_types.h"
#include "mall_types.h"


namespace gateway { namespace protocol {


class MessageMallBuyRequest {
 public:

  static const char* ascii_fingerprint; // = "B94D7C521D8FC4C01D1032D514A8E471";
  static const uint8_t binary_fingerprint[16]; // = {0xB9,0x4D,0x7C,0x52,0x1D,0x8F,0xC4,0xC0,0x1D,0x10,0x32,0xD5,0x14,0xA8,0xE4,0x71};

  MessageMallBuyRequest() : shop_type_(( ::entity::MallTreasureType::type)0), tab_(0), pos_(0), use_type_(( ::entity::MallUseType::type)0), num_(0) {
  }

  virtual ~MessageMallBuyRequest() throw() {}

   ::entity::MallTreasureType::type shop_type_;
  int8_t tab_;
  int8_t pos_;
   ::entity::MallUseType::type use_type_;
  int32_t num_;

  void __set_shop_type_(const  ::entity::MallTreasureType::type val) {
    shop_type_ = val;
  }

  void __set_tab_(const int8_t val) {
    tab_ = val;
  }

  void __set_pos_(const int8_t val) {
    pos_ = val;
  }

  void __set_use_type_(const  ::entity::MallUseType::type val) {
    use_type_ = val;
  }

  void __set_num_(const int32_t val) {
    num_ = val;
  }

  bool operator == (const MessageMallBuyRequest & rhs) const
  {
    if (!(shop_type_ == rhs.shop_type_))
      return false;
    if (!(tab_ == rhs.tab_))
      return false;
    if (!(pos_ == rhs.pos_))
      return false;
    if (!(use_type_ == rhs.use_type_))
      return false;
    if (!(num_ == rhs.num_))
      return false;
    return true;
  }
  bool operator != (const MessageMallBuyRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageMallBuyRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageMallBuyRequest &a, MessageMallBuyRequest &b);


class MessageMallBuyResponse {
 public:

  static const char* ascii_fingerprint; // = "862C33AD77120C5F65582C09FC56AFEF";
  static const uint8_t binary_fingerprint[16]; // = {0x86,0x2C,0x33,0xAD,0x77,0x12,0x0C,0x5F,0x65,0x58,0x2C,0x09,0xFC,0x56,0xAF,0xEF};

  MessageMallBuyResponse() : use_type_(( ::entity::MallUseType::type)0), id_(0), num_(0), shop_type_(( ::entity::MallTreasureType::type)0) {
  }

  virtual ~MessageMallBuyResponse() throw() {}

   ::entity::MallUseType::type use_type_;
  int32_t id_;
  int32_t num_;
   ::entity::MallTreasureType::type shop_type_;

  void __set_use_type_(const  ::entity::MallUseType::type val) {
    use_type_ = val;
  }

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  void __set_num_(const int32_t val) {
    num_ = val;
  }

  void __set_shop_type_(const  ::entity::MallTreasureType::type val) {
    shop_type_ = val;
  }

  bool operator == (const MessageMallBuyResponse & rhs) const
  {
    if (!(use_type_ == rhs.use_type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(num_ == rhs.num_))
      return false;
    if (!(shop_type_ == rhs.shop_type_))
      return false;
    return true;
  }
  bool operator != (const MessageMallBuyResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageMallBuyResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageMallBuyResponse &a, MessageMallBuyResponse &b);


class MessageMallSynchronize {
 public:

  static const char* ascii_fingerprint; // = "92439E0DEE83A2751834B263FA07411D";
  static const uint8_t binary_fingerprint[16]; // = {0x92,0x43,0x9E,0x0D,0xEE,0x83,0xA2,0x75,0x18,0x34,0xB2,0x63,0xFA,0x07,0x41,0x1D};

  MessageMallSynchronize() {
  }

  virtual ~MessageMallSynchronize() throw() {}

  std::vector< ::entity::MallTreasureCell>  cells_;

  void __set_cells_(const std::vector< ::entity::MallTreasureCell> & val) {
    cells_ = val;
  }

  bool operator == (const MessageMallSynchronize & rhs) const
  {
    if (!(cells_ == rhs.cells_))
      return false;
    return true;
  }
  bool operator != (const MessageMallSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageMallSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageMallSynchronize &a, MessageMallSynchronize &b);


class MessageMallItemBuyNumInitialize {
 public:

  static const char* ascii_fingerprint; // = "2F9B604E54610FE2F0CD6865A57000F9";
  static const uint8_t binary_fingerprint[16]; // = {0x2F,0x9B,0x60,0x4E,0x54,0x61,0x0F,0xE2,0xF0,0xCD,0x68,0x65,0xA5,0x70,0x00,0xF9};

  MessageMallItemBuyNumInitialize() {
  }

  virtual ~MessageMallItemBuyNumInitialize() throw() {}

  std::vector< ::entity::MallReasureBuyNum>  buys_;

  void __set_buys_(const std::vector< ::entity::MallReasureBuyNum> & val) {
    buys_ = val;
  }

  bool operator == (const MessageMallItemBuyNumInitialize & rhs) const
  {
    if (!(buys_ == rhs.buys_))
      return false;
    return true;
  }
  bool operator != (const MessageMallItemBuyNumInitialize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageMallItemBuyNumInitialize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageMallItemBuyNumInitialize &a, MessageMallItemBuyNumInitialize &b);

}} // namespace

#endif
