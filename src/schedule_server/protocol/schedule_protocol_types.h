/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef schedule_protocol_TYPES_H
#define schedule_protocol_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "server_type_types.h"


namespace schedule { namespace protocol {

struct MessageType {
  enum type {
    MESSAGE_MIN = 0,
    MESSAGE_LOGIN_REQUEST = 0,
    MESSAGE_LOGIN_RESPONSE = 1,
    MESSAGE_LOGIN_BROADCAST = 2,
    MESSAGE_LOGOUT_REQUEST = 3,
    MESSAGE_LOGOUT_RESPONSE = 4,
    MESSAGE_LOGOUT_BROADCAST = 5,
    MESSAGE_GATEWAY_USER_NUMBER_UPLOAD = 6,
    MESSAGE_GATEWAY_USER_NUMBER_BROADCAST = 7,
    MESSAGE_MAX = 8
  };
};

extern const std::map<int, const char*> _MessageType_VALUES_TO_NAMES;


class Message {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  Message() : type_((MessageType::type)0), message_() {
  }

  virtual ~Message() throw() {}

  MessageType::type type_;
  std::string message_;

  void __set_type_(const MessageType::type val) {
    type_ = val;
  }

  void __set_message_(const std::string& val) {
    message_ = val;
  }

  bool operator == (const Message & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(message_ == rhs.message_))
      return false;
    return true;
  }
  bool operator != (const Message &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Message & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Message &a, Message &b);


class MessageLoginRequest {
 public:

  static const char* ascii_fingerprint; // = "C0F29BB444E710C0575C3986968CD840";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0xF2,0x9B,0xB4,0x44,0xE7,0x10,0xC0,0x57,0x5C,0x39,0x86,0x96,0x8C,0xD8,0x40};

  MessageLoginRequest() {
  }

  virtual ~MessageLoginRequest() throw() {}

   ::global::protocol::ServerSignature signature_;

  void __set_signature_(const  ::global::protocol::ServerSignature& val) {
    signature_ = val;
  }

  bool operator == (const MessageLoginRequest & rhs) const
  {
    if (!(signature_ == rhs.signature_))
      return false;
    return true;
  }
  bool operator != (const MessageLoginRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageLoginRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageLoginRequest &a, MessageLoginRequest &b);


class MessageLoginResponse {
 public:

  static const char* ascii_fingerprint; // = "D4885E071DE3DB4B501FB77D4BDF25CA";
  static const uint8_t binary_fingerprint[16]; // = {0xD4,0x88,0x5E,0x07,0x1D,0xE3,0xDB,0x4B,0x50,0x1F,0xB7,0x7D,0x4B,0xDF,0x25,0xCA};

  MessageLoginResponse() : logined_(0) {
  }

  virtual ~MessageLoginResponse() throw() {}

  bool logined_;
  std::vector< ::global::protocol::ServerSignature>  servers_;

  void __set_logined_(const bool val) {
    logined_ = val;
  }

  void __set_servers_(const std::vector< ::global::protocol::ServerSignature> & val) {
    servers_ = val;
  }

  bool operator == (const MessageLoginResponse & rhs) const
  {
    if (!(logined_ == rhs.logined_))
      return false;
    if (!(servers_ == rhs.servers_))
      return false;
    return true;
  }
  bool operator != (const MessageLoginResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageLoginResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageLoginResponse &a, MessageLoginResponse &b);


class MessageLoginBroadcast {
 public:

  static const char* ascii_fingerprint; // = "C0F29BB444E710C0575C3986968CD840";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0xF2,0x9B,0xB4,0x44,0xE7,0x10,0xC0,0x57,0x5C,0x39,0x86,0x96,0x8C,0xD8,0x40};

  MessageLoginBroadcast() {
  }

  virtual ~MessageLoginBroadcast() throw() {}

   ::global::protocol::ServerSignature signature_;

  void __set_signature_(const  ::global::protocol::ServerSignature& val) {
    signature_ = val;
  }

  bool operator == (const MessageLoginBroadcast & rhs) const
  {
    if (!(signature_ == rhs.signature_))
      return false;
    return true;
  }
  bool operator != (const MessageLoginBroadcast &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageLoginBroadcast & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageLoginBroadcast &a, MessageLoginBroadcast &b);


class MessageLogoutRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageLogoutRequest() {
  }

  virtual ~MessageLogoutRequest() throw() {}


  bool operator == (const MessageLogoutRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageLogoutRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageLogoutRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageLogoutRequest &a, MessageLogoutRequest &b);


class MessageLogoutResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageLogoutResponse() : logouted_(0) {
  }

  virtual ~MessageLogoutResponse() throw() {}

  bool logouted_;

  void __set_logouted_(const bool val) {
    logouted_ = val;
  }

  bool operator == (const MessageLogoutResponse & rhs) const
  {
    if (!(logouted_ == rhs.logouted_))
      return false;
    return true;
  }
  bool operator != (const MessageLogoutResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageLogoutResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageLogoutResponse &a, MessageLogoutResponse &b);


class MessageLogoutBroadcast {
 public:

  static const char* ascii_fingerprint; // = "46A703A33337BED2F62F386FC66B2A5F";
  static const uint8_t binary_fingerprint[16]; // = {0x46,0xA7,0x03,0xA3,0x33,0x37,0xBE,0xD2,0xF6,0x2F,0x38,0x6F,0xC6,0x6B,0x2A,0x5F};

  MessageLogoutBroadcast() : type_(( ::global::protocol::ServerType::type)0), id_(0) {
  }

  virtual ~MessageLogoutBroadcast() throw() {}

   ::global::protocol::ServerType::type type_;
  int32_t id_;

  void __set_type_(const  ::global::protocol::ServerType::type val) {
    type_ = val;
  }

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  bool operator == (const MessageLogoutBroadcast & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const MessageLogoutBroadcast &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageLogoutBroadcast & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageLogoutBroadcast &a, MessageLogoutBroadcast &b);


class MessageGatewayUserNumberUpload {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MessageGatewayUserNumberUpload() : number_(0) {
  }

  virtual ~MessageGatewayUserNumberUpload() throw() {}

  int32_t number_;

  void __set_number_(const int32_t val) {
    number_ = val;
  }

  bool operator == (const MessageGatewayUserNumberUpload & rhs) const
  {
    if (!(number_ == rhs.number_))
      return false;
    return true;
  }
  bool operator != (const MessageGatewayUserNumberUpload &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageGatewayUserNumberUpload & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageGatewayUserNumberUpload &a, MessageGatewayUserNumberUpload &b);


class MessageGatewayUserNumberBroadcast {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  MessageGatewayUserNumberBroadcast() : server_id_(0), number_(0) {
  }

  virtual ~MessageGatewayUserNumberBroadcast() throw() {}

  int32_t server_id_;
  int32_t number_;

  void __set_server_id_(const int32_t val) {
    server_id_ = val;
  }

  void __set_number_(const int32_t val) {
    number_ = val;
  }

  bool operator == (const MessageGatewayUserNumberBroadcast & rhs) const
  {
    if (!(server_id_ == rhs.server_id_))
      return false;
    if (!(number_ == rhs.number_))
      return false;
    return true;
  }
  bool operator != (const MessageGatewayUserNumberBroadcast &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageGatewayUserNumberBroadcast & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageGatewayUserNumberBroadcast &a, MessageGatewayUserNumberBroadcast &b);

}} // namespace

#endif
