/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef session_playing_request_TYPES_H
#define session_playing_request_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "session_request_types.h"


namespace session { namespace server { namespace request {


class RequestPlayingActorConnectInfo {
 public:

  static const char* ascii_fingerprint; // = "37E83EB5F8F9ABE2473651E6C51F0AB9";
  static const uint8_t binary_fingerprint[16]; // = {0x37,0xE8,0x3E,0xB5,0xF8,0xF9,0xAB,0xE2,0x47,0x36,0x51,0xE6,0xC5,0x1F,0x0A,0xB9};

  RequestPlayingActorConnectInfo() : req_actor_(0), ret_playing_(0), ret_playing_template_(0), ret_scene_(0), ret_online_back_to_(0) {
  }

  virtual ~RequestPlayingActorConnectInfo() throw() {}

  int64_t req_actor_;
  int32_t ret_playing_;
  int32_t ret_playing_template_;
  int64_t ret_scene_;
  bool ret_online_back_to_;

  void __set_req_actor_(const int64_t val) {
    req_actor_ = val;
  }

  void __set_ret_playing_(const int32_t val) {
    ret_playing_ = val;
  }

  void __set_ret_playing_template_(const int32_t val) {
    ret_playing_template_ = val;
  }

  void __set_ret_scene_(const int64_t val) {
    ret_scene_ = val;
  }

  void __set_ret_online_back_to_(const bool val) {
    ret_online_back_to_ = val;
  }

  bool operator == (const RequestPlayingActorConnectInfo & rhs) const
  {
    if (!(req_actor_ == rhs.req_actor_))
      return false;
    if (!(ret_playing_ == rhs.ret_playing_))
      return false;
    if (!(ret_playing_template_ == rhs.ret_playing_template_))
      return false;
    if (!(ret_scene_ == rhs.ret_scene_))
      return false;
    if (!(ret_online_back_to_ == rhs.ret_online_back_to_))
      return false;
    return true;
  }
  bool operator != (const RequestPlayingActorConnectInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestPlayingActorConnectInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestPlayingActorConnectInfo &a, RequestPlayingActorConnectInfo &b);

}}} // namespace

#endif
