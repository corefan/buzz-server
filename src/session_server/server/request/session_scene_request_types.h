/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef session_scene_request_TYPES_H
#define session_scene_request_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "session_request_types.h"


namespace session { namespace server { namespace request {


class RequestGetMapSceneID {
 public:

  static const char* ascii_fingerprint; // = "C25B226C0437EA93A910AE3DEFEFCBF8";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0x5B,0x22,0x6C,0x04,0x37,0xEA,0x93,0xA9,0x10,0xAE,0x3D,0xEF,0xEF,0xCB,0xF8};

  RequestGetMapSceneID() : map_(0), scene_(0) {
  }

  virtual ~RequestGetMapSceneID() throw() {}

  int16_t map_;
  int64_t scene_;

  void __set_map_(const int16_t val) {
    map_ = val;
  }

  void __set_scene_(const int64_t val) {
    scene_ = val;
  }

  bool operator == (const RequestGetMapSceneID & rhs) const
  {
    if (!(map_ == rhs.map_))
      return false;
    if (!(scene_ == rhs.scene_))
      return false;
    return true;
  }
  bool operator != (const RequestGetMapSceneID &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestGetMapSceneID & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestGetMapSceneID &a, RequestGetMapSceneID &b);


class RequestSceneGetActors {
 public:

  static const char* ascii_fingerprint; // = "955BD89722154769CC8FC8E9E0AB6CC2";
  static const uint8_t binary_fingerprint[16]; // = {0x95,0x5B,0xD8,0x97,0x22,0x15,0x47,0x69,0xCC,0x8F,0xC8,0xE9,0xE0,0xAB,0x6C,0xC2};

  RequestSceneGetActors() : scene_(0) {
  }

  virtual ~RequestSceneGetActors() throw() {}

  int64_t scene_;
  std::vector<int64_t>  actors_;

  void __set_scene_(const int64_t val) {
    scene_ = val;
  }

  void __set_actors_(const std::vector<int64_t> & val) {
    actors_ = val;
  }

  bool operator == (const RequestSceneGetActors & rhs) const
  {
    if (!(scene_ == rhs.scene_))
      return false;
    if (!(actors_ == rhs.actors_))
      return false;
    return true;
  }
  bool operator != (const RequestSceneGetActors &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestSceneGetActors & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestSceneGetActors &a, RequestSceneGetActors &b);

typedef struct _RequestSceneGetGameServer__isset {
  _RequestSceneGetGameServer__isset() : map_(false), scene_(false) {}
  bool map_;
  bool scene_;
} _RequestSceneGetGameServer__isset;

class RequestSceneGetGameServer {
 public:

  static const char* ascii_fingerprint; // = "E7669AFF46528A9447E650179B9D9650";
  static const uint8_t binary_fingerprint[16]; // = {0xE7,0x66,0x9A,0xFF,0x46,0x52,0x8A,0x94,0x47,0xE6,0x50,0x17,0x9B,0x9D,0x96,0x50};

  RequestSceneGetGameServer() : map_(0), scene_(0), game_server_(0) {
  }

  virtual ~RequestSceneGetGameServer() throw() {}

  int32_t map_;
  int64_t scene_;
  int32_t game_server_;

  _RequestSceneGetGameServer__isset __isset;

  void __set_map_(const int32_t val) {
    map_ = val;
    __isset.map_ = true;
  }

  void __set_scene_(const int64_t val) {
    scene_ = val;
    __isset.scene_ = true;
  }

  void __set_game_server_(const int32_t val) {
    game_server_ = val;
  }

  bool operator == (const RequestSceneGetGameServer & rhs) const
  {
    if (__isset.map_ != rhs.__isset.map_)
      return false;
    else if (__isset.map_ && !(map_ == rhs.map_))
      return false;
    if (__isset.scene_ != rhs.__isset.scene_)
      return false;
    else if (__isset.scene_ && !(scene_ == rhs.scene_))
      return false;
    if (!(game_server_ == rhs.game_server_))
      return false;
    return true;
  }
  bool operator != (const RequestSceneGetGameServer &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestSceneGetGameServer & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestSceneGetGameServer &a, RequestSceneGetGameServer &b);

typedef struct _RequestSceneJump__isset {
  _RequestSceneJump__isset() : map_(false), scene_(false) {}
  bool map_;
  bool scene_;
} _RequestSceneJump__isset;

class RequestSceneJump {
 public:

  static const char* ascii_fingerprint; // = "77A5D94A61527F74AD8E7DE996B19F9E";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0xA5,0xD9,0x4A,0x61,0x52,0x7F,0x74,0xAD,0x8E,0x7D,0xE9,0x96,0xB1,0x9F,0x9E};

  RequestSceneJump() : actor_(0), map_(0), scene_(0), x_(0), y_(0) {
  }

  virtual ~RequestSceneJump() throw() {}

  int64_t actor_;
  int32_t map_;
  int64_t scene_;
  int32_t x_;
  int32_t y_;

  _RequestSceneJump__isset __isset;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_map_(const int32_t val) {
    map_ = val;
    __isset.map_ = true;
  }

  void __set_scene_(const int64_t val) {
    scene_ = val;
    __isset.scene_ = true;
  }

  void __set_x_(const int32_t val) {
    x_ = val;
  }

  void __set_y_(const int32_t val) {
    y_ = val;
  }

  bool operator == (const RequestSceneJump & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (__isset.map_ != rhs.__isset.map_)
      return false;
    else if (__isset.map_ && !(map_ == rhs.map_))
      return false;
    if (__isset.scene_ != rhs.__isset.scene_)
      return false;
    else if (__isset.scene_ && !(scene_ == rhs.scene_))
      return false;
    if (!(x_ == rhs.x_))
      return false;
    if (!(y_ == rhs.y_))
      return false;
    return true;
  }
  bool operator != (const RequestSceneJump &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestSceneJump & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestSceneJump &a, RequestSceneJump &b);

}}} // namespace

#endif
