/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef session_guild_request_TYPES_H
#define session_guild_request_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "session_request_types.h"


namespace session { namespace server { namespace request {

struct GuildAttributeType {
  enum type {
    MIN = 0,
    LIGHT = 0,
    DARK = 1,
    HOLY = 2,
    MAX = 3
  };
};

extern const std::map<int, const char*> _GuildAttributeType_VALUES_TO_NAMES;


class RequestGuildGetID {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  RequestGuildGetID() : actor_id_(0), guild_id_(0) {
  }

  virtual ~RequestGuildGetID() throw() {}

  int64_t actor_id_;
  int32_t guild_id_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_guild_id_(const int32_t val) {
    guild_id_ = val;
  }

  bool operator == (const RequestGuildGetID & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(guild_id_ == rhs.guild_id_))
      return false;
    return true;
  }
  bool operator != (const RequestGuildGetID &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestGuildGetID & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestGuildGetID &a, RequestGuildGetID &b);


class RequestGuildAddContribution {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  RequestGuildAddContribution() : actor_id_(0), contribution_(0) {
  }

  virtual ~RequestGuildAddContribution() throw() {}

  int64_t actor_id_;
  int32_t contribution_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_contribution_(const int32_t val) {
    contribution_ = val;
  }

  bool operator == (const RequestGuildAddContribution & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(contribution_ == rhs.contribution_))
      return false;
    return true;
  }
  bool operator != (const RequestGuildAddContribution &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestGuildAddContribution & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestGuildAddContribution &a, RequestGuildAddContribution &b);


class RequestGuildCheckAuthorityChat {
 public:

  static const char* ascii_fingerprint; // = "25038F937443AC9A2A06CEE5209E41BF";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x03,0x8F,0x93,0x74,0x43,0xAC,0x9A,0x2A,0x06,0xCE,0xE5,0x20,0x9E,0x41,0xBF};

  RequestGuildCheckAuthorityChat() : actor_id_(0), result_(0) {
  }

  virtual ~RequestGuildCheckAuthorityChat() throw() {}

  int64_t actor_id_;
  bool result_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const RequestGuildCheckAuthorityChat & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const RequestGuildCheckAuthorityChat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestGuildCheckAuthorityChat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestGuildCheckAuthorityChat &a, RequestGuildCheckAuthorityChat &b);

typedef struct _RequestGuildAddAttribute__isset {
  _RequestGuildAddAttribute__isset() : guild_id_(false), actor_id_(false) {}
  bool guild_id_;
  bool actor_id_;
} _RequestGuildAddAttribute__isset;

class RequestGuildAddAttribute {
 public:

  static const char* ascii_fingerprint; // = "DCBA6FFE5A5496209C85ECF0B8CCD810";
  static const uint8_t binary_fingerprint[16]; // = {0xDC,0xBA,0x6F,0xFE,0x5A,0x54,0x96,0x20,0x9C,0x85,0xEC,0xF0,0xB8,0xCC,0xD8,0x10};

  RequestGuildAddAttribute() : guild_id_(0), actor_id_(0), type_((GuildAttributeType::type)0), value_(0) {
  }

  virtual ~RequestGuildAddAttribute() throw() {}

  int64_t guild_id_;
  int64_t actor_id_;
  GuildAttributeType::type type_;
  int32_t value_;

  _RequestGuildAddAttribute__isset __isset;

  void __set_guild_id_(const int64_t val) {
    guild_id_ = val;
    __isset.guild_id_ = true;
  }

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
    __isset.actor_id_ = true;
  }

  void __set_type_(const GuildAttributeType::type val) {
    type_ = val;
  }

  void __set_value_(const int32_t val) {
    value_ = val;
  }

  bool operator == (const RequestGuildAddAttribute & rhs) const
  {
    if (__isset.guild_id_ != rhs.__isset.guild_id_)
      return false;
    else if (__isset.guild_id_ && !(guild_id_ == rhs.guild_id_))
      return false;
    if (__isset.actor_id_ != rhs.__isset.actor_id_)
      return false;
    else if (__isset.actor_id_ && !(actor_id_ == rhs.actor_id_))
      return false;
    if (!(type_ == rhs.type_))
      return false;
    if (!(value_ == rhs.value_))
      return false;
    return true;
  }
  bool operator != (const RequestGuildAddAttribute &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestGuildAddAttribute & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestGuildAddAttribute &a, RequestGuildAddAttribute &b);


class RequestGuildGetMembers {
 public:

  static const char* ascii_fingerprint; // = "955BD89722154769CC8FC8E9E0AB6CC2";
  static const uint8_t binary_fingerprint[16]; // = {0x95,0x5B,0xD8,0x97,0x22,0x15,0x47,0x69,0xCC,0x8F,0xC8,0xE9,0xE0,0xAB,0x6C,0xC2};

  RequestGuildGetMembers() : actor_id_(0) {
  }

  virtual ~RequestGuildGetMembers() throw() {}

  int64_t actor_id_;
  std::vector<int64_t>  members_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_members_(const std::vector<int64_t> & val) {
    members_ = val;
  }

  bool operator == (const RequestGuildGetMembers & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(members_ == rhs.members_))
      return false;
    return true;
  }
  bool operator != (const RequestGuildGetMembers &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestGuildGetMembers & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestGuildGetMembers &a, RequestGuildGetMembers &b);


class RequestGuildCheckCanCreatePlaying {
 public:

  static const char* ascii_fingerprint; // = "3495A4F4FB8ADC7B81D6DE532D320E88";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0x95,0xA4,0xF4,0xFB,0x8A,0xDC,0x7B,0x81,0xD6,0xDE,0x53,0x2D,0x32,0x0E,0x88};

  RequestGuildCheckCanCreatePlaying() : actor_id_(0), playing_template_id_(0), result_(0) {
  }

  virtual ~RequestGuildCheckCanCreatePlaying() throw() {}

  int64_t actor_id_;
  int32_t playing_template_id_;
  bool result_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_playing_template_id_(const int32_t val) {
    playing_template_id_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const RequestGuildCheckCanCreatePlaying & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(playing_template_id_ == rhs.playing_template_id_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const RequestGuildCheckCanCreatePlaying &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestGuildCheckCanCreatePlaying & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestGuildCheckCanCreatePlaying &a, RequestGuildCheckCanCreatePlaying &b);

typedef struct _RequestGuildGetCurrentPlaying__isset {
  _RequestGuildGetCurrentPlaying__isset() : guild_id_(false), actor_id_(false) {}
  bool guild_id_;
  bool actor_id_;
} _RequestGuildGetCurrentPlaying__isset;

class RequestGuildGetCurrentPlaying {
 public:

  static const char* ascii_fingerprint; // = "0582EA437327B57E3C66E07BC593858E";
  static const uint8_t binary_fingerprint[16]; // = {0x05,0x82,0xEA,0x43,0x73,0x27,0xB5,0x7E,0x3C,0x66,0xE0,0x7B,0xC5,0x93,0x85,0x8E};

  RequestGuildGetCurrentPlaying() : guild_id_(0), actor_id_(0), playing_id_(0), playing_template_id_(0) {
  }

  virtual ~RequestGuildGetCurrentPlaying() throw() {}

  int64_t guild_id_;
  int64_t actor_id_;
  int64_t playing_id_;
  int32_t playing_template_id_;

  _RequestGuildGetCurrentPlaying__isset __isset;

  void __set_guild_id_(const int64_t val) {
    guild_id_ = val;
    __isset.guild_id_ = true;
  }

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
    __isset.actor_id_ = true;
  }

  void __set_playing_id_(const int64_t val) {
    playing_id_ = val;
  }

  void __set_playing_template_id_(const int32_t val) {
    playing_template_id_ = val;
  }

  bool operator == (const RequestGuildGetCurrentPlaying & rhs) const
  {
    if (__isset.guild_id_ != rhs.__isset.guild_id_)
      return false;
    else if (__isset.guild_id_ && !(guild_id_ == rhs.guild_id_))
      return false;
    if (__isset.actor_id_ != rhs.__isset.actor_id_)
      return false;
    else if (__isset.actor_id_ && !(actor_id_ == rhs.actor_id_))
      return false;
    if (!(playing_id_ == rhs.playing_id_))
      return false;
    if (!(playing_template_id_ == rhs.playing_template_id_))
      return false;
    return true;
  }
  bool operator != (const RequestGuildGetCurrentPlaying &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestGuildGetCurrentPlaying & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestGuildGetCurrentPlaying &a, RequestGuildGetCurrentPlaying &b);

typedef struct _RequestGuildSetCurrentPlaying__isset {
  _RequestGuildSetCurrentPlaying__isset() : guild_id_(false), actor_id_(false) {}
  bool guild_id_;
  bool actor_id_;
} _RequestGuildSetCurrentPlaying__isset;

class RequestGuildSetCurrentPlaying {
 public:

  static const char* ascii_fingerprint; // = "0582EA437327B57E3C66E07BC593858E";
  static const uint8_t binary_fingerprint[16]; // = {0x05,0x82,0xEA,0x43,0x73,0x27,0xB5,0x7E,0x3C,0x66,0xE0,0x7B,0xC5,0x93,0x85,0x8E};

  RequestGuildSetCurrentPlaying() : guild_id_(0), actor_id_(0), playing_id_(0), playing_template_id_(0) {
  }

  virtual ~RequestGuildSetCurrentPlaying() throw() {}

  int64_t guild_id_;
  int64_t actor_id_;
  int64_t playing_id_;
  int32_t playing_template_id_;

  _RequestGuildSetCurrentPlaying__isset __isset;

  void __set_guild_id_(const int64_t val) {
    guild_id_ = val;
    __isset.guild_id_ = true;
  }

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
    __isset.actor_id_ = true;
  }

  void __set_playing_id_(const int64_t val) {
    playing_id_ = val;
  }

  void __set_playing_template_id_(const int32_t val) {
    playing_template_id_ = val;
  }

  bool operator == (const RequestGuildSetCurrentPlaying & rhs) const
  {
    if (__isset.guild_id_ != rhs.__isset.guild_id_)
      return false;
    else if (__isset.guild_id_ && !(guild_id_ == rhs.guild_id_))
      return false;
    if (__isset.actor_id_ != rhs.__isset.actor_id_)
      return false;
    else if (__isset.actor_id_ && !(actor_id_ == rhs.actor_id_))
      return false;
    if (!(playing_id_ == rhs.playing_id_))
      return false;
    if (!(playing_template_id_ == rhs.playing_template_id_))
      return false;
    return true;
  }
  bool operator != (const RequestGuildSetCurrentPlaying &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestGuildSetCurrentPlaying & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestGuildSetCurrentPlaying &a, RequestGuildSetCurrentPlaying &b);

}}} // namespace

#endif
