/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "session_team_request_types.h"

#include <algorithm>

namespace session { namespace server { namespace request {

const char* RequestTeamGetMembers::ascii_fingerprint = "FFDB960728899B83C6E03C13717DBF56";
const uint8_t RequestTeamGetMembers::binary_fingerprint[16] = {0xFF,0xDB,0x96,0x07,0x28,0x89,0x9B,0x83,0xC6,0xE0,0x3C,0x13,0x71,0x7D,0xBF,0x56};

uint32_t RequestTeamGetMembers::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_team_ = false;
  bool isset_captain_ = false;
  bool isset_members_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->team_);
          isset_team_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->captain_);
          isset_captain_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->members_.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->members_.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI64(this->members_[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          isset_members_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_team_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_captain_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_members_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestTeamGetMembers::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestTeamGetMembers");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("team_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->team_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("captain_", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->captain_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("members_", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->members_.size()));
    std::vector<int64_t> ::const_iterator _iter5;
    for (_iter5 = this->members_.begin(); _iter5 != this->members_.end(); ++_iter5)
    {
      xfer += oprot->writeI64((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestTeamGetMembers &a, RequestTeamGetMembers &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.team_, b.team_);
  swap(a.captain_, b.captain_);
  swap(a.members_, b.members_);
}

const char* RequestTeamActorQuit::ascii_fingerprint = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
const uint8_t RequestTeamActorQuit::binary_fingerprint[16] = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

uint32_t RequestTeamActorQuit::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestTeamActorQuit::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestTeamActorQuit");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestTeamActorQuit &a, RequestTeamActorQuit &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
}

const char* RequestTeamCreate::ascii_fingerprint = "A0B9FCD0E5AB4E9F7C4184F21F77EA70";
const uint8_t RequestTeamCreate::binary_fingerprint[16] = {0xA0,0xB9,0xFC,0xD0,0xE5,0xAB,0x4E,0x9F,0x7C,0x41,0x84,0xF2,0x1F,0x77,0xEA,0x70};

uint32_t RequestTeamCreate::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_captain_ = false;
  bool isset_members_ = false;
  bool isset_team_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->captain_);
          isset_captain_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->members_.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->members_.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += iprot->readI64(this->members_[_i10]);
            }
            xfer += iprot->readListEnd();
          }
          isset_members_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->team_);
          isset_team_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_captain_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_members_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_team_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestTeamCreate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestTeamCreate");

  xfer += oprot->writeFieldBegin("captain_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->captain_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("members_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->members_.size()));
    std::vector<int64_t> ::const_iterator _iter11;
    for (_iter11 = this->members_.begin(); _iter11 != this->members_.end(); ++_iter11)
    {
      xfer += oprot->writeI64((*_iter11));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("team_", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->team_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestTeamCreate &a, RequestTeamCreate &b) {
  using ::std::swap;
  swap(a.captain_, b.captain_);
  swap(a.members_, b.members_);
  swap(a.team_, b.team_);
}

}}} // namespace
