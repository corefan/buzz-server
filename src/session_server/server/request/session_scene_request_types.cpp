/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "session_scene_request_types.h"

#include <algorithm>

namespace session { namespace server { namespace request {

const char* RequestGetMapSceneID::ascii_fingerprint = "C25B226C0437EA93A910AE3DEFEFCBF8";
const uint8_t RequestGetMapSceneID::binary_fingerprint[16] = {0xC2,0x5B,0x22,0x6C,0x04,0x37,0xEA,0x93,0xA9,0x10,0xAE,0x3D,0xEF,0xEF,0xCB,0xF8};

uint32_t RequestGetMapSceneID::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_map_ = false;
  bool isset_scene_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->map_);
          isset_map_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->scene_);
          isset_scene_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_map_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_scene_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestGetMapSceneID::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestGetMapSceneID");

  xfer += oprot->writeFieldBegin("map_", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->map_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scene_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->scene_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestGetMapSceneID &a, RequestGetMapSceneID &b) {
  using ::std::swap;
  swap(a.map_, b.map_);
  swap(a.scene_, b.scene_);
}

const char* RequestSceneGetActors::ascii_fingerprint = "955BD89722154769CC8FC8E9E0AB6CC2";
const uint8_t RequestSceneGetActors::binary_fingerprint[16] = {0x95,0x5B,0xD8,0x97,0x22,0x15,0x47,0x69,0xCC,0x8F,0xC8,0xE9,0xE0,0xAB,0x6C,0xC2};

uint32_t RequestSceneGetActors::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_scene_ = false;
  bool isset_actors_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->scene_);
          isset_scene_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->actors_.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->actors_.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI64(this->actors_[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          isset_actors_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_scene_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_actors_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestSceneGetActors::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestSceneGetActors");

  xfer += oprot->writeFieldBegin("scene_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->scene_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("actors_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->actors_.size()));
    std::vector<int64_t> ::const_iterator _iter5;
    for (_iter5 = this->actors_.begin(); _iter5 != this->actors_.end(); ++_iter5)
    {
      xfer += oprot->writeI64((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestSceneGetActors &a, RequestSceneGetActors &b) {
  using ::std::swap;
  swap(a.scene_, b.scene_);
  swap(a.actors_, b.actors_);
}

const char* RequestSceneGetGameServer::ascii_fingerprint = "E7669AFF46528A9447E650179B9D9650";
const uint8_t RequestSceneGetGameServer::binary_fingerprint[16] = {0xE7,0x66,0x9A,0xFF,0x46,0x52,0x8A,0x94,0x47,0xE6,0x50,0x17,0x9B,0x9D,0x96,0x50};

uint32_t RequestSceneGetGameServer::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_game_server_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->map_);
          this->__isset.map_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->scene_);
          this->__isset.scene_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->game_server_);
          isset_game_server_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_game_server_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestSceneGetGameServer::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestSceneGetGameServer");

  if (this->__isset.map_) {
    xfer += oprot->writeFieldBegin("map_", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->map_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.scene_) {
    xfer += oprot->writeFieldBegin("scene_", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->scene_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("game_server_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->game_server_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestSceneGetGameServer &a, RequestSceneGetGameServer &b) {
  using ::std::swap;
  swap(a.map_, b.map_);
  swap(a.scene_, b.scene_);
  swap(a.game_server_, b.game_server_);
  swap(a.__isset, b.__isset);
}

const char* RequestSceneJump::ascii_fingerprint = "77A5D94A61527F74AD8E7DE996B19F9E";
const uint8_t RequestSceneJump::binary_fingerprint[16] = {0x77,0xA5,0xD9,0x4A,0x61,0x52,0x7F,0x74,0xAD,0x8E,0x7D,0xE9,0x96,0xB1,0x9F,0x9E};

uint32_t RequestSceneJump::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_x_ = false;
  bool isset_y_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->map_);
          this->__isset.map_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->scene_);
          this->__isset.scene_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->x_);
          isset_x_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->y_);
          isset_y_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_x_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_y_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestSceneJump::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestSceneJump");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.map_) {
    xfer += oprot->writeFieldBegin("map_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->map_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.scene_) {
    xfer += oprot->writeFieldBegin("scene_", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->scene_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("x_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->x_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->y_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestSceneJump &a, RequestSceneJump &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.map_, b.map_);
  swap(a.scene_, b.scene_);
  swap(a.x_, b.x_);
  swap(a.y_, b.y_);
  swap(a.__isset, b.__isset);
}

}}} // namespace
