/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef session_item_request_TYPES_H
#define session_item_request_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "session_request_types.h"
#include "mall_types.h"


namespace session { namespace server { namespace request {


class RequestItemMallTreasureConfigureData {
 public:

  static const char* ascii_fingerprint; // = "92439E0DEE83A2751834B263FA07411D";
  static const uint8_t binary_fingerprint[16]; // = {0x92,0x43,0x9E,0x0D,0xEE,0x83,0xA2,0x75,0x18,0x34,0xB2,0x63,0xFA,0x07,0x41,0x1D};

  RequestItemMallTreasureConfigureData() {
  }

  virtual ~RequestItemMallTreasureConfigureData() throw() {}

  std::vector< ::entity::MallTreasureCell>  configure_lists_;

  void __set_configure_lists_(const std::vector< ::entity::MallTreasureCell> & val) {
    configure_lists_ = val;
  }

  bool operator == (const RequestItemMallTreasureConfigureData & rhs) const
  {
    if (!(configure_lists_ == rhs.configure_lists_))
      return false;
    return true;
  }
  bool operator != (const RequestItemMallTreasureConfigureData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestItemMallTreasureConfigureData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestItemMallTreasureConfigureData &a, RequestItemMallTreasureConfigureData &b);

}}} // namespace

#endif
