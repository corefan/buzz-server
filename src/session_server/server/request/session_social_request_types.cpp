/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "session_social_request_types.h"

#include <algorithm>

namespace session { namespace server { namespace request {

const char* RequestSocialCheckInBlacklist::ascii_fingerprint = "CC6255EBA8E77F25EDEFA14C686CCFE6";
const uint8_t RequestSocialCheckInBlacklist::binary_fingerprint[16] = {0xCC,0x62,0x55,0xEB,0xA8,0xE7,0x7F,0x25,0xED,0xEF,0xA1,0x4C,0x68,0x6C,0xCF,0xE6};

uint32_t RequestSocialCheckInBlacklist::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_target_actor_id_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->target_actor_id_);
          isset_target_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_target_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestSocialCheckInBlacklist::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestSocialCheckInBlacklist");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target_actor_id_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->target_actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestSocialCheckInBlacklist &a, RequestSocialCheckInBlacklist &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.target_actor_id_, b.target_actor_id_);
  swap(a.result_, b.result_);
}

}}} // namespace
