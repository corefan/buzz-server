/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "session_guild_request_types.h"

#include <algorithm>

namespace session { namespace server { namespace request {

int _kGuildAttributeTypeValues[] = {
  GuildAttributeType::MIN,
  GuildAttributeType::LIGHT,
  GuildAttributeType::DARK,
  GuildAttributeType::HOLY,
  GuildAttributeType::MAX
};
const char* _kGuildAttributeTypeNames[] = {
  "MIN",
  "LIGHT",
  "DARK",
  "HOLY",
  "MAX"
};
const std::map<int, const char*> _GuildAttributeType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kGuildAttributeTypeValues, _kGuildAttributeTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* RequestGuildGetID::ascii_fingerprint = "AFAFBCDB9822F9D1AA4E44188E720B47";
const uint8_t RequestGuildGetID::binary_fingerprint[16] = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

uint32_t RequestGuildGetID::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_guild_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_id_);
          isset_guild_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_guild_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestGuildGetID::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestGuildGetID");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guild_id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->guild_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestGuildGetID &a, RequestGuildGetID &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.guild_id_, b.guild_id_);
}

const char* RequestGuildAddContribution::ascii_fingerprint = "AFAFBCDB9822F9D1AA4E44188E720B47";
const uint8_t RequestGuildAddContribution::binary_fingerprint[16] = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

uint32_t RequestGuildAddContribution::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_contribution_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->contribution_);
          isset_contribution_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_contribution_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestGuildAddContribution::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestGuildAddContribution");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contribution_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->contribution_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestGuildAddContribution &a, RequestGuildAddContribution &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.contribution_, b.contribution_);
}

const char* RequestGuildCheckAuthorityChat::ascii_fingerprint = "25038F937443AC9A2A06CEE5209E41BF";
const uint8_t RequestGuildCheckAuthorityChat::binary_fingerprint[16] = {0x25,0x03,0x8F,0x93,0x74,0x43,0xAC,0x9A,0x2A,0x06,0xCE,0xE5,0x20,0x9E,0x41,0xBF};

uint32_t RequestGuildCheckAuthorityChat::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestGuildCheckAuthorityChat::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestGuildCheckAuthorityChat");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestGuildCheckAuthorityChat &a, RequestGuildCheckAuthorityChat &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.result_, b.result_);
}

const char* RequestGuildAddAttribute::ascii_fingerprint = "DCBA6FFE5A5496209C85ECF0B8CCD810";
const uint8_t RequestGuildAddAttribute::binary_fingerprint[16] = {0xDC,0xBA,0x6F,0xFE,0x5A,0x54,0x96,0x20,0x9C,0x85,0xEC,0xF0,0xB8,0xCC,0xD8,0x10};

uint32_t RequestGuildAddAttribute::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_value_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->guild_id_);
          this->__isset.guild_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          this->__isset.actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type_ = (GuildAttributeType::type)ecast0;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->value_);
          isset_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestGuildAddAttribute::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestGuildAddAttribute");

  if (this->__isset.guild_id_) {
    xfer += oprot->writeFieldBegin("guild_id_", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->guild_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.actor_id_) {
    xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->actor_id_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestGuildAddAttribute &a, RequestGuildAddAttribute &b) {
  using ::std::swap;
  swap(a.guild_id_, b.guild_id_);
  swap(a.actor_id_, b.actor_id_);
  swap(a.type_, b.type_);
  swap(a.value_, b.value_);
  swap(a.__isset, b.__isset);
}

const char* RequestGuildGetMembers::ascii_fingerprint = "955BD89722154769CC8FC8E9E0AB6CC2";
const uint8_t RequestGuildGetMembers::binary_fingerprint[16] = {0x95,0x5B,0xD8,0x97,0x22,0x15,0x47,0x69,0xCC,0x8F,0xC8,0xE9,0xE0,0xAB,0x6C,0xC2};

uint32_t RequestGuildGetMembers::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_members_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->members_.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readListBegin(_etype4, _size1);
            this->members_.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += iprot->readI64(this->members_[_i5]);
            }
            xfer += iprot->readListEnd();
          }
          isset_members_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_members_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestGuildGetMembers::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestGuildGetMembers");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("members_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->members_.size()));
    std::vector<int64_t> ::const_iterator _iter6;
    for (_iter6 = this->members_.begin(); _iter6 != this->members_.end(); ++_iter6)
    {
      xfer += oprot->writeI64((*_iter6));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestGuildGetMembers &a, RequestGuildGetMembers &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.members_, b.members_);
}

const char* RequestGuildCheckCanCreatePlaying::ascii_fingerprint = "3495A4F4FB8ADC7B81D6DE532D320E88";
const uint8_t RequestGuildCheckCanCreatePlaying::binary_fingerprint[16] = {0x34,0x95,0xA4,0xF4,0xFB,0x8A,0xDC,0x7B,0x81,0xD6,0xDE,0x53,0x2D,0x32,0x0E,0x88};

uint32_t RequestGuildCheckCanCreatePlaying::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_playing_template_id_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_template_id_);
          isset_playing_template_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_playing_template_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestGuildCheckCanCreatePlaying::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestGuildCheckCanCreatePlaying");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("playing_template_id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->playing_template_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestGuildCheckCanCreatePlaying &a, RequestGuildCheckCanCreatePlaying &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.playing_template_id_, b.playing_template_id_);
  swap(a.result_, b.result_);
}

const char* RequestGuildGetCurrentPlaying::ascii_fingerprint = "0582EA437327B57E3C66E07BC593858E";
const uint8_t RequestGuildGetCurrentPlaying::binary_fingerprint[16] = {0x05,0x82,0xEA,0x43,0x73,0x27,0xB5,0x7E,0x3C,0x66,0xE0,0x7B,0xC5,0x93,0x85,0x8E};

uint32_t RequestGuildGetCurrentPlaying::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_playing_id_ = false;
  bool isset_playing_template_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->guild_id_);
          this->__isset.guild_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          this->__isset.actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->playing_id_);
          isset_playing_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_template_id_);
          isset_playing_template_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_playing_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_playing_template_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestGuildGetCurrentPlaying::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestGuildGetCurrentPlaying");

  if (this->__isset.guild_id_) {
    xfer += oprot->writeFieldBegin("guild_id_", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->guild_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.actor_id_) {
    xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->actor_id_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("playing_id_", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->playing_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("playing_template_id_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->playing_template_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestGuildGetCurrentPlaying &a, RequestGuildGetCurrentPlaying &b) {
  using ::std::swap;
  swap(a.guild_id_, b.guild_id_);
  swap(a.actor_id_, b.actor_id_);
  swap(a.playing_id_, b.playing_id_);
  swap(a.playing_template_id_, b.playing_template_id_);
  swap(a.__isset, b.__isset);
}

const char* RequestGuildSetCurrentPlaying::ascii_fingerprint = "0582EA437327B57E3C66E07BC593858E";
const uint8_t RequestGuildSetCurrentPlaying::binary_fingerprint[16] = {0x05,0x82,0xEA,0x43,0x73,0x27,0xB5,0x7E,0x3C,0x66,0xE0,0x7B,0xC5,0x93,0x85,0x8E};

uint32_t RequestGuildSetCurrentPlaying::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_playing_id_ = false;
  bool isset_playing_template_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->guild_id_);
          this->__isset.guild_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          this->__isset.actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->playing_id_);
          isset_playing_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_template_id_);
          isset_playing_template_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_playing_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_playing_template_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestGuildSetCurrentPlaying::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestGuildSetCurrentPlaying");

  if (this->__isset.guild_id_) {
    xfer += oprot->writeFieldBegin("guild_id_", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->guild_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.actor_id_) {
    xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->actor_id_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("playing_id_", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->playing_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("playing_template_id_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->playing_template_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestGuildSetCurrentPlaying &a, RequestGuildSetCurrentPlaying &b) {
  using ::std::swap;
  swap(a.guild_id_, b.guild_id_);
  swap(a.actor_id_, b.actor_id_);
  swap(a.playing_id_, b.playing_id_);
  swap(a.playing_template_id_, b.playing_template_id_);
  swap(a.__isset, b.__isset);
}

}}} // namespace
