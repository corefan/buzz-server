/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "session_item_request_types.h"

#include <algorithm>

namespace session { namespace server { namespace request {

const char* RequestItemMallTreasureConfigureData::ascii_fingerprint = "92439E0DEE83A2751834B263FA07411D";
const uint8_t RequestItemMallTreasureConfigureData::binary_fingerprint[16] = {0x92,0x43,0x9E,0x0D,0xEE,0x83,0xA2,0x75,0x18,0x34,0xB2,0x63,0xFA,0x07,0x41,0x1D};

uint32_t RequestItemMallTreasureConfigureData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_configure_lists_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->configure_lists_.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->configure_lists_.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->configure_lists_[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_configure_lists_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_configure_lists_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestItemMallTreasureConfigureData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestItemMallTreasureConfigureData");

  xfer += oprot->writeFieldBegin("configure_lists_", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->configure_lists_.size()));
    std::vector< ::entity::MallTreasureCell> ::const_iterator _iter5;
    for (_iter5 = this->configure_lists_.begin(); _iter5 != this->configure_lists_.end(); ++_iter5)
    {
      xfer += (*_iter5).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestItemMallTreasureConfigureData &a, RequestItemMallTreasureConfigureData &b) {
  using ::std::swap;
  swap(a.configure_lists_, b.configure_lists_);
}

}}} // namespace
