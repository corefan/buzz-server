/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef session_actor_event_TYPES_H
#define session_actor_event_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "vocation_types.h"
#include "session_event_types.h"


namespace session { namespace server { namespace event {


class EventActorLogin {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  EventActorLogin() : id_(0) {
  }

  virtual ~EventActorLogin() throw() {}

  int64_t id_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  bool operator == (const EventActorLogin & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const EventActorLogin &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventActorLogin & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventActorLogin &a, EventActorLogin &b);


class EventActorLogout {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  EventActorLogout() : id_(0) {
  }

  virtual ~EventActorLogout() throw() {}

  int64_t id_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  bool operator == (const EventActorLogout & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const EventActorLogout &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventActorLogout & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventActorLogout &a, EventActorLogout &b);


class EventActorSave {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  EventActorSave() : id_(0) {
  }

  virtual ~EventActorSave() throw() {}

  int64_t id_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  bool operator == (const EventActorSave & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const EventActorSave &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventActorSave & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventActorSave &a, EventActorSave &b);


class EventActorExtensionLoadFinish {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  EventActorExtensionLoadFinish() : id_(0), extension_type_(0) {
  }

  virtual ~EventActorExtensionLoadFinish() throw() {}

  int64_t id_;
  int32_t extension_type_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_extension_type_(const int32_t val) {
    extension_type_ = val;
  }

  bool operator == (const EventActorExtensionLoadFinish & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(extension_type_ == rhs.extension_type_))
      return false;
    return true;
  }
  bool operator != (const EventActorExtensionLoadFinish &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventActorExtensionLoadFinish & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventActorExtensionLoadFinish &a, EventActorExtensionLoadFinish &b);


class EventActorLoadFinish {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  EventActorLoadFinish() : id_(0) {
  }

  virtual ~EventActorLoadFinish() throw() {}

  int64_t id_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  bool operator == (const EventActorLoadFinish & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const EventActorLoadFinish &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventActorLoadFinish & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventActorLoadFinish &a, EventActorLoadFinish &b);

typedef struct _EventActorDailyClean__isset {
  _EventActorDailyClean__isset() : actor_(false), daily_(false) {}
  bool actor_;
  bool daily_;
} _EventActorDailyClean__isset;

class EventActorDailyClean {
 public:

  static const char* ascii_fingerprint; // = "831B71D03795B84A94D50E14E5813FEC";
  static const uint8_t binary_fingerprint[16]; // = {0x83,0x1B,0x71,0xD0,0x37,0x95,0xB8,0x4A,0x94,0xD5,0x0E,0x14,0xE5,0x81,0x3F,0xEC};

  EventActorDailyClean() : actor_(0), daily_(0) {
  }

  virtual ~EventActorDailyClean() throw() {}

  int64_t actor_;
  int32_t daily_;

  _EventActorDailyClean__isset __isset;

  void __set_actor_(const int64_t val) {
    actor_ = val;
    __isset.actor_ = true;
  }

  void __set_daily_(const int32_t val) {
    daily_ = val;
    __isset.daily_ = true;
  }

  bool operator == (const EventActorDailyClean & rhs) const
  {
    if (__isset.actor_ != rhs.__isset.actor_)
      return false;
    else if (__isset.actor_ && !(actor_ == rhs.actor_))
      return false;
    if (__isset.daily_ != rhs.__isset.daily_)
      return false;
    else if (__isset.daily_ && !(daily_ == rhs.daily_))
      return false;
    return true;
  }
  bool operator != (const EventActorDailyClean &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventActorDailyClean & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventActorDailyClean &a, EventActorDailyClean &b);

typedef struct _EventActorWeeklyClean__isset {
  _EventActorWeeklyClean__isset() : actor_(false) {}
  bool actor_;
} _EventActorWeeklyClean__isset;

class EventActorWeeklyClean {
 public:

  static const char* ascii_fingerprint; // = "148F3AAAC1D9859963D5E800D187BF26";
  static const uint8_t binary_fingerprint[16]; // = {0x14,0x8F,0x3A,0xAA,0xC1,0xD9,0x85,0x99,0x63,0xD5,0xE8,0x00,0xD1,0x87,0xBF,0x26};

  EventActorWeeklyClean() : actor_(0) {
  }

  virtual ~EventActorWeeklyClean() throw() {}

  int64_t actor_;

  _EventActorWeeklyClean__isset __isset;

  void __set_actor_(const int64_t val) {
    actor_ = val;
    __isset.actor_ = true;
  }

  bool operator == (const EventActorWeeklyClean & rhs) const
  {
    if (__isset.actor_ != rhs.__isset.actor_)
      return false;
    else if (__isset.actor_ && !(actor_ == rhs.actor_))
      return false;
    return true;
  }
  bool operator != (const EventActorWeeklyClean &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventActorWeeklyClean & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventActorWeeklyClean &a, EventActorWeeklyClean &b);


class EventActorLevelUp {
 public:

  static const char* ascii_fingerprint; // = "9C4E30169AD9E0914633984FE5C16314";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x4E,0x30,0x16,0x9A,0xD9,0xE0,0x91,0x46,0x33,0x98,0x4F,0xE5,0xC1,0x63,0x14};

  EventActorLevelUp() : actor_id_(0), old_level_(0), new_level_(0) {
  }

  virtual ~EventActorLevelUp() throw() {}

  int64_t actor_id_;
  int32_t old_level_;
  int32_t new_level_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_old_level_(const int32_t val) {
    old_level_ = val;
  }

  void __set_new_level_(const int32_t val) {
    new_level_ = val;
  }

  bool operator == (const EventActorLevelUp & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(old_level_ == rhs.old_level_))
      return false;
    if (!(new_level_ == rhs.new_level_))
      return false;
    return true;
  }
  bool operator != (const EventActorLevelUp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventActorLevelUp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventActorLevelUp &a, EventActorLevelUp &b);


class EventActorFunctionalityEnable {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  EventActorFunctionalityEnable() : actor_id_(0), functionality_id_(0) {
  }

  virtual ~EventActorFunctionalityEnable() throw() {}

  int64_t actor_id_;
  int32_t functionality_id_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_functionality_id_(const int32_t val) {
    functionality_id_ = val;
  }

  bool operator == (const EventActorFunctionalityEnable & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(functionality_id_ == rhs.functionality_id_))
      return false;
    return true;
  }
  bool operator != (const EventActorFunctionalityEnable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventActorFunctionalityEnable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventActorFunctionalityEnable &a, EventActorFunctionalityEnable &b);


class EventActorChangeVocation {
 public:

  static const char* ascii_fingerprint; // = "DFA40D9D2884599F3D1E7A57578F1384";
  static const uint8_t binary_fingerprint[16]; // = {0xDF,0xA4,0x0D,0x9D,0x28,0x84,0x59,0x9F,0x3D,0x1E,0x7A,0x57,0x57,0x8F,0x13,0x84};

  EventActorChangeVocation() : actor_id_(0), src_vocation_(( ::entity::VocationType::type)0) {
  }

  virtual ~EventActorChangeVocation() throw() {}

  int64_t actor_id_;
   ::entity::VocationType::type src_vocation_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_src_vocation_(const  ::entity::VocationType::type val) {
    src_vocation_ = val;
  }

  bool operator == (const EventActorChangeVocation & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(src_vocation_ == rhs.src_vocation_))
      return false;
    return true;
  }
  bool operator != (const EventActorChangeVocation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventActorChangeVocation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventActorChangeVocation &a, EventActorChangeVocation &b);

typedef struct _EventActorChangeFightScore__isset {
  _EventActorChangeFightScore__isset() : old_axe_fight_score_(false), new_axe_fight_score_(false), old_shoot_fight_score_(false), new_shoot_fight_score_(false), old_magic_fight_score_(false), new_magic_fight_score_(false) {}
  bool old_axe_fight_score_;
  bool new_axe_fight_score_;
  bool old_shoot_fight_score_;
  bool new_shoot_fight_score_;
  bool old_magic_fight_score_;
  bool new_magic_fight_score_;
} _EventActorChangeFightScore__isset;

class EventActorChangeFightScore {
 public:

  static const char* ascii_fingerprint; // = "C3CF2AC7CEB1205B8151484A9BAC8BA3";
  static const uint8_t binary_fingerprint[16]; // = {0xC3,0xCF,0x2A,0xC7,0xCE,0xB1,0x20,0x5B,0x81,0x51,0x48,0x4A,0x9B,0xAC,0x8B,0xA3};

  EventActorChangeFightScore() : actor_id_(0), old_axe_fight_score_(0), new_axe_fight_score_(0), old_shoot_fight_score_(0), new_shoot_fight_score_(0), old_magic_fight_score_(0), new_magic_fight_score_(0) {
  }

  virtual ~EventActorChangeFightScore() throw() {}

  int64_t actor_id_;
  int32_t old_axe_fight_score_;
  int32_t new_axe_fight_score_;
  int32_t old_shoot_fight_score_;
  int32_t new_shoot_fight_score_;
  int32_t old_magic_fight_score_;
  int32_t new_magic_fight_score_;

  _EventActorChangeFightScore__isset __isset;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_old_axe_fight_score_(const int32_t val) {
    old_axe_fight_score_ = val;
    __isset.old_axe_fight_score_ = true;
  }

  void __set_new_axe_fight_score_(const int32_t val) {
    new_axe_fight_score_ = val;
    __isset.new_axe_fight_score_ = true;
  }

  void __set_old_shoot_fight_score_(const int32_t val) {
    old_shoot_fight_score_ = val;
    __isset.old_shoot_fight_score_ = true;
  }

  void __set_new_shoot_fight_score_(const int32_t val) {
    new_shoot_fight_score_ = val;
    __isset.new_shoot_fight_score_ = true;
  }

  void __set_old_magic_fight_score_(const int32_t val) {
    old_magic_fight_score_ = val;
    __isset.old_magic_fight_score_ = true;
  }

  void __set_new_magic_fight_score_(const int32_t val) {
    new_magic_fight_score_ = val;
    __isset.new_magic_fight_score_ = true;
  }

  bool operator == (const EventActorChangeFightScore & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (__isset.old_axe_fight_score_ != rhs.__isset.old_axe_fight_score_)
      return false;
    else if (__isset.old_axe_fight_score_ && !(old_axe_fight_score_ == rhs.old_axe_fight_score_))
      return false;
    if (__isset.new_axe_fight_score_ != rhs.__isset.new_axe_fight_score_)
      return false;
    else if (__isset.new_axe_fight_score_ && !(new_axe_fight_score_ == rhs.new_axe_fight_score_))
      return false;
    if (__isset.old_shoot_fight_score_ != rhs.__isset.old_shoot_fight_score_)
      return false;
    else if (__isset.old_shoot_fight_score_ && !(old_shoot_fight_score_ == rhs.old_shoot_fight_score_))
      return false;
    if (__isset.new_shoot_fight_score_ != rhs.__isset.new_shoot_fight_score_)
      return false;
    else if (__isset.new_shoot_fight_score_ && !(new_shoot_fight_score_ == rhs.new_shoot_fight_score_))
      return false;
    if (__isset.old_magic_fight_score_ != rhs.__isset.old_magic_fight_score_)
      return false;
    else if (__isset.old_magic_fight_score_ && !(old_magic_fight_score_ == rhs.old_magic_fight_score_))
      return false;
    if (__isset.new_magic_fight_score_ != rhs.__isset.new_magic_fight_score_)
      return false;
    else if (__isset.new_magic_fight_score_ && !(new_magic_fight_score_ == rhs.new_magic_fight_score_))
      return false;
    return true;
  }
  bool operator != (const EventActorChangeFightScore &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventActorChangeFightScore & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventActorChangeFightScore &a, EventActorChangeFightScore &b);


class EventActorJumpLogin {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  EventActorJumpLogin() : actor_(0) {
  }

  virtual ~EventActorJumpLogin() throw() {}

  int64_t actor_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  bool operator == (const EventActorJumpLogin & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    return true;
  }
  bool operator != (const EventActorJumpLogin &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventActorJumpLogin & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventActorJumpLogin &a, EventActorJumpLogin &b);


class EventActorJumpScene {
 public:

  static const char* ascii_fingerprint; // = "25038F937443AC9A2A06CEE5209E41BF";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x03,0x8F,0x93,0x74,0x43,0xAC,0x9A,0x2A,0x06,0xCE,0xE5,0x20,0x9E,0x41,0xBF};

  EventActorJumpScene() : actor_(0), cross_game_server_(0) {
  }

  virtual ~EventActorJumpScene() throw() {}

  int64_t actor_;
  bool cross_game_server_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_cross_game_server_(const bool val) {
    cross_game_server_ = val;
  }

  bool operator == (const EventActorJumpScene & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(cross_game_server_ == rhs.cross_game_server_))
      return false;
    return true;
  }
  bool operator != (const EventActorJumpScene &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventActorJumpScene & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventActorJumpScene &a, EventActorJumpScene &b);

}}} // namespace

#endif
