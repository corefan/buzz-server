/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "session_playing_event_types.h"

#include <algorithm>

namespace session { namespace server { namespace event {

const char* EventPlayingEnd::ascii_fingerprint = "AFAFBCDB9822F9D1AA4E44188E720B47";
const uint8_t EventPlayingEnd::binary_fingerprint[16] = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

uint32_t EventPlayingEnd::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_playing_id_ = false;
  bool isset_playing_template_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->playing_id_);
          isset_playing_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_template_id_);
          isset_playing_template_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_playing_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_playing_template_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventPlayingEnd::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventPlayingEnd");

  xfer += oprot->writeFieldBegin("playing_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->playing_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("playing_template_id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->playing_template_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventPlayingEnd &a, EventPlayingEnd &b) {
  using ::std::swap;
  swap(a.playing_id_, b.playing_id_);
  swap(a.playing_template_id_, b.playing_template_id_);
}

const char* EventPlayingDestroy::ascii_fingerprint = "AFAFBCDB9822F9D1AA4E44188E720B47";
const uint8_t EventPlayingDestroy::binary_fingerprint[16] = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

uint32_t EventPlayingDestroy::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_playing_id_ = false;
  bool isset_playing_template_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->playing_id_);
          isset_playing_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_template_id_);
          isset_playing_template_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_playing_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_playing_template_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventPlayingDestroy::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventPlayingDestroy");

  xfer += oprot->writeFieldBegin("playing_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->playing_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("playing_template_id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->playing_template_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventPlayingDestroy &a, EventPlayingDestroy &b) {
  using ::std::swap;
  swap(a.playing_id_, b.playing_id_);
  swap(a.playing_template_id_, b.playing_template_id_);
}

}}} // namespace
