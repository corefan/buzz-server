/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef session_system_event_TYPES_H
#define session_system_event_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "server_type_types.h"
#include "session_event_types.h"


namespace session { namespace server { namespace event {


class EventSystemServerLogin {
 public:

  static const char* ascii_fingerprint; // = "46A703A33337BED2F62F386FC66B2A5F";
  static const uint8_t binary_fingerprint[16]; // = {0x46,0xA7,0x03,0xA3,0x33,0x37,0xBE,0xD2,0xF6,0x2F,0x38,0x6F,0xC6,0x6B,0x2A,0x5F};

  EventSystemServerLogin() : type_(( ::global::protocol::ServerType::type)0), id_(0) {
  }

  virtual ~EventSystemServerLogin() throw() {}

   ::global::protocol::ServerType::type type_;
  int32_t id_;

  void __set_type_(const  ::global::protocol::ServerType::type val) {
    type_ = val;
  }

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  bool operator == (const EventSystemServerLogin & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const EventSystemServerLogin &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventSystemServerLogin & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventSystemServerLogin &a, EventSystemServerLogin &b);


class EventSystemServerLogout {
 public:

  static const char* ascii_fingerprint; // = "46A703A33337BED2F62F386FC66B2A5F";
  static const uint8_t binary_fingerprint[16]; // = {0x46,0xA7,0x03,0xA3,0x33,0x37,0xBE,0xD2,0xF6,0x2F,0x38,0x6F,0xC6,0x6B,0x2A,0x5F};

  EventSystemServerLogout() : type_(( ::global::protocol::ServerType::type)0), id_(0) {
  }

  virtual ~EventSystemServerLogout() throw() {}

   ::global::protocol::ServerType::type type_;
  int32_t id_;

  void __set_type_(const  ::global::protocol::ServerType::type val) {
    type_ = val;
  }

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  bool operator == (const EventSystemServerLogout & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const EventSystemServerLogout &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventSystemServerLogout & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventSystemServerLogout &a, EventSystemServerLogout &b);


class EventSystemDatabaseServerLogined {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  EventSystemDatabaseServerLogined() : id_(0) {
  }

  virtual ~EventSystemDatabaseServerLogined() throw() {}

  int32_t id_;

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  bool operator == (const EventSystemDatabaseServerLogined & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const EventSystemDatabaseServerLogined &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventSystemDatabaseServerLogined & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventSystemDatabaseServerLogined &a, EventSystemDatabaseServerLogined &b);

}}} // namespace

#endif
