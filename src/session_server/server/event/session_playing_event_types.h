/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef session_playing_event_TYPES_H
#define session_playing_event_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "session_event_types.h"


namespace session { namespace server { namespace event {


class EventPlayingEnd {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  EventPlayingEnd() : playing_id_(0), playing_template_id_(0) {
  }

  virtual ~EventPlayingEnd() throw() {}

  int64_t playing_id_;
  int32_t playing_template_id_;

  void __set_playing_id_(const int64_t val) {
    playing_id_ = val;
  }

  void __set_playing_template_id_(const int32_t val) {
    playing_template_id_ = val;
  }

  bool operator == (const EventPlayingEnd & rhs) const
  {
    if (!(playing_id_ == rhs.playing_id_))
      return false;
    if (!(playing_template_id_ == rhs.playing_template_id_))
      return false;
    return true;
  }
  bool operator != (const EventPlayingEnd &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventPlayingEnd & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventPlayingEnd &a, EventPlayingEnd &b);


class EventPlayingDestroy {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  EventPlayingDestroy() : playing_id_(0), playing_template_id_(0) {
  }

  virtual ~EventPlayingDestroy() throw() {}

  int64_t playing_id_;
  int32_t playing_template_id_;

  void __set_playing_id_(const int64_t val) {
    playing_id_ = val;
  }

  void __set_playing_template_id_(const int32_t val) {
    playing_template_id_ = val;
  }

  bool operator == (const EventPlayingDestroy & rhs) const
  {
    if (!(playing_id_ == rhs.playing_id_))
      return false;
    if (!(playing_template_id_ == rhs.playing_template_id_))
      return false;
    return true;
  }
  bool operator != (const EventPlayingDestroy &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventPlayingDestroy & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EventPlayingDestroy &a, EventPlayingDestroy &b);

}}} // namespace

#endif
