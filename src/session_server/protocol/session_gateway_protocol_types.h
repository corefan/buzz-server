/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef session_gateway_protocol_TYPES_H
#define session_gateway_protocol_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "kickout_actor_type_types.h"
#include "session_protocol_types.h"


namespace session { namespace protocol {

struct GatewayMessageType {
  enum type {
    MESSAGE_MIN = 0,
    MESSAGE_USER_LOGIN_REQUEST = 0,
    MESSAGE_USER_LOGIN_RESPONSE = 1,
    MESSAGE_USER_LOGOUT = 2,
    MESSAGE_KICKOUT_USER = 3,
    MESSAGE_USER_SWITCH_GAME_REQUEST = 4,
    MESSAGE_MAX = 5
  };
};

extern const std::map<int, const char*> _GatewayMessageType_VALUES_TO_NAMES;


class GateMessageUserLoginRequest {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  GateMessageUserLoginRequest() : actor_id_(0) {
  }

  virtual ~GateMessageUserLoginRequest() throw() {}

  int64_t actor_id_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  bool operator == (const GateMessageUserLoginRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    return true;
  }
  bool operator != (const GateMessageUserLoginRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GateMessageUserLoginRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GateMessageUserLoginRequest &a, GateMessageUserLoginRequest &b);


class GateMessageUserLoginResponse {
 public:

  static const char* ascii_fingerprint; // = "255ED8E5A835F018EFE1012793A071CD";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x5E,0xD8,0xE5,0xA8,0x35,0xF0,0x18,0xEF,0xE1,0x01,0x27,0x93,0xA0,0x71,0xCD};

  GateMessageUserLoginResponse() : logined_(0), game_server_(0), actor_id_(0) {
  }

  virtual ~GateMessageUserLoginResponse() throw() {}

  bool logined_;
  int32_t game_server_;
  int64_t actor_id_;

  void __set_logined_(const bool val) {
    logined_ = val;
  }

  void __set_game_server_(const int32_t val) {
    game_server_ = val;
  }

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  bool operator == (const GateMessageUserLoginResponse & rhs) const
  {
    if (!(logined_ == rhs.logined_))
      return false;
    if (!(game_server_ == rhs.game_server_))
      return false;
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    return true;
  }
  bool operator != (const GateMessageUserLoginResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GateMessageUserLoginResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GateMessageUserLoginResponse &a, GateMessageUserLoginResponse &b);


class GateMessageUserLogout {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  GateMessageUserLogout() : actor_id_(0) {
  }

  virtual ~GateMessageUserLogout() throw() {}

  int64_t actor_id_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  bool operator == (const GateMessageUserLogout & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    return true;
  }
  bool operator != (const GateMessageUserLogout &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GateMessageUserLogout & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GateMessageUserLogout &a, GateMessageUserLogout &b);


class GateMessageKickoutUser {
 public:

  static const char* ascii_fingerprint; // = "DFA40D9D2884599F3D1E7A57578F1384";
  static const uint8_t binary_fingerprint[16]; // = {0xDF,0xA4,0x0D,0x9D,0x28,0x84,0x59,0x9F,0x3D,0x1E,0x7A,0x57,0x57,0x8F,0x13,0x84};

  GateMessageKickoutUser() : actor_id_(0), type_(( ::global::protocol::KickoutActorType::type)0) {
  }

  virtual ~GateMessageKickoutUser() throw() {}

  int64_t actor_id_;
   ::global::protocol::KickoutActorType::type type_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_type_(const  ::global::protocol::KickoutActorType::type val) {
    type_ = val;
  }

  bool operator == (const GateMessageKickoutUser & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(type_ == rhs.type_))
      return false;
    return true;
  }
  bool operator != (const GateMessageKickoutUser &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GateMessageKickoutUser & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GateMessageKickoutUser &a, GateMessageKickoutUser &b);


class GateMessageUserSwitchGameRequest {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  GateMessageUserSwitchGameRequest() : actor_(0), game_server_(0) {
  }

  virtual ~GateMessageUserSwitchGameRequest() throw() {}

  int64_t actor_;
  int32_t game_server_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_game_server_(const int32_t val) {
    game_server_ = val;
  }

  bool operator == (const GateMessageUserSwitchGameRequest & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(game_server_ == rhs.game_server_))
      return false;
    return true;
  }
  bool operator != (const GateMessageUserSwitchGameRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GateMessageUserSwitchGameRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GateMessageUserSwitchGameRequest &a, GateMessageUserSwitchGameRequest &b);

}} // namespace

#endif
