/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "game_mail_protocol_types.h"

#include <algorithm>

namespace session { namespace protocol {

const char* MessageMailSendRequest::ascii_fingerprint = "405F55AC7B80216413D6BA072E6859AC";
const uint8_t MessageMailSendRequest::binary_fingerprint[16] = {0x40,0x5F,0x55,0xAC,0x7B,0x80,0x21,0x64,0x13,0xD6,0xBA,0x07,0x2E,0x68,0x59,0xAC};

uint32_t MessageMailSendRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_addressee_id_ = false;
  bool isset_addresser_id_ = false;
  bool isset_addressee_ = false;
  bool isset_addresser_ = false;
  bool isset_type_ = false;
  bool isset_affix_type_ = false;
  bool isset_affix_ = false;
  bool isset_child_type_ = false;
  bool isset_params_ = false;
  bool isset_title_ = false;
  bool isset_context_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->addressee_id_);
          isset_addressee_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->addresser_id_);
          isset_addresser_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->addressee_);
          isset_addressee_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->addresser_);
          isset_addresser_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type_ = ( ::entity::MailType::type)ecast0;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->affix_type_ = ( ::entity::MailAffixType::type)ecast1;
          isset_affix_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->affix_.read(iprot);
          isset_affix_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->child_type_ = ( ::entity::SystemMailChildType::type)ecast2;
          isset_child_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->params_.clear();
            uint32_t _size3;
            ::apache::thrift::protocol::TType _etype6;
            xfer += iprot->readListBegin(_etype6, _size3);
            this->params_.resize(_size3);
            uint32_t _i7;
            for (_i7 = 0; _i7 < _size3; ++_i7)
            {
              xfer += iprot->readString(this->params_[_i7]);
            }
            xfer += iprot->readListEnd();
          }
          isset_params_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title_);
          isset_title_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->context_);
          isset_context_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_addressee_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_addresser_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_addressee_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_addresser_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_affix_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_affix_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_child_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_params_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_title_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_context_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageMailSendRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageMailSendRequest");

  xfer += oprot->writeFieldBegin("addressee_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->addressee_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("addresser_id_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->addresser_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("addressee_", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->addressee_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("addresser_", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->addresser_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("affix_type_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->affix_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("affix_", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->affix_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("child_type_", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32((int32_t)this->child_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("params_", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->params_.size()));
    std::vector<std::string> ::const_iterator _iter8;
    for (_iter8 = this->params_.begin(); _iter8 != this->params_.end(); ++_iter8)
    {
      xfer += oprot->writeString((*_iter8));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title_", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->title_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("context_", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->context_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageMailSendRequest &a, MessageMailSendRequest &b) {
  using ::std::swap;
  swap(a.addressee_id_, b.addressee_id_);
  swap(a.addresser_id_, b.addresser_id_);
  swap(a.addressee_, b.addressee_);
  swap(a.addresser_, b.addresser_);
  swap(a.type_, b.type_);
  swap(a.affix_type_, b.affix_type_);
  swap(a.affix_, b.affix_);
  swap(a.child_type_, b.child_type_);
  swap(a.params_, b.params_);
  swap(a.title_, b.title_);
  swap(a.context_, b.context_);
}

const char* MessageMailSendResponse::ascii_fingerprint = "92DB7C08FAF226B322B117D193F35B5F";
const uint8_t MessageMailSendResponse::binary_fingerprint[16] = {0x92,0xDB,0x7C,0x08,0xFA,0xF2,0x26,0xB3,0x22,0xB1,0x17,0xD1,0x93,0xF3,0x5B,0x5F};

uint32_t MessageMailSendResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;
  bool isset_addresser_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->addresser_id_);
          isset_addresser_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_addresser_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageMailSendResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageMailSendResponse");

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("addresser_id_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->addresser_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageMailSendResponse &a, MessageMailSendResponse &b) {
  using ::std::swap;
  swap(a.result_, b.result_);
  swap(a.addresser_id_, b.addresser_id_);
}

const char* MessageMailNotice::ascii_fingerprint = "0AA0E66E63EBF7E15CCF37A9878CFF2D";
const uint8_t MessageMailNotice::binary_fingerprint[16] = {0x0A,0xA0,0xE6,0x6E,0x63,0xEB,0xF7,0xE1,0x5C,0xCF,0x37,0xA9,0x87,0x8C,0xFF,0x2D};

uint32_t MessageMailNotice::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_title_ = false;
  bool isset_addresser_ = false;
  bool isset_state_ = false;
  bool isset_affix_type_ = false;
  bool isset_type_ = false;
  bool isset_time_ = false;
  bool isset_id_ = false;
  bool isset_addressee_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title_);
          isset_title_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->addresser_);
          isset_addresser_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast9;
          xfer += iprot->readI32(ecast9);
          this->state_ = ( ::entity::MailReadState::type)ecast9;
          isset_state_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast10;
          xfer += iprot->readI32(ecast10);
          this->affix_type_ = ( ::entity::MailAffixType::type)ecast10;
          isset_affix_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast11;
          xfer += iprot->readI32(ecast11);
          this->type_ = ( ::entity::MailType::type)ecast11;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->time_);
          isset_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->addressee_id_);
          isset_addressee_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_title_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_addresser_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_state_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_affix_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_addressee_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageMailNotice::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageMailNotice");

  xfer += oprot->writeFieldBegin("title_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->title_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("addresser_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->addresser_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->state_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("affix_type_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->affix_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time_", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("addressee_id_", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->addressee_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageMailNotice &a, MessageMailNotice &b) {
  using ::std::swap;
  swap(a.title_, b.title_);
  swap(a.addresser_, b.addresser_);
  swap(a.state_, b.state_);
  swap(a.affix_type_, b.affix_type_);
  swap(a.type_, b.type_);
  swap(a.time_, b.time_);
  swap(a.id_, b.id_);
  swap(a.addressee_id_, b.addressee_id_);
}

}} // namespace
