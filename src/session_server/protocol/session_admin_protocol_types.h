/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef session_admin_protocol_TYPES_H
#define session_admin_protocol_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace session { namespace protocol {

struct AdminMessageType {
  enum type {
    MESSAGE_MIN = 0,
    MESSAGE_ADMIN_USER_NUMBER_QUERY_REQUEST = 1,
    MESSAGE_ADMIN_USER_NUMBER_QUERY_RESPONSE = 2,
    MESSAGE_MAX = 3
  };
};

extern const std::map<int, const char*> _AdminMessageType_VALUES_TO_NAMES;


class MessageAdmin {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  MessageAdmin() : type_((AdminMessageType::type)0), message_() {
  }

  virtual ~MessageAdmin() throw() {}

  AdminMessageType::type type_;
  std::string message_;

  void __set_type_(const AdminMessageType::type val) {
    type_ = val;
  }

  void __set_message_(const std::string& val) {
    message_ = val;
  }

  bool operator == (const MessageAdmin & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(message_ == rhs.message_))
      return false;
    return true;
  }
  bool operator != (const MessageAdmin &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAdmin & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAdmin &a, MessageAdmin &b);


class MessageAdminUserNumberQueryRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageAdminUserNumberQueryRequest() {
  }

  virtual ~MessageAdminUserNumberQueryRequest() throw() {}


  bool operator == (const MessageAdminUserNumberQueryRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageAdminUserNumberQueryRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAdminUserNumberQueryRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAdminUserNumberQueryRequest &a, MessageAdminUserNumberQueryRequest &b);


class MessageAdminUserNumberQueryResponse {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  MessageAdminUserNumberQueryResponse() : online_number_(0), total_number_(0) {
  }

  virtual ~MessageAdminUserNumberQueryResponse() throw() {}

  int32_t online_number_;
  int32_t total_number_;

  void __set_online_number_(const int32_t val) {
    online_number_ = val;
  }

  void __set_total_number_(const int32_t val) {
    total_number_ = val;
  }

  bool operator == (const MessageAdminUserNumberQueryResponse & rhs) const
  {
    if (!(online_number_ == rhs.online_number_))
      return false;
    if (!(total_number_ == rhs.total_number_))
      return false;
    return true;
  }
  bool operator != (const MessageAdminUserNumberQueryResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAdminUserNumberQueryResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAdminUserNumberQueryResponse &a, MessageAdminUserNumberQueryResponse &b);

}} // namespace

#endif
