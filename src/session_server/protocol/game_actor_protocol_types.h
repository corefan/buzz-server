/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef game_actor_protocol_TYPES_H
#define game_actor_protocol_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "gender_types.h"
#include "functionality_types.h"
#include "vip_types.h"
#include "vocation_types.h"
#include "session_game_protocol_types.h"


namespace session { namespace protocol {

typedef struct _GameMessageActorLoginRequest__isset {
  _GameMessageActorLoginRequest__isset() : scene_(false), x_(false), y_(false), data_(false) {}
  bool scene_;
  bool x_;
  bool y_;
  bool data_;
} _GameMessageActorLoginRequest__isset;

class GameMessageActorLoginRequest {
 public:

  static const char* ascii_fingerprint; // = "CE85E3BFD6AAD612468CBCC67E63353B";
  static const uint8_t binary_fingerprint[16]; // = {0xCE,0x85,0xE3,0xBF,0xD6,0xAA,0xD6,0x12,0x46,0x8C,0xBC,0xC6,0x7E,0x63,0x35,0x3B};

  GameMessageActorLoginRequest() : actor_id_(0), gateway_(0), jump_scene_(0), scene_(0), x_(0), y_(0), data_() {
  }

  virtual ~GameMessageActorLoginRequest() throw() {}

  int64_t actor_id_;
  int32_t gateway_;
  bool jump_scene_;
  int64_t scene_;
  int32_t x_;
  int32_t y_;
  std::string data_;

  _GameMessageActorLoginRequest__isset __isset;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_gateway_(const int32_t val) {
    gateway_ = val;
  }

  void __set_jump_scene_(const bool val) {
    jump_scene_ = val;
  }

  void __set_scene_(const int64_t val) {
    scene_ = val;
    __isset.scene_ = true;
  }

  void __set_x_(const int32_t val) {
    x_ = val;
    __isset.x_ = true;
  }

  void __set_y_(const int32_t val) {
    y_ = val;
    __isset.y_ = true;
  }

  void __set_data_(const std::string& val) {
    data_ = val;
    __isset.data_ = true;
  }

  bool operator == (const GameMessageActorLoginRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(gateway_ == rhs.gateway_))
      return false;
    if (!(jump_scene_ == rhs.jump_scene_))
      return false;
    if (__isset.scene_ != rhs.__isset.scene_)
      return false;
    else if (__isset.scene_ && !(scene_ == rhs.scene_))
      return false;
    if (__isset.x_ != rhs.__isset.x_)
      return false;
    else if (__isset.x_ && !(x_ == rhs.x_))
      return false;
    if (__isset.y_ != rhs.__isset.y_)
      return false;
    else if (__isset.y_ && !(y_ == rhs.y_))
      return false;
    if (__isset.data_ != rhs.__isset.data_)
      return false;
    else if (__isset.data_ && !(data_ == rhs.data_))
      return false;
    return true;
  }
  bool operator != (const GameMessageActorLoginRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameMessageActorLoginRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GameMessageActorLoginRequest &a, GameMessageActorLoginRequest &b);


class GameMessageActorLoginResponse {
 public:

  static const char* ascii_fingerprint; // = "E871667CFF6BBE383C7B3224EB95B8B4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x71,0x66,0x7C,0xFF,0x6B,0xBE,0x38,0x3C,0x7B,0x32,0x24,0xEB,0x95,0xB8,0xB4};

  GameMessageActorLoginResponse() : logined_(0), actor_id_(0), actor_name_(), jump_scene_(0) {
  }

  virtual ~GameMessageActorLoginResponse() throw() {}

  bool logined_;
  int64_t actor_id_;
  std::string actor_name_;
  bool jump_scene_;

  void __set_logined_(const bool val) {
    logined_ = val;
  }

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_actor_name_(const std::string& val) {
    actor_name_ = val;
  }

  void __set_jump_scene_(const bool val) {
    jump_scene_ = val;
  }

  bool operator == (const GameMessageActorLoginResponse & rhs) const
  {
    if (!(logined_ == rhs.logined_))
      return false;
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(actor_name_ == rhs.actor_name_))
      return false;
    if (!(jump_scene_ == rhs.jump_scene_))
      return false;
    return true;
  }
  bool operator != (const GameMessageActorLoginResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameMessageActorLoginResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GameMessageActorLoginResponse &a, GameMessageActorLoginResponse &b);


class GameMessageActorLogout {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  GameMessageActorLogout() : actor_id_(0) {
  }

  virtual ~GameMessageActorLogout() throw() {}

  int64_t actor_id_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  bool operator == (const GameMessageActorLogout & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    return true;
  }
  bool operator != (const GameMessageActorLogout &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameMessageActorLogout & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GameMessageActorLogout &a, GameMessageActorLogout &b);


class SessionActorInfo {
 public:

  static const char* ascii_fingerprint; // = "B6D965159ADF4C5BF71E3C6B8B85C403";
  static const uint8_t binary_fingerprint[16]; // = {0xB6,0xD9,0x65,0x15,0x9A,0xDF,0x4C,0x5B,0xF7,0x1E,0x3C,0x6B,0x8B,0x85,0xC4,0x03};

  SessionActorInfo() : id_(0), name_(), level_(0), vocation_(( ::entity::VocationType::type)0), gender_(( ::entity::GenderType::type)0), map_(0), functionality_state_(), axe_fight_score_(0), shoot_fight_score_(0), magic_fight_score_(0), last_logout_time_(0), gateway_(0), vip_type_(( ::entity::VipType::type)0), vip_expire_time_(0) {
  }

  virtual ~SessionActorInfo() throw() {}

  int64_t id_;
  std::string name_;
  int32_t level_;
   ::entity::VocationType::type vocation_;
   ::entity::GenderType::type gender_;
  int32_t map_;
  std::string functionality_state_;
  int32_t axe_fight_score_;
  int32_t shoot_fight_score_;
  int32_t magic_fight_score_;
  int64_t last_logout_time_;
  int32_t gateway_;
   ::entity::VipType::type vip_type_;
  int64_t vip_expire_time_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_name_(const std::string& val) {
    name_ = val;
  }

  void __set_level_(const int32_t val) {
    level_ = val;
  }

  void __set_vocation_(const  ::entity::VocationType::type val) {
    vocation_ = val;
  }

  void __set_gender_(const  ::entity::GenderType::type val) {
    gender_ = val;
  }

  void __set_map_(const int32_t val) {
    map_ = val;
  }

  void __set_functionality_state_(const std::string& val) {
    functionality_state_ = val;
  }

  void __set_axe_fight_score_(const int32_t val) {
    axe_fight_score_ = val;
  }

  void __set_shoot_fight_score_(const int32_t val) {
    shoot_fight_score_ = val;
  }

  void __set_magic_fight_score_(const int32_t val) {
    magic_fight_score_ = val;
  }

  void __set_last_logout_time_(const int64_t val) {
    last_logout_time_ = val;
  }

  void __set_gateway_(const int32_t val) {
    gateway_ = val;
  }

  void __set_vip_type_(const  ::entity::VipType::type val) {
    vip_type_ = val;
  }

  void __set_vip_expire_time_(const int64_t val) {
    vip_expire_time_ = val;
  }

  bool operator == (const SessionActorInfo & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(name_ == rhs.name_))
      return false;
    if (!(level_ == rhs.level_))
      return false;
    if (!(vocation_ == rhs.vocation_))
      return false;
    if (!(gender_ == rhs.gender_))
      return false;
    if (!(map_ == rhs.map_))
      return false;
    if (!(functionality_state_ == rhs.functionality_state_))
      return false;
    if (!(axe_fight_score_ == rhs.axe_fight_score_))
      return false;
    if (!(shoot_fight_score_ == rhs.shoot_fight_score_))
      return false;
    if (!(magic_fight_score_ == rhs.magic_fight_score_))
      return false;
    if (!(last_logout_time_ == rhs.last_logout_time_))
      return false;
    if (!(gateway_ == rhs.gateway_))
      return false;
    if (!(vip_type_ == rhs.vip_type_))
      return false;
    if (!(vip_expire_time_ == rhs.vip_expire_time_))
      return false;
    return true;
  }
  bool operator != (const SessionActorInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SessionActorInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SessionActorInfo &a, SessionActorInfo &b);


class MessageActorBatchLoginRequest {
 public:

  static const char* ascii_fingerprint; // = "79D9090DDBAE9B592F99636D3FF51C39";
  static const uint8_t binary_fingerprint[16]; // = {0x79,0xD9,0x09,0x0D,0xDB,0xAE,0x9B,0x59,0x2F,0x99,0x63,0x6D,0x3F,0xF5,0x1C,0x39};

  MessageActorBatchLoginRequest() {
  }

  virtual ~MessageActorBatchLoginRequest() throw() {}

  std::vector<SessionActorInfo>  actors_;

  void __set_actors_(const std::vector<SessionActorInfo> & val) {
    actors_ = val;
  }

  bool operator == (const MessageActorBatchLoginRequest & rhs) const
  {
    if (!(actors_ == rhs.actors_))
      return false;
    return true;
  }
  bool operator != (const MessageActorBatchLoginRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageActorBatchLoginRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageActorBatchLoginRequest &a, MessageActorBatchLoginRequest &b);


class MessageActorLevelSynchronize {
 public:

  static const char* ascii_fingerprint; // = "9C4E30169AD9E0914633984FE5C16314";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x4E,0x30,0x16,0x9A,0xD9,0xE0,0x91,0x46,0x33,0x98,0x4F,0xE5,0xC1,0x63,0x14};

  MessageActorLevelSynchronize() : actor_id_(0), old_level_(0), new_level_(0) {
  }

  virtual ~MessageActorLevelSynchronize() throw() {}

  int64_t actor_id_;
  int32_t old_level_;
  int32_t new_level_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_old_level_(const int32_t val) {
    old_level_ = val;
  }

  void __set_new_level_(const int32_t val) {
    new_level_ = val;
  }

  bool operator == (const MessageActorLevelSynchronize & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(old_level_ == rhs.old_level_))
      return false;
    if (!(new_level_ == rhs.new_level_))
      return false;
    return true;
  }
  bool operator != (const MessageActorLevelSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageActorLevelSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageActorLevelSynchronize &a, MessageActorLevelSynchronize &b);


class MessageActorVocationSynchronzie {
 public:

  static const char* ascii_fingerprint; // = "5CE29A28EF007283753847D663D38BF1";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0xE2,0x9A,0x28,0xEF,0x00,0x72,0x83,0x75,0x38,0x47,0xD6,0x63,0xD3,0x8B,0xF1};

  MessageActorVocationSynchronzie() : actor_id_(0), src_vocation_(( ::entity::VocationType::type)0), dst_vocation_(( ::entity::VocationType::type)0) {
  }

  virtual ~MessageActorVocationSynchronzie() throw() {}

  int64_t actor_id_;
   ::entity::VocationType::type src_vocation_;
   ::entity::VocationType::type dst_vocation_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_src_vocation_(const  ::entity::VocationType::type val) {
    src_vocation_ = val;
  }

  void __set_dst_vocation_(const  ::entity::VocationType::type val) {
    dst_vocation_ = val;
  }

  bool operator == (const MessageActorVocationSynchronzie & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(src_vocation_ == rhs.src_vocation_))
      return false;
    if (!(dst_vocation_ == rhs.dst_vocation_))
      return false;
    return true;
  }
  bool operator != (const MessageActorVocationSynchronzie &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageActorVocationSynchronzie & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageActorVocationSynchronzie &a, MessageActorVocationSynchronzie &b);


class MessageActorFunctionalityStateSynchronize {
 public:

  static const char* ascii_fingerprint; // = "6278CAE415EFE12B973918A423CEE5F1";
  static const uint8_t binary_fingerprint[16]; // = {0x62,0x78,0xCA,0xE4,0x15,0xEF,0xE1,0x2B,0x97,0x39,0x18,0xA4,0x23,0xCE,0xE5,0xF1};

  MessageActorFunctionalityStateSynchronize() : actor_id_(0), type_(( ::entity::FunctionalityType::type)0), state_(0) {
  }

  virtual ~MessageActorFunctionalityStateSynchronize() throw() {}

  int64_t actor_id_;
   ::entity::FunctionalityType::type type_;
  bool state_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_type_(const  ::entity::FunctionalityType::type val) {
    type_ = val;
  }

  void __set_state_(const bool val) {
    state_ = val;
  }

  bool operator == (const MessageActorFunctionalityStateSynchronize & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(type_ == rhs.type_))
      return false;
    if (!(state_ == rhs.state_))
      return false;
    return true;
  }
  bool operator != (const MessageActorFunctionalityStateSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageActorFunctionalityStateSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageActorFunctionalityStateSynchronize &a, MessageActorFunctionalityStateSynchronize &b);

typedef struct _MessageActorFightScoreSychronize__isset {
  _MessageActorFightScoreSychronize__isset() : axe_fight_score_(false), shoot_fight_score_(false), magic_fight_score_(false) {}
  bool axe_fight_score_;
  bool shoot_fight_score_;
  bool magic_fight_score_;
} _MessageActorFightScoreSychronize__isset;

class MessageActorFightScoreSychronize {
 public:

  static const char* ascii_fingerprint; // = "30C3DDD3E5E3E6AC7C551E94150DF26F";
  static const uint8_t binary_fingerprint[16]; // = {0x30,0xC3,0xDD,0xD3,0xE5,0xE3,0xE6,0xAC,0x7C,0x55,0x1E,0x94,0x15,0x0D,0xF2,0x6F};

  MessageActorFightScoreSychronize() : actor_id_(0), axe_fight_score_(0), shoot_fight_score_(0), magic_fight_score_(0) {
  }

  virtual ~MessageActorFightScoreSychronize() throw() {}

  int64_t actor_id_;
  int32_t axe_fight_score_;
  int32_t shoot_fight_score_;
  int32_t magic_fight_score_;

  _MessageActorFightScoreSychronize__isset __isset;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_axe_fight_score_(const int32_t val) {
    axe_fight_score_ = val;
    __isset.axe_fight_score_ = true;
  }

  void __set_shoot_fight_score_(const int32_t val) {
    shoot_fight_score_ = val;
    __isset.shoot_fight_score_ = true;
  }

  void __set_magic_fight_score_(const int32_t val) {
    magic_fight_score_ = val;
    __isset.magic_fight_score_ = true;
  }

  bool operator == (const MessageActorFightScoreSychronize & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (__isset.axe_fight_score_ != rhs.__isset.axe_fight_score_)
      return false;
    else if (__isset.axe_fight_score_ && !(axe_fight_score_ == rhs.axe_fight_score_))
      return false;
    if (__isset.shoot_fight_score_ != rhs.__isset.shoot_fight_score_)
      return false;
    else if (__isset.shoot_fight_score_ && !(shoot_fight_score_ == rhs.shoot_fight_score_))
      return false;
    if (__isset.magic_fight_score_ != rhs.__isset.magic_fight_score_)
      return false;
    else if (__isset.magic_fight_score_ && !(magic_fight_score_ == rhs.magic_fight_score_))
      return false;
    return true;
  }
  bool operator != (const MessageActorFightScoreSychronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageActorFightScoreSychronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageActorFightScoreSychronize &a, MessageActorFightScoreSychronize &b);


class MessageActorCompareRequest {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  MessageActorCompareRequest() : actor_(0), compare_actor_(0) {
  }

  virtual ~MessageActorCompareRequest() throw() {}

  int64_t actor_;
  int64_t compare_actor_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_compare_actor_(const int64_t val) {
    compare_actor_ = val;
  }

  bool operator == (const MessageActorCompareRequest & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(compare_actor_ == rhs.compare_actor_))
      return false;
    return true;
  }
  bool operator != (const MessageActorCompareRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageActorCompareRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageActorCompareRequest &a, MessageActorCompareRequest &b);


class MessageActorCompareSynchronize {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  MessageActorCompareSynchronize() : actor_(0), compare_actor_(0) {
  }

  virtual ~MessageActorCompareSynchronize() throw() {}

  int64_t actor_;
  int64_t compare_actor_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_compare_actor_(const int64_t val) {
    compare_actor_ = val;
  }

  bool operator == (const MessageActorCompareSynchronize & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(compare_actor_ == rhs.compare_actor_))
      return false;
    return true;
  }
  bool operator != (const MessageActorCompareSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageActorCompareSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageActorCompareSynchronize &a, MessageActorCompareSynchronize &b);


class MessageActorFacadeSynchronize {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  MessageActorFacadeSynchronize() : actor_(0), observe_actor_(0) {
  }

  virtual ~MessageActorFacadeSynchronize() throw() {}

  int64_t actor_;
  int64_t observe_actor_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_observe_actor_(const int64_t val) {
    observe_actor_ = val;
  }

  bool operator == (const MessageActorFacadeSynchronize & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(observe_actor_ == rhs.observe_actor_))
      return false;
    return true;
  }
  bool operator != (const MessageActorFacadeSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageActorFacadeSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageActorFacadeSynchronize &a, MessageActorFacadeSynchronize &b);


class MessageActorVipSynchronize {
 public:

  static const char* ascii_fingerprint; // = "9ACEC2FD9260700CE0F0CB6786329418";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0xCE,0xC2,0xFD,0x92,0x60,0x70,0x0C,0xE0,0xF0,0xCB,0x67,0x86,0x32,0x94,0x18};

  MessageActorVipSynchronize() : actor_(0), vip_type_(( ::entity::VipType::type)0), viP_expire_time_(0) {
  }

  virtual ~MessageActorVipSynchronize() throw() {}

  int64_t actor_;
   ::entity::VipType::type vip_type_;
  int64_t viP_expire_time_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_vip_type_(const  ::entity::VipType::type val) {
    vip_type_ = val;
  }

  void __set_viP_expire_time_(const int64_t val) {
    viP_expire_time_ = val;
  }

  bool operator == (const MessageActorVipSynchronize & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(vip_type_ == rhs.vip_type_))
      return false;
    if (!(viP_expire_time_ == rhs.viP_expire_time_))
      return false;
    return true;
  }
  bool operator != (const MessageActorVipSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageActorVipSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageActorVipSynchronize &a, MessageActorVipSynchronize &b);

}} // namespace

#endif
