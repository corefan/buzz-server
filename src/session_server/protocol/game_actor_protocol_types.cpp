/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "game_actor_protocol_types.h"

#include <algorithm>

namespace session { namespace protocol {

const char* GameMessageActorLoginRequest::ascii_fingerprint = "CE85E3BFD6AAD612468CBCC67E63353B";
const uint8_t GameMessageActorLoginRequest::binary_fingerprint[16] = {0xCE,0x85,0xE3,0xBF,0xD6,0xAA,0xD6,0x12,0x46,0x8C,0xBC,0xC6,0x7E,0x63,0x35,0x3B};

uint32_t GameMessageActorLoginRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_gateway_ = false;
  bool isset_jump_scene_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gateway_);
          isset_gateway_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->jump_scene_);
          isset_jump_scene_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->scene_);
          this->__isset.scene_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->x_);
          this->__isset.x_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->y_);
          this->__isset.y_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->data_);
          this->__isset.data_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gateway_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_jump_scene_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GameMessageActorLoginRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GameMessageActorLoginRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gateway_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->gateway_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jump_scene_", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->jump_scene_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.scene_) {
    xfer += oprot->writeFieldBegin("scene_", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->scene_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.x_) {
    xfer += oprot->writeFieldBegin("x_", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->x_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.y_) {
    xfer += oprot->writeFieldBegin("y_", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->y_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.data_) {
    xfer += oprot->writeFieldBegin("data_", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeBinary(this->data_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GameMessageActorLoginRequest &a, GameMessageActorLoginRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.gateway_, b.gateway_);
  swap(a.jump_scene_, b.jump_scene_);
  swap(a.scene_, b.scene_);
  swap(a.x_, b.x_);
  swap(a.y_, b.y_);
  swap(a.data_, b.data_);
  swap(a.__isset, b.__isset);
}

const char* GameMessageActorLoginResponse::ascii_fingerprint = "E871667CFF6BBE383C7B3224EB95B8B4";
const uint8_t GameMessageActorLoginResponse::binary_fingerprint[16] = {0xE8,0x71,0x66,0x7C,0xFF,0x6B,0xBE,0x38,0x3C,0x7B,0x32,0x24,0xEB,0x95,0xB8,0xB4};

uint32_t GameMessageActorLoginResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_logined_ = false;
  bool isset_actor_id_ = false;
  bool isset_actor_name_ = false;
  bool isset_jump_scene_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->logined_);
          isset_logined_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actor_name_);
          isset_actor_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->jump_scene_);
          isset_jump_scene_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_logined_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_actor_name_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_jump_scene_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GameMessageActorLoginResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GameMessageActorLoginResponse");

  xfer += oprot->writeFieldBegin("logined_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->logined_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("actor_name_", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->actor_name_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jump_scene_", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->jump_scene_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GameMessageActorLoginResponse &a, GameMessageActorLoginResponse &b) {
  using ::std::swap;
  swap(a.logined_, b.logined_);
  swap(a.actor_id_, b.actor_id_);
  swap(a.actor_name_, b.actor_name_);
  swap(a.jump_scene_, b.jump_scene_);
}

const char* GameMessageActorLogout::ascii_fingerprint = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
const uint8_t GameMessageActorLogout::binary_fingerprint[16] = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

uint32_t GameMessageActorLogout::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GameMessageActorLogout::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GameMessageActorLogout");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GameMessageActorLogout &a, GameMessageActorLogout &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
}

const char* SessionActorInfo::ascii_fingerprint = "B6D965159ADF4C5BF71E3C6B8B85C403";
const uint8_t SessionActorInfo::binary_fingerprint[16] = {0xB6,0xD9,0x65,0x15,0x9A,0xDF,0x4C,0x5B,0xF7,0x1E,0x3C,0x6B,0x8B,0x85,0xC4,0x03};

uint32_t SessionActorInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;
  bool isset_name_ = false;
  bool isset_level_ = false;
  bool isset_vocation_ = false;
  bool isset_gender_ = false;
  bool isset_map_ = false;
  bool isset_functionality_state_ = false;
  bool isset_axe_fight_score_ = false;
  bool isset_shoot_fight_score_ = false;
  bool isset_magic_fight_score_ = false;
  bool isset_last_logout_time_ = false;
  bool isset_gateway_ = false;
  bool isset_vip_type_ = false;
  bool isset_vip_expire_time_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name_);
          isset_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level_);
          isset_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->vocation_ = ( ::entity::VocationType::type)ecast0;
          isset_vocation_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->gender_ = ( ::entity::GenderType::type)ecast1;
          isset_gender_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->map_);
          isset_map_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->functionality_state_);
          isset_functionality_state_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->axe_fight_score_);
          isset_axe_fight_score_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->shoot_fight_score_);
          isset_shoot_fight_score_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->magic_fight_score_);
          isset_magic_fight_score_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->last_logout_time_);
          isset_last_logout_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gateway_);
          isset_gateway_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->vip_type_ = ( ::entity::VipType::type)ecast2;
          isset_vip_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vip_expire_time_);
          isset_vip_expire_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_name_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_vocation_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gender_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_map_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_functionality_state_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_axe_fight_score_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_shoot_fight_score_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_magic_fight_score_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_last_logout_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gateway_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_vip_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_vip_expire_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SessionActorInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SessionActorInfo");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("level_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vocation_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->vocation_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gender_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->gender_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("map_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->map_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("functionality_state_", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->functionality_state_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("axe_fight_score_", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->axe_fight_score_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("shoot_fight_score_", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->shoot_fight_score_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("magic_fight_score_", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->magic_fight_score_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_logout_time_", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->last_logout_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gateway_", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->gateway_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vip_type_", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32((int32_t)this->vip_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vip_expire_time_", ::apache::thrift::protocol::T_I64, 14);
  xfer += oprot->writeI64(this->vip_expire_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SessionActorInfo &a, SessionActorInfo &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.name_, b.name_);
  swap(a.level_, b.level_);
  swap(a.vocation_, b.vocation_);
  swap(a.gender_, b.gender_);
  swap(a.map_, b.map_);
  swap(a.functionality_state_, b.functionality_state_);
  swap(a.axe_fight_score_, b.axe_fight_score_);
  swap(a.shoot_fight_score_, b.shoot_fight_score_);
  swap(a.magic_fight_score_, b.magic_fight_score_);
  swap(a.last_logout_time_, b.last_logout_time_);
  swap(a.gateway_, b.gateway_);
  swap(a.vip_type_, b.vip_type_);
  swap(a.vip_expire_time_, b.vip_expire_time_);
}

const char* MessageActorBatchLoginRequest::ascii_fingerprint = "79D9090DDBAE9B592F99636D3FF51C39";
const uint8_t MessageActorBatchLoginRequest::binary_fingerprint[16] = {0x79,0xD9,0x09,0x0D,0xDB,0xAE,0x9B,0x59,0x2F,0x99,0x63,0x6D,0x3F,0xF5,0x1C,0x39};

uint32_t MessageActorBatchLoginRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actors_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->actors_.clear();
            uint32_t _size3;
            ::apache::thrift::protocol::TType _etype6;
            xfer += iprot->readListBegin(_etype6, _size3);
            this->actors_.resize(_size3);
            uint32_t _i7;
            for (_i7 = 0; _i7 < _size3; ++_i7)
            {
              xfer += this->actors_[_i7].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_actors_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actors_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageActorBatchLoginRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageActorBatchLoginRequest");

  xfer += oprot->writeFieldBegin("actors_", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->actors_.size()));
    std::vector<SessionActorInfo> ::const_iterator _iter8;
    for (_iter8 = this->actors_.begin(); _iter8 != this->actors_.end(); ++_iter8)
    {
      xfer += (*_iter8).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageActorBatchLoginRequest &a, MessageActorBatchLoginRequest &b) {
  using ::std::swap;
  swap(a.actors_, b.actors_);
}

const char* MessageActorLevelSynchronize::ascii_fingerprint = "9C4E30169AD9E0914633984FE5C16314";
const uint8_t MessageActorLevelSynchronize::binary_fingerprint[16] = {0x9C,0x4E,0x30,0x16,0x9A,0xD9,0xE0,0x91,0x46,0x33,0x98,0x4F,0xE5,0xC1,0x63,0x14};

uint32_t MessageActorLevelSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_old_level_ = false;
  bool isset_new_level_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->old_level_);
          isset_old_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->new_level_);
          isset_new_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_old_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_new_level_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageActorLevelSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageActorLevelSynchronize");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("old_level_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->old_level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("new_level_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->new_level_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageActorLevelSynchronize &a, MessageActorLevelSynchronize &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.old_level_, b.old_level_);
  swap(a.new_level_, b.new_level_);
}

const char* MessageActorVocationSynchronzie::ascii_fingerprint = "5CE29A28EF007283753847D663D38BF1";
const uint8_t MessageActorVocationSynchronzie::binary_fingerprint[16] = {0x5C,0xE2,0x9A,0x28,0xEF,0x00,0x72,0x83,0x75,0x38,0x47,0xD6,0x63,0xD3,0x8B,0xF1};

uint32_t MessageActorVocationSynchronzie::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_src_vocation_ = false;
  bool isset_dst_vocation_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast9;
          xfer += iprot->readI32(ecast9);
          this->src_vocation_ = ( ::entity::VocationType::type)ecast9;
          isset_src_vocation_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast10;
          xfer += iprot->readI32(ecast10);
          this->dst_vocation_ = ( ::entity::VocationType::type)ecast10;
          isset_dst_vocation_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_src_vocation_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dst_vocation_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageActorVocationSynchronzie::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageActorVocationSynchronzie");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("src_vocation_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->src_vocation_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dst_vocation_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->dst_vocation_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageActorVocationSynchronzie &a, MessageActorVocationSynchronzie &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.src_vocation_, b.src_vocation_);
  swap(a.dst_vocation_, b.dst_vocation_);
}

const char* MessageActorFunctionalityStateSynchronize::ascii_fingerprint = "6278CAE415EFE12B973918A423CEE5F1";
const uint8_t MessageActorFunctionalityStateSynchronize::binary_fingerprint[16] = {0x62,0x78,0xCA,0xE4,0x15,0xEF,0xE1,0x2B,0x97,0x39,0x18,0xA4,0x23,0xCE,0xE5,0xF1};

uint32_t MessageActorFunctionalityStateSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_type_ = false;
  bool isset_state_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast11;
          xfer += iprot->readI32(ecast11);
          this->type_ = ( ::entity::FunctionalityType::type)ecast11;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->state_);
          isset_state_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_state_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageActorFunctionalityStateSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageActorFunctionalityStateSynchronize");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state_", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->state_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageActorFunctionalityStateSynchronize &a, MessageActorFunctionalityStateSynchronize &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.type_, b.type_);
  swap(a.state_, b.state_);
}

const char* MessageActorFightScoreSychronize::ascii_fingerprint = "30C3DDD3E5E3E6AC7C551E94150DF26F";
const uint8_t MessageActorFightScoreSychronize::binary_fingerprint[16] = {0x30,0xC3,0xDD,0xD3,0xE5,0xE3,0xE6,0xAC,0x7C,0x55,0x1E,0x94,0x15,0x0D,0xF2,0x6F};

uint32_t MessageActorFightScoreSychronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->axe_fight_score_);
          this->__isset.axe_fight_score_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->shoot_fight_score_);
          this->__isset.shoot_fight_score_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->magic_fight_score_);
          this->__isset.magic_fight_score_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageActorFightScoreSychronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageActorFightScoreSychronize");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.axe_fight_score_) {
    xfer += oprot->writeFieldBegin("axe_fight_score_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->axe_fight_score_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.shoot_fight_score_) {
    xfer += oprot->writeFieldBegin("shoot_fight_score_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->shoot_fight_score_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.magic_fight_score_) {
    xfer += oprot->writeFieldBegin("magic_fight_score_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->magic_fight_score_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageActorFightScoreSychronize &a, MessageActorFightScoreSychronize &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.axe_fight_score_, b.axe_fight_score_);
  swap(a.shoot_fight_score_, b.shoot_fight_score_);
  swap(a.magic_fight_score_, b.magic_fight_score_);
  swap(a.__isset, b.__isset);
}

const char* MessageActorCompareRequest::ascii_fingerprint = "F33135321253DAEB67B0E79E416CA831";
const uint8_t MessageActorCompareRequest::binary_fingerprint[16] = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

uint32_t MessageActorCompareRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_compare_actor_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->compare_actor_);
          isset_compare_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_compare_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageActorCompareRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageActorCompareRequest");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("compare_actor_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->compare_actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageActorCompareRequest &a, MessageActorCompareRequest &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.compare_actor_, b.compare_actor_);
}

const char* MessageActorCompareSynchronize::ascii_fingerprint = "F33135321253DAEB67B0E79E416CA831";
const uint8_t MessageActorCompareSynchronize::binary_fingerprint[16] = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

uint32_t MessageActorCompareSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_compare_actor_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->compare_actor_);
          isset_compare_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_compare_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageActorCompareSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageActorCompareSynchronize");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("compare_actor_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->compare_actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageActorCompareSynchronize &a, MessageActorCompareSynchronize &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.compare_actor_, b.compare_actor_);
}

const char* MessageActorFacadeSynchronize::ascii_fingerprint = "F33135321253DAEB67B0E79E416CA831";
const uint8_t MessageActorFacadeSynchronize::binary_fingerprint[16] = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

uint32_t MessageActorFacadeSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_observe_actor_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->observe_actor_);
          isset_observe_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_observe_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageActorFacadeSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageActorFacadeSynchronize");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("observe_actor_", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->observe_actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageActorFacadeSynchronize &a, MessageActorFacadeSynchronize &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.observe_actor_, b.observe_actor_);
}

const char* MessageActorVipSynchronize::ascii_fingerprint = "9ACEC2FD9260700CE0F0CB6786329418";
const uint8_t MessageActorVipSynchronize::binary_fingerprint[16] = {0x9A,0xCE,0xC2,0xFD,0x92,0x60,0x70,0x0C,0xE0,0xF0,0xCB,0x67,0x86,0x32,0x94,0x18};

uint32_t MessageActorVipSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_ = false;
  bool isset_vip_type_ = false;
  bool isset_viP_expire_time_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_);
          isset_actor_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast12;
          xfer += iprot->readI32(ecast12);
          this->vip_type_ = ( ::entity::VipType::type)ecast12;
          isset_vip_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->viP_expire_time_);
          isset_viP_expire_time_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_vip_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_viP_expire_time_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageActorVipSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageActorVipSynchronize");

  xfer += oprot->writeFieldBegin("actor_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vip_type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->vip_type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("viP_expire_time_", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->viP_expire_time_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageActorVipSynchronize &a, MessageActorVipSynchronize &b) {
  using ::std::swap;
  swap(a.actor_, b.actor_);
  swap(a.vip_type_, b.vip_type_);
  swap(a.viP_expire_time_, b.viP_expire_time_);
}

}} // namespace
