/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "game_guild_protocol_types.h"

#include <algorithm>

namespace session { namespace protocol {

int _kGuildOperateTypeValues[] = {
  GuildOperateType::ADD,
  GuildOperateType::REMOVE,
  GuildOperateType::UPDATE
};
const char* _kGuildOperateTypeNames[] = {
  "ADD",
  "REMOVE",
  "UPDATE"
};
const std::map<int, const char*> _GuildOperateType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kGuildOperateTypeValues, _kGuildOperateTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kGuildSkillOperateTypeValues[] = {
  GuildSkillOperateType::ADD,
  GuildSkillOperateType::UPDATE,
  GuildSkillOperateType::CLEAR
};
const char* _kGuildSkillOperateTypeNames[] = {
  "ADD",
  "UPDATE",
  "CLEAR"
};
const std::map<int, const char*> _GuildSkillOperateType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kGuildSkillOperateTypeValues, _kGuildSkillOperateTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kGuildBuffOperateTypeValues[] = {
  GuildBuffOperateType::ADD,
  GuildBuffOperateType::CLEAR
};
const char* _kGuildBuffOperateTypeNames[] = {
  "ADD",
  "CLEAR"
};
const std::map<int, const char*> _GuildBuffOperateType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kGuildBuffOperateTypeValues, _kGuildBuffOperateTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* GuildData::ascii_fingerprint = "5ACEDEA50ECC40EA5AF25166CF151C2C";
const uint8_t GuildData::binary_fingerprint[16] = {0x5A,0xCE,0xDE,0xA5,0x0E,0xCC,0x40,0xEA,0x5A,0xF2,0x51,0x66,0xCF,0x15,0x1C,0x2C};

uint32_t GuildData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name_);
          this->__isset.name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level_);
          this->__isset.level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->light_attribute_);
          this->__isset.light_attribute_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dark_attribute_);
          this->__isset.dark_attribute_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->holy_attribute_);
          this->__isset.holy_attribute_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->shop_level_);
          this->__isset.shop_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->college_level_);
          this->__isset.college_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->barrack_level_);
          this->__isset.barrack_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GuildData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GuildData");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.name_) {
    xfer += oprot->writeFieldBegin("name_", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->name_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.level_) {
    xfer += oprot->writeFieldBegin("level_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.light_attribute_) {
    xfer += oprot->writeFieldBegin("light_attribute_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->light_attribute_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dark_attribute_) {
    xfer += oprot->writeFieldBegin("dark_attribute_", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->dark_attribute_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.holy_attribute_) {
    xfer += oprot->writeFieldBegin("holy_attribute_", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->holy_attribute_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.shop_level_) {
    xfer += oprot->writeFieldBegin("shop_level_", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->shop_level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.college_level_) {
    xfer += oprot->writeFieldBegin("college_level_", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->college_level_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.barrack_level_) {
    xfer += oprot->writeFieldBegin("barrack_level_", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32(this->barrack_level_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GuildData &a, GuildData &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.name_, b.name_);
  swap(a.level_, b.level_);
  swap(a.light_attribute_, b.light_attribute_);
  swap(a.dark_attribute_, b.dark_attribute_);
  swap(a.holy_attribute_, b.holy_attribute_);
  swap(a.shop_level_, b.shop_level_);
  swap(a.college_level_, b.college_level_);
  swap(a.barrack_level_, b.barrack_level_);
  swap(a.__isset, b.__isset);
}

const char* GuildSkillData::ascii_fingerprint = "E2ADD47BD922A861BCA548267B9D2CB8";
const uint8_t GuildSkillData::binary_fingerprint[16] = {0xE2,0xAD,0xD4,0x7B,0xD9,0x22,0xA8,0x61,0xBC,0xA5,0x48,0x26,0x7B,0x9D,0x2C,0xB8};

uint32_t GuildSkillData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->effective_level_);
          this->__isset.effective_level_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GuildSkillData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GuildSkillData");

  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.effective_level_) {
    xfer += oprot->writeFieldBegin("effective_level_", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->effective_level_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GuildSkillData &a, GuildSkillData &b) {
  using ::std::swap;
  swap(a.id_, b.id_);
  swap(a.effective_level_, b.effective_level_);
  swap(a.__isset, b.__isset);
}

const char* GuildActorData::ascii_fingerprint = "4B9FD40E870D3926EA5C4C1EFEF35BCF";
const uint8_t GuildActorData::binary_fingerprint[16] = {0x4B,0x9F,0xD4,0x0E,0x87,0x0D,0x39,0x26,0xEA,0x5C,0x4C,0x1E,0xFE,0xF3,0x5B,0xCF};

uint32_t GuildActorData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_guild_id_ = false;
  bool isset_guild_position_ = false;
  bool isset_current_contribution_value_ = false;
  bool isset_guild_skills_ = false;
  bool isset_guild_buffs_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->guild_id_);
          isset_guild_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_position_);
          isset_guild_position_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->current_contribution_value_);
          isset_current_contribution_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->guild_skills_.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->guild_skills_.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->guild_skills_[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_guild_skills_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->guild_buffs_.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->guild_buffs_.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += iprot->readI32(this->guild_buffs_[_i9]);
            }
            xfer += iprot->readListEnd();
          }
          isset_guild_buffs_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_guild_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_guild_position_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_current_contribution_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_guild_skills_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_guild_buffs_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GuildActorData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GuildActorData");

  xfer += oprot->writeFieldBegin("guild_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->guild_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guild_position_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->guild_position_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("current_contribution_value_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->current_contribution_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guild_skills_", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->guild_skills_.size()));
    std::vector<GuildSkillData> ::const_iterator _iter10;
    for (_iter10 = this->guild_skills_.begin(); _iter10 != this->guild_skills_.end(); ++_iter10)
    {
      xfer += (*_iter10).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guild_buffs_", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->guild_buffs_.size()));
    std::vector<int32_t> ::const_iterator _iter11;
    for (_iter11 = this->guild_buffs_.begin(); _iter11 != this->guild_buffs_.end(); ++_iter11)
    {
      xfer += oprot->writeI32((*_iter11));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GuildActorData &a, GuildActorData &b) {
  using ::std::swap;
  swap(a.guild_id_, b.guild_id_);
  swap(a.guild_position_, b.guild_position_);
  swap(a.current_contribution_value_, b.current_contribution_value_);
  swap(a.guild_skills_, b.guild_skills_);
  swap(a.guild_buffs_, b.guild_buffs_);
}

const char* MessageGuildInfoRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t MessageGuildInfoRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t MessageGuildInfoRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageGuildInfoRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildInfoRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildInfoRequest &a, MessageGuildInfoRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* MessageGuildInfoResponse::ascii_fingerprint = "0AAA900F7178A72F623E104FCF2E1EA7";
const uint8_t MessageGuildInfoResponse::binary_fingerprint[16] = {0x0A,0xAA,0x90,0x0F,0x71,0x78,0xA7,0x2F,0x62,0x3E,0x10,0x4F,0xCF,0x2E,0x1E,0xA7};

uint32_t MessageGuildInfoResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_guilds_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->guilds_.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->guilds_.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += this->guilds_[_i16].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_guilds_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_guilds_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildInfoResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildInfoResponse");

  xfer += oprot->writeFieldBegin("guilds_", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->guilds_.size()));
    std::vector<GuildData> ::const_iterator _iter17;
    for (_iter17 = this->guilds_.begin(); _iter17 != this->guilds_.end(); ++_iter17)
    {
      xfer += (*_iter17).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildInfoResponse &a, MessageGuildInfoResponse &b) {
  using ::std::swap;
  swap(a.guilds_, b.guilds_);
}

const char* MessageGuildInfoSynchronize::ascii_fingerprint = "F98B40825BC869D0694E1D5CFCD7F006";
const uint8_t MessageGuildInfoSynchronize::binary_fingerprint[16] = {0xF9,0x8B,0x40,0x82,0x5B,0xC8,0x69,0xD0,0x69,0x4E,0x1D,0x5C,0xFC,0xD7,0xF0,0x06};

uint32_t MessageGuildInfoSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_data_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast18;
          xfer += iprot->readI32(ecast18);
          this->type_ = (GuildOperateType::type)ecast18;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data_.read(iprot);
          isset_data_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_data_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildInfoSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildInfoSynchronize");

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->data_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildInfoSynchronize &a, MessageGuildInfoSynchronize &b) {
  using ::std::swap;
  swap(a.type_, b.type_);
  swap(a.data_, b.data_);
}

const char* MessageGuildActorInitialize::ascii_fingerprint = "F58F0E8469DFC4E6D2F889E2AA90FA5A";
const uint8_t MessageGuildActorInitialize::binary_fingerprint[16] = {0xF5,0x8F,0x0E,0x84,0x69,0xDF,0xC4,0xE6,0xD2,0xF8,0x89,0xE2,0xAA,0x90,0xFA,0x5A};

uint32_t MessageGuildActorInitialize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_data_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data_.read(iprot);
          isset_data_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_data_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildActorInitialize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildActorInitialize");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data_", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->data_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildActorInitialize &a, MessageGuildActorInitialize &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.data_, b.data_);
}

const char* MessageGuildActorSynchronize::ascii_fingerprint = "628F9754ED6822507C47F875E04A78DB";
const uint8_t MessageGuildActorSynchronize::binary_fingerprint[16] = {0x62,0x8F,0x97,0x54,0xED,0x68,0x22,0x50,0x7C,0x47,0xF8,0x75,0xE0,0x4A,0x78,0xDB};

uint32_t MessageGuildActorSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->guild_id_);
          this->__isset.guild_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guild_name_);
          this->__isset.guild_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_position_);
          this->__isset.guild_position_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->current_contribution_value_);
          this->__isset.current_contribution_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildActorSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildActorSynchronize");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.guild_id_) {
    xfer += oprot->writeFieldBegin("guild_id_", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->guild_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guild_name_) {
    xfer += oprot->writeFieldBegin("guild_name_", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->guild_name_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guild_position_) {
    xfer += oprot->writeFieldBegin("guild_position_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->guild_position_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.current_contribution_value_) {
    xfer += oprot->writeFieldBegin("current_contribution_value_", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->current_contribution_value_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildActorSynchronize &a, MessageGuildActorSynchronize &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.guild_id_, b.guild_id_);
  swap(a.guild_name_, b.guild_name_);
  swap(a.guild_position_, b.guild_position_);
  swap(a.current_contribution_value_, b.current_contribution_value_);
  swap(a.__isset, b.__isset);
}

const char* MessageGuildSkillSynchronize::ascii_fingerprint = "D7FA968AAC2109DF376D9CC75D7DECF8";
const uint8_t MessageGuildSkillSynchronize::binary_fingerprint[16] = {0xD7,0xFA,0x96,0x8A,0xAC,0x21,0x09,0xDF,0x37,0x6D,0x9C,0xC7,0x5D,0x7D,0xEC,0xF8};

uint32_t MessageGuildSkillSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_type_ = false;
  bool isset_data_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast19;
          xfer += iprot->readI32(ecast19);
          this->type_ = (GuildSkillOperateType::type)ecast19;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data_.read(iprot);
          isset_data_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_data_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildSkillSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildSkillSynchronize");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data_", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->data_.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildSkillSynchronize &a, MessageGuildSkillSynchronize &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.type_, b.type_);
  swap(a.data_, b.data_);
}

const char* MessageGuildBuffSynchronize::ascii_fingerprint = "DF2FE2E4EB425A90BF93B80E73230790";
const uint8_t MessageGuildBuffSynchronize::binary_fingerprint[16] = {0xDF,0x2F,0xE2,0xE4,0xEB,0x42,0x5A,0x90,0xBF,0x93,0xB8,0x0E,0x73,0x23,0x07,0x90};

uint32_t MessageGuildBuffSynchronize::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_type_ = false;
  bool isset_guild_buff_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast20;
          xfer += iprot->readI32(ecast20);
          this->type_ = (GuildBuffOperateType::type)ecast20;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_buff_id_);
          isset_guild_buff_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_guild_buff_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildBuffSynchronize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildBuffSynchronize");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guild_buff_id_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->guild_buff_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildBuffSynchronize &a, MessageGuildBuffSynchronize &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.type_, b.type_);
  swap(a.guild_buff_id_, b.guild_buff_id_);
}

const char* MessageGuildCreateRequest::ascii_fingerprint = "FA14FF3C297F6EBE2FC46FD846FF0E76";
const uint8_t MessageGuildCreateRequest::binary_fingerprint[16] = {0xFA,0x14,0xFF,0x3C,0x29,0x7F,0x6E,0xBE,0x2F,0xC4,0x6F,0xD8,0x46,0xFF,0x0E,0x76};

uint32_t MessageGuildCreateRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_guild_name_ = false;
  bool isset_guild_logo_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guild_name_);
          isset_guild_name_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guild_logo_);
          isset_guild_logo_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_guild_name_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_guild_logo_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildCreateRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildCreateRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guild_name_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->guild_name_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guild_logo_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->guild_logo_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildCreateRequest &a, MessageGuildCreateRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.guild_name_, b.guild_name_);
  swap(a.guild_logo_, b.guild_logo_);
}

const char* MessageGuildDonateRequest::ascii_fingerprint = "DF2FE2E4EB425A90BF93B80E73230790";
const uint8_t MessageGuildDonateRequest::binary_fingerprint[16] = {0xDF,0x2F,0xE2,0xE4,0xEB,0x42,0x5A,0x90,0xBF,0x93,0xB8,0x0E,0x73,0x23,0x07,0x90};

uint32_t MessageGuildDonateRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_type_ = false;
  bool isset_num_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast21;
          xfer += iprot->readI32(ecast21);
          this->type_ = ( ::entity::GuildDonateType::type)ecast21;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num_);
          isset_num_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_num_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildDonateRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildDonateRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->num_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildDonateRequest &a, MessageGuildDonateRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.type_, b.type_);
  swap(a.num_, b.num_);
}

const char* MessageGuildShopBuyItemRequest::ascii_fingerprint = "9C4E30169AD9E0914633984FE5C16314";
const uint8_t MessageGuildShopBuyItemRequest::binary_fingerprint[16] = {0x9C,0x4E,0x30,0x16,0x9A,0xD9,0xE0,0x91,0x46,0x33,0x98,0x4F,0xE5,0xC1,0x63,0x14};

uint32_t MessageGuildShopBuyItemRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_item_id_ = false;
  bool isset_item_count_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item_id_);
          isset_item_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item_count_);
          isset_item_count_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item_count_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildShopBuyItemRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildShopBuyItemRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item_id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->item_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item_count_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->item_count_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildShopBuyItemRequest &a, MessageGuildShopBuyItemRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.item_id_, b.item_id_);
  swap(a.item_count_, b.item_count_);
}

const char* MessageGuildShopBuyItemResponse::ascii_fingerprint = "9C4E30169AD9E0914633984FE5C16314";
const uint8_t MessageGuildShopBuyItemResponse::binary_fingerprint[16] = {0x9C,0x4E,0x30,0x16,0x9A,0xD9,0xE0,0x91,0x46,0x33,0x98,0x4F,0xE5,0xC1,0x63,0x14};

uint32_t MessageGuildShopBuyItemResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_item_id_ = false;
  bool isset_item_count_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item_id_);
          isset_item_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item_count_);
          isset_item_count_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item_count_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildShopBuyItemResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildShopBuyItemResponse");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item_id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->item_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item_count_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->item_count_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildShopBuyItemResponse &a, MessageGuildShopBuyItemResponse &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.item_id_, b.item_id_);
  swap(a.item_count_, b.item_count_);
}

const char* MessageGuildPlayingAwardRequest::ascii_fingerprint = "AFAFBCDB9822F9D1AA4E44188E720B47";
const uint8_t MessageGuildPlayingAwardRequest::binary_fingerprint[16] = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

uint32_t MessageGuildPlayingAwardRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_playing_template_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_template_id_);
          isset_playing_template_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_playing_template_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildPlayingAwardRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildPlayingAwardRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("playing_template_id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->playing_template_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildPlayingAwardRequest &a, MessageGuildPlayingAwardRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.playing_template_id_, b.playing_template_id_);
}

const char* MessageGuildPlayingAwardResponse::ascii_fingerprint = "5A45E85EA6F562454AF8551579601C4B";
const uint8_t MessageGuildPlayingAwardResponse::binary_fingerprint[16] = {0x5A,0x45,0xE8,0x5E,0xA6,0xF5,0x62,0x45,0x4A,0xF8,0x55,0x15,0x79,0x60,0x1C,0x4B};

uint32_t MessageGuildPlayingAwardResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playing_template_id_);
          this->__isset.playing_template_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildPlayingAwardResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildPlayingAwardResponse");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.playing_template_id_) {
    xfer += oprot->writeFieldBegin("playing_template_id_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->playing_template_id_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildPlayingAwardResponse &a, MessageGuildPlayingAwardResponse &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.result_, b.result_);
  swap(a.playing_template_id_, b.playing_template_id_);
  swap(a.__isset, b.__isset);
}

const char* MessageGuildAddContributionRequest::ascii_fingerprint = "AFAFBCDB9822F9D1AA4E44188E720B47";
const uint8_t MessageGuildAddContributionRequest::binary_fingerprint[16] = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

uint32_t MessageGuildAddContributionRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_add_value_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->add_value_);
          isset_add_value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_add_value_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageGuildAddContributionRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageGuildAddContributionRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("add_value_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->add_value_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageGuildAddContributionRequest &a, MessageGuildAddContributionRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.add_value_, b.add_value_);
}

}} // namespace
