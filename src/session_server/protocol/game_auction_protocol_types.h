/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef game_auction_protocol_TYPES_H
#define game_auction_protocol_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "session_game_protocol_types.h"


namespace session { namespace protocol {

typedef struct _MessageAuctionSellRequest__isset {
  _MessageAuctionSellRequest__isset() : item_id_(false), item_template_id_(false), item_number_(false), transaction_id_(false) {}
  bool item_id_;
  bool item_template_id_;
  bool item_number_;
  bool transaction_id_;
} _MessageAuctionSellRequest__isset;

class MessageAuctionSellRequest {
 public:

  static const char* ascii_fingerprint; // = "0C7C635772D7B02DE3BCF62BEF9E7CC9";
  static const uint8_t binary_fingerprint[16]; // = {0x0C,0x7C,0x63,0x57,0x72,0xD7,0xB0,0x2D,0xE3,0xBC,0xF6,0x2B,0xEF,0x9E,0x7C,0xC9};

  MessageAuctionSellRequest() : actor_id_(0), item_id_(0), item_template_id_(0), item_number_(0), transaction_id_(), start_bid_price_(0), buyout_price_(0), auction_time_id_(0) {
  }

  virtual ~MessageAuctionSellRequest() throw() {}

  int64_t actor_id_;
  int64_t item_id_;
  int32_t item_template_id_;
  int32_t item_number_;
  std::string transaction_id_;
  int32_t start_bid_price_;
  int32_t buyout_price_;
  int32_t auction_time_id_;

  _MessageAuctionSellRequest__isset __isset;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_item_id_(const int64_t val) {
    item_id_ = val;
    __isset.item_id_ = true;
  }

  void __set_item_template_id_(const int32_t val) {
    item_template_id_ = val;
    __isset.item_template_id_ = true;
  }

  void __set_item_number_(const int32_t val) {
    item_number_ = val;
    __isset.item_number_ = true;
  }

  void __set_transaction_id_(const std::string& val) {
    transaction_id_ = val;
    __isset.transaction_id_ = true;
  }

  void __set_start_bid_price_(const int32_t val) {
    start_bid_price_ = val;
  }

  void __set_buyout_price_(const int32_t val) {
    buyout_price_ = val;
  }

  void __set_auction_time_id_(const int32_t val) {
    auction_time_id_ = val;
  }

  bool operator == (const MessageAuctionSellRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (__isset.item_id_ != rhs.__isset.item_id_)
      return false;
    else if (__isset.item_id_ && !(item_id_ == rhs.item_id_))
      return false;
    if (__isset.item_template_id_ != rhs.__isset.item_template_id_)
      return false;
    else if (__isset.item_template_id_ && !(item_template_id_ == rhs.item_template_id_))
      return false;
    if (__isset.item_number_ != rhs.__isset.item_number_)
      return false;
    else if (__isset.item_number_ && !(item_number_ == rhs.item_number_))
      return false;
    if (__isset.transaction_id_ != rhs.__isset.transaction_id_)
      return false;
    else if (__isset.transaction_id_ && !(transaction_id_ == rhs.transaction_id_))
      return false;
    if (!(start_bid_price_ == rhs.start_bid_price_))
      return false;
    if (!(buyout_price_ == rhs.buyout_price_))
      return false;
    if (!(auction_time_id_ == rhs.auction_time_id_))
      return false;
    return true;
  }
  bool operator != (const MessageAuctionSellRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAuctionSellRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAuctionSellRequest &a, MessageAuctionSellRequest &b);

typedef struct _MessageAuctionSellResponse__isset {
  _MessageAuctionSellResponse__isset() : item_template_id_(false), item_number_(false), item_extra_info_(false), transaction_id_(false), start_bid_price_(false), buyout_price_(false), auction_time_id_(false) {}
  bool item_template_id_;
  bool item_number_;
  bool item_extra_info_;
  bool transaction_id_;
  bool start_bid_price_;
  bool buyout_price_;
  bool auction_time_id_;
} _MessageAuctionSellResponse__isset;

class MessageAuctionSellResponse {
 public:

  static const char* ascii_fingerprint; // = "2AA9442DC99B326BCD20E762B43FBE7A";
  static const uint8_t binary_fingerprint[16]; // = {0x2A,0xA9,0x44,0x2D,0xC9,0x9B,0x32,0x6B,0xCD,0x20,0xE7,0x62,0xB4,0x3F,0xBE,0x7A};

  MessageAuctionSellResponse() : actor_id_(0), result_(0), item_template_id_(0), item_number_(0), item_extra_info_(), transaction_id_(), start_bid_price_(0), buyout_price_(0), auction_time_id_(0) {
  }

  virtual ~MessageAuctionSellResponse() throw() {}

  int64_t actor_id_;
  bool result_;
  int32_t item_template_id_;
  int32_t item_number_;
  std::string item_extra_info_;
  std::string transaction_id_;
  int32_t start_bid_price_;
  int32_t buyout_price_;
  int32_t auction_time_id_;

  _MessageAuctionSellResponse__isset __isset;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_item_template_id_(const int32_t val) {
    item_template_id_ = val;
    __isset.item_template_id_ = true;
  }

  void __set_item_number_(const int32_t val) {
    item_number_ = val;
    __isset.item_number_ = true;
  }

  void __set_item_extra_info_(const std::string& val) {
    item_extra_info_ = val;
    __isset.item_extra_info_ = true;
  }

  void __set_transaction_id_(const std::string& val) {
    transaction_id_ = val;
    __isset.transaction_id_ = true;
  }

  void __set_start_bid_price_(const int32_t val) {
    start_bid_price_ = val;
    __isset.start_bid_price_ = true;
  }

  void __set_buyout_price_(const int32_t val) {
    buyout_price_ = val;
    __isset.buyout_price_ = true;
  }

  void __set_auction_time_id_(const int32_t val) {
    auction_time_id_ = val;
    __isset.auction_time_id_ = true;
  }

  bool operator == (const MessageAuctionSellResponse & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.item_template_id_ != rhs.__isset.item_template_id_)
      return false;
    else if (__isset.item_template_id_ && !(item_template_id_ == rhs.item_template_id_))
      return false;
    if (__isset.item_number_ != rhs.__isset.item_number_)
      return false;
    else if (__isset.item_number_ && !(item_number_ == rhs.item_number_))
      return false;
    if (__isset.item_extra_info_ != rhs.__isset.item_extra_info_)
      return false;
    else if (__isset.item_extra_info_ && !(item_extra_info_ == rhs.item_extra_info_))
      return false;
    if (__isset.transaction_id_ != rhs.__isset.transaction_id_)
      return false;
    else if (__isset.transaction_id_ && !(transaction_id_ == rhs.transaction_id_))
      return false;
    if (__isset.start_bid_price_ != rhs.__isset.start_bid_price_)
      return false;
    else if (__isset.start_bid_price_ && !(start_bid_price_ == rhs.start_bid_price_))
      return false;
    if (__isset.buyout_price_ != rhs.__isset.buyout_price_)
      return false;
    else if (__isset.buyout_price_ && !(buyout_price_ == rhs.buyout_price_))
      return false;
    if (__isset.auction_time_id_ != rhs.__isset.auction_time_id_)
      return false;
    else if (__isset.auction_time_id_ && !(auction_time_id_ == rhs.auction_time_id_))
      return false;
    return true;
  }
  bool operator != (const MessageAuctionSellResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAuctionSellResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAuctionSellResponse &a, MessageAuctionSellResponse &b);


class MessageAuctionBidRequest {
 public:

  static const char* ascii_fingerprint; // = "FA14FF3C297F6EBE2FC46FD846FF0E76";
  static const uint8_t binary_fingerprint[16]; // = {0xFA,0x14,0xFF,0x3C,0x29,0x7F,0x6E,0xBE,0x2F,0xC4,0x6F,0xD8,0x46,0xFF,0x0E,0x76};

  MessageAuctionBidRequest() : actor_id_(0), transaction_id_(), bid_price_(0) {
  }

  virtual ~MessageAuctionBidRequest() throw() {}

  int64_t actor_id_;
  std::string transaction_id_;
  int32_t bid_price_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_transaction_id_(const std::string& val) {
    transaction_id_ = val;
  }

  void __set_bid_price_(const int32_t val) {
    bid_price_ = val;
  }

  bool operator == (const MessageAuctionBidRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(transaction_id_ == rhs.transaction_id_))
      return false;
    if (!(bid_price_ == rhs.bid_price_))
      return false;
    return true;
  }
  bool operator != (const MessageAuctionBidRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAuctionBidRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAuctionBidRequest &a, MessageAuctionBidRequest &b);

typedef struct _MessageAuctionBidResponse__isset {
  _MessageAuctionBidResponse__isset() : transaction_id_(false), bid_price_(false) {}
  bool transaction_id_;
  bool bid_price_;
} _MessageAuctionBidResponse__isset;

class MessageAuctionBidResponse {
 public:

  static const char* ascii_fingerprint; // = "F33F86C32F034883CA3C802D4FA2D0CD";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x3F,0x86,0xC3,0x2F,0x03,0x48,0x83,0xCA,0x3C,0x80,0x2D,0x4F,0xA2,0xD0,0xCD};

  MessageAuctionBidResponse() : actor_id_(0), result_(0), transaction_id_(), bid_price_(0) {
  }

  virtual ~MessageAuctionBidResponse() throw() {}

  int64_t actor_id_;
  bool result_;
  std::string transaction_id_;
  int32_t bid_price_;

  _MessageAuctionBidResponse__isset __isset;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_transaction_id_(const std::string& val) {
    transaction_id_ = val;
    __isset.transaction_id_ = true;
  }

  void __set_bid_price_(const int32_t val) {
    bid_price_ = val;
    __isset.bid_price_ = true;
  }

  bool operator == (const MessageAuctionBidResponse & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.transaction_id_ != rhs.__isset.transaction_id_)
      return false;
    else if (__isset.transaction_id_ && !(transaction_id_ == rhs.transaction_id_))
      return false;
    if (__isset.bid_price_ != rhs.__isset.bid_price_)
      return false;
    else if (__isset.bid_price_ && !(bid_price_ == rhs.bid_price_))
      return false;
    return true;
  }
  bool operator != (const MessageAuctionBidResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAuctionBidResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAuctionBidResponse &a, MessageAuctionBidResponse &b);


class MessageAuctionBuyoutRequest {
 public:

  static const char* ascii_fingerprint; // = "D7BAF3A18D2E378ACDBBC2C3FAE0DE60";
  static const uint8_t binary_fingerprint[16]; // = {0xD7,0xBA,0xF3,0xA1,0x8D,0x2E,0x37,0x8A,0xCD,0xBB,0xC2,0xC3,0xFA,0xE0,0xDE,0x60};

  MessageAuctionBuyoutRequest() : actor_id_(0), transaction_id_(), buyout_price_(0), give_back_money_(0) {
  }

  virtual ~MessageAuctionBuyoutRequest() throw() {}

  int64_t actor_id_;
  std::string transaction_id_;
  int32_t buyout_price_;
  int32_t give_back_money_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_transaction_id_(const std::string& val) {
    transaction_id_ = val;
  }

  void __set_buyout_price_(const int32_t val) {
    buyout_price_ = val;
  }

  void __set_give_back_money_(const int32_t val) {
    give_back_money_ = val;
  }

  bool operator == (const MessageAuctionBuyoutRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(transaction_id_ == rhs.transaction_id_))
      return false;
    if (!(buyout_price_ == rhs.buyout_price_))
      return false;
    if (!(give_back_money_ == rhs.give_back_money_))
      return false;
    return true;
  }
  bool operator != (const MessageAuctionBuyoutRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAuctionBuyoutRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAuctionBuyoutRequest &a, MessageAuctionBuyoutRequest &b);

typedef struct _MessageAuctionBuyoutResponse__isset {
  _MessageAuctionBuyoutResponse__isset() : transaction_id_(false), buyout_price_(false) {}
  bool transaction_id_;
  bool buyout_price_;
} _MessageAuctionBuyoutResponse__isset;

class MessageAuctionBuyoutResponse {
 public:

  static const char* ascii_fingerprint; // = "F33F86C32F034883CA3C802D4FA2D0CD";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x3F,0x86,0xC3,0x2F,0x03,0x48,0x83,0xCA,0x3C,0x80,0x2D,0x4F,0xA2,0xD0,0xCD};

  MessageAuctionBuyoutResponse() : actor_id_(0), result_(0), transaction_id_(), buyout_price_(0) {
  }

  virtual ~MessageAuctionBuyoutResponse() throw() {}

  int64_t actor_id_;
  bool result_;
  std::string transaction_id_;
  int32_t buyout_price_;

  _MessageAuctionBuyoutResponse__isset __isset;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_transaction_id_(const std::string& val) {
    transaction_id_ = val;
    __isset.transaction_id_ = true;
  }

  void __set_buyout_price_(const int32_t val) {
    buyout_price_ = val;
    __isset.buyout_price_ = true;
  }

  bool operator == (const MessageAuctionBuyoutResponse & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.transaction_id_ != rhs.__isset.transaction_id_)
      return false;
    else if (__isset.transaction_id_ && !(transaction_id_ == rhs.transaction_id_))
      return false;
    if (__isset.buyout_price_ != rhs.__isset.buyout_price_)
      return false;
    else if (__isset.buyout_price_ && !(buyout_price_ == rhs.buyout_price_))
      return false;
    return true;
  }
  bool operator != (const MessageAuctionBuyoutResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAuctionBuyoutResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAuctionBuyoutResponse &a, MessageAuctionBuyoutResponse &b);


class MessageAuctionWithdrawItemRequest {
 public:

  static const char* ascii_fingerprint; // = "D7BAF3A18D2E378ACDBBC2C3FAE0DE60";
  static const uint8_t binary_fingerprint[16]; // = {0xD7,0xBA,0xF3,0xA1,0x8D,0x2E,0x37,0x8A,0xCD,0xBB,0xC2,0xC3,0xFA,0xE0,0xDE,0x60};

  MessageAuctionWithdrawItemRequest() : actor_id_(0), transaction_id_(), item_template_id_(0), item_number_(0) {
  }

  virtual ~MessageAuctionWithdrawItemRequest() throw() {}

  int64_t actor_id_;
  std::string transaction_id_;
  int32_t item_template_id_;
  int32_t item_number_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_transaction_id_(const std::string& val) {
    transaction_id_ = val;
  }

  void __set_item_template_id_(const int32_t val) {
    item_template_id_ = val;
  }

  void __set_item_number_(const int32_t val) {
    item_number_ = val;
  }

  bool operator == (const MessageAuctionWithdrawItemRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(transaction_id_ == rhs.transaction_id_))
      return false;
    if (!(item_template_id_ == rhs.item_template_id_))
      return false;
    if (!(item_number_ == rhs.item_number_))
      return false;
    return true;
  }
  bool operator != (const MessageAuctionWithdrawItemRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAuctionWithdrawItemRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAuctionWithdrawItemRequest &a, MessageAuctionWithdrawItemRequest &b);

typedef struct _MessageAuctionWithdrawItemResponse__isset {
  _MessageAuctionWithdrawItemResponse__isset() : transaction_id_(false) {}
  bool transaction_id_;
} _MessageAuctionWithdrawItemResponse__isset;

class MessageAuctionWithdrawItemResponse {
 public:

  static const char* ascii_fingerprint; // = "047A24EC93E49ED134CB8CA922D4BAFD";
  static const uint8_t binary_fingerprint[16]; // = {0x04,0x7A,0x24,0xEC,0x93,0xE4,0x9E,0xD1,0x34,0xCB,0x8C,0xA9,0x22,0xD4,0xBA,0xFD};

  MessageAuctionWithdrawItemResponse() : actor_id_(0), result_(0), transaction_id_() {
  }

  virtual ~MessageAuctionWithdrawItemResponse() throw() {}

  int64_t actor_id_;
  bool result_;
  std::string transaction_id_;

  _MessageAuctionWithdrawItemResponse__isset __isset;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_transaction_id_(const std::string& val) {
    transaction_id_ = val;
    __isset.transaction_id_ = true;
  }

  bool operator == (const MessageAuctionWithdrawItemResponse & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.transaction_id_ != rhs.__isset.transaction_id_)
      return false;
    else if (__isset.transaction_id_ && !(transaction_id_ == rhs.transaction_id_))
      return false;
    return true;
  }
  bool operator != (const MessageAuctionWithdrawItemResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAuctionWithdrawItemResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAuctionWithdrawItemResponse &a, MessageAuctionWithdrawItemResponse &b);


class MessageAuctionWithdrawItemRequest2 {
 public:

  static const char* ascii_fingerprint; // = "4E01B0A8274ACA54BD5DFC0DD9D03758";
  static const uint8_t binary_fingerprint[16]; // = {0x4E,0x01,0xB0,0xA8,0x27,0x4A,0xCA,0x54,0xBD,0x5D,0xFC,0x0D,0xD9,0xD0,0x37,0x58};

  MessageAuctionWithdrawItemRequest2() : actor_id_(0), item_template_id_(0), item_number_(0), item_extra_info_() {
  }

  virtual ~MessageAuctionWithdrawItemRequest2() throw() {}

  int64_t actor_id_;
  int32_t item_template_id_;
  int32_t item_number_;
  std::string item_extra_info_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_item_template_id_(const int32_t val) {
    item_template_id_ = val;
  }

  void __set_item_number_(const int32_t val) {
    item_number_ = val;
  }

  void __set_item_extra_info_(const std::string& val) {
    item_extra_info_ = val;
  }

  bool operator == (const MessageAuctionWithdrawItemRequest2 & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(item_template_id_ == rhs.item_template_id_))
      return false;
    if (!(item_number_ == rhs.item_number_))
      return false;
    if (!(item_extra_info_ == rhs.item_extra_info_))
      return false;
    return true;
  }
  bool operator != (const MessageAuctionWithdrawItemRequest2 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAuctionWithdrawItemRequest2 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAuctionWithdrawItemRequest2 &a, MessageAuctionWithdrawItemRequest2 &b);


class MessageAuctionWithdrawMoneyRequest {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  MessageAuctionWithdrawMoneyRequest() : actor_id_(0), money_(0) {
  }

  virtual ~MessageAuctionWithdrawMoneyRequest() throw() {}

  int64_t actor_id_;
  int32_t money_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_money_(const int32_t val) {
    money_ = val;
  }

  bool operator == (const MessageAuctionWithdrawMoneyRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(money_ == rhs.money_))
      return false;
    return true;
  }
  bool operator != (const MessageAuctionWithdrawMoneyRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAuctionWithdrawMoneyRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAuctionWithdrawMoneyRequest &a, MessageAuctionWithdrawMoneyRequest &b);


class MessageAuctionGiveMoneyBackRequest {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  MessageAuctionGiveMoneyBackRequest() : actor_id_(0), money_(0) {
  }

  virtual ~MessageAuctionGiveMoneyBackRequest() throw() {}

  int64_t actor_id_;
  int32_t money_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_money_(const int32_t val) {
    money_ = val;
  }

  bool operator == (const MessageAuctionGiveMoneyBackRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(money_ == rhs.money_))
      return false;
    return true;
  }
  bool operator != (const MessageAuctionGiveMoneyBackRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAuctionGiveMoneyBackRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageAuctionGiveMoneyBackRequest &a, MessageAuctionGiveMoneyBackRequest &b);

}} // namespace

#endif
