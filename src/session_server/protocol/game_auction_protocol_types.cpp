/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "game_auction_protocol_types.h"

#include <algorithm>

namespace session { namespace protocol {

const char* MessageAuctionSellRequest::ascii_fingerprint = "0C7C635772D7B02DE3BCF62BEF9E7CC9";
const uint8_t MessageAuctionSellRequest::binary_fingerprint[16] = {0x0C,0x7C,0x63,0x57,0x72,0xD7,0xB0,0x2D,0xE3,0xBC,0xF6,0x2B,0xEF,0x9E,0x7C,0xC9};

uint32_t MessageAuctionSellRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_start_bid_price_ = false;
  bool isset_buyout_price_ = false;
  bool isset_auction_time_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->item_id_);
          this->__isset.item_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item_template_id_);
          this->__isset.item_template_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item_number_);
          this->__isset.item_number_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->transaction_id_);
          this->__isset.transaction_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->start_bid_price_);
          isset_start_bid_price_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->buyout_price_);
          isset_buyout_price_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->auction_time_id_);
          isset_auction_time_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_start_bid_price_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_buyout_price_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_auction_time_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAuctionSellRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAuctionSellRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.item_id_) {
    xfer += oprot->writeFieldBegin("item_id_", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->item_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.item_template_id_) {
    xfer += oprot->writeFieldBegin("item_template_id_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->item_template_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.item_number_) {
    xfer += oprot->writeFieldBegin("item_number_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->item_number_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.transaction_id_) {
    xfer += oprot->writeFieldBegin("transaction_id_", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->transaction_id_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("start_bid_price_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->start_bid_price_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buyout_price_", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->buyout_price_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("auction_time_id_", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->auction_time_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAuctionSellRequest &a, MessageAuctionSellRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.item_id_, b.item_id_);
  swap(a.item_template_id_, b.item_template_id_);
  swap(a.item_number_, b.item_number_);
  swap(a.transaction_id_, b.transaction_id_);
  swap(a.start_bid_price_, b.start_bid_price_);
  swap(a.buyout_price_, b.buyout_price_);
  swap(a.auction_time_id_, b.auction_time_id_);
  swap(a.__isset, b.__isset);
}

const char* MessageAuctionSellResponse::ascii_fingerprint = "2AA9442DC99B326BCD20E762B43FBE7A";
const uint8_t MessageAuctionSellResponse::binary_fingerprint[16] = {0x2A,0xA9,0x44,0x2D,0xC9,0x9B,0x32,0x6B,0xCD,0x20,0xE7,0x62,0xB4,0x3F,0xBE,0x7A};

uint32_t MessageAuctionSellResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item_template_id_);
          this->__isset.item_template_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item_number_);
          this->__isset.item_number_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->item_extra_info_);
          this->__isset.item_extra_info_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->transaction_id_);
          this->__isset.transaction_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->start_bid_price_);
          this->__isset.start_bid_price_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->buyout_price_);
          this->__isset.buyout_price_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->auction_time_id_);
          this->__isset.auction_time_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAuctionSellResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAuctionSellResponse");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.item_template_id_) {
    xfer += oprot->writeFieldBegin("item_template_id_", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->item_template_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.item_number_) {
    xfer += oprot->writeFieldBegin("item_number_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->item_number_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.item_extra_info_) {
    xfer += oprot->writeFieldBegin("item_extra_info_", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->item_extra_info_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.transaction_id_) {
    xfer += oprot->writeFieldBegin("transaction_id_", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->transaction_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.start_bid_price_) {
    xfer += oprot->writeFieldBegin("start_bid_price_", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->start_bid_price_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.buyout_price_) {
    xfer += oprot->writeFieldBegin("buyout_price_", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->buyout_price_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.auction_time_id_) {
    xfer += oprot->writeFieldBegin("auction_time_id_", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32(this->auction_time_id_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAuctionSellResponse &a, MessageAuctionSellResponse &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.result_, b.result_);
  swap(a.item_template_id_, b.item_template_id_);
  swap(a.item_number_, b.item_number_);
  swap(a.item_extra_info_, b.item_extra_info_);
  swap(a.transaction_id_, b.transaction_id_);
  swap(a.start_bid_price_, b.start_bid_price_);
  swap(a.buyout_price_, b.buyout_price_);
  swap(a.auction_time_id_, b.auction_time_id_);
  swap(a.__isset, b.__isset);
}

const char* MessageAuctionBidRequest::ascii_fingerprint = "FA14FF3C297F6EBE2FC46FD846FF0E76";
const uint8_t MessageAuctionBidRequest::binary_fingerprint[16] = {0xFA,0x14,0xFF,0x3C,0x29,0x7F,0x6E,0xBE,0x2F,0xC4,0x6F,0xD8,0x46,0xFF,0x0E,0x76};

uint32_t MessageAuctionBidRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_transaction_id_ = false;
  bool isset_bid_price_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->transaction_id_);
          isset_transaction_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->bid_price_);
          isset_bid_price_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_transaction_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_bid_price_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAuctionBidRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAuctionBidRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("transaction_id_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->transaction_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bid_price_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->bid_price_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAuctionBidRequest &a, MessageAuctionBidRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.transaction_id_, b.transaction_id_);
  swap(a.bid_price_, b.bid_price_);
}

const char* MessageAuctionBidResponse::ascii_fingerprint = "F33F86C32F034883CA3C802D4FA2D0CD";
const uint8_t MessageAuctionBidResponse::binary_fingerprint[16] = {0xF3,0x3F,0x86,0xC3,0x2F,0x03,0x48,0x83,0xCA,0x3C,0x80,0x2D,0x4F,0xA2,0xD0,0xCD};

uint32_t MessageAuctionBidResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->transaction_id_);
          this->__isset.transaction_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->bid_price_);
          this->__isset.bid_price_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAuctionBidResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAuctionBidResponse");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.transaction_id_) {
    xfer += oprot->writeFieldBegin("transaction_id_", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->transaction_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bid_price_) {
    xfer += oprot->writeFieldBegin("bid_price_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->bid_price_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAuctionBidResponse &a, MessageAuctionBidResponse &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.result_, b.result_);
  swap(a.transaction_id_, b.transaction_id_);
  swap(a.bid_price_, b.bid_price_);
  swap(a.__isset, b.__isset);
}

const char* MessageAuctionBuyoutRequest::ascii_fingerprint = "D7BAF3A18D2E378ACDBBC2C3FAE0DE60";
const uint8_t MessageAuctionBuyoutRequest::binary_fingerprint[16] = {0xD7,0xBA,0xF3,0xA1,0x8D,0x2E,0x37,0x8A,0xCD,0xBB,0xC2,0xC3,0xFA,0xE0,0xDE,0x60};

uint32_t MessageAuctionBuyoutRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_transaction_id_ = false;
  bool isset_buyout_price_ = false;
  bool isset_give_back_money_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->transaction_id_);
          isset_transaction_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->buyout_price_);
          isset_buyout_price_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->give_back_money_);
          isset_give_back_money_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_transaction_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_buyout_price_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_give_back_money_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAuctionBuyoutRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAuctionBuyoutRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("transaction_id_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->transaction_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buyout_price_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->buyout_price_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("give_back_money_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->give_back_money_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAuctionBuyoutRequest &a, MessageAuctionBuyoutRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.transaction_id_, b.transaction_id_);
  swap(a.buyout_price_, b.buyout_price_);
  swap(a.give_back_money_, b.give_back_money_);
}

const char* MessageAuctionBuyoutResponse::ascii_fingerprint = "F33F86C32F034883CA3C802D4FA2D0CD";
const uint8_t MessageAuctionBuyoutResponse::binary_fingerprint[16] = {0xF3,0x3F,0x86,0xC3,0x2F,0x03,0x48,0x83,0xCA,0x3C,0x80,0x2D,0x4F,0xA2,0xD0,0xCD};

uint32_t MessageAuctionBuyoutResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->transaction_id_);
          this->__isset.transaction_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->buyout_price_);
          this->__isset.buyout_price_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAuctionBuyoutResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAuctionBuyoutResponse");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.transaction_id_) {
    xfer += oprot->writeFieldBegin("transaction_id_", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->transaction_id_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.buyout_price_) {
    xfer += oprot->writeFieldBegin("buyout_price_", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->buyout_price_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAuctionBuyoutResponse &a, MessageAuctionBuyoutResponse &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.result_, b.result_);
  swap(a.transaction_id_, b.transaction_id_);
  swap(a.buyout_price_, b.buyout_price_);
  swap(a.__isset, b.__isset);
}

const char* MessageAuctionWithdrawItemRequest::ascii_fingerprint = "D7BAF3A18D2E378ACDBBC2C3FAE0DE60";
const uint8_t MessageAuctionWithdrawItemRequest::binary_fingerprint[16] = {0xD7,0xBA,0xF3,0xA1,0x8D,0x2E,0x37,0x8A,0xCD,0xBB,0xC2,0xC3,0xFA,0xE0,0xDE,0x60};

uint32_t MessageAuctionWithdrawItemRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_transaction_id_ = false;
  bool isset_item_template_id_ = false;
  bool isset_item_number_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->transaction_id_);
          isset_transaction_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item_template_id_);
          isset_item_template_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item_number_);
          isset_item_number_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_transaction_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item_template_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item_number_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAuctionWithdrawItemRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAuctionWithdrawItemRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("transaction_id_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->transaction_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item_template_id_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->item_template_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item_number_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->item_number_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAuctionWithdrawItemRequest &a, MessageAuctionWithdrawItemRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.transaction_id_, b.transaction_id_);
  swap(a.item_template_id_, b.item_template_id_);
  swap(a.item_number_, b.item_number_);
}

const char* MessageAuctionWithdrawItemResponse::ascii_fingerprint = "047A24EC93E49ED134CB8CA922D4BAFD";
const uint8_t MessageAuctionWithdrawItemResponse::binary_fingerprint[16] = {0x04,0x7A,0x24,0xEC,0x93,0xE4,0x9E,0xD1,0x34,0xCB,0x8C,0xA9,0x22,0xD4,0xBA,0xFD};

uint32_t MessageAuctionWithdrawItemResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->transaction_id_);
          this->__isset.transaction_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAuctionWithdrawItemResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAuctionWithdrawItemResponse");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.transaction_id_) {
    xfer += oprot->writeFieldBegin("transaction_id_", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->transaction_id_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAuctionWithdrawItemResponse &a, MessageAuctionWithdrawItemResponse &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.result_, b.result_);
  swap(a.transaction_id_, b.transaction_id_);
  swap(a.__isset, b.__isset);
}

const char* MessageAuctionWithdrawItemRequest2::ascii_fingerprint = "4E01B0A8274ACA54BD5DFC0DD9D03758";
const uint8_t MessageAuctionWithdrawItemRequest2::binary_fingerprint[16] = {0x4E,0x01,0xB0,0xA8,0x27,0x4A,0xCA,0x54,0xBD,0x5D,0xFC,0x0D,0xD9,0xD0,0x37,0x58};

uint32_t MessageAuctionWithdrawItemRequest2::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_item_template_id_ = false;
  bool isset_item_number_ = false;
  bool isset_item_extra_info_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item_template_id_);
          isset_item_template_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item_number_);
          isset_item_number_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->item_extra_info_);
          isset_item_extra_info_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item_template_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item_number_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_item_extra_info_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAuctionWithdrawItemRequest2::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAuctionWithdrawItemRequest2");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item_template_id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->item_template_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item_number_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->item_number_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item_extra_info_", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->item_extra_info_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAuctionWithdrawItemRequest2 &a, MessageAuctionWithdrawItemRequest2 &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.item_template_id_, b.item_template_id_);
  swap(a.item_number_, b.item_number_);
  swap(a.item_extra_info_, b.item_extra_info_);
}

const char* MessageAuctionWithdrawMoneyRequest::ascii_fingerprint = "AFAFBCDB9822F9D1AA4E44188E720B47";
const uint8_t MessageAuctionWithdrawMoneyRequest::binary_fingerprint[16] = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

uint32_t MessageAuctionWithdrawMoneyRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_money_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->money_);
          isset_money_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_money_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAuctionWithdrawMoneyRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAuctionWithdrawMoneyRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("money_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->money_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAuctionWithdrawMoneyRequest &a, MessageAuctionWithdrawMoneyRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.money_, b.money_);
}

const char* MessageAuctionGiveMoneyBackRequest::ascii_fingerprint = "AFAFBCDB9822F9D1AA4E44188E720B47";
const uint8_t MessageAuctionGiveMoneyBackRequest::binary_fingerprint[16] = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

uint32_t MessageAuctionGiveMoneyBackRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_actor_id_ = false;
  bool isset_money_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actor_id_);
          isset_actor_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->money_);
          isset_money_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_actor_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_money_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAuctionGiveMoneyBackRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageAuctionGiveMoneyBackRequest");

  xfer += oprot->writeFieldBegin("actor_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->actor_id_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("money_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->money_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageAuctionGiveMoneyBackRequest &a, MessageAuctionGiveMoneyBackRequest &b) {
  using ::std::swap;
  swap(a.actor_id_, b.actor_id_);
  swap(a.money_, b.money_);
}

}} // namespace
