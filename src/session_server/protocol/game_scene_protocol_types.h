/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef game_scene_protocol_TYPES_H
#define game_scene_protocol_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "session_game_protocol_types.h"
#include "entity_types.h"
#include "npc_types.h"


namespace session { namespace protocol {


class MessageSceneLoginRequest {
 public:

  static const char* ascii_fingerprint; // = "25038F937443AC9A2A06CEE5209E41BF";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x03,0x8F,0x93,0x74,0x43,0xAC,0x9A,0x2A,0x06,0xCE,0xE5,0x20,0x9E,0x41,0xBF};

  MessageSceneLoginRequest() : scene_(0), dynamic_(0) {
  }

  virtual ~MessageSceneLoginRequest() throw() {}

  int64_t scene_;
  bool dynamic_;

  void __set_scene_(const int64_t val) {
    scene_ = val;
  }

  void __set_dynamic_(const bool val) {
    dynamic_ = val;
  }

  bool operator == (const MessageSceneLoginRequest & rhs) const
  {
    if (!(scene_ == rhs.scene_))
      return false;
    if (!(dynamic_ == rhs.dynamic_))
      return false;
    return true;
  }
  bool operator != (const MessageSceneLoginRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSceneLoginRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSceneLoginRequest &a, MessageSceneLoginRequest &b);


class MessageSceneLoginResponse {
 public:

  static const char* ascii_fingerprint; // = "25038F937443AC9A2A06CEE5209E41BF";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x03,0x8F,0x93,0x74,0x43,0xAC,0x9A,0x2A,0x06,0xCE,0xE5,0x20,0x9E,0x41,0xBF};

  MessageSceneLoginResponse() : scene_(0), result_(0) {
  }

  virtual ~MessageSceneLoginResponse() throw() {}

  int64_t scene_;
  bool result_;

  void __set_scene_(const int64_t val) {
    scene_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageSceneLoginResponse & rhs) const
  {
    if (!(scene_ == rhs.scene_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageSceneLoginResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSceneLoginResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSceneLoginResponse &a, MessageSceneLoginResponse &b);


class SceneFields {
 public:

  static const char* ascii_fingerprint; // = "25038F937443AC9A2A06CEE5209E41BF";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x03,0x8F,0x93,0x74,0x43,0xAC,0x9A,0x2A,0x06,0xCE,0xE5,0x20,0x9E,0x41,0xBF};

  SceneFields() : scene_id_(0), dynamic_(0) {
  }

  virtual ~SceneFields() throw() {}

  int64_t scene_id_;
  bool dynamic_;

  void __set_scene_id_(const int64_t val) {
    scene_id_ = val;
  }

  void __set_dynamic_(const bool val) {
    dynamic_ = val;
  }

  bool operator == (const SceneFields & rhs) const
  {
    if (!(scene_id_ == rhs.scene_id_))
      return false;
    if (!(dynamic_ == rhs.dynamic_))
      return false;
    return true;
  }
  bool operator != (const SceneFields &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SceneFields & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SceneFields &a, SceneFields &b);


class MessageSceneBatchLoginRequest {
 public:

  static const char* ascii_fingerprint; // = "1D8699863AFD44BC7EDD6E9B9E90EB01";
  static const uint8_t binary_fingerprint[16]; // = {0x1D,0x86,0x99,0x86,0x3A,0xFD,0x44,0xBC,0x7E,0xDD,0x6E,0x9B,0x9E,0x90,0xEB,0x01};

  MessageSceneBatchLoginRequest() {
  }

  virtual ~MessageSceneBatchLoginRequest() throw() {}

  std::vector<SceneFields>  scenes_;

  void __set_scenes_(const std::vector<SceneFields> & val) {
    scenes_ = val;
  }

  bool operator == (const MessageSceneBatchLoginRequest & rhs) const
  {
    if (!(scenes_ == rhs.scenes_))
      return false;
    return true;
  }
  bool operator != (const MessageSceneBatchLoginRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSceneBatchLoginRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSceneBatchLoginRequest &a, MessageSceneBatchLoginRequest &b);


class MessageSceneBatchLoginResponse {
 public:

  static const char* ascii_fingerprint; // = "1D05678DC85D74AEDF5EB7A7D8D9F2BF";
  static const uint8_t binary_fingerprint[16]; // = {0x1D,0x05,0x67,0x8D,0xC8,0x5D,0x74,0xAE,0xDF,0x5E,0xB7,0xA7,0xD8,0xD9,0xF2,0xBF};

  MessageSceneBatchLoginResponse() {
  }

  virtual ~MessageSceneBatchLoginResponse() throw() {}

  std::vector<int64_t>  successes_;
  std::vector<int64_t>  failures_;

  void __set_successes_(const std::vector<int64_t> & val) {
    successes_ = val;
  }

  void __set_failures_(const std::vector<int64_t> & val) {
    failures_ = val;
  }

  bool operator == (const MessageSceneBatchLoginResponse & rhs) const
  {
    if (!(successes_ == rhs.successes_))
      return false;
    if (!(failures_ == rhs.failures_))
      return false;
    return true;
  }
  bool operator != (const MessageSceneBatchLoginResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSceneBatchLoginResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSceneBatchLoginResponse &a, MessageSceneBatchLoginResponse &b);


class MessageSceneLogoutRequest {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  MessageSceneLogoutRequest() : scene_(0) {
  }

  virtual ~MessageSceneLogoutRequest() throw() {}

  int64_t scene_;

  void __set_scene_(const int64_t val) {
    scene_ = val;
  }

  bool operator == (const MessageSceneLogoutRequest & rhs) const
  {
    if (!(scene_ == rhs.scene_))
      return false;
    return true;
  }
  bool operator != (const MessageSceneLogoutRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSceneLogoutRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSceneLogoutRequest &a, MessageSceneLogoutRequest &b);


class MessageSceneLogoutResponse {
 public:

  static const char* ascii_fingerprint; // = "25038F937443AC9A2A06CEE5209E41BF";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x03,0x8F,0x93,0x74,0x43,0xAC,0x9A,0x2A,0x06,0xCE,0xE5,0x20,0x9E,0x41,0xBF};

  MessageSceneLogoutResponse() : scene_(0), result_(0) {
  }

  virtual ~MessageSceneLogoutResponse() throw() {}

  int64_t scene_;
  bool result_;

  void __set_scene_(const int64_t val) {
    scene_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageSceneLogoutResponse & rhs) const
  {
    if (!(scene_ == rhs.scene_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageSceneLogoutResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSceneLogoutResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSceneLogoutResponse &a, MessageSceneLogoutResponse &b);


class MessageSceneJumpNotice {
 public:

  static const char* ascii_fingerprint; // = "A10608A5ACC0B1AFB80522F482BC57A9";
  static const uint8_t binary_fingerprint[16]; // = {0xA1,0x06,0x08,0xA5,0xAC,0xC0,0xB1,0xAF,0xB8,0x05,0x22,0xF4,0x82,0xBC,0x57,0xA9};

  MessageSceneJumpNotice() : actor_(0), scene_(0), x_(0), y_(0) {
  }

  virtual ~MessageSceneJumpNotice() throw() {}

  int64_t actor_;
  int64_t scene_;
  int32_t x_;
  int32_t y_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_scene_(const int64_t val) {
    scene_ = val;
  }

  void __set_x_(const int32_t val) {
    x_ = val;
  }

  void __set_y_(const int32_t val) {
    y_ = val;
  }

  bool operator == (const MessageSceneJumpNotice & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(scene_ == rhs.scene_))
      return false;
    if (!(x_ == rhs.x_))
      return false;
    if (!(y_ == rhs.y_))
      return false;
    return true;
  }
  bool operator != (const MessageSceneJumpNotice &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSceneJumpNotice & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSceneJumpNotice &a, MessageSceneJumpNotice &b);


class MessageSceneSummonWorldBoss {
 public:

  static const char* ascii_fingerprint; // = "90D314B1819FD1168416BAA2331F4657";
  static const uint8_t binary_fingerprint[16]; // = {0x90,0xD3,0x14,0xB1,0x81,0x9F,0xD1,0x16,0x84,0x16,0xBA,0xA2,0x33,0x1F,0x46,0x57};

  MessageSceneSummonWorldBoss() : id_(0), x_(0), y_(0), width_(0), heigth_(0), template_id_(0) {
  }

  virtual ~MessageSceneSummonWorldBoss() throw() {}

  int64_t id_;
  int32_t x_;
  int32_t y_;
  int32_t width_;
  int32_t heigth_;
  int32_t template_id_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_x_(const int32_t val) {
    x_ = val;
  }

  void __set_y_(const int32_t val) {
    y_ = val;
  }

  void __set_width_(const int32_t val) {
    width_ = val;
  }

  void __set_heigth_(const int32_t val) {
    heigth_ = val;
  }

  void __set_template_id_(const int32_t val) {
    template_id_ = val;
  }

  bool operator == (const MessageSceneSummonWorldBoss & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(x_ == rhs.x_))
      return false;
    if (!(y_ == rhs.y_))
      return false;
    if (!(width_ == rhs.width_))
      return false;
    if (!(heigth_ == rhs.heigth_))
      return false;
    if (!(template_id_ == rhs.template_id_))
      return false;
    return true;
  }
  bool operator != (const MessageSceneSummonWorldBoss &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSceneSummonWorldBoss & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSceneSummonWorldBoss &a, MessageSceneSummonWorldBoss &b);


class MessageSceneWorldBossKilledNotice {
 public:

  static const char* ascii_fingerprint; // = "1CCCF6FC31CFD1D61BBBB1BAF3590620";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xCC,0xF6,0xFC,0x31,0xCF,0xD1,0xD6,0x1B,0xBB,0xB1,0xBA,0xF3,0x59,0x06,0x20};

  MessageSceneWorldBossKilledNotice() : killer_(), id_(0) {
  }

  virtual ~MessageSceneWorldBossKilledNotice() throw() {}

  std::string killer_;
  int64_t id_;

  void __set_killer_(const std::string& val) {
    killer_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  bool operator == (const MessageSceneWorldBossKilledNotice & rhs) const
  {
    if (!(killer_ == rhs.killer_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const MessageSceneWorldBossKilledNotice &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSceneWorldBossKilledNotice & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSceneWorldBossKilledNotice &a, MessageSceneWorldBossKilledNotice &b);


class MessageSceneActorJumpMapRequest {
 public:

  static const char* ascii_fingerprint; // = "8E514869C1ECFE7F614E474CF68AE5A3";
  static const uint8_t binary_fingerprint[16]; // = {0x8E,0x51,0x48,0x69,0xC1,0xEC,0xFE,0x7F,0x61,0x4E,0x47,0x4C,0xF6,0x8A,0xE5,0xA3};

  MessageSceneActorJumpMapRequest() : id_(0), map_(0), x_(0), y_(0) {
  }

  virtual ~MessageSceneActorJumpMapRequest() throw() {}

  int64_t id_;
  int16_t map_;
  int32_t x_;
  int32_t y_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_map_(const int16_t val) {
    map_ = val;
  }

  void __set_x_(const int32_t val) {
    x_ = val;
  }

  void __set_y_(const int32_t val) {
    y_ = val;
  }

  bool operator == (const MessageSceneActorJumpMapRequest & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(map_ == rhs.map_))
      return false;
    if (!(x_ == rhs.x_))
      return false;
    if (!(y_ == rhs.y_))
      return false;
    return true;
  }
  bool operator != (const MessageSceneActorJumpMapRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSceneActorJumpMapRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSceneActorJumpMapRequest &a, MessageSceneActorJumpMapRequest &b);


class MessageSceneActorJumpMapResponse {
 public:

  static const char* ascii_fingerprint; // = "ACDD365EE437047BF97A15CCEBD6DC02";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xDD,0x36,0x5E,0xE4,0x37,0x04,0x7B,0xF9,0x7A,0x15,0xCC,0xEB,0xD6,0xDC,0x02};

  MessageSceneActorJumpMapResponse() : id_(0), map_(0), scene_(0), x_(0), y_(0), game_cross_(0) {
  }

  virtual ~MessageSceneActorJumpMapResponse() throw() {}

  int64_t id_;
  int16_t map_;
  int64_t scene_;
  int32_t x_;
  int32_t y_;
  bool game_cross_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_map_(const int16_t val) {
    map_ = val;
  }

  void __set_scene_(const int64_t val) {
    scene_ = val;
  }

  void __set_x_(const int32_t val) {
    x_ = val;
  }

  void __set_y_(const int32_t val) {
    y_ = val;
  }

  void __set_game_cross_(const bool val) {
    game_cross_ = val;
  }

  bool operator == (const MessageSceneActorJumpMapResponse & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(map_ == rhs.map_))
      return false;
    if (!(scene_ == rhs.scene_))
      return false;
    if (!(x_ == rhs.x_))
      return false;
    if (!(y_ == rhs.y_))
      return false;
    if (!(game_cross_ == rhs.game_cross_))
      return false;
    return true;
  }
  bool operator != (const MessageSceneActorJumpMapResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSceneActorJumpMapResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSceneActorJumpMapResponse &a, MessageSceneActorJumpMapResponse &b);

typedef struct _MessageSceneJumpSceneRequest__isset {
  _MessageSceneJumpSceneRequest__isset() : npc_snapshot_(false) {}
  bool npc_snapshot_;
} _MessageSceneJumpSceneRequest__isset;

class MessageSceneJumpSceneRequest {
 public:

  static const char* ascii_fingerprint; // = "99E0A46B7421E38AF0CAD73E9141A5E4";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0xE0,0xA4,0x6B,0x74,0x21,0xE3,0x8A,0xF0,0xCA,0xD7,0x3E,0x91,0x41,0xA5,0xE4};

  MessageSceneJumpSceneRequest() : type_(( ::entity::EntityType::type)0), id_(0), scene_(0), x_(0), y_(0) {
  }

  virtual ~MessageSceneJumpSceneRequest() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
  int64_t scene_;
  int32_t x_;
  int32_t y_;
   ::entity::NpcSnapshotField npc_snapshot_;

  _MessageSceneJumpSceneRequest__isset __isset;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_scene_(const int64_t val) {
    scene_ = val;
  }

  void __set_x_(const int32_t val) {
    x_ = val;
  }

  void __set_y_(const int32_t val) {
    y_ = val;
  }

  void __set_npc_snapshot_(const  ::entity::NpcSnapshotField& val) {
    npc_snapshot_ = val;
    __isset.npc_snapshot_ = true;
  }

  bool operator == (const MessageSceneJumpSceneRequest & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(scene_ == rhs.scene_))
      return false;
    if (!(x_ == rhs.x_))
      return false;
    if (!(y_ == rhs.y_))
      return false;
    if (__isset.npc_snapshot_ != rhs.__isset.npc_snapshot_)
      return false;
    else if (__isset.npc_snapshot_ && !(npc_snapshot_ == rhs.npc_snapshot_))
      return false;
    return true;
  }
  bool operator != (const MessageSceneJumpSceneRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSceneJumpSceneRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSceneJumpSceneRequest &a, MessageSceneJumpSceneRequest &b);


class MessageSceneJumpSceneResponse {
 public:

  static const char* ascii_fingerprint; // = "36E10B343DB889DC21398E91C49346B6";
  static const uint8_t binary_fingerprint[16]; // = {0x36,0xE1,0x0B,0x34,0x3D,0xB8,0x89,0xDC,0x21,0x39,0x8E,0x91,0xC4,0x93,0x46,0xB6};

  MessageSceneJumpSceneResponse() : type_(( ::entity::EntityType::type)0), id_(0), scene_(0), x_(0), y_(0) {
  }

  virtual ~MessageSceneJumpSceneResponse() throw() {}

   ::entity::EntityType::type type_;
  int64_t id_;
  int64_t scene_;
  int32_t x_;
  int32_t y_;

  void __set_type_(const  ::entity::EntityType::type val) {
    type_ = val;
  }

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_scene_(const int64_t val) {
    scene_ = val;
  }

  void __set_x_(const int32_t val) {
    x_ = val;
  }

  void __set_y_(const int32_t val) {
    y_ = val;
  }

  bool operator == (const MessageSceneJumpSceneResponse & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(scene_ == rhs.scene_))
      return false;
    if (!(x_ == rhs.x_))
      return false;
    if (!(y_ == rhs.y_))
      return false;
    return true;
  }
  bool operator != (const MessageSceneJumpSceneResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSceneJumpSceneResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSceneJumpSceneResponse &a, MessageSceneJumpSceneResponse &b);


class MessageSceneActorJumpLoginRequest {
 public:

  static const char* ascii_fingerprint; // = "A10608A5ACC0B1AFB80522F482BC57A9";
  static const uint8_t binary_fingerprint[16]; // = {0xA1,0x06,0x08,0xA5,0xAC,0xC0,0xB1,0xAF,0xB8,0x05,0x22,0xF4,0x82,0xBC,0x57,0xA9};

  MessageSceneActorJumpLoginRequest() : id_(0), scene_(0), x_(0), y_(0) {
  }

  virtual ~MessageSceneActorJumpLoginRequest() throw() {}

  int64_t id_;
  int64_t scene_;
  int32_t x_;
  int32_t y_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_scene_(const int64_t val) {
    scene_ = val;
  }

  void __set_x_(const int32_t val) {
    x_ = val;
  }

  void __set_y_(const int32_t val) {
    y_ = val;
  }

  bool operator == (const MessageSceneActorJumpLoginRequest & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(scene_ == rhs.scene_))
      return false;
    if (!(x_ == rhs.x_))
      return false;
    if (!(y_ == rhs.y_))
      return false;
    return true;
  }
  bool operator != (const MessageSceneActorJumpLoginRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSceneActorJumpLoginRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSceneActorJumpLoginRequest &a, MessageSceneActorJumpLoginRequest &b);


class MessageSceneActorJumpLogoutRequest {
 public:

  static const char* ascii_fingerprint; // = "A10608A5ACC0B1AFB80522F482BC57A9";
  static const uint8_t binary_fingerprint[16]; // = {0xA1,0x06,0x08,0xA5,0xAC,0xC0,0xB1,0xAF,0xB8,0x05,0x22,0xF4,0x82,0xBC,0x57,0xA9};

  MessageSceneActorJumpLogoutRequest() : id_(0), scene_(0), x_(0), y_(0) {
  }

  virtual ~MessageSceneActorJumpLogoutRequest() throw() {}

  int64_t id_;
  int64_t scene_;
  int32_t x_;
  int32_t y_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_scene_(const int64_t val) {
    scene_ = val;
  }

  void __set_x_(const int32_t val) {
    x_ = val;
  }

  void __set_y_(const int32_t val) {
    y_ = val;
  }

  bool operator == (const MessageSceneActorJumpLogoutRequest & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(scene_ == rhs.scene_))
      return false;
    if (!(x_ == rhs.x_))
      return false;
    if (!(y_ == rhs.y_))
      return false;
    return true;
  }
  bool operator != (const MessageSceneActorJumpLogoutRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSceneActorJumpLogoutRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSceneActorJumpLogoutRequest &a, MessageSceneActorJumpLogoutRequest &b);


class MessageSceneNpcJumpSynchronize {
 public:

  static const char* ascii_fingerprint; // = "43B1777A7B1A2829FF2B4DE1DD3DBC9C";
  static const uint8_t binary_fingerprint[16]; // = {0x43,0xB1,0x77,0x7A,0x7B,0x1A,0x28,0x29,0xFF,0x2B,0x4D,0xE1,0xDD,0x3D,0xBC,0x9C};

  MessageSceneNpcJumpSynchronize() : scene_(0), x_(0), y_(0) {
  }

  virtual ~MessageSceneNpcJumpSynchronize() throw() {}

  int64_t scene_;
  int32_t x_;
  int32_t y_;
   ::entity::NpcSnapshotField npc_snapshot_;

  void __set_scene_(const int64_t val) {
    scene_ = val;
  }

  void __set_x_(const int32_t val) {
    x_ = val;
  }

  void __set_y_(const int32_t val) {
    y_ = val;
  }

  void __set_npc_snapshot_(const  ::entity::NpcSnapshotField& val) {
    npc_snapshot_ = val;
  }

  bool operator == (const MessageSceneNpcJumpSynchronize & rhs) const
  {
    if (!(scene_ == rhs.scene_))
      return false;
    if (!(x_ == rhs.x_))
      return false;
    if (!(y_ == rhs.y_))
      return false;
    if (!(npc_snapshot_ == rhs.npc_snapshot_))
      return false;
    return true;
  }
  bool operator != (const MessageSceneNpcJumpSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSceneNpcJumpSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSceneNpcJumpSynchronize &a, MessageSceneNpcJumpSynchronize &b);


class MessageSceneBranchMapSynchronize {
 public:

  static const char* ascii_fingerprint; // = "C88FB7958D86460D03E699333A272947";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x8F,0xB7,0x95,0x8D,0x86,0x46,0x0D,0x03,0xE6,0x99,0x33,0x3A,0x27,0x29,0x47};

  MessageSceneBranchMapSynchronize() : map_(0), branch_(0) {
  }

  virtual ~MessageSceneBranchMapSynchronize() throw() {}

  int16_t map_;
  int16_t branch_;

  void __set_map_(const int16_t val) {
    map_ = val;
  }

  void __set_branch_(const int16_t val) {
    branch_ = val;
  }

  bool operator == (const MessageSceneBranchMapSynchronize & rhs) const
  {
    if (!(map_ == rhs.map_))
      return false;
    if (!(branch_ == rhs.branch_))
      return false;
    return true;
  }
  bool operator != (const MessageSceneBranchMapSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSceneBranchMapSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSceneBranchMapSynchronize &a, MessageSceneBranchMapSynchronize &b);


class MessageSceneActorSwitchBranchNotice {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  MessageSceneActorSwitchBranchNotice() : actor_(0), scene_(0) {
  }

  virtual ~MessageSceneActorSwitchBranchNotice() throw() {}

  int64_t actor_;
  int64_t scene_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_scene_(const int64_t val) {
    scene_ = val;
  }

  bool operator == (const MessageSceneActorSwitchBranchNotice & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(scene_ == rhs.scene_))
      return false;
    return true;
  }
  bool operator != (const MessageSceneActorSwitchBranchNotice &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSceneActorSwitchBranchNotice & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageSceneActorSwitchBranchNotice &a, MessageSceneActorSwitchBranchNotice &b);

}} // namespace

#endif
