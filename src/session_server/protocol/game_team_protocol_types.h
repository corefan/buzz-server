/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef game_team_protocol_TYPES_H
#define game_team_protocol_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "session_game_protocol_types.h"


namespace session { namespace protocol {

struct TeamMemberAttrType {
  enum type {
    HP = 0,
    MAX_HP = 1,
    MP = 2,
    MAX_MP = 3,
    LOCATION_X = 4,
    LOCATION_Y = 5
  };
};

extern const std::map<int, const char*> _TeamMemberAttrType_VALUES_TO_NAMES;


class MessageTeamSynchronize {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  MessageTeamSynchronize() : actor_(0), team_(0) {
  }

  virtual ~MessageTeamSynchronize() throw() {}

  int64_t actor_;
  int64_t team_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_team_(const int64_t val) {
    team_ = val;
  }

  bool operator == (const MessageTeamSynchronize & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(team_ == rhs.team_))
      return false;
    return true;
  }
  bool operator != (const MessageTeamSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamSynchronize &a, MessageTeamSynchronize &b);


class MessageTeamBuffSynchronize {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  MessageTeamBuffSynchronize() : actor_(0), buff_(0) {
  }

  virtual ~MessageTeamBuffSynchronize() throw() {}

  int64_t actor_;
  int32_t buff_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_buff_(const int32_t val) {
    buff_ = val;
  }

  bool operator == (const MessageTeamBuffSynchronize & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(buff_ == rhs.buff_))
      return false;
    return true;
  }
  bool operator != (const MessageTeamBuffSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamBuffSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamBuffSynchronize &a, MessageTeamBuffSynchronize &b);


class TeamMemberAttrFields {
 public:

  static const char* ascii_fingerprint; // = "46A703A33337BED2F62F386FC66B2A5F";
  static const uint8_t binary_fingerprint[16]; // = {0x46,0xA7,0x03,0xA3,0x33,0x37,0xBE,0xD2,0xF6,0x2F,0x38,0x6F,0xC6,0x6B,0x2A,0x5F};

  TeamMemberAttrFields() : type_((TeamMemberAttrType::type)0), value_(0) {
  }

  virtual ~TeamMemberAttrFields() throw() {}

  TeamMemberAttrType::type type_;
  int32_t value_;

  void __set_type_(const TeamMemberAttrType::type val) {
    type_ = val;
  }

  void __set_value_(const int32_t val) {
    value_ = val;
  }

  bool operator == (const TeamMemberAttrFields & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(value_ == rhs.value_))
      return false;
    return true;
  }
  bool operator != (const TeamMemberAttrFields &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TeamMemberAttrFields & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TeamMemberAttrFields &a, TeamMemberAttrFields &b);


class MessageTeamMemberAttrSynchronize {
 public:

  static const char* ascii_fingerprint; // = "1F07B36C66C0A1F13A211C23364AC1AF";
  static const uint8_t binary_fingerprint[16]; // = {0x1F,0x07,0xB3,0x6C,0x66,0xC0,0xA1,0xF1,0x3A,0x21,0x1C,0x23,0x36,0x4A,0xC1,0xAF};

  MessageTeamMemberAttrSynchronize() : actor_(0) {
  }

  virtual ~MessageTeamMemberAttrSynchronize() throw() {}

  int64_t actor_;
  std::vector<TeamMemberAttrFields>  attrs_;

  void __set_actor_(const int64_t val) {
    actor_ = val;
  }

  void __set_attrs_(const std::vector<TeamMemberAttrFields> & val) {
    attrs_ = val;
  }

  bool operator == (const MessageTeamMemberAttrSynchronize & rhs) const
  {
    if (!(actor_ == rhs.actor_))
      return false;
    if (!(attrs_ == rhs.attrs_))
      return false;
    return true;
  }
  bool operator != (const MessageTeamMemberAttrSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTeamMemberAttrSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageTeamMemberAttrSynchronize &a, MessageTeamMemberAttrSynchronize &b);

}} // namespace

#endif
