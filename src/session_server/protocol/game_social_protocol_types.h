/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef game_social_protocol_TYPES_H
#define game_social_protocol_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "homeland_types.h"
#include "session_game_protocol_types.h"


namespace session { namespace protocol {


class MessageHomelandClearUpgradeCoolingRequest {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  MessageHomelandClearUpgradeCoolingRequest() : actor_id_(0), upgrade_cooling_(0) {
  }

  virtual ~MessageHomelandClearUpgradeCoolingRequest() throw() {}

  int64_t actor_id_;
  int32_t upgrade_cooling_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_upgrade_cooling_(const int32_t val) {
    upgrade_cooling_ = val;
  }

  bool operator == (const MessageHomelandClearUpgradeCoolingRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(upgrade_cooling_ == rhs.upgrade_cooling_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandClearUpgradeCoolingRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandClearUpgradeCoolingRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandClearUpgradeCoolingRequest &a, MessageHomelandClearUpgradeCoolingRequest &b);


class MessageHomelandClearUpgradeCoolingResponse {
 public:

  static const char* ascii_fingerprint; // = "25038F937443AC9A2A06CEE5209E41BF";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x03,0x8F,0x93,0x74,0x43,0xAC,0x9A,0x2A,0x06,0xCE,0xE5,0x20,0x9E,0x41,0xBF};

  MessageHomelandClearUpgradeCoolingResponse() : actor_id_(0), result_(0) {
  }

  virtual ~MessageHomelandClearUpgradeCoolingResponse() throw() {}

  int64_t actor_id_;
  bool result_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageHomelandClearUpgradeCoolingResponse & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandClearUpgradeCoolingResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandClearUpgradeCoolingResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandClearUpgradeCoolingResponse &a, MessageHomelandClearUpgradeCoolingResponse &b);


class MessageHomelandTempleUpgradeRequest {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  MessageHomelandTempleUpgradeRequest() : actor_id_(0), temple_level_(0) {
  }

  virtual ~MessageHomelandTempleUpgradeRequest() throw() {}

  int64_t actor_id_;
  int32_t temple_level_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_temple_level_(const int32_t val) {
    temple_level_ = val;
  }

  bool operator == (const MessageHomelandTempleUpgradeRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(temple_level_ == rhs.temple_level_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandTempleUpgradeRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandTempleUpgradeRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandTempleUpgradeRequest &a, MessageHomelandTempleUpgradeRequest &b);

typedef struct _MessageHomelandTempleUpgradeResponse__isset {
  _MessageHomelandTempleUpgradeResponse__isset() : temple_level_(false) {}
  bool temple_level_;
} _MessageHomelandTempleUpgradeResponse__isset;

class MessageHomelandTempleUpgradeResponse {
 public:

  static const char* ascii_fingerprint; // = "5A45E85EA6F562454AF8551579601C4B";
  static const uint8_t binary_fingerprint[16]; // = {0x5A,0x45,0xE8,0x5E,0xA6,0xF5,0x62,0x45,0x4A,0xF8,0x55,0x15,0x79,0x60,0x1C,0x4B};

  MessageHomelandTempleUpgradeResponse() : actor_id_(0), result_(0), temple_level_(0) {
  }

  virtual ~MessageHomelandTempleUpgradeResponse() throw() {}

  int64_t actor_id_;
  bool result_;
  int32_t temple_level_;

  _MessageHomelandTempleUpgradeResponse__isset __isset;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_temple_level_(const int32_t val) {
    temple_level_ = val;
    __isset.temple_level_ = true;
  }

  bool operator == (const MessageHomelandTempleUpgradeResponse & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.temple_level_ != rhs.__isset.temple_level_)
      return false;
    else if (__isset.temple_level_ && !(temple_level_ == rhs.temple_level_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandTempleUpgradeResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandTempleUpgradeResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandTempleUpgradeResponse &a, MessageHomelandTempleUpgradeResponse &b);


class MessageHomelandTempleUpgradeNotify {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  MessageHomelandTempleUpgradeNotify() : actor_id_(0), temple_level_(0) {
  }

  virtual ~MessageHomelandTempleUpgradeNotify() throw() {}

  int64_t actor_id_;
  int32_t temple_level_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_temple_level_(const int32_t val) {
    temple_level_ = val;
  }

  bool operator == (const MessageHomelandTempleUpgradeNotify & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(temple_level_ == rhs.temple_level_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandTempleUpgradeNotify &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandTempleUpgradeNotify & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandTempleUpgradeNotify &a, MessageHomelandTempleUpgradeNotify &b);


class MessageHomelandTempleHarvestRequest {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  MessageHomelandTempleHarvestRequest() : actor_id_(0), temple_level_(0) {
  }

  virtual ~MessageHomelandTempleHarvestRequest() throw() {}

  int64_t actor_id_;
  int32_t temple_level_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_temple_level_(const int32_t val) {
    temple_level_ = val;
  }

  bool operator == (const MessageHomelandTempleHarvestRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(temple_level_ == rhs.temple_level_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandTempleHarvestRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandTempleHarvestRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandTempleHarvestRequest &a, MessageHomelandTempleHarvestRequest &b);


class MessageHomelandTempleClearHarvestCoolingRequest {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  MessageHomelandTempleClearHarvestCoolingRequest() : actor_id_(0), temple_harvest_cooling_(0) {
  }

  virtual ~MessageHomelandTempleClearHarvestCoolingRequest() throw() {}

  int64_t actor_id_;
  int32_t temple_harvest_cooling_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_temple_harvest_cooling_(const int32_t val) {
    temple_harvest_cooling_ = val;
  }

  bool operator == (const MessageHomelandTempleClearHarvestCoolingRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(temple_harvest_cooling_ == rhs.temple_harvest_cooling_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandTempleClearHarvestCoolingRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandTempleClearHarvestCoolingRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandTempleClearHarvestCoolingRequest &a, MessageHomelandTempleClearHarvestCoolingRequest &b);


class MessageHomelandTempleClearHarvestCoolingResponse {
 public:

  static const char* ascii_fingerprint; // = "25038F937443AC9A2A06CEE5209E41BF";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x03,0x8F,0x93,0x74,0x43,0xAC,0x9A,0x2A,0x06,0xCE,0xE5,0x20,0x9E,0x41,0xBF};

  MessageHomelandTempleClearHarvestCoolingResponse() : actor_id_(0), result_(0) {
  }

  virtual ~MessageHomelandTempleClearHarvestCoolingResponse() throw() {}

  int64_t actor_id_;
  bool result_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageHomelandTempleClearHarvestCoolingResponse & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandTempleClearHarvestCoolingResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandTempleClearHarvestCoolingResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandTempleClearHarvestCoolingResponse &a, MessageHomelandTempleClearHarvestCoolingResponse &b);


class MessageHomelandTempleForceHarvestRequest {
 public:

  static const char* ascii_fingerprint; // = "9C4E30169AD9E0914633984FE5C16314";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x4E,0x30,0x16,0x9A,0xD9,0xE0,0x91,0x46,0x33,0x98,0x4F,0xE5,0xC1,0x63,0x14};

  MessageHomelandTempleForceHarvestRequest() : actor_id_(0), temple_level_(0), temple_force_harvest_times_(0) {
  }

  virtual ~MessageHomelandTempleForceHarvestRequest() throw() {}

  int64_t actor_id_;
  int32_t temple_level_;
  int32_t temple_force_harvest_times_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_temple_level_(const int32_t val) {
    temple_level_ = val;
  }

  void __set_temple_force_harvest_times_(const int32_t val) {
    temple_force_harvest_times_ = val;
  }

  bool operator == (const MessageHomelandTempleForceHarvestRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(temple_level_ == rhs.temple_level_))
      return false;
    if (!(temple_force_harvest_times_ == rhs.temple_force_harvest_times_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandTempleForceHarvestRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandTempleForceHarvestRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandTempleForceHarvestRequest &a, MessageHomelandTempleForceHarvestRequest &b);


class MessageHomelandTempleForceHarvestResponse {
 public:

  static const char* ascii_fingerprint; // = "25038F937443AC9A2A06CEE5209E41BF";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x03,0x8F,0x93,0x74,0x43,0xAC,0x9A,0x2A,0x06,0xCE,0xE5,0x20,0x9E,0x41,0xBF};

  MessageHomelandTempleForceHarvestResponse() : actor_id_(0), result_(0) {
  }

  virtual ~MessageHomelandTempleForceHarvestResponse() throw() {}

  int64_t actor_id_;
  bool result_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageHomelandTempleForceHarvestResponse & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandTempleForceHarvestResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandTempleForceHarvestResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandTempleForceHarvestResponse &a, MessageHomelandTempleForceHarvestResponse &b);


class MessageHomelandGoldmineUpgradeRequest {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  MessageHomelandGoldmineUpgradeRequest() : actor_id_(0), goldmine_level_(0) {
  }

  virtual ~MessageHomelandGoldmineUpgradeRequest() throw() {}

  int64_t actor_id_;
  int32_t goldmine_level_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_goldmine_level_(const int32_t val) {
    goldmine_level_ = val;
  }

  bool operator == (const MessageHomelandGoldmineUpgradeRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(goldmine_level_ == rhs.goldmine_level_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandGoldmineUpgradeRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandGoldmineUpgradeRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandGoldmineUpgradeRequest &a, MessageHomelandGoldmineUpgradeRequest &b);

typedef struct _MessageHomelandGoldmineUpgradeResponse__isset {
  _MessageHomelandGoldmineUpgradeResponse__isset() : goldmine_level_(false) {}
  bool goldmine_level_;
} _MessageHomelandGoldmineUpgradeResponse__isset;

class MessageHomelandGoldmineUpgradeResponse {
 public:

  static const char* ascii_fingerprint; // = "5A45E85EA6F562454AF8551579601C4B";
  static const uint8_t binary_fingerprint[16]; // = {0x5A,0x45,0xE8,0x5E,0xA6,0xF5,0x62,0x45,0x4A,0xF8,0x55,0x15,0x79,0x60,0x1C,0x4B};

  MessageHomelandGoldmineUpgradeResponse() : actor_id_(0), result_(0), goldmine_level_(0) {
  }

  virtual ~MessageHomelandGoldmineUpgradeResponse() throw() {}

  int64_t actor_id_;
  bool result_;
  int32_t goldmine_level_;

  _MessageHomelandGoldmineUpgradeResponse__isset __isset;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_goldmine_level_(const int32_t val) {
    goldmine_level_ = val;
    __isset.goldmine_level_ = true;
  }

  bool operator == (const MessageHomelandGoldmineUpgradeResponse & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.goldmine_level_ != rhs.__isset.goldmine_level_)
      return false;
    else if (__isset.goldmine_level_ && !(goldmine_level_ == rhs.goldmine_level_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandGoldmineUpgradeResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandGoldmineUpgradeResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandGoldmineUpgradeResponse &a, MessageHomelandGoldmineUpgradeResponse &b);


class MessageHomelandGoldmineHarvestRequest {
 public:

  static const char* ascii_fingerprint; // = "9C4E30169AD9E0914633984FE5C16314";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x4E,0x30,0x16,0x9A,0xD9,0xE0,0x91,0x46,0x33,0x98,0x4F,0xE5,0xC1,0x63,0x14};

  MessageHomelandGoldmineHarvestRequest() : actor_id_(0), goldmine_level_(0), goldmine_loss_rate_(0) {
  }

  virtual ~MessageHomelandGoldmineHarvestRequest() throw() {}

  int64_t actor_id_;
  int32_t goldmine_level_;
  int32_t goldmine_loss_rate_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_goldmine_level_(const int32_t val) {
    goldmine_level_ = val;
  }

  void __set_goldmine_loss_rate_(const int32_t val) {
    goldmine_loss_rate_ = val;
  }

  bool operator == (const MessageHomelandGoldmineHarvestRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(goldmine_level_ == rhs.goldmine_level_))
      return false;
    if (!(goldmine_loss_rate_ == rhs.goldmine_loss_rate_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandGoldmineHarvestRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandGoldmineHarvestRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandGoldmineHarvestRequest &a, MessageHomelandGoldmineHarvestRequest &b);


class MessageHomelandPoolUpgradeRequest {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  MessageHomelandPoolUpgradeRequest() : actor_id_(0), pool_level_(0) {
  }

  virtual ~MessageHomelandPoolUpgradeRequest() throw() {}

  int64_t actor_id_;
  int32_t pool_level_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_pool_level_(const int32_t val) {
    pool_level_ = val;
  }

  bool operator == (const MessageHomelandPoolUpgradeRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(pool_level_ == rhs.pool_level_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandPoolUpgradeRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandPoolUpgradeRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandPoolUpgradeRequest &a, MessageHomelandPoolUpgradeRequest &b);

typedef struct _MessageHomelandPoolUpgradeResponse__isset {
  _MessageHomelandPoolUpgradeResponse__isset() : pool_level_(false) {}
  bool pool_level_;
} _MessageHomelandPoolUpgradeResponse__isset;

class MessageHomelandPoolUpgradeResponse {
 public:

  static const char* ascii_fingerprint; // = "5A45E85EA6F562454AF8551579601C4B";
  static const uint8_t binary_fingerprint[16]; // = {0x5A,0x45,0xE8,0x5E,0xA6,0xF5,0x62,0x45,0x4A,0xF8,0x55,0x15,0x79,0x60,0x1C,0x4B};

  MessageHomelandPoolUpgradeResponse() : actor_id_(0), result_(0), pool_level_(0) {
  }

  virtual ~MessageHomelandPoolUpgradeResponse() throw() {}

  int64_t actor_id_;
  bool result_;
  int32_t pool_level_;

  _MessageHomelandPoolUpgradeResponse__isset __isset;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_pool_level_(const int32_t val) {
    pool_level_ = val;
    __isset.pool_level_ = true;
  }

  bool operator == (const MessageHomelandPoolUpgradeResponse & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.pool_level_ != rhs.__isset.pool_level_)
      return false;
    else if (__isset.pool_level_ && !(pool_level_ == rhs.pool_level_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandPoolUpgradeResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandPoolUpgradeResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandPoolUpgradeResponse &a, MessageHomelandPoolUpgradeResponse &b);


class MessageHomelandPoolHarvestRequest {
 public:

  static const char* ascii_fingerprint; // = "9C4E30169AD9E0914633984FE5C16314";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x4E,0x30,0x16,0x9A,0xD9,0xE0,0x91,0x46,0x33,0x98,0x4F,0xE5,0xC1,0x63,0x14};

  MessageHomelandPoolHarvestRequest() : actor_id_(0), pool_level_(0), accumulate_times_(0) {
  }

  virtual ~MessageHomelandPoolHarvestRequest() throw() {}

  int64_t actor_id_;
  int32_t pool_level_;
  int32_t accumulate_times_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_pool_level_(const int32_t val) {
    pool_level_ = val;
  }

  void __set_accumulate_times_(const int32_t val) {
    accumulate_times_ = val;
  }

  bool operator == (const MessageHomelandPoolHarvestRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(pool_level_ == rhs.pool_level_))
      return false;
    if (!(accumulate_times_ == rhs.accumulate_times_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandPoolHarvestRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandPoolHarvestRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandPoolHarvestRequest &a, MessageHomelandPoolHarvestRequest &b);


class MessageHomelandPoolDoubleHarvestRequest {
 public:

  static const char* ascii_fingerprint; // = "9C4E30169AD9E0914633984FE5C16314";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x4E,0x30,0x16,0x9A,0xD9,0xE0,0x91,0x46,0x33,0x98,0x4F,0xE5,0xC1,0x63,0x14};

  MessageHomelandPoolDoubleHarvestRequest() : actor_id_(0), pool_level_(0), accumulate_times_(0) {
  }

  virtual ~MessageHomelandPoolDoubleHarvestRequest() throw() {}

  int64_t actor_id_;
  int32_t pool_level_;
  int32_t accumulate_times_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_pool_level_(const int32_t val) {
    pool_level_ = val;
  }

  void __set_accumulate_times_(const int32_t val) {
    accumulate_times_ = val;
  }

  bool operator == (const MessageHomelandPoolDoubleHarvestRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(pool_level_ == rhs.pool_level_))
      return false;
    if (!(accumulate_times_ == rhs.accumulate_times_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandPoolDoubleHarvestRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandPoolDoubleHarvestRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandPoolDoubleHarvestRequest &a, MessageHomelandPoolDoubleHarvestRequest &b);

typedef struct _MessageHomelandPoolDoubleHarvestResponse__isset {
  _MessageHomelandPoolDoubleHarvestResponse__isset() : pool_level_(false), accumulate_times_(false) {}
  bool pool_level_;
  bool accumulate_times_;
} _MessageHomelandPoolDoubleHarvestResponse__isset;

class MessageHomelandPoolDoubleHarvestResponse {
 public:

  static const char* ascii_fingerprint; // = "01D4E475FABC73D332A9C789305128F8";
  static const uint8_t binary_fingerprint[16]; // = {0x01,0xD4,0xE4,0x75,0xFA,0xBC,0x73,0xD3,0x32,0xA9,0xC7,0x89,0x30,0x51,0x28,0xF8};

  MessageHomelandPoolDoubleHarvestResponse() : actor_id_(0), result_(0), pool_level_(0), accumulate_times_(0) {
  }

  virtual ~MessageHomelandPoolDoubleHarvestResponse() throw() {}

  int64_t actor_id_;
  bool result_;
  int32_t pool_level_;
  int32_t accumulate_times_;

  _MessageHomelandPoolDoubleHarvestResponse__isset __isset;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_pool_level_(const int32_t val) {
    pool_level_ = val;
    __isset.pool_level_ = true;
  }

  void __set_accumulate_times_(const int32_t val) {
    accumulate_times_ = val;
    __isset.accumulate_times_ = true;
  }

  bool operator == (const MessageHomelandPoolDoubleHarvestResponse & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.pool_level_ != rhs.__isset.pool_level_)
      return false;
    else if (__isset.pool_level_ && !(pool_level_ == rhs.pool_level_))
      return false;
    if (__isset.accumulate_times_ != rhs.__isset.accumulate_times_)
      return false;
    else if (__isset.accumulate_times_ && !(accumulate_times_ == rhs.accumulate_times_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandPoolDoubleHarvestResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandPoolDoubleHarvestResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandPoolDoubleHarvestResponse &a, MessageHomelandPoolDoubleHarvestResponse &b);


class MessageHomelandPoolDoubleHarvestRequest2 {
 public:

  static const char* ascii_fingerprint; // = "9C4E30169AD9E0914633984FE5C16314";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x4E,0x30,0x16,0x9A,0xD9,0xE0,0x91,0x46,0x33,0x98,0x4F,0xE5,0xC1,0x63,0x14};

  MessageHomelandPoolDoubleHarvestRequest2() : actor_id_(0), pool_level_(0), accumulate_times_(0) {
  }

  virtual ~MessageHomelandPoolDoubleHarvestRequest2() throw() {}

  int64_t actor_id_;
  int32_t pool_level_;
  int32_t accumulate_times_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_pool_level_(const int32_t val) {
    pool_level_ = val;
  }

  void __set_accumulate_times_(const int32_t val) {
    accumulate_times_ = val;
  }

  bool operator == (const MessageHomelandPoolDoubleHarvestRequest2 & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(pool_level_ == rhs.pool_level_))
      return false;
    if (!(accumulate_times_ == rhs.accumulate_times_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandPoolDoubleHarvestRequest2 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandPoolDoubleHarvestRequest2 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandPoolDoubleHarvestRequest2 &a, MessageHomelandPoolDoubleHarvestRequest2 &b);


class MessageHomelandChurchPaidPrayRequest {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  MessageHomelandChurchPaidPrayRequest() : actor_id_(0), chest_id_(0) {
  }

  virtual ~MessageHomelandChurchPaidPrayRequest() throw() {}

  int64_t actor_id_;
  int32_t chest_id_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_chest_id_(const int32_t val) {
    chest_id_ = val;
  }

  bool operator == (const MessageHomelandChurchPaidPrayRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(chest_id_ == rhs.chest_id_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandChurchPaidPrayRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandChurchPaidPrayRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandChurchPaidPrayRequest &a, MessageHomelandChurchPaidPrayRequest &b);

typedef struct _MessageHomelandChurchPaidPrayResponse__isset {
  _MessageHomelandChurchPaidPrayResponse__isset() : chest_id_(false) {}
  bool chest_id_;
} _MessageHomelandChurchPaidPrayResponse__isset;

class MessageHomelandChurchPaidPrayResponse {
 public:

  static const char* ascii_fingerprint; // = "5A45E85EA6F562454AF8551579601C4B";
  static const uint8_t binary_fingerprint[16]; // = {0x5A,0x45,0xE8,0x5E,0xA6,0xF5,0x62,0x45,0x4A,0xF8,0x55,0x15,0x79,0x60,0x1C,0x4B};

  MessageHomelandChurchPaidPrayResponse() : actor_id_(0), result_(0), chest_id_(0) {
  }

  virtual ~MessageHomelandChurchPaidPrayResponse() throw() {}

  int64_t actor_id_;
  bool result_;
  int32_t chest_id_;

  _MessageHomelandChurchPaidPrayResponse__isset __isset;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_chest_id_(const int32_t val) {
    chest_id_ = val;
    __isset.chest_id_ = true;
  }

  bool operator == (const MessageHomelandChurchPaidPrayResponse & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.chest_id_ != rhs.__isset.chest_id_)
      return false;
    else if (__isset.chest_id_ && !(chest_id_ == rhs.chest_id_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandChurchPaidPrayResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandChurchPaidPrayResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandChurchPaidPrayResponse &a, MessageHomelandChurchPaidPrayResponse &b);


class MessageHomelandChurchRefreshRequest {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  MessageHomelandChurchRefreshRequest() : actor_id_(0), chest_id_(0) {
  }

  virtual ~MessageHomelandChurchRefreshRequest() throw() {}

  int64_t actor_id_;
  int32_t chest_id_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_chest_id_(const int32_t val) {
    chest_id_ = val;
  }

  bool operator == (const MessageHomelandChurchRefreshRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(chest_id_ == rhs.chest_id_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandChurchRefreshRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandChurchRefreshRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandChurchRefreshRequest &a, MessageHomelandChurchRefreshRequest &b);

typedef struct _MessageHomelandChurchRefreshResponse__isset {
  _MessageHomelandChurchRefreshResponse__isset() : chest_id_(false) {}
  bool chest_id_;
} _MessageHomelandChurchRefreshResponse__isset;

class MessageHomelandChurchRefreshResponse {
 public:

  static const char* ascii_fingerprint; // = "5A45E85EA6F562454AF8551579601C4B";
  static const uint8_t binary_fingerprint[16]; // = {0x5A,0x45,0xE8,0x5E,0xA6,0xF5,0x62,0x45,0x4A,0xF8,0x55,0x15,0x79,0x60,0x1C,0x4B};

  MessageHomelandChurchRefreshResponse() : actor_id_(0), result_(0), chest_id_(0) {
  }

  virtual ~MessageHomelandChurchRefreshResponse() throw() {}

  int64_t actor_id_;
  bool result_;
  int32_t chest_id_;

  _MessageHomelandChurchRefreshResponse__isset __isset;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_chest_id_(const int32_t val) {
    chest_id_ = val;
    __isset.chest_id_ = true;
  }

  bool operator == (const MessageHomelandChurchRefreshResponse & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.chest_id_ != rhs.__isset.chest_id_)
      return false;
    else if (__isset.chest_id_ && !(chest_id_ == rhs.chest_id_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandChurchRefreshResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandChurchRefreshResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandChurchRefreshResponse &a, MessageHomelandChurchRefreshResponse &b);


class MessageHomelandChurchVipRefreshRequest {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  MessageHomelandChurchVipRefreshRequest() : actor_id_(0), chest_id_(0) {
  }

  virtual ~MessageHomelandChurchVipRefreshRequest() throw() {}

  int64_t actor_id_;
  int32_t chest_id_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_chest_id_(const int32_t val) {
    chest_id_ = val;
  }

  bool operator == (const MessageHomelandChurchVipRefreshRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(chest_id_ == rhs.chest_id_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandChurchVipRefreshRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandChurchVipRefreshRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandChurchVipRefreshRequest &a, MessageHomelandChurchVipRefreshRequest &b);

typedef struct _MessageHomelandChurchVipRefreshResponse__isset {
  _MessageHomelandChurchVipRefreshResponse__isset() : chest_id_(false) {}
  bool chest_id_;
} _MessageHomelandChurchVipRefreshResponse__isset;

class MessageHomelandChurchVipRefreshResponse {
 public:

  static const char* ascii_fingerprint; // = "5A45E85EA6F562454AF8551579601C4B";
  static const uint8_t binary_fingerprint[16]; // = {0x5A,0x45,0xE8,0x5E,0xA6,0xF5,0x62,0x45,0x4A,0xF8,0x55,0x15,0x79,0x60,0x1C,0x4B};

  MessageHomelandChurchVipRefreshResponse() : actor_id_(0), result_(0), chest_id_(0) {
  }

  virtual ~MessageHomelandChurchVipRefreshResponse() throw() {}

  int64_t actor_id_;
  bool result_;
  int32_t chest_id_;

  _MessageHomelandChurchVipRefreshResponse__isset __isset;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_chest_id_(const int32_t val) {
    chest_id_ = val;
    __isset.chest_id_ = true;
  }

  bool operator == (const MessageHomelandChurchVipRefreshResponse & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.chest_id_ != rhs.__isset.chest_id_)
      return false;
    else if (__isset.chest_id_ && !(chest_id_ == rhs.chest_id_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandChurchVipRefreshResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandChurchVipRefreshResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandChurchVipRefreshResponse &a, MessageHomelandChurchVipRefreshResponse &b);


class MessageHomelandChurchHarvestRequest {
 public:

  static const char* ascii_fingerprint; // = "9C4E30169AD9E0914633984FE5C16314";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x4E,0x30,0x16,0x9A,0xD9,0xE0,0x91,0x46,0x33,0x98,0x4F,0xE5,0xC1,0x63,0x14};

  MessageHomelandChurchHarvestRequest() : actor_id_(0), chest_id_(0), bonus_id_(0) {
  }

  virtual ~MessageHomelandChurchHarvestRequest() throw() {}

  int64_t actor_id_;
  int32_t chest_id_;
  int32_t bonus_id_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_chest_id_(const int32_t val) {
    chest_id_ = val;
  }

  void __set_bonus_id_(const int32_t val) {
    bonus_id_ = val;
  }

  bool operator == (const MessageHomelandChurchHarvestRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(chest_id_ == rhs.chest_id_))
      return false;
    if (!(bonus_id_ == rhs.bonus_id_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandChurchHarvestRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandChurchHarvestRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandChurchHarvestRequest &a, MessageHomelandChurchHarvestRequest &b);

typedef struct _MessageHomelandChurchHarvestResponse__isset {
  _MessageHomelandChurchHarvestResponse__isset() : chest_id_(false), bonus_id_(false) {}
  bool chest_id_;
  bool bonus_id_;
} _MessageHomelandChurchHarvestResponse__isset;

class MessageHomelandChurchHarvestResponse {
 public:

  static const char* ascii_fingerprint; // = "01D4E475FABC73D332A9C789305128F8";
  static const uint8_t binary_fingerprint[16]; // = {0x01,0xD4,0xE4,0x75,0xFA,0xBC,0x73,0xD3,0x32,0xA9,0xC7,0x89,0x30,0x51,0x28,0xF8};

  MessageHomelandChurchHarvestResponse() : actor_id_(0), result_(0), chest_id_(0), bonus_id_(0) {
  }

  virtual ~MessageHomelandChurchHarvestResponse() throw() {}

  int64_t actor_id_;
  bool result_;
  int32_t chest_id_;
  int32_t bonus_id_;

  _MessageHomelandChurchHarvestResponse__isset __isset;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_chest_id_(const int32_t val) {
    chest_id_ = val;
    __isset.chest_id_ = true;
  }

  void __set_bonus_id_(const int32_t val) {
    bonus_id_ = val;
    __isset.bonus_id_ = true;
  }

  bool operator == (const MessageHomelandChurchHarvestResponse & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.chest_id_ != rhs.__isset.chest_id_)
      return false;
    else if (__isset.chest_id_ && !(chest_id_ == rhs.chest_id_))
      return false;
    if (__isset.bonus_id_ != rhs.__isset.bonus_id_)
      return false;
    else if (__isset.bonus_id_ && !(bonus_id_ == rhs.bonus_id_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandChurchHarvestResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandChurchHarvestResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandChurchHarvestResponse &a, MessageHomelandChurchHarvestResponse &b);


class MessageHomelandChurchHarvestRequest2 {
 public:

  static const char* ascii_fingerprint; // = "9C4E30169AD9E0914633984FE5C16314";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x4E,0x30,0x16,0x9A,0xD9,0xE0,0x91,0x46,0x33,0x98,0x4F,0xE5,0xC1,0x63,0x14};

  MessageHomelandChurchHarvestRequest2() : actor_id_(0), chest_id_(0), bonus_id_(0) {
  }

  virtual ~MessageHomelandChurchHarvestRequest2() throw() {}

  int64_t actor_id_;
  int32_t chest_id_;
  int32_t bonus_id_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_chest_id_(const int32_t val) {
    chest_id_ = val;
  }

  void __set_bonus_id_(const int32_t val) {
    bonus_id_ = val;
  }

  bool operator == (const MessageHomelandChurchHarvestRequest2 & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(chest_id_ == rhs.chest_id_))
      return false;
    if (!(bonus_id_ == rhs.bonus_id_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandChurchHarvestRequest2 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandChurchHarvestRequest2 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandChurchHarvestRequest2 &a, MessageHomelandChurchHarvestRequest2 &b);


class MessageHomelandTreeAssistWaterRequest {
 public:

  static const char* ascii_fingerprint; // = "197965116FCBDE48C0B6EB99442871C4";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0x79,0x65,0x11,0x6F,0xCB,0xDE,0x48,0xC0,0xB6,0xEB,0x99,0x44,0x28,0x71,0xC4};

  MessageHomelandTreeAssistWaterRequest() : actor_id_(0), friend_actor_id_(), tree_stage_(( ::entity::HomelandTreeStageType::type)0), tree_watered_times_(0) {
  }

  virtual ~MessageHomelandTreeAssistWaterRequest() throw() {}

  int64_t actor_id_;
  std::string friend_actor_id_;
   ::entity::HomelandTreeStageType::type tree_stage_;
  int32_t tree_watered_times_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_friend_actor_id_(const std::string& val) {
    friend_actor_id_ = val;
  }

  void __set_tree_stage_(const  ::entity::HomelandTreeStageType::type val) {
    tree_stage_ = val;
  }

  void __set_tree_watered_times_(const int32_t val) {
    tree_watered_times_ = val;
  }

  bool operator == (const MessageHomelandTreeAssistWaterRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(friend_actor_id_ == rhs.friend_actor_id_))
      return false;
    if (!(tree_stage_ == rhs.tree_stage_))
      return false;
    if (!(tree_watered_times_ == rhs.tree_watered_times_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandTreeAssistWaterRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandTreeAssistWaterRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandTreeAssistWaterRequest &a, MessageHomelandTreeAssistWaterRequest &b);


class MessageHomelandTreeStealRequest {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  MessageHomelandTreeStealRequest() : actor_id_(0), tree_level_(0) {
  }

  virtual ~MessageHomelandTreeStealRequest() throw() {}

  int64_t actor_id_;
  int32_t tree_level_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_tree_level_(const int32_t val) {
    tree_level_ = val;
  }

  bool operator == (const MessageHomelandTreeStealRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(tree_level_ == rhs.tree_level_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandTreeStealRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandTreeStealRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandTreeStealRequest &a, MessageHomelandTreeStealRequest &b);


class MessageHomelandTreeHarvestRequest {
 public:

  static const char* ascii_fingerprint; // = "9C4E30169AD9E0914633984FE5C16314";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x4E,0x30,0x16,0x9A,0xD9,0xE0,0x91,0x46,0x33,0x98,0x4F,0xE5,0xC1,0x63,0x14};

  MessageHomelandTreeHarvestRequest() : actor_id_(0), tree_level_(0), stolen_times_(0) {
  }

  virtual ~MessageHomelandTreeHarvestRequest() throw() {}

  int64_t actor_id_;
  int32_t tree_level_;
  int32_t stolen_times_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_tree_level_(const int32_t val) {
    tree_level_ = val;
  }

  void __set_stolen_times_(const int32_t val) {
    stolen_times_ = val;
  }

  bool operator == (const MessageHomelandTreeHarvestRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(tree_level_ == rhs.tree_level_))
      return false;
    if (!(stolen_times_ == rhs.stolen_times_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandTreeHarvestRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandTreeHarvestRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandTreeHarvestRequest &a, MessageHomelandTreeHarvestRequest &b);


class MessageHomelandTowerUpgradeRequest {
 public:

  static const char* ascii_fingerprint; // = "9C4E30169AD9E0914633984FE5C16314";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x4E,0x30,0x16,0x9A,0xD9,0xE0,0x91,0x46,0x33,0x98,0x4F,0xE5,0xC1,0x63,0x14};

  MessageHomelandTowerUpgradeRequest() : actor_id_(0), tower_id_(0), tower_level_(0) {
  }

  virtual ~MessageHomelandTowerUpgradeRequest() throw() {}

  int64_t actor_id_;
  int32_t tower_id_;
  int32_t tower_level_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_tower_id_(const int32_t val) {
    tower_id_ = val;
  }

  void __set_tower_level_(const int32_t val) {
    tower_level_ = val;
  }

  bool operator == (const MessageHomelandTowerUpgradeRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(tower_id_ == rhs.tower_id_))
      return false;
    if (!(tower_level_ == rhs.tower_level_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandTowerUpgradeRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandTowerUpgradeRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandTowerUpgradeRequest &a, MessageHomelandTowerUpgradeRequest &b);

typedef struct _MessageHomelandTowerUpgradeResponse__isset {
  _MessageHomelandTowerUpgradeResponse__isset() : tower_id_(false), tower_level_(false) {}
  bool tower_id_;
  bool tower_level_;
} _MessageHomelandTowerUpgradeResponse__isset;

class MessageHomelandTowerUpgradeResponse {
 public:

  static const char* ascii_fingerprint; // = "01D4E475FABC73D332A9C789305128F8";
  static const uint8_t binary_fingerprint[16]; // = {0x01,0xD4,0xE4,0x75,0xFA,0xBC,0x73,0xD3,0x32,0xA9,0xC7,0x89,0x30,0x51,0x28,0xF8};

  MessageHomelandTowerUpgradeResponse() : actor_id_(0), result_(0), tower_id_(0), tower_level_(0) {
  }

  virtual ~MessageHomelandTowerUpgradeResponse() throw() {}

  int64_t actor_id_;
  bool result_;
  int32_t tower_id_;
  int32_t tower_level_;

  _MessageHomelandTowerUpgradeResponse__isset __isset;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_tower_id_(const int32_t val) {
    tower_id_ = val;
    __isset.tower_id_ = true;
  }

  void __set_tower_level_(const int32_t val) {
    tower_level_ = val;
    __isset.tower_level_ = true;
  }

  bool operator == (const MessageHomelandTowerUpgradeResponse & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.tower_id_ != rhs.__isset.tower_id_)
      return false;
    else if (__isset.tower_id_ && !(tower_id_ == rhs.tower_id_))
      return false;
    if (__isset.tower_level_ != rhs.__isset.tower_level_)
      return false;
    else if (__isset.tower_level_ && !(tower_level_ == rhs.tower_level_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandTowerUpgradeResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandTowerUpgradeResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandTowerUpgradeResponse &a, MessageHomelandTowerUpgradeResponse &b);


class MessageHomelandStrongholdUpgradeRequest {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  MessageHomelandStrongholdUpgradeRequest() : actor_id_(0), stronghold_level_(0) {
  }

  virtual ~MessageHomelandStrongholdUpgradeRequest() throw() {}

  int64_t actor_id_;
  int32_t stronghold_level_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_stronghold_level_(const int32_t val) {
    stronghold_level_ = val;
  }

  bool operator == (const MessageHomelandStrongholdUpgradeRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(stronghold_level_ == rhs.stronghold_level_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandStrongholdUpgradeRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandStrongholdUpgradeRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandStrongholdUpgradeRequest &a, MessageHomelandStrongholdUpgradeRequest &b);

typedef struct _MessageHomelandStrongholdUpgradeResponse__isset {
  _MessageHomelandStrongholdUpgradeResponse__isset() : stronghold_level_(false) {}
  bool stronghold_level_;
} _MessageHomelandStrongholdUpgradeResponse__isset;

class MessageHomelandStrongholdUpgradeResponse {
 public:

  static const char* ascii_fingerprint; // = "5A45E85EA6F562454AF8551579601C4B";
  static const uint8_t binary_fingerprint[16]; // = {0x5A,0x45,0xE8,0x5E,0xA6,0xF5,0x62,0x45,0x4A,0xF8,0x55,0x15,0x79,0x60,0x1C,0x4B};

  MessageHomelandStrongholdUpgradeResponse() : actor_id_(0), result_(0), stronghold_level_(0) {
  }

  virtual ~MessageHomelandStrongholdUpgradeResponse() throw() {}

  int64_t actor_id_;
  bool result_;
  int32_t stronghold_level_;

  _MessageHomelandStrongholdUpgradeResponse__isset __isset;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_stronghold_level_(const int32_t val) {
    stronghold_level_ = val;
    __isset.stronghold_level_ = true;
  }

  bool operator == (const MessageHomelandStrongholdUpgradeResponse & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.stronghold_level_ != rhs.__isset.stronghold_level_)
      return false;
    else if (__isset.stronghold_level_ && !(stronghold_level_ == rhs.stronghold_level_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandStrongholdUpgradeResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandStrongholdUpgradeResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandStrongholdUpgradeResponse &a, MessageHomelandStrongholdUpgradeResponse &b);


class MessageHomelandBattleMatchReqeust {
 public:

  static const char* ascii_fingerprint; // = "FA14FF3C297F6EBE2FC46FD846FF0E76";
  static const uint8_t binary_fingerprint[16]; // = {0xFA,0x14,0xFF,0x3C,0x29,0x7F,0x6E,0xBE,0x2F,0xC4,0x6F,0xD8,0x46,0xFF,0x0E,0x76};

  MessageHomelandBattleMatchReqeust() : actor_id_(0), target_actor_name_(), gold_(0) {
  }

  virtual ~MessageHomelandBattleMatchReqeust() throw() {}

  int64_t actor_id_;
  std::string target_actor_name_;
  int32_t gold_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_target_actor_name_(const std::string& val) {
    target_actor_name_ = val;
  }

  void __set_gold_(const int32_t val) {
    gold_ = val;
  }

  bool operator == (const MessageHomelandBattleMatchReqeust & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(target_actor_name_ == rhs.target_actor_name_))
      return false;
    if (!(gold_ == rhs.gold_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandBattleMatchReqeust &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandBattleMatchReqeust & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandBattleMatchReqeust &a, MessageHomelandBattleMatchReqeust &b);


class MessageHomelandBattleStrikeBackRequest {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  MessageHomelandBattleStrikeBackRequest() : actor_id_(0), gold_(0) {
  }

  virtual ~MessageHomelandBattleStrikeBackRequest() throw() {}

  int64_t actor_id_;
  int32_t gold_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_gold_(const int32_t val) {
    gold_ = val;
  }

  bool operator == (const MessageHomelandBattleStrikeBackRequest & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(gold_ == rhs.gold_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandBattleStrikeBackRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandBattleStrikeBackRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandBattleStrikeBackRequest &a, MessageHomelandBattleStrikeBackRequest &b);


class HomelandSoulData {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  HomelandSoulData() : soul_id_(0), soul_level_(0) {
  }

  virtual ~HomelandSoulData() throw() {}

  int32_t soul_id_;
  int32_t soul_level_;

  void __set_soul_id_(const int32_t val) {
    soul_id_ = val;
  }

  void __set_soul_level_(const int32_t val) {
    soul_level_ = val;
  }

  bool operator == (const HomelandSoulData & rhs) const
  {
    if (!(soul_id_ == rhs.soul_id_))
      return false;
    if (!(soul_level_ == rhs.soul_level_))
      return false;
    return true;
  }
  bool operator != (const HomelandSoulData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HomelandSoulData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HomelandSoulData &a, HomelandSoulData &b);


class MessageHomelandSoulSynchronize {
 public:

  static const char* ascii_fingerprint; // = "FFB599E507E03255B3BFFB5F80332755";
  static const uint8_t binary_fingerprint[16]; // = {0xFF,0xB5,0x99,0xE5,0x07,0xE0,0x32,0x55,0xB3,0xBF,0xFB,0x5F,0x80,0x33,0x27,0x55};

  MessageHomelandSoulSynchronize() : actor_id_(0) {
  }

  virtual ~MessageHomelandSoulSynchronize() throw() {}

  int64_t actor_id_;
  std::vector<HomelandSoulData>  souls_;

  void __set_actor_id_(const int64_t val) {
    actor_id_ = val;
  }

  void __set_souls_(const std::vector<HomelandSoulData> & val) {
    souls_ = val;
  }

  bool operator == (const MessageHomelandSoulSynchronize & rhs) const
  {
    if (!(actor_id_ == rhs.actor_id_))
      return false;
    if (!(souls_ == rhs.souls_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandSoulSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandSoulSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandSoulSynchronize &a, MessageHomelandSoulSynchronize &b);


class MessageHomelandTreeWater {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  MessageHomelandTreeWater() : id_(0), watered_id_(0) {
  }

  virtual ~MessageHomelandTreeWater() throw() {}

  int64_t id_;
  int64_t watered_id_;

  void __set_id_(const int64_t val) {
    id_ = val;
  }

  void __set_watered_id_(const int64_t val) {
    watered_id_ = val;
  }

  bool operator == (const MessageHomelandTreeWater & rhs) const
  {
    if (!(id_ == rhs.id_))
      return false;
    if (!(watered_id_ == rhs.watered_id_))
      return false;
    return true;
  }
  bool operator != (const MessageHomelandTreeWater &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageHomelandTreeWater & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageHomelandTreeWater &a, MessageHomelandTreeWater &b);

}} // namespace

#endif
