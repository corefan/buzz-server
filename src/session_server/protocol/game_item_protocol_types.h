/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef game_item_protocol_TYPES_H
#define game_item_protocol_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "session_game_protocol_types.h"
#include "mall_types.h"


namespace session { namespace protocol {


class MessageItemTreasureHuntSynchronize {
 public:

  static const char* ascii_fingerprint; // = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};

  MessageItemTreasureHuntSynchronize() {
  }

  virtual ~MessageItemTreasureHuntSynchronize() throw() {}

  std::vector<std::string>  info_;

  void __set_info_(const std::vector<std::string> & val) {
    info_ = val;
  }

  bool operator == (const MessageItemTreasureHuntSynchronize & rhs) const
  {
    if (!(info_ == rhs.info_))
      return false;
    return true;
  }
  bool operator != (const MessageItemTreasureHuntSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageItemTreasureHuntSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageItemTreasureHuntSynchronize &a, MessageItemTreasureHuntSynchronize &b);


class MessageItemMallConfigSynchronize {
 public:

  static const char* ascii_fingerprint; // = "CFF45852702EDF441EE7137B9F03B724";
  static const uint8_t binary_fingerprint[16]; // = {0xCF,0xF4,0x58,0x52,0x70,0x2E,0xDF,0x44,0x1E,0xE7,0x13,0x7B,0x9F,0x03,0xB7,0x24};

  MessageItemMallConfigSynchronize() : is_new_(0) {
  }

  virtual ~MessageItemMallConfigSynchronize() throw() {}

  std::vector< ::entity::MallTreasureCell>  mall_config_;
  bool is_new_;

  void __set_mall_config_(const std::vector< ::entity::MallTreasureCell> & val) {
    mall_config_ = val;
  }

  void __set_is_new_(const bool val) {
    is_new_ = val;
  }

  bool operator == (const MessageItemMallConfigSynchronize & rhs) const
  {
    if (!(mall_config_ == rhs.mall_config_))
      return false;
    if (!(is_new_ == rhs.is_new_))
      return false;
    return true;
  }
  bool operator != (const MessageItemMallConfigSynchronize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageItemMallConfigSynchronize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageItemMallConfigSynchronize &a, MessageItemMallConfigSynchronize &b);

}} // namespace

#endif
