#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ccentity.entity.ttypes
import ccevent.ttypes
import ccentity.skill.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class EventUseSkill:
  """
  Attributes:
   - type_
   - id_
   - skill_id_
   - skill_group_
   - skill_type_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type_', None, None, ), # 1
    (2, TType.I64, 'id_', None, None, ), # 2
    (3, TType.I32, 'skill_id_', None, None, ), # 3
    (4, TType.I32, 'skill_group_', None, None, ), # 4
    (5, TType.I32, 'skill_type_', None, None, ), # 5
  )

  def __init__(self, type_=None, id_=None, skill_id_=None, skill_group_=None, skill_type_=None,):
    self.type_ = type_
    self.id_ = id_
    self.skill_id_ = skill_id_
    self.skill_group_ = skill_group_
    self.skill_type_ = skill_type_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.skill_id_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.skill_group_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.skill_type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EventUseSkill')
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 1)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    if self.id_ is not None:
      oprot.writeFieldBegin('id_', TType.I64, 2)
      oprot.writeI64(self.id_)
      oprot.writeFieldEnd()
    if self.skill_id_ is not None:
      oprot.writeFieldBegin('skill_id_', TType.I32, 3)
      oprot.writeI32(self.skill_id_)
      oprot.writeFieldEnd()
    if self.skill_group_ is not None:
      oprot.writeFieldBegin('skill_group_', TType.I32, 4)
      oprot.writeI32(self.skill_group_)
      oprot.writeFieldEnd()
    if self.skill_type_ is not None:
      oprot.writeFieldBegin('skill_type_', TType.I32, 5)
      oprot.writeI32(self.skill_type_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type_ is None:
      raise TProtocol.TProtocolException(message='Required field type_ is unset!')
    if self.id_ is None:
      raise TProtocol.TProtocolException(message='Required field id_ is unset!')
    if self.skill_id_ is None:
      raise TProtocol.TProtocolException(message='Required field skill_id_ is unset!')
    if self.skill_group_ is None:
      raise TProtocol.TProtocolException(message='Required field skill_group_ is unset!')
    if self.skill_type_ is None:
      raise TProtocol.TProtocolException(message='Required field skill_type_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EventAttackedSkill:
  """
  Attributes:
   - type_
   - id_
   - skill_id_
   - friend_type_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type_', None, None, ), # 1
    (2, TType.I64, 'id_', None, None, ), # 2
    (3, TType.I32, 'skill_id_', None, None, ), # 3
    (4, TType.I32, 'friend_type_', None, None, ), # 4
  )

  def __init__(self, type_=None, id_=None, skill_id_=None, friend_type_=None,):
    self.type_ = type_
    self.id_ = id_
    self.skill_id_ = skill_id_
    self.friend_type_ = friend_type_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.skill_id_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.friend_type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EventAttackedSkill')
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 1)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    if self.id_ is not None:
      oprot.writeFieldBegin('id_', TType.I64, 2)
      oprot.writeI64(self.id_)
      oprot.writeFieldEnd()
    if self.skill_id_ is not None:
      oprot.writeFieldBegin('skill_id_', TType.I32, 3)
      oprot.writeI32(self.skill_id_)
      oprot.writeFieldEnd()
    if self.friend_type_ is not None:
      oprot.writeFieldBegin('friend_type_', TType.I32, 4)
      oprot.writeI32(self.friend_type_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type_ is None:
      raise TProtocol.TProtocolException(message='Required field type_ is unset!')
    if self.id_ is None:
      raise TProtocol.TProtocolException(message='Required field id_ is unset!')
    if self.skill_id_ is None:
      raise TProtocol.TProtocolException(message='Required field skill_id_ is unset!')
    if self.friend_type_ is None:
      raise TProtocol.TProtocolException(message='Required field friend_type_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EventUseAppearSkill:
  """
  Attributes:
   - type_
   - id_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type_', None, None, ), # 1
    (2, TType.I64, 'id_', None, None, ), # 2
  )

  def __init__(self, type_=None, id_=None,):
    self.type_ = type_
    self.id_ = id_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EventUseAppearSkill')
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 1)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    if self.id_ is not None:
      oprot.writeFieldBegin('id_', TType.I64, 2)
      oprot.writeI64(self.id_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type_ is None:
      raise TProtocol.TProtocolException(message='Required field type_ is unset!')
    if self.id_ is None:
      raise TProtocol.TProtocolException(message='Required field id_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EventSkillAttackHit:
  """
  Attributes:
   - type_
   - id_
   - dest_type_
   - dest_id_
   - hit_type_
   - hurt_type_
   - value_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type_', None, None, ), # 1
    (2, TType.I64, 'id_', None, None, ), # 2
    (3, TType.I32, 'dest_type_', None, None, ), # 3
    (4, TType.I64, 'dest_id_', None, None, ), # 4
    (5, TType.I32, 'hit_type_', None, None, ), # 5
    (6, TType.I32, 'hurt_type_', None, None, ), # 6
    (7, TType.I32, 'value_', None, None, ), # 7
  )

  def __init__(self, type_=None, id_=None, dest_type_=None, dest_id_=None, hit_type_=None, hurt_type_=None, value_=None,):
    self.type_ = type_
    self.id_ = id_
    self.dest_type_ = dest_type_
    self.dest_id_ = dest_id_
    self.hit_type_ = hit_type_
    self.hurt_type_ = hurt_type_
    self.value_ = value_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.dest_type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.dest_id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.hit_type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.hurt_type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.value_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EventSkillAttackHit')
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 1)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    if self.id_ is not None:
      oprot.writeFieldBegin('id_', TType.I64, 2)
      oprot.writeI64(self.id_)
      oprot.writeFieldEnd()
    if self.dest_type_ is not None:
      oprot.writeFieldBegin('dest_type_', TType.I32, 3)
      oprot.writeI32(self.dest_type_)
      oprot.writeFieldEnd()
    if self.dest_id_ is not None:
      oprot.writeFieldBegin('dest_id_', TType.I64, 4)
      oprot.writeI64(self.dest_id_)
      oprot.writeFieldEnd()
    if self.hit_type_ is not None:
      oprot.writeFieldBegin('hit_type_', TType.I32, 5)
      oprot.writeI32(self.hit_type_)
      oprot.writeFieldEnd()
    if self.hurt_type_ is not None:
      oprot.writeFieldBegin('hurt_type_', TType.I32, 6)
      oprot.writeI32(self.hurt_type_)
      oprot.writeFieldEnd()
    if self.value_ is not None:
      oprot.writeFieldBegin('value_', TType.I32, 7)
      oprot.writeI32(self.value_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type_ is None:
      raise TProtocol.TProtocolException(message='Required field type_ is unset!')
    if self.id_ is None:
      raise TProtocol.TProtocolException(message='Required field id_ is unset!')
    if self.dest_type_ is None:
      raise TProtocol.TProtocolException(message='Required field dest_type_ is unset!')
    if self.dest_id_ is None:
      raise TProtocol.TProtocolException(message='Required field dest_id_ is unset!')
    if self.hit_type_ is None:
      raise TProtocol.TProtocolException(message='Required field hit_type_ is unset!')
    if self.hurt_type_ is None:
      raise TProtocol.TProtocolException(message='Required field hurt_type_ is unset!')
    if self.value_ is None:
      raise TProtocol.TProtocolException(message='Required field value_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EventSkillAttackedHit:
  """
  Attributes:
   - type_
   - id_
   - src_type_
   - src_id_
   - hit_type_
   - hurt_type_
   - value_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type_', None, None, ), # 1
    (2, TType.I64, 'id_', None, None, ), # 2
    (3, TType.I32, 'src_type_', None, None, ), # 3
    (4, TType.I64, 'src_id_', None, None, ), # 4
    (5, TType.I32, 'hit_type_', None, None, ), # 5
    (6, TType.I32, 'hurt_type_', None, None, ), # 6
    (7, TType.I32, 'value_', None, None, ), # 7
  )

  def __init__(self, type_=None, id_=None, src_type_=None, src_id_=None, hit_type_=None, hurt_type_=None, value_=None,):
    self.type_ = type_
    self.id_ = id_
    self.src_type_ = src_type_
    self.src_id_ = src_id_
    self.hit_type_ = hit_type_
    self.hurt_type_ = hurt_type_
    self.value_ = value_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.src_type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.src_id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.hit_type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.hurt_type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.value_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EventSkillAttackedHit')
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 1)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    if self.id_ is not None:
      oprot.writeFieldBegin('id_', TType.I64, 2)
      oprot.writeI64(self.id_)
      oprot.writeFieldEnd()
    if self.src_type_ is not None:
      oprot.writeFieldBegin('src_type_', TType.I32, 3)
      oprot.writeI32(self.src_type_)
      oprot.writeFieldEnd()
    if self.src_id_ is not None:
      oprot.writeFieldBegin('src_id_', TType.I64, 4)
      oprot.writeI64(self.src_id_)
      oprot.writeFieldEnd()
    if self.hit_type_ is not None:
      oprot.writeFieldBegin('hit_type_', TType.I32, 5)
      oprot.writeI32(self.hit_type_)
      oprot.writeFieldEnd()
    if self.hurt_type_ is not None:
      oprot.writeFieldBegin('hurt_type_', TType.I32, 6)
      oprot.writeI32(self.hurt_type_)
      oprot.writeFieldEnd()
    if self.value_ is not None:
      oprot.writeFieldBegin('value_', TType.I32, 7)
      oprot.writeI32(self.value_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type_ is None:
      raise TProtocol.TProtocolException(message='Required field type_ is unset!')
    if self.id_ is None:
      raise TProtocol.TProtocolException(message='Required field id_ is unset!')
    if self.src_type_ is None:
      raise TProtocol.TProtocolException(message='Required field src_type_ is unset!')
    if self.src_id_ is None:
      raise TProtocol.TProtocolException(message='Required field src_id_ is unset!')
    if self.hit_type_ is None:
      raise TProtocol.TProtocolException(message='Required field hit_type_ is unset!')
    if self.hurt_type_ is None:
      raise TProtocol.TProtocolException(message='Required field hurt_type_ is unset!')
    if self.value_ is None:
      raise TProtocol.TProtocolException(message='Required field value_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
