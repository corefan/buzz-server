#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ccentity.item.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class EquipAttributeType:
  MIN = 0
  PHYSIQUE = 1
  STRENGTH = 2
  INTELLIGENCE = 3
  AGILE = 4
  SPIRIT = 5
  MAX_HP = 6
  MAX_MP = 7
  PHYSICS_ATTACK = 8
  PHYSICS_DEFENCE = 9
  MAGIC_ATTACK = 10
  MAGIC_DEFENCE = 11
  DODGE = 12
  CRIT = 13
  IGNORE_DEFENCE = 14
  MOVE_SPEED = 15
  MAX = 16

  _VALUES_TO_NAMES = {
    0: "MIN",
    1: "PHYSIQUE",
    2: "STRENGTH",
    3: "INTELLIGENCE",
    4: "AGILE",
    5: "SPIRIT",
    6: "MAX_HP",
    7: "MAX_MP",
    8: "PHYSICS_ATTACK",
    9: "PHYSICS_DEFENCE",
    10: "MAGIC_ATTACK",
    11: "MAGIC_DEFENCE",
    12: "DODGE",
    13: "CRIT",
    14: "IGNORE_DEFENCE",
    15: "MOVE_SPEED",
    16: "MAX",
  }

  _NAMES_TO_VALUES = {
    "MIN": 0,
    "PHYSIQUE": 1,
    "STRENGTH": 2,
    "INTELLIGENCE": 3,
    "AGILE": 4,
    "SPIRIT": 5,
    "MAX_HP": 6,
    "MAX_MP": 7,
    "PHYSICS_ATTACK": 8,
    "PHYSICS_DEFENCE": 9,
    "MAGIC_ATTACK": 10,
    "MAGIC_DEFENCE": 11,
    "DODGE": 12,
    "CRIT": 13,
    "IGNORE_DEFENCE": 14,
    "MOVE_SPEED": 15,
    "MAX": 16,
  }

class EquipClientFields:
  CLIENT_BEGIN = 0
  INTENSIFY = 0
  MAX_INTENSIFY = 1
  RANDOM_ATTR_1 = 2
  RANDOM_VALUE_1 = 3
  RANDOM_ATTR_2 = 4
  RANDOM_VALUE_2 = 5
  RANDOM_ATTR_3 = 6
  RANDOM_VALUE_3 = 7
  RANDOM_ATTR_4 = 8
  RANDOM_VALUE_4 = 9
  RANDOM_ATTR_5 = 10
  RANDOM_VALUE_5 = 11
  RANDOM_ATTR_6 = 12
  RANDOM_VALUE_6 = 13
  UPGRADE_LUCKY = 14
  CLIENT_END = 15

  _VALUES_TO_NAMES = {
    0: "CLIENT_BEGIN",
    0: "INTENSIFY",
    1: "MAX_INTENSIFY",
    2: "RANDOM_ATTR_1",
    3: "RANDOM_VALUE_1",
    4: "RANDOM_ATTR_2",
    5: "RANDOM_VALUE_2",
    6: "RANDOM_ATTR_3",
    7: "RANDOM_VALUE_3",
    8: "RANDOM_ATTR_4",
    9: "RANDOM_VALUE_4",
    10: "RANDOM_ATTR_5",
    11: "RANDOM_VALUE_5",
    12: "RANDOM_ATTR_6",
    13: "RANDOM_VALUE_6",
    14: "UPGRADE_LUCKY",
    15: "CLIENT_END",
  }

  _NAMES_TO_VALUES = {
    "CLIENT_BEGIN": 0,
    "INTENSIFY": 0,
    "MAX_INTENSIFY": 1,
    "RANDOM_ATTR_1": 2,
    "RANDOM_VALUE_1": 3,
    "RANDOM_ATTR_2": 4,
    "RANDOM_VALUE_2": 5,
    "RANDOM_ATTR_3": 6,
    "RANDOM_VALUE_3": 7,
    "RANDOM_ATTR_4": 8,
    "RANDOM_VALUE_4": 9,
    "RANDOM_ATTR_5": 10,
    "RANDOM_VALUE_5": 11,
    "RANDOM_ATTR_6": 12,
    "RANDOM_VALUE_6": 13,
    "UPGRADE_LUCKY": 14,
    "CLIENT_END": 15,
  }

class EquipServerFields:
  SERVER_BEGIN = 0
  SERVER_END = 1

  _VALUES_TO_NAMES = {
    0: "SERVER_BEGIN",
    1: "SERVER_END",
  }

  _NAMES_TO_VALUES = {
    "SERVER_BEGIN": 0,
    "SERVER_END": 1,
  }


class EquipClientField:
  """
  Attributes:
   - field_
   - value_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'field_', None, None, ), # 1
    (2, TType.I32, 'value_', None, None, ), # 2
  )

  def __init__(self, field_=None, value_=None,):
    self.field_ = field_
    self.value_ = value_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.field_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.value_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EquipClientField')
    if self.field_ is not None:
      oprot.writeFieldBegin('field_', TType.I32, 1)
      oprot.writeI32(self.field_)
      oprot.writeFieldEnd()
    if self.value_ is not None:
      oprot.writeFieldBegin('value_', TType.I32, 2)
      oprot.writeI32(self.value_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.field_ is None:
      raise TProtocol.TProtocolException(message='Required field field_ is unset!')
    if self.value_ is None:
      raise TProtocol.TProtocolException(message='Required field value_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EquipServerField:
  """
  Attributes:
   - field_
   - value_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'field_', None, None, ), # 1
    (2, TType.I32, 'value_', None, None, ), # 2
  )

  def __init__(self, field_=None, value_=None,):
    self.field_ = field_
    self.value_ = value_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.field_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.value_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EquipServerField')
    if self.field_ is not None:
      oprot.writeFieldBegin('field_', TType.I32, 1)
      oprot.writeI32(self.field_)
      oprot.writeFieldEnd()
    if self.value_ is not None:
      oprot.writeFieldBegin('value_', TType.I32, 2)
      oprot.writeI32(self.value_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.field_ is None:
      raise TProtocol.TProtocolException(message='Required field field_ is unset!')
    if self.value_ is None:
      raise TProtocol.TProtocolException(message='Required field value_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EquipFacadeField:
  """
  Attributes:
   - location_
   - template_id_
   - intensify_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'location_', None, None, ), # 1
    (2, TType.I32, 'template_id_', None, None, ), # 2
    (3, TType.BYTE, 'intensify_', None, None, ), # 3
  )

  def __init__(self, location_=None, template_id_=None, intensify_=None,):
    self.location_ = location_
    self.template_id_ = template_id_
    self.intensify_ = intensify_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.location_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.template_id_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BYTE:
          self.intensify_ = iprot.readByte();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EquipFacadeField')
    if self.location_ is not None:
      oprot.writeFieldBegin('location_', TType.I32, 1)
      oprot.writeI32(self.location_)
      oprot.writeFieldEnd()
    if self.template_id_ is not None:
      oprot.writeFieldBegin('template_id_', TType.I32, 2)
      oprot.writeI32(self.template_id_)
      oprot.writeFieldEnd()
    if self.intensify_ is not None:
      oprot.writeFieldBegin('intensify_', TType.BYTE, 3)
      oprot.writeByte(self.intensify_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.location_ is None:
      raise TProtocol.TProtocolException(message='Required field location_ is unset!')
    if self.template_id_ is None:
      raise TProtocol.TProtocolException(message='Required field template_id_ is unset!')
    if self.intensify_ is None:
      raise TProtocol.TProtocolException(message='Required field intensify_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
