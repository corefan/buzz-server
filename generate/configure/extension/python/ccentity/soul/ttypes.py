#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ccentity.vocation.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class SoulSettingID:
  MIN = 0
  COMMON_1 = 1
  COMMON_2 = 2
  COMMON_3 = 3
  COMMON_4 = 4
  SOUL = 5
  MAX = 6

  _VALUES_TO_NAMES = {
    0: "MIN",
    1: "COMMON_1",
    2: "COMMON_2",
    3: "COMMON_3",
    4: "COMMON_4",
    5: "SOUL",
    6: "MAX",
  }

  _NAMES_TO_VALUES = {
    "MIN": 0,
    "COMMON_1": 1,
    "COMMON_2": 2,
    "COMMON_3": 3,
    "COMMON_4": 4,
    "SOUL": 5,
    "MAX": 6,
  }

class SoulUnlockType:
  MIN = 0
  ITEM = 1
  SPIRIT_LEVEL = 2
  SWORD_LEVEL = 3
  NOBLE_LEVEL = 4
  MAX = 5

  _VALUES_TO_NAMES = {
    0: "MIN",
    1: "ITEM",
    2: "SPIRIT_LEVEL",
    3: "SWORD_LEVEL",
    4: "NOBLE_LEVEL",
    5: "MAX",
  }

  _NAMES_TO_VALUES = {
    "MIN": 0,
    "ITEM": 1,
    "SPIRIT_LEVEL": 2,
    "SWORD_LEVEL": 3,
    "NOBLE_LEVEL": 4,
    "MAX": 5,
  }

class SoulEffectType:
  MIN = 0
  ATTR = 1
  EFFECT = 2
  SKILL_MAX_LEVEL = 3
  MAX = 4

  _VALUES_TO_NAMES = {
    0: "MIN",
    1: "ATTR",
    2: "EFFECT",
    3: "SKILL_MAX_LEVEL",
    4: "MAX",
  }

  _NAMES_TO_VALUES = {
    "MIN": 0,
    "ATTR": 1,
    "EFFECT": 2,
    "SKILL_MAX_LEVEL": 3,
    "MAX": 4,
  }

class SoulAttributeType:
  MIN = 0
  MAX_HP = 0
  MAX_MP = 1
  PHYSICS_ATTACK = 2
  PHYSICS_DEFENCE = 3
  MAGIC_ATTACK = 4
  MAGIC_DEFENCE = 5
  DODGE = 6
  CRIT = 7
  IGNORE_DEFENCE = 8
  MAX = 9

  _VALUES_TO_NAMES = {
    0: "MIN",
    0: "MAX_HP",
    1: "MAX_MP",
    2: "PHYSICS_ATTACK",
    3: "PHYSICS_DEFENCE",
    4: "MAGIC_ATTACK",
    5: "MAGIC_DEFENCE",
    6: "DODGE",
    7: "CRIT",
    8: "IGNORE_DEFENCE",
    9: "MAX",
  }

  _NAMES_TO_VALUES = {
    "MIN": 0,
    "MAX_HP": 0,
    "MAX_MP": 1,
    "PHYSICS_ATTACK": 2,
    "PHYSICS_DEFENCE": 3,
    "MAGIC_ATTACK": 4,
    "MAGIC_DEFENCE": 5,
    "DODGE": 6,
    "CRIT": 7,
    "IGNORE_DEFENCE": 8,
    "MAX": 9,
  }

class SoulEnergyStatus:
  MIN = 0
  INCREMENT = 1
  EXPLOSION = 2
  DECREMENT = 3
  MAX = 4

  _VALUES_TO_NAMES = {
    0: "MIN",
    1: "INCREMENT",
    2: "EXPLOSION",
    3: "DECREMENT",
    4: "MAX",
  }

  _NAMES_TO_VALUES = {
    "MIN": 0,
    "INCREMENT": 1,
    "EXPLOSION": 2,
    "DECREMENT": 3,
    "MAX": 4,
  }


class SoulField:
  """
  Attributes:
   - id_
   - level_
   - step_
   - common_skill_level_
   - appear_skill_level_
   - soul_skill_level_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id_', None, None, ), # 1
    (2, TType.I32, 'level_', None, None, ), # 2
    (3, TType.I32, 'step_', None, None, ), # 3
    (4, TType.I32, 'common_skill_level_', None, None, ), # 4
    (5, TType.I32, 'appear_skill_level_', None, None, ), # 5
    (6, TType.I32, 'soul_skill_level_', None, None, ), # 6
  )

  def __init__(self, id_=None, level_=None, step_=None, common_skill_level_=None, appear_skill_level_=None, soul_skill_level_=None,):
    self.id_ = id_
    self.level_ = level_
    self.step_ = step_
    self.common_skill_level_ = common_skill_level_
    self.appear_skill_level_ = appear_skill_level_
    self.soul_skill_level_ = soul_skill_level_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.level_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.step_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.common_skill_level_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.appear_skill_level_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.soul_skill_level_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SoulField')
    if self.id_ is not None:
      oprot.writeFieldBegin('id_', TType.I32, 1)
      oprot.writeI32(self.id_)
      oprot.writeFieldEnd()
    if self.level_ is not None:
      oprot.writeFieldBegin('level_', TType.I32, 2)
      oprot.writeI32(self.level_)
      oprot.writeFieldEnd()
    if self.step_ is not None:
      oprot.writeFieldBegin('step_', TType.I32, 3)
      oprot.writeI32(self.step_)
      oprot.writeFieldEnd()
    if self.common_skill_level_ is not None:
      oprot.writeFieldBegin('common_skill_level_', TType.I32, 4)
      oprot.writeI32(self.common_skill_level_)
      oprot.writeFieldEnd()
    if self.appear_skill_level_ is not None:
      oprot.writeFieldBegin('appear_skill_level_', TType.I32, 5)
      oprot.writeI32(self.appear_skill_level_)
      oprot.writeFieldEnd()
    if self.soul_skill_level_ is not None:
      oprot.writeFieldBegin('soul_skill_level_', TType.I32, 6)
      oprot.writeI32(self.soul_skill_level_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id_ is None:
      raise TProtocol.TProtocolException(message='Required field id_ is unset!')
    if self.level_ is None:
      raise TProtocol.TProtocolException(message='Required field level_ is unset!')
    if self.step_ is None:
      raise TProtocol.TProtocolException(message='Required field step_ is unset!')
    if self.common_skill_level_ is None:
      raise TProtocol.TProtocolException(message='Required field common_skill_level_ is unset!')
    if self.appear_skill_level_ is None:
      raise TProtocol.TProtocolException(message='Required field appear_skill_level_ is unset!')
    if self.soul_skill_level_ is None:
      raise TProtocol.TProtocolException(message='Required field soul_skill_level_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SoulSettingField:
  """
  Attributes:
   - vocation_
   - group_
   - settings_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'vocation_', None, None, ), # 1
    (2, TType.I32, 'group_', None, None, ), # 2
    (3, TType.LIST, 'settings_', (TType.I32,None), None, ), # 3
  )

  def __init__(self, vocation_=None, group_=None, settings_=None,):
    self.vocation_ = vocation_
    self.group_ = group_
    self.settings_ = settings_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.vocation_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.group_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.settings_ = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI32();
            self.settings_.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SoulSettingField')
    if self.vocation_ is not None:
      oprot.writeFieldBegin('vocation_', TType.I32, 1)
      oprot.writeI32(self.vocation_)
      oprot.writeFieldEnd()
    if self.group_ is not None:
      oprot.writeFieldBegin('group_', TType.I32, 2)
      oprot.writeI32(self.group_)
      oprot.writeFieldEnd()
    if self.settings_ is not None:
      oprot.writeFieldBegin('settings_', TType.LIST, 3)
      oprot.writeListBegin(TType.I32, len(self.settings_))
      for iter6 in self.settings_:
        oprot.writeI32(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.vocation_ is None:
      raise TProtocol.TProtocolException(message='Required field vocation_ is unset!')
    if self.group_ is None:
      raise TProtocol.TProtocolException(message='Required field group_ is unset!')
    if self.settings_ is None:
      raise TProtocol.TProtocolException(message='Required field settings_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
