#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ccentity.resource.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class PlayingType:
  MIN = 0
  COMMON = 1
  DAILY_PASS = 2
  MAX = 3

  _VALUES_TO_NAMES = {
    0: "MIN",
    1: "COMMON",
    2: "DAILY_PASS",
    3: "MAX",
  }

  _NAMES_TO_VALUES = {
    "MIN": 0,
    "COMMON": 1,
    "DAILY_PASS": 2,
    "MAX": 3,
  }

class PlayingCampType:
  MIN = 0
  PLAYER = 1
  TEAM = 2
  GUILD = 3
  ROOM = 4
  ACTIVITY = 5
  MAX = 6

  _VALUES_TO_NAMES = {
    0: "MIN",
    1: "PLAYER",
    2: "TEAM",
    3: "GUILD",
    4: "ROOM",
    5: "ACTIVITY",
    6: "MAX",
  }

  _NAMES_TO_VALUES = {
    "MIN": 0,
    "PLAYER": 1,
    "TEAM": 2,
    "GUILD": 3,
    "ROOM": 4,
    "ACTIVITY": 5,
    "MAX": 6,
  }

class DailyPassGroup:
  MIN = 0
  PLOT = 1
  IDOL = 2
  MAX = 3

  _VALUES_TO_NAMES = {
    0: "MIN",
    1: "PLOT",
    2: "IDOL",
    3: "MAX",
  }

  _NAMES_TO_VALUES = {
    "MIN": 0,
    "PLOT": 1,
    "IDOL": 2,
    "MAX": 3,
  }

class PlayingScoreType:
  MIN = 0
  KILL_NPC = 1
  KILL_ACTOR = 2
  EXP = 3
  DEAD_COUNT = 4
  POWER = 5
  DAMAGE = 6
  STAGE = 7
  MAX = 8

  _VALUES_TO_NAMES = {
    0: "MIN",
    1: "KILL_NPC",
    2: "KILL_ACTOR",
    3: "EXP",
    4: "DEAD_COUNT",
    5: "POWER",
    6: "DAMAGE",
    7: "STAGE",
    8: "MAX",
  }

  _NAMES_TO_VALUES = {
    "MIN": 0,
    "KILL_NPC": 1,
    "KILL_ACTOR": 2,
    "EXP": 3,
    "DEAD_COUNT": 4,
    "POWER": 5,
    "DAMAGE": 6,
    "STAGE": 7,
    "MAX": 8,
  }

class PlayingResultType:
  MIN = 0
  SIMPLE_SOCRE = 1
  SIMPLE_PASS = 2
  MAX = 3

  _VALUES_TO_NAMES = {
    0: "MIN",
    1: "SIMPLE_SOCRE",
    2: "SIMPLE_PASS",
    3: "MAX",
  }

  _NAMES_TO_VALUES = {
    "MIN": 0,
    "SIMPLE_SOCRE": 1,
    "SIMPLE_PASS": 2,
    "MAX": 3,
  }

class PlayingAutoType:
  MIN = 0
  RECORD = 1
  IMMEDIATE = 2
  MAX = 3

  _VALUES_TO_NAMES = {
    0: "MIN",
    1: "RECORD",
    2: "IMMEDIATE",
    3: "MAX",
  }

  _NAMES_TO_VALUES = {
    "MIN": 0,
    "RECORD": 1,
    "IMMEDIATE": 2,
    "MAX": 3,
  }

class PlayingPeriodType:
  MIN = 0
  DAILY = 1
  WEEKLY = 2
  MAX = 3

  _VALUES_TO_NAMES = {
    0: "MIN",
    1: "DAILY",
    2: "WEEKLY",
    3: "MAX",
  }

  _NAMES_TO_VALUES = {
    "MIN": 0,
    "DAILY": 1,
    "WEEKLY": 2,
    "MAX": 3,
  }

class PlayingTeamStatus:
  MIN = 0
  WAITING = 1
  READY = 2
  MAX = 3

  _VALUES_TO_NAMES = {
    0: "MIN",
    1: "WAITING",
    2: "READY",
    3: "MAX",
  }

  _NAMES_TO_VALUES = {
    "MIN": 0,
    "WAITING": 1,
    "READY": 2,
    "MAX": 3,
  }


class PlayingItemField:
  """
  Attributes:
   - template_
   - number_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'template_', None, None, ), # 1
    (2, TType.I32, 'number_', None, None, ), # 2
  )

  def __init__(self, template_=None, number_=None,):
    self.template_ = template_
    self.number_ = number_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.template_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.number_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PlayingItemField')
    if self.template_ is not None:
      oprot.writeFieldBegin('template_', TType.I32, 1)
      oprot.writeI32(self.template_)
      oprot.writeFieldEnd()
    if self.number_ is not None:
      oprot.writeFieldBegin('number_', TType.I32, 2)
      oprot.writeI32(self.number_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.template_ is None:
      raise TProtocol.TProtocolException(message='Required field template_ is unset!')
    if self.number_ is None:
      raise TProtocol.TProtocolException(message='Required field number_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PlayingAwardField:
  """
  Attributes:
   - type_
   - id_
   - number_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type_', None, None, ), # 1
    (2, TType.I32, 'id_', None, None, ), # 2
    (3, TType.I32, 'number_', None, None, ), # 3
  )

  def __init__(self, type_=None, id_=None, number_=None,):
    self.type_ = type_
    self.id_ = id_
    self.number_ = number_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.id_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.number_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PlayingAwardField')
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 1)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    if self.id_ is not None:
      oprot.writeFieldBegin('id_', TType.I32, 2)
      oprot.writeI32(self.id_)
      oprot.writeFieldEnd()
    if self.number_ is not None:
      oprot.writeFieldBegin('number_', TType.I32, 3)
      oprot.writeI32(self.number_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type_ is None:
      raise TProtocol.TProtocolException(message='Required field type_ is unset!')
    if self.id_ is None:
      raise TProtocol.TProtocolException(message='Required field id_ is unset!')
    if self.number_ is None:
      raise TProtocol.TProtocolException(message='Required field number_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PlayingAwardFields:
  """
  Attributes:
   - playing_template_
   - awards_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'playing_template_', None, None, ), # 1
    (2, TType.LIST, 'awards_', (TType.STRUCT,(PlayingAwardField, PlayingAwardField.thrift_spec)), None, ), # 2
  )

  def __init__(self, playing_template_=None, awards_=None,):
    self.playing_template_ = playing_template_
    self.awards_ = awards_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.playing_template_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.awards_ = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = PlayingAwardField()
            _elem5.read(iprot)
            self.awards_.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PlayingAwardFields')
    if self.playing_template_ is not None:
      oprot.writeFieldBegin('playing_template_', TType.I32, 1)
      oprot.writeI32(self.playing_template_)
      oprot.writeFieldEnd()
    if self.awards_ is not None:
      oprot.writeFieldBegin('awards_', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.awards_))
      for iter6 in self.awards_:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.playing_template_ is None:
      raise TProtocol.TProtocolException(message='Required field playing_template_ is unset!')
    if self.awards_ is None:
      raise TProtocol.TProtocolException(message='Required field awards_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PlayingScoreField:
  """
  Attributes:
   - type_
   - key_
   - value_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type_', None, None, ), # 1
    (2, TType.I32, 'key_', None, None, ), # 2
    (3, TType.I32, 'value_', None, None, ), # 3
  )

  def __init__(self, type_=None, key_=None, value_=None,):
    self.type_ = type_
    self.key_ = key_
    self.value_ = value_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.key_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.value_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PlayingScoreField')
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 1)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    if self.key_ is not None:
      oprot.writeFieldBegin('key_', TType.I32, 2)
      oprot.writeI32(self.key_)
      oprot.writeFieldEnd()
    if self.value_ is not None:
      oprot.writeFieldBegin('value_', TType.I32, 3)
      oprot.writeI32(self.value_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type_ is None:
      raise TProtocol.TProtocolException(message='Required field type_ is unset!')
    if self.key_ is None:
      raise TProtocol.TProtocolException(message='Required field key_ is unset!')
    if self.value_ is None:
      raise TProtocol.TProtocolException(message='Required field value_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PlayingRankingField:
  """
  Attributes:
   - name_
   - value_
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name_', None, None, ), # 1
    (2, TType.I32, 'value_', None, None, ), # 2
  )

  def __init__(self, name_=None, value_=None,):
    self.name_ = name_
    self.value_ = value_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name_ = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.value_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PlayingRankingField')
    if self.name_ is not None:
      oprot.writeFieldBegin('name_', TType.STRING, 1)
      oprot.writeString(self.name_)
      oprot.writeFieldEnd()
    if self.value_ is not None:
      oprot.writeFieldBegin('value_', TType.I32, 2)
      oprot.writeI32(self.value_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.name_ is None:
      raise TProtocol.TProtocolException(message='Required field name_ is unset!')
    if self.value_ is None:
      raise TProtocol.TProtocolException(message='Required field value_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PlayingRecordField:
  """
  Attributes:
   - period_count_
   - spend_secs_
   - first_pass_awarded_
   - values_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'period_count_', None, None, ), # 1
    (2, TType.I32, 'spend_secs_', None, None, ), # 2
    (3, TType.BOOL, 'first_pass_awarded_', None, None, ), # 3
    (4, TType.LIST, 'values_', (TType.I32,None), None, ), # 4
  )

  def __init__(self, period_count_=None, spend_secs_=None, first_pass_awarded_=None, values_=None,):
    self.period_count_ = period_count_
    self.spend_secs_ = spend_secs_
    self.first_pass_awarded_ = first_pass_awarded_
    self.values_ = values_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.period_count_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.spend_secs_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.first_pass_awarded_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.values_ = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readI32();
            self.values_.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PlayingRecordField')
    if self.period_count_ is not None:
      oprot.writeFieldBegin('period_count_', TType.I32, 1)
      oprot.writeI32(self.period_count_)
      oprot.writeFieldEnd()
    if self.spend_secs_ is not None:
      oprot.writeFieldBegin('spend_secs_', TType.I32, 2)
      oprot.writeI32(self.spend_secs_)
      oprot.writeFieldEnd()
    if self.first_pass_awarded_ is not None:
      oprot.writeFieldBegin('first_pass_awarded_', TType.BOOL, 3)
      oprot.writeBool(self.first_pass_awarded_)
      oprot.writeFieldEnd()
    if self.values_ is not None:
      oprot.writeFieldBegin('values_', TType.LIST, 4)
      oprot.writeListBegin(TType.I32, len(self.values_))
      for iter13 in self.values_:
        oprot.writeI32(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.period_count_ is None:
      raise TProtocol.TProtocolException(message='Required field period_count_ is unset!')
    if self.spend_secs_ is None:
      raise TProtocol.TProtocolException(message='Required field spend_secs_ is unset!')
    if self.first_pass_awarded_ is None:
      raise TProtocol.TProtocolException(message='Required field first_pass_awarded_ is unset!')
    if self.values_ is None:
      raise TProtocol.TProtocolException(message='Required field values_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PlayingResultField:
  """
  Attributes:
   - awarded_
   - award_count_
   - paid_award_count_
   - values_
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'awarded_', None, None, ), # 1
    (2, TType.I32, 'award_count_', None, None, ), # 2
    (3, TType.I32, 'paid_award_count_', None, None, ), # 3
    (4, TType.LIST, 'values_', (TType.I32,None), None, ), # 4
  )

  def __init__(self, awarded_=None, award_count_=None, paid_award_count_=None, values_=None,):
    self.awarded_ = awarded_
    self.award_count_ = award_count_
    self.paid_award_count_ = paid_award_count_
    self.values_ = values_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.awarded_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.award_count_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.paid_award_count_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.values_ = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readI32();
            self.values_.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PlayingResultField')
    if self.awarded_ is not None:
      oprot.writeFieldBegin('awarded_', TType.BOOL, 1)
      oprot.writeBool(self.awarded_)
      oprot.writeFieldEnd()
    if self.award_count_ is not None:
      oprot.writeFieldBegin('award_count_', TType.I32, 2)
      oprot.writeI32(self.award_count_)
      oprot.writeFieldEnd()
    if self.paid_award_count_ is not None:
      oprot.writeFieldBegin('paid_award_count_', TType.I32, 3)
      oprot.writeI32(self.paid_award_count_)
      oprot.writeFieldEnd()
    if self.values_ is not None:
      oprot.writeFieldBegin('values_', TType.LIST, 4)
      oprot.writeListBegin(TType.I32, len(self.values_))
      for iter20 in self.values_:
        oprot.writeI32(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.awarded_ is None:
      raise TProtocol.TProtocolException(message='Required field awarded_ is unset!')
    if self.award_count_ is None:
      raise TProtocol.TProtocolException(message='Required field award_count_ is unset!')
    if self.paid_award_count_ is None:
      raise TProtocol.TProtocolException(message='Required field paid_award_count_ is unset!')
    if self.values_ is None:
      raise TProtocol.TProtocolException(message='Required field values_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PlayingTeamField:
  """
  Attributes:
   - id_
   - name_
   - min_fight_score_
   - member_number_
   - status_
   - capacity_
   - auto_open_
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id_', None, None, ), # 1
    (2, TType.STRING, 'name_', None, None, ), # 2
    (3, TType.I32, 'min_fight_score_', None, None, ), # 3
    (4, TType.I32, 'member_number_', None, None, ), # 4
    (5, TType.I32, 'status_', None, None, ), # 5
    (6, TType.I32, 'capacity_', None, None, ), # 6
    (7, TType.BOOL, 'auto_open_', None, None, ), # 7
  )

  def __init__(self, id_=None, name_=None, min_fight_score_=None, member_number_=None, status_=None, capacity_=None, auto_open_=None,):
    self.id_ = id_
    self.name_ = name_
    self.min_fight_score_ = min_fight_score_
    self.member_number_ = member_number_
    self.status_ = status_
    self.capacity_ = capacity_
    self.auto_open_ = auto_open_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id_ = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name_ = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.min_fight_score_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.member_number_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.status_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.capacity_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.auto_open_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PlayingTeamField')
    if self.id_ is not None:
      oprot.writeFieldBegin('id_', TType.STRING, 1)
      oprot.writeString(self.id_)
      oprot.writeFieldEnd()
    if self.name_ is not None:
      oprot.writeFieldBegin('name_', TType.STRING, 2)
      oprot.writeString(self.name_)
      oprot.writeFieldEnd()
    if self.min_fight_score_ is not None:
      oprot.writeFieldBegin('min_fight_score_', TType.I32, 3)
      oprot.writeI32(self.min_fight_score_)
      oprot.writeFieldEnd()
    if self.member_number_ is not None:
      oprot.writeFieldBegin('member_number_', TType.I32, 4)
      oprot.writeI32(self.member_number_)
      oprot.writeFieldEnd()
    if self.status_ is not None:
      oprot.writeFieldBegin('status_', TType.I32, 5)
      oprot.writeI32(self.status_)
      oprot.writeFieldEnd()
    if self.capacity_ is not None:
      oprot.writeFieldBegin('capacity_', TType.I32, 6)
      oprot.writeI32(self.capacity_)
      oprot.writeFieldEnd()
    if self.auto_open_ is not None:
      oprot.writeFieldBegin('auto_open_', TType.BOOL, 7)
      oprot.writeBool(self.auto_open_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id_ is None:
      raise TProtocol.TProtocolException(message='Required field id_ is unset!')
    if self.name_ is None:
      raise TProtocol.TProtocolException(message='Required field name_ is unset!')
    if self.min_fight_score_ is None:
      raise TProtocol.TProtocolException(message='Required field min_fight_score_ is unset!')
    if self.member_number_ is None:
      raise TProtocol.TProtocolException(message='Required field member_number_ is unset!')
    if self.status_ is None:
      raise TProtocol.TProtocolException(message='Required field status_ is unset!')
    if self.capacity_ is None:
      raise TProtocol.TProtocolException(message='Required field capacity_ is unset!')
    if self.auto_open_ is None:
      raise TProtocol.TProtocolException(message='Required field auto_open_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PlayingTeamMemberField:
  """
  Attributes:
   - actor_
   - name_
   - fight_score_
   - level_
   - ready_
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'actor_', None, None, ), # 1
    (2, TType.STRING, 'name_', None, None, ), # 2
    (3, TType.I32, 'fight_score_', None, None, ), # 3
    (4, TType.I32, 'level_', None, None, ), # 4
    (5, TType.BOOL, 'ready_', None, None, ), # 5
  )

  def __init__(self, actor_=None, name_=None, fight_score_=None, level_=None, ready_=None,):
    self.actor_ = actor_
    self.name_ = name_
    self.fight_score_ = fight_score_
    self.level_ = level_
    self.ready_ = ready_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.actor_ = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name_ = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.fight_score_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.level_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.ready_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PlayingTeamMemberField')
    if self.actor_ is not None:
      oprot.writeFieldBegin('actor_', TType.STRING, 1)
      oprot.writeString(self.actor_)
      oprot.writeFieldEnd()
    if self.name_ is not None:
      oprot.writeFieldBegin('name_', TType.STRING, 2)
      oprot.writeString(self.name_)
      oprot.writeFieldEnd()
    if self.fight_score_ is not None:
      oprot.writeFieldBegin('fight_score_', TType.I32, 3)
      oprot.writeI32(self.fight_score_)
      oprot.writeFieldEnd()
    if self.level_ is not None:
      oprot.writeFieldBegin('level_', TType.I32, 4)
      oprot.writeI32(self.level_)
      oprot.writeFieldEnd()
    if self.ready_ is not None:
      oprot.writeFieldBegin('ready_', TType.BOOL, 5)
      oprot.writeBool(self.ready_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.actor_ is None:
      raise TProtocol.TProtocolException(message='Required field actor_ is unset!')
    if self.name_ is None:
      raise TProtocol.TProtocolException(message='Required field name_ is unset!')
    if self.fight_score_ is None:
      raise TProtocol.TProtocolException(message='Required field fight_score_ is unset!')
    if self.level_ is None:
      raise TProtocol.TProtocolException(message='Required field level_ is unset!')
    if self.ready_ is None:
      raise TProtocol.TProtocolException(message='Required field ready_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
