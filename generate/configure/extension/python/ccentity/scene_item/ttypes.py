#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class SceneItemAoiFields:
  AOI_BEGIN = 0
  TYPE = 0
  TEMPLATE = 1
  BIND = 2
  NUMBER = 3
  AOI_END = 4

  _VALUES_TO_NAMES = {
    0: "AOI_BEGIN",
    0: "TYPE",
    1: "TEMPLATE",
    2: "BIND",
    3: "NUMBER",
    4: "AOI_END",
  }

  _NAMES_TO_VALUES = {
    "AOI_BEGIN": 0,
    "TYPE": 0,
    "TEMPLATE": 1,
    "BIND": 2,
    "NUMBER": 3,
    "AOI_END": 4,
  }


class SceneItemAoiField:
  """
  Attributes:
   - field_
   - value_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'field_', None, None, ), # 1
    (2, TType.I32, 'value_', None, None, ), # 2
  )

  def __init__(self, field_=None, value_=None,):
    self.field_ = field_
    self.value_ = value_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.field_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.value_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SceneItemAoiField')
    if self.field_ is not None:
      oprot.writeFieldBegin('field_', TType.I32, 1)
      oprot.writeI32(self.field_)
      oprot.writeFieldEnd()
    if self.value_ is not None:
      oprot.writeFieldBegin('value_', TType.I32, 2)
      oprot.writeI32(self.value_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.field_ is None:
      raise TProtocol.TProtocolException(message='Required field field_ is unset!')
    if self.value_ is None:
      raise TProtocol.TProtocolException(message='Required field value_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
