#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class MailType:
  INVALID = 0
  SYSTEM = 1
  OPERATING = 2
  GENERAL = 3

  _VALUES_TO_NAMES = {
    0: "INVALID",
    1: "SYSTEM",
    2: "OPERATING",
    3: "GENERAL",
  }

  _NAMES_TO_VALUES = {
    "INVALID": 0,
    "SYSTEM": 1,
    "OPERATING": 2,
    "GENERAL": 3,
  }

class MailAffixType:
  NONE = 0
  EXIST = 1
  PICKED = 2

  _VALUES_TO_NAMES = {
    0: "NONE",
    1: "EXIST",
    2: "PICKED",
  }

  _NAMES_TO_VALUES = {
    "NONE": 0,
    "EXIST": 1,
    "PICKED": 2,
  }

class MailReadState:
  UNREAD = 0
  READ = 1

  _VALUES_TO_NAMES = {
    0: "UNREAD",
    1: "READ",
  }

  _NAMES_TO_VALUES = {
    "UNREAD": 0,
    "READ": 1,
  }


class MailAffix:
  """
  Attributes:
   - item1_
   - item1_num_
   - item2_
   - item2_num_
   - item3_
   - item3_num_
   - item4_
   - item4_num_
   - item5_
   - item5_num_
   - gold_
   - restrict_dollars_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'item1_', None, None, ), # 1
    (2, TType.I32, 'item1_num_', None, None, ), # 2
    (3, TType.I32, 'item2_', None, None, ), # 3
    (4, TType.I32, 'item2_num_', None, None, ), # 4
    (5, TType.I32, 'item3_', None, None, ), # 5
    (6, TType.I32, 'item3_num_', None, None, ), # 6
    (7, TType.I32, 'item4_', None, None, ), # 7
    (8, TType.I32, 'item4_num_', None, None, ), # 8
    (9, TType.I32, 'item5_', None, None, ), # 9
    (10, TType.I32, 'item5_num_', None, None, ), # 10
    (11, TType.I32, 'gold_', None, None, ), # 11
    (12, TType.I32, 'restrict_dollars_', None, None, ), # 12
  )

  def __init__(self, item1_=None, item1_num_=None, item2_=None, item2_num_=None, item3_=None, item3_num_=None, item4_=None, item4_num_=None, item5_=None, item5_num_=None, gold_=None, restrict_dollars_=None,):
    self.item1_ = item1_
    self.item1_num_ = item1_num_
    self.item2_ = item2_
    self.item2_num_ = item2_num_
    self.item3_ = item3_
    self.item3_num_ = item3_num_
    self.item4_ = item4_
    self.item4_num_ = item4_num_
    self.item5_ = item5_
    self.item5_num_ = item5_num_
    self.gold_ = gold_
    self.restrict_dollars_ = restrict_dollars_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.item1_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.item1_num_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.item2_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.item2_num_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.item3_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.item3_num_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.item4_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.item4_num_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.item5_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.item5_num_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.gold_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.restrict_dollars_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MailAffix')
    if self.item1_ is not None:
      oprot.writeFieldBegin('item1_', TType.I32, 1)
      oprot.writeI32(self.item1_)
      oprot.writeFieldEnd()
    if self.item1_num_ is not None:
      oprot.writeFieldBegin('item1_num_', TType.I32, 2)
      oprot.writeI32(self.item1_num_)
      oprot.writeFieldEnd()
    if self.item2_ is not None:
      oprot.writeFieldBegin('item2_', TType.I32, 3)
      oprot.writeI32(self.item2_)
      oprot.writeFieldEnd()
    if self.item2_num_ is not None:
      oprot.writeFieldBegin('item2_num_', TType.I32, 4)
      oprot.writeI32(self.item2_num_)
      oprot.writeFieldEnd()
    if self.item3_ is not None:
      oprot.writeFieldBegin('item3_', TType.I32, 5)
      oprot.writeI32(self.item3_)
      oprot.writeFieldEnd()
    if self.item3_num_ is not None:
      oprot.writeFieldBegin('item3_num_', TType.I32, 6)
      oprot.writeI32(self.item3_num_)
      oprot.writeFieldEnd()
    if self.item4_ is not None:
      oprot.writeFieldBegin('item4_', TType.I32, 7)
      oprot.writeI32(self.item4_)
      oprot.writeFieldEnd()
    if self.item4_num_ is not None:
      oprot.writeFieldBegin('item4_num_', TType.I32, 8)
      oprot.writeI32(self.item4_num_)
      oprot.writeFieldEnd()
    if self.item5_ is not None:
      oprot.writeFieldBegin('item5_', TType.I32, 9)
      oprot.writeI32(self.item5_)
      oprot.writeFieldEnd()
    if self.item5_num_ is not None:
      oprot.writeFieldBegin('item5_num_', TType.I32, 10)
      oprot.writeI32(self.item5_num_)
      oprot.writeFieldEnd()
    if self.gold_ is not None:
      oprot.writeFieldBegin('gold_', TType.I32, 11)
      oprot.writeI32(self.gold_)
      oprot.writeFieldEnd()
    if self.restrict_dollars_ is not None:
      oprot.writeFieldBegin('restrict_dollars_', TType.I32, 12)
      oprot.writeI32(self.restrict_dollars_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.item1_ is None:
      raise TProtocol.TProtocolException(message='Required field item1_ is unset!')
    if self.item1_num_ is None:
      raise TProtocol.TProtocolException(message='Required field item1_num_ is unset!')
    if self.item2_ is None:
      raise TProtocol.TProtocolException(message='Required field item2_ is unset!')
    if self.item2_num_ is None:
      raise TProtocol.TProtocolException(message='Required field item2_num_ is unset!')
    if self.item3_ is None:
      raise TProtocol.TProtocolException(message='Required field item3_ is unset!')
    if self.item3_num_ is None:
      raise TProtocol.TProtocolException(message='Required field item3_num_ is unset!')
    if self.item4_ is None:
      raise TProtocol.TProtocolException(message='Required field item4_ is unset!')
    if self.item4_num_ is None:
      raise TProtocol.TProtocolException(message='Required field item4_num_ is unset!')
    if self.item5_ is None:
      raise TProtocol.TProtocolException(message='Required field item5_ is unset!')
    if self.item5_num_ is None:
      raise TProtocol.TProtocolException(message='Required field item5_num_ is unset!')
    if self.gold_ is None:
      raise TProtocol.TProtocolException(message='Required field gold_ is unset!')
    if self.restrict_dollars_ is None:
      raise TProtocol.TProtocolException(message='Required field restrict_dollars_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
