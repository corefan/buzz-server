#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class NpcKind:
  MIN = 0
  FUNCTION = 1
  MONSTER = 2
  TELEPORTER = 3
  TASK = 4
  TASK_GATHER = 5
  GATHER = 6
  TRANSPORT = 7
  MAX = 8

  _VALUES_TO_NAMES = {
    0: "MIN",
    1: "FUNCTION",
    2: "MONSTER",
    3: "TELEPORTER",
    4: "TASK",
    5: "TASK_GATHER",
    6: "GATHER",
    7: "TRANSPORT",
    8: "MAX",
  }

  _NAMES_TO_VALUES = {
    "MIN": 0,
    "FUNCTION": 1,
    "MONSTER": 2,
    "TELEPORTER": 3,
    "TASK": 4,
    "TASK_GATHER": 5,
    "GATHER": 6,
    "TRANSPORT": 7,
    "MAX": 8,
  }

class NpcOwnerType:
  MIN = 0
  ALL = 0
  KILL = 1
  DAMAGE = 2
  CAMP_COMPETE = 3
  CAMP_EACH = 4
  MAX = 5

  _VALUES_TO_NAMES = {
    0: "MIN",
    0: "ALL",
    1: "KILL",
    2: "DAMAGE",
    3: "CAMP_COMPETE",
    4: "CAMP_EACH",
    5: "MAX",
  }

  _NAMES_TO_VALUES = {
    "MIN": 0,
    "ALL": 0,
    "KILL": 1,
    "DAMAGE": 2,
    "CAMP_COMPETE": 3,
    "CAMP_EACH": 4,
    "MAX": 5,
  }

class NpcAoiFields:
  AOI_BEGIN = 0
  AOI_END = 1

  _VALUES_TO_NAMES = {
    0: "AOI_BEGIN",
    1: "AOI_END",
  }

  _NAMES_TO_VALUES = {
    "AOI_BEGIN": 0,
    "AOI_END": 1,
  }

class NpcClientFields:
  CLIENT_BEGIN = 0
  CLIENT_END = 1

  _VALUES_TO_NAMES = {
    0: "CLIENT_BEGIN",
    1: "CLIENT_END",
  }

  _NAMES_TO_VALUES = {
    "CLIENT_BEGIN": 0,
    "CLIENT_END": 1,
  }

class NpcMobType:
  GENERAL_NPC = 0
  CREAM_NPC = 1
  BOSS_NPC = 2

  _VALUES_TO_NAMES = {
    0: "GENERAL_NPC",
    1: "CREAM_NPC",
    2: "BOSS_NPC",
  }

  _NAMES_TO_VALUES = {
    "GENERAL_NPC": 0,
    "CREAM_NPC": 1,
    "BOSS_NPC": 2,
  }


class NpcAoiField:
  """
  Attributes:
   - field_
   - value_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'field_', None, None, ), # 1
    (2, TType.I32, 'value_', None, None, ), # 2
  )

  def __init__(self, field_=None, value_=None,):
    self.field_ = field_
    self.value_ = value_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.field_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.value_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NpcAoiField')
    if self.field_ is not None:
      oprot.writeFieldBegin('field_', TType.I32, 1)
      oprot.writeI32(self.field_)
      oprot.writeFieldEnd()
    if self.value_ is not None:
      oprot.writeFieldBegin('value_', TType.I32, 2)
      oprot.writeI32(self.value_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.field_ is None:
      raise TProtocol.TProtocolException(message='Required field field_ is unset!')
    if self.value_ is None:
      raise TProtocol.TProtocolException(message='Required field value_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NpcSnapshotField:
  """
  Attributes:
   - template_id_
   - current_hp_
   - current_mp_
   - buff_
   - transport_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'template_id_', None, None, ), # 1
    (2, TType.I32, 'current_hp_', None, None, ), # 2
    (3, TType.I32, 'current_mp_', None, None, ), # 3
    (4, TType.STRING, 'buff_', None, None, ), # 4
    (5, TType.STRING, 'transport_', None, None, ), # 5
  )

  def __init__(self, template_id_=None, current_hp_=None, current_mp_=None, buff_=None, transport_=None,):
    self.template_id_ = template_id_
    self.current_hp_ = current_hp_
    self.current_mp_ = current_mp_
    self.buff_ = buff_
    self.transport_ = transport_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.template_id_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.current_hp_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.current_mp_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.buff_ = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.transport_ = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NpcSnapshotField')
    if self.template_id_ is not None:
      oprot.writeFieldBegin('template_id_', TType.I32, 1)
      oprot.writeI32(self.template_id_)
      oprot.writeFieldEnd()
    if self.current_hp_ is not None:
      oprot.writeFieldBegin('current_hp_', TType.I32, 2)
      oprot.writeI32(self.current_hp_)
      oprot.writeFieldEnd()
    if self.current_mp_ is not None:
      oprot.writeFieldBegin('current_mp_', TType.I32, 3)
      oprot.writeI32(self.current_mp_)
      oprot.writeFieldEnd()
    if self.buff_ is not None:
      oprot.writeFieldBegin('buff_', TType.STRING, 4)
      oprot.writeString(self.buff_)
      oprot.writeFieldEnd()
    if self.transport_ is not None:
      oprot.writeFieldBegin('transport_', TType.STRING, 5)
      oprot.writeString(self.transport_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.template_id_ is None:
      raise TProtocol.TProtocolException(message='Required field template_id_ is unset!')
    if self.current_hp_ is None:
      raise TProtocol.TProtocolException(message='Required field current_hp_ is unset!')
    if self.current_mp_ is None:
      raise TProtocol.TProtocolException(message='Required field current_mp_ is unset!')
    if self.buff_ is None:
      raise TProtocol.TProtocolException(message='Required field buff_ is unset!')
    if self.transport_ is None:
      raise TProtocol.TProtocolException(message='Required field transport_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
