#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class MallUseType:
  USE_FREEDOM_DOLLARS = 0
  USE_RESTRICT_DOLLARS = 1
  USE_FREEDOM_RESTRICT = 2
  USE_ARENA_INTEGRAL = 3
  USE_JUSTICE = 4
  USE_MIRACLE_INTEGRAL = 5
  USE_LEGEND_INTEGRAL = 6

  _VALUES_TO_NAMES = {
    0: "USE_FREEDOM_DOLLARS",
    1: "USE_RESTRICT_DOLLARS",
    2: "USE_FREEDOM_RESTRICT",
    3: "USE_ARENA_INTEGRAL",
    4: "USE_JUSTICE",
    5: "USE_MIRACLE_INTEGRAL",
    6: "USE_LEGEND_INTEGRAL",
  }

  _NAMES_TO_VALUES = {
    "USE_FREEDOM_DOLLARS": 0,
    "USE_RESTRICT_DOLLARS": 1,
    "USE_FREEDOM_RESTRICT": 2,
    "USE_ARENA_INTEGRAL": 3,
    "USE_JUSTICE": 4,
    "USE_MIRACLE_INTEGRAL": 5,
    "USE_LEGEND_INTEGRAL": 6,
  }

class MallTreasureType:
  MALL = 0
  TREASURE = 1

  _VALUES_TO_NAMES = {
    0: "MALL",
    1: "TREASURE",
  }

  _NAMES_TO_VALUES = {
    "MALL": 0,
    "TREASURE": 1,
  }


class MallTreasureCell:
  """
  Attributes:
   - tab_
   - shop_type_
   - location_
   - id_
   - hot_
   - dollars_
   - spend_type_
   - up_start_time_
   - up_end_time_
   - dollars_start_time_
   - dollars_end_time_
   - limit_buy_num_
   - sell_price_
   - bind_
  """

  thrift_spec = (
    None, # 0
    (1, TType.BYTE, 'tab_', None, None, ), # 1
    (2, TType.BYTE, 'shop_type_', None, None, ), # 2
    (3, TType.BYTE, 'location_', None, None, ), # 3
    (4, TType.I32, 'id_', None, None, ), # 4
    (5, TType.BOOL, 'hot_', None, None, ), # 5
    (6, TType.I32, 'dollars_', None, None, ), # 6
    (7, TType.BYTE, 'spend_type_', None, None, ), # 7
    (8, TType.STRING, 'up_start_time_', None, None, ), # 8
    (9, TType.STRING, 'up_end_time_', None, None, ), # 9
    (10, TType.STRING, 'dollars_start_time_', None, None, ), # 10
    (11, TType.STRING, 'dollars_end_time_', None, None, ), # 11
    (12, TType.I32, 'limit_buy_num_', None, None, ), # 12
    (13, TType.I32, 'sell_price_', None, None, ), # 13
    (14, TType.BYTE, 'bind_', None, None, ), # 14
  )

  def __init__(self, tab_=None, shop_type_=None, location_=None, id_=None, hot_=None, dollars_=None, spend_type_=None, up_start_time_=None, up_end_time_=None, dollars_start_time_=None, dollars_end_time_=None, limit_buy_num_=None, sell_price_=None, bind_=None,):
    self.tab_ = tab_
    self.shop_type_ = shop_type_
    self.location_ = location_
    self.id_ = id_
    self.hot_ = hot_
    self.dollars_ = dollars_
    self.spend_type_ = spend_type_
    self.up_start_time_ = up_start_time_
    self.up_end_time_ = up_end_time_
    self.dollars_start_time_ = dollars_start_time_
    self.dollars_end_time_ = dollars_end_time_
    self.limit_buy_num_ = limit_buy_num_
    self.sell_price_ = sell_price_
    self.bind_ = bind_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BYTE:
          self.tab_ = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.shop_type_ = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BYTE:
          self.location_ = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.id_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.hot_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.dollars_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BYTE:
          self.spend_type_ = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.up_start_time_ = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.up_end_time_ = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.dollars_start_time_ = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.dollars_end_time_ = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.limit_buy_num_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.sell_price_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.BYTE:
          self.bind_ = iprot.readByte();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MallTreasureCell')
    if self.tab_ is not None:
      oprot.writeFieldBegin('tab_', TType.BYTE, 1)
      oprot.writeByte(self.tab_)
      oprot.writeFieldEnd()
    if self.shop_type_ is not None:
      oprot.writeFieldBegin('shop_type_', TType.BYTE, 2)
      oprot.writeByte(self.shop_type_)
      oprot.writeFieldEnd()
    if self.location_ is not None:
      oprot.writeFieldBegin('location_', TType.BYTE, 3)
      oprot.writeByte(self.location_)
      oprot.writeFieldEnd()
    if self.id_ is not None:
      oprot.writeFieldBegin('id_', TType.I32, 4)
      oprot.writeI32(self.id_)
      oprot.writeFieldEnd()
    if self.hot_ is not None:
      oprot.writeFieldBegin('hot_', TType.BOOL, 5)
      oprot.writeBool(self.hot_)
      oprot.writeFieldEnd()
    if self.dollars_ is not None:
      oprot.writeFieldBegin('dollars_', TType.I32, 6)
      oprot.writeI32(self.dollars_)
      oprot.writeFieldEnd()
    if self.spend_type_ is not None:
      oprot.writeFieldBegin('spend_type_', TType.BYTE, 7)
      oprot.writeByte(self.spend_type_)
      oprot.writeFieldEnd()
    if self.up_start_time_ is not None:
      oprot.writeFieldBegin('up_start_time_', TType.STRING, 8)
      oprot.writeString(self.up_start_time_)
      oprot.writeFieldEnd()
    if self.up_end_time_ is not None:
      oprot.writeFieldBegin('up_end_time_', TType.STRING, 9)
      oprot.writeString(self.up_end_time_)
      oprot.writeFieldEnd()
    if self.dollars_start_time_ is not None:
      oprot.writeFieldBegin('dollars_start_time_', TType.STRING, 10)
      oprot.writeString(self.dollars_start_time_)
      oprot.writeFieldEnd()
    if self.dollars_end_time_ is not None:
      oprot.writeFieldBegin('dollars_end_time_', TType.STRING, 11)
      oprot.writeString(self.dollars_end_time_)
      oprot.writeFieldEnd()
    if self.limit_buy_num_ is not None:
      oprot.writeFieldBegin('limit_buy_num_', TType.I32, 12)
      oprot.writeI32(self.limit_buy_num_)
      oprot.writeFieldEnd()
    if self.sell_price_ is not None:
      oprot.writeFieldBegin('sell_price_', TType.I32, 13)
      oprot.writeI32(self.sell_price_)
      oprot.writeFieldEnd()
    if self.bind_ is not None:
      oprot.writeFieldBegin('bind_', TType.BYTE, 14)
      oprot.writeByte(self.bind_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.tab_ is None:
      raise TProtocol.TProtocolException(message='Required field tab_ is unset!')
    if self.shop_type_ is None:
      raise TProtocol.TProtocolException(message='Required field shop_type_ is unset!')
    if self.location_ is None:
      raise TProtocol.TProtocolException(message='Required field location_ is unset!')
    if self.id_ is None:
      raise TProtocol.TProtocolException(message='Required field id_ is unset!')
    if self.hot_ is None:
      raise TProtocol.TProtocolException(message='Required field hot_ is unset!')
    if self.dollars_ is None:
      raise TProtocol.TProtocolException(message='Required field dollars_ is unset!')
    if self.spend_type_ is None:
      raise TProtocol.TProtocolException(message='Required field spend_type_ is unset!')
    if self.up_start_time_ is None:
      raise TProtocol.TProtocolException(message='Required field up_start_time_ is unset!')
    if self.up_end_time_ is None:
      raise TProtocol.TProtocolException(message='Required field up_end_time_ is unset!')
    if self.dollars_start_time_ is None:
      raise TProtocol.TProtocolException(message='Required field dollars_start_time_ is unset!')
    if self.dollars_end_time_ is None:
      raise TProtocol.TProtocolException(message='Required field dollars_end_time_ is unset!')
    if self.limit_buy_num_ is None:
      raise TProtocol.TProtocolException(message='Required field limit_buy_num_ is unset!')
    if self.sell_price_ is None:
      raise TProtocol.TProtocolException(message='Required field sell_price_ is unset!')
    if self.bind_ is None:
      raise TProtocol.TProtocolException(message='Required field bind_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MallReasureBuyNum:
  """
  Attributes:
   - item_id_
   - num_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'item_id_', None, None, ), # 1
    (2, TType.I32, 'num_', None, None, ), # 2
  )

  def __init__(self, item_id_=None, num_=None,):
    self.item_id_ = item_id_
    self.num_ = num_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.item_id_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.num_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MallReasureBuyNum')
    if self.item_id_ is not None:
      oprot.writeFieldBegin('item_id_', TType.I32, 1)
      oprot.writeI32(self.item_id_)
      oprot.writeFieldEnd()
    if self.num_ is not None:
      oprot.writeFieldBegin('num_', TType.I32, 2)
      oprot.writeI32(self.num_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.item_id_ is None:
      raise TProtocol.TProtocolException(message='Required field item_id_ is unset!')
    if self.num_ is None:
      raise TProtocol.TProtocolException(message='Required field num_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
