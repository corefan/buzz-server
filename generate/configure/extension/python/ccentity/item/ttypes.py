#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ItemType:
  EQUIPMENT = 0
  MEDICINE = 1
  CARD = 2
  MATERIAL = 3
  TASK = 4
  MAX = 5

  _VALUES_TO_NAMES = {
    0: "EQUIPMENT",
    1: "MEDICINE",
    2: "CARD",
    3: "MATERIAL",
    4: "TASK",
    5: "MAX",
  }

  _NAMES_TO_VALUES = {
    "EQUIPMENT": 0,
    "MEDICINE": 1,
    "CARD": 2,
    "MATERIAL": 3,
    "TASK": 4,
    "MAX": 5,
  }

class EquipmentType:
  MIN = 0
  WEAPONS = 0
  HAT = 1
  CLOTHES = 2
  ARM = 3
  BELT = 4
  TROUSERS = 5
  SHOES = 6
  RING = 7
  NECKLACE = 8
  ACCESORY = 9
  MAX = 10

  _VALUES_TO_NAMES = {
    0: "MIN",
    0: "WEAPONS",
    1: "HAT",
    2: "CLOTHES",
    3: "ARM",
    4: "BELT",
    5: "TROUSERS",
    6: "SHOES",
    7: "RING",
    8: "NECKLACE",
    9: "ACCESORY",
    10: "MAX",
  }

  _NAMES_TO_VALUES = {
    "MIN": 0,
    "WEAPONS": 0,
    "HAT": 1,
    "CLOTHES": 2,
    "ARM": 3,
    "BELT": 4,
    "TROUSERS": 5,
    "SHOES": 6,
    "RING": 7,
    "NECKLACE": 8,
    "ACCESORY": 9,
    "MAX": 10,
  }

class MedicineType:
  MIN = 0
  MEDICINE = 0
  BUFF = 1
  SOUL = 2
  MAX = 3

  _VALUES_TO_NAMES = {
    0: "MIN",
    0: "MEDICINE",
    1: "BUFF",
    2: "SOUL",
    3: "MAX",
  }

  _NAMES_TO_VALUES = {
    "MIN": 0,
    "MEDICINE": 0,
    "BUFF": 1,
    "SOUL": 2,
    "MAX": 3,
  }

class MaterialType:
  MIN = 0
  EQUIP_INTENSIFY = 0
  INLAY = 1
  SLOTTING = 2
  REFINE = 3
  PROMOTION = 4
  HORSE_INTENSIFY = 5
  HORSE_UNREAL = 6
  SOUL_STONE = 7
  RUNE = 13
  MAX = 14

  _VALUES_TO_NAMES = {
    0: "MIN",
    0: "EQUIP_INTENSIFY",
    1: "INLAY",
    2: "SLOTTING",
    3: "REFINE",
    4: "PROMOTION",
    5: "HORSE_INTENSIFY",
    6: "HORSE_UNREAL",
    7: "SOUL_STONE",
    13: "RUNE",
    14: "MAX",
  }

  _NAMES_TO_VALUES = {
    "MIN": 0,
    "EQUIP_INTENSIFY": 0,
    "INLAY": 1,
    "SLOTTING": 2,
    "REFINE": 3,
    "PROMOTION": 4,
    "HORSE_INTENSIFY": 5,
    "HORSE_UNREAL": 6,
    "SOUL_STONE": 7,
    "RUNE": 13,
    "MAX": 14,
  }

class CardType:
  MIN = 0
  MAX = 1

  _VALUES_TO_NAMES = {
    0: "MIN",
    1: "MAX",
  }

  _NAMES_TO_VALUES = {
    "MIN": 0,
    "MAX": 1,
  }

class TaskItemType:
  MIN = 0
  MAX = 1

  _VALUES_TO_NAMES = {
    0: "MIN",
    1: "MAX",
  }

  _NAMES_TO_VALUES = {
    "MIN": 0,
    "MAX": 1,
  }

class ItemContainerType:
  PACKET = 0
  EQUIP = 1
  SHOP = 2
  STORAGE = 3
  TREASURE = 4
  MAX = 5

  _VALUES_TO_NAMES = {
    0: "PACKET",
    1: "EQUIP",
    2: "SHOP",
    3: "STORAGE",
    4: "TREASURE",
    5: "MAX",
  }

  _NAMES_TO_VALUES = {
    "PACKET": 0,
    "EQUIP": 1,
    "SHOP": 2,
    "STORAGE": 3,
    "TREASURE": 4,
    "MAX": 5,
  }

class ItemTargetType:
  SELF = 0
  OTHER_ONE = 1

  _VALUES_TO_NAMES = {
    0: "SELF",
    1: "OTHER_ONE",
  }

  _NAMES_TO_VALUES = {
    "SELF": 0,
    "OTHER_ONE": 1,
  }

class ItemClientFields:
  CLIENT_BEGIN = 0
  BIND_TYPE = 0
  STACK_COUNT = 1
  CLIENT_END = 2

  _VALUES_TO_NAMES = {
    0: "CLIENT_BEGIN",
    0: "BIND_TYPE",
    1: "STACK_COUNT",
    2: "CLIENT_END",
  }

  _NAMES_TO_VALUES = {
    "CLIENT_BEGIN": 0,
    "BIND_TYPE": 0,
    "STACK_COUNT": 1,
    "CLIENT_END": 2,
  }

class ItemServerFields:
  SERVER_BEGIN = 0
  SERVER_END = 1

  _VALUES_TO_NAMES = {
    0: "SERVER_BEGIN",
    1: "SERVER_END",
  }

  _NAMES_TO_VALUES = {
    "SERVER_BEGIN": 0,
    "SERVER_END": 1,
  }

class BindRequireType:
  NOT_BIND = 0
  BIND = 1
  BOTH = 2

  _VALUES_TO_NAMES = {
    0: "NOT_BIND",
    1: "BIND",
    2: "BOTH",
  }

  _NAMES_TO_VALUES = {
    "NOT_BIND": 0,
    "BIND": 1,
    "BOTH": 2,
  }

class ItemUseRoleStatus:
  LIVE = 0
  DIED = 1
  ALL = 2

  _VALUES_TO_NAMES = {
    0: "LIVE",
    1: "DIED",
    2: "ALL",
  }

  _NAMES_TO_VALUES = {
    "LIVE": 0,
    "DIED": 1,
    "ALL": 2,
  }


class ItemClientField:
  """
  Attributes:
   - field_
   - value_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'field_', None, None, ), # 1
    (2, TType.I32, 'value_', None, None, ), # 2
  )

  def __init__(self, field_=None, value_=None,):
    self.field_ = field_
    self.value_ = value_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.field_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.value_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ItemClientField')
    if self.field_ is not None:
      oprot.writeFieldBegin('field_', TType.I32, 1)
      oprot.writeI32(self.field_)
      oprot.writeFieldEnd()
    if self.value_ is not None:
      oprot.writeFieldBegin('value_', TType.I32, 2)
      oprot.writeI32(self.value_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.field_ is None:
      raise TProtocol.TProtocolException(message='Required field field_ is unset!')
    if self.value_ is None:
      raise TProtocol.TProtocolException(message='Required field value_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ItemServerField:
  """
  Attributes:
   - field_
   - value_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'field_', None, None, ), # 1
    (2, TType.I32, 'value_', None, None, ), # 2
  )

  def __init__(self, field_=None, value_=None,):
    self.field_ = field_
    self.value_ = value_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.field_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.value_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ItemServerField')
    if self.field_ is not None:
      oprot.writeFieldBegin('field_', TType.I32, 1)
      oprot.writeI32(self.field_)
      oprot.writeFieldEnd()
    if self.value_ is not None:
      oprot.writeFieldBegin('value_', TType.I32, 2)
      oprot.writeI32(self.value_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.field_ is None:
      raise TProtocol.TProtocolException(message='Required field field_ is unset!')
    if self.value_ is None:
      raise TProtocol.TProtocolException(message='Required field value_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AddItemFields:
  """
  Attributes:
   - item_template_
   - number_
   - bind_
   - intensify_level_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'item_template_', None, None, ), # 1
    (2, TType.I32, 'number_', None, None, ), # 2
    (3, TType.BOOL, 'bind_', None, None, ), # 3
    (4, TType.I32, 'intensify_level_', None, None, ), # 4
  )

  def __init__(self, item_template_=None, number_=None, bind_=None, intensify_level_=None,):
    self.item_template_ = item_template_
    self.number_ = number_
    self.bind_ = bind_
    self.intensify_level_ = intensify_level_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.item_template_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.number_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.bind_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.intensify_level_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AddItemFields')
    if self.item_template_ is not None:
      oprot.writeFieldBegin('item_template_', TType.I32, 1)
      oprot.writeI32(self.item_template_)
      oprot.writeFieldEnd()
    if self.number_ is not None:
      oprot.writeFieldBegin('number_', TType.I32, 2)
      oprot.writeI32(self.number_)
      oprot.writeFieldEnd()
    if self.bind_ is not None:
      oprot.writeFieldBegin('bind_', TType.BOOL, 3)
      oprot.writeBool(self.bind_)
      oprot.writeFieldEnd()
    if self.intensify_level_ is not None:
      oprot.writeFieldBegin('intensify_level_', TType.I32, 4)
      oprot.writeI32(self.intensify_level_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.item_template_ is None:
      raise TProtocol.TProtocolException(message='Required field item_template_ is unset!')
    if self.number_ is None:
      raise TProtocol.TProtocolException(message='Required field number_ is unset!')
    if self.bind_ is None:
      raise TProtocol.TProtocolException(message='Required field bind_ is unset!')
    if self.intensify_level_ is None:
      raise TProtocol.TProtocolException(message='Required field intensify_level_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ItemFields:
  """
  Attributes:
   - id_
   - template_id_
   - type_
   - location_
   - item_client_fields_
   - equipment_client_fields_
   - first_equip_time_
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id_', None, None, ), # 1
    (2, TType.I32, 'template_id_', None, None, ), # 2
    (3, TType.I32, 'type_', None, None, ), # 3
    (4, TType.I16, 'location_', None, None, ), # 4
    (5, TType.LIST, 'item_client_fields_', (TType.I32,None), None, ), # 5
    (6, TType.LIST, 'equipment_client_fields_', (TType.I32,None), None, ), # 6
    (7, TType.STRING, 'first_equip_time_', None, None, ), # 7
  )

  def __init__(self, id_=None, template_id_=None, type_=None, location_=None, item_client_fields_=None, equipment_client_fields_=None, first_equip_time_=None,):
    self.id_ = id_
    self.template_id_ = template_id_
    self.type_ = type_
    self.location_ = location_
    self.item_client_fields_ = item_client_fields_
    self.equipment_client_fields_ = equipment_client_fields_
    self.first_equip_time_ = first_equip_time_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id_ = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.template_id_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.location_ = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.item_client_fields_ = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI32();
            self.item_client_fields_.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.equipment_client_fields_ = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readI32();
            self.equipment_client_fields_.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.first_equip_time_ = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ItemFields')
    if self.id_ is not None:
      oprot.writeFieldBegin('id_', TType.STRING, 1)
      oprot.writeString(self.id_)
      oprot.writeFieldEnd()
    if self.template_id_ is not None:
      oprot.writeFieldBegin('template_id_', TType.I32, 2)
      oprot.writeI32(self.template_id_)
      oprot.writeFieldEnd()
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 3)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    if self.location_ is not None:
      oprot.writeFieldBegin('location_', TType.I16, 4)
      oprot.writeI16(self.location_)
      oprot.writeFieldEnd()
    if self.item_client_fields_ is not None:
      oprot.writeFieldBegin('item_client_fields_', TType.LIST, 5)
      oprot.writeListBegin(TType.I32, len(self.item_client_fields_))
      for iter12 in self.item_client_fields_:
        oprot.writeI32(iter12)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.equipment_client_fields_ is not None:
      oprot.writeFieldBegin('equipment_client_fields_', TType.LIST, 6)
      oprot.writeListBegin(TType.I32, len(self.equipment_client_fields_))
      for iter13 in self.equipment_client_fields_:
        oprot.writeI32(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.first_equip_time_ is not None:
      oprot.writeFieldBegin('first_equip_time_', TType.STRING, 7)
      oprot.writeString(self.first_equip_time_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id_ is None:
      raise TProtocol.TProtocolException(message='Required field id_ is unset!')
    if self.template_id_ is None:
      raise TProtocol.TProtocolException(message='Required field template_id_ is unset!')
    if self.type_ is None:
      raise TProtocol.TProtocolException(message='Required field type_ is unset!')
    if self.location_ is None:
      raise TProtocol.TProtocolException(message='Required field location_ is unset!')
    if self.item_client_fields_ is None:
      raise TProtocol.TProtocolException(message='Required field item_client_fields_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
