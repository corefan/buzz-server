#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ActorAoiFields:
  AOI_BEGIN = 0
  GENDER = 0
  APPEARANCE = 1
  BROWN_NAME = 2
  CURRENT_SWORD = 3
  CURRENT_SPIRIT_FACADE = 4
  VIP = 5
  AOI_END = 6

  _VALUES_TO_NAMES = {
    0: "AOI_BEGIN",
    0: "GENDER",
    1: "APPEARANCE",
    2: "BROWN_NAME",
    3: "CURRENT_SWORD",
    4: "CURRENT_SPIRIT_FACADE",
    5: "VIP",
    6: "AOI_END",
  }

  _NAMES_TO_VALUES = {
    "AOI_BEGIN": 0,
    "GENDER": 0,
    "APPEARANCE": 1,
    "BROWN_NAME": 2,
    "CURRENT_SWORD": 3,
    "CURRENT_SPIRIT_FACADE": 4,
    "VIP": 5,
    "AOI_END": 6,
  }

class ActorClientFields:
  CLIENT_BEGIN = 0
  CURRENT_EXP = 0
  NIMBUS = 1
  GOLD = 2
  FREEDOM_DOLLARS = 3
  RESTRICT_DOLLARS = 4
  HONOUR = 5
  WAR_SOUL = 6
  GEM_SHARD = 7
  PACKET_CAPACITY = 8
  STORAGE_CAPACITY = 9
  PK_MODE = 10
  FCM_TYPE = 11
  FCM_STATUS = 12
  JUSTICE = 13
  MIRACLE_INTEGRAL = 14
  LEGEND_INTEGRAL = 15
  ARENA_INTEGRAL = 16
  CLIENT_END = 17

  _VALUES_TO_NAMES = {
    0: "CLIENT_BEGIN",
    0: "CURRENT_EXP",
    1: "NIMBUS",
    2: "GOLD",
    3: "FREEDOM_DOLLARS",
    4: "RESTRICT_DOLLARS",
    5: "HONOUR",
    6: "WAR_SOUL",
    7: "GEM_SHARD",
    8: "PACKET_CAPACITY",
    9: "STORAGE_CAPACITY",
    10: "PK_MODE",
    11: "FCM_TYPE",
    12: "FCM_STATUS",
    13: "JUSTICE",
    14: "MIRACLE_INTEGRAL",
    15: "LEGEND_INTEGRAL",
    16: "ARENA_INTEGRAL",
    17: "CLIENT_END",
  }

  _NAMES_TO_VALUES = {
    "CLIENT_BEGIN": 0,
    "CURRENT_EXP": 0,
    "NIMBUS": 1,
    "GOLD": 2,
    "FREEDOM_DOLLARS": 3,
    "RESTRICT_DOLLARS": 4,
    "HONOUR": 5,
    "WAR_SOUL": 6,
    "GEM_SHARD": 7,
    "PACKET_CAPACITY": 8,
    "STORAGE_CAPACITY": 9,
    "PK_MODE": 10,
    "FCM_TYPE": 11,
    "FCM_STATUS": 12,
    "JUSTICE": 13,
    "MIRACLE_INTEGRAL": 14,
    "LEGEND_INTEGRAL": 15,
    "ARENA_INTEGRAL": 16,
    "CLIENT_END": 17,
  }

class ActorServerFields:
  SERVER_BEGIN = 0
  KILL_MOB_AND_ZAZEN_EXP_ADD_PERCENT = 0
  KILL_MOB_AND_ZAZEN_NIMBUS_ADD_PERCENT = 1
  SERVER_END = 2

  _VALUES_TO_NAMES = {
    0: "SERVER_BEGIN",
    0: "KILL_MOB_AND_ZAZEN_EXP_ADD_PERCENT",
    1: "KILL_MOB_AND_ZAZEN_NIMBUS_ADD_PERCENT",
    2: "SERVER_END",
  }

  _NAMES_TO_VALUES = {
    "SERVER_BEGIN": 0,
    "KILL_MOB_AND_ZAZEN_EXP_ADD_PERCENT": 0,
    "KILL_MOB_AND_ZAZEN_NIMBUS_ADD_PERCENT": 1,
    "SERVER_END": 2,
  }

class ActorPKModeType:
  PEACE = 0
  ATTACK = 1
  BATTLE = 2

  _VALUES_TO_NAMES = {
    0: "PEACE",
    1: "ATTACK",
    2: "BATTLE",
  }

  _NAMES_TO_VALUES = {
    "PEACE": 0,
    "ATTACK": 1,
    "BATTLE": 2,
  }

class ActorPKChooseType:
  SELF_DEFENSE = 1
  NOT_ATTACK_TEAMMATE = 2
  NOT_ATTACK_SAME_GUILD = 4
  NOT_ATTACK_NO_BROWN_ACTOR = 8

  _VALUES_TO_NAMES = {
    1: "SELF_DEFENSE",
    2: "NOT_ATTACK_TEAMMATE",
    4: "NOT_ATTACK_SAME_GUILD",
    8: "NOT_ATTACK_NO_BROWN_ACTOR",
  }

  _NAMES_TO_VALUES = {
    "SELF_DEFENSE": 1,
    "NOT_ATTACK_TEAMMATE": 2,
    "NOT_ATTACK_SAME_GUILD": 4,
    "NOT_ATTACK_NO_BROWN_ACTOR": 8,
  }

class ReviveType:
  SPAWN_POINT = 0
  STAY = 1

  _VALUES_TO_NAMES = {
    0: "SPAWN_POINT",
    1: "STAY",
  }

  _NAMES_TO_VALUES = {
    "SPAWN_POINT": 0,
    "STAY": 1,
  }

class FcmType:
  UNKNOWN = 0
  MINOR = 1
  ADULT = 2

  _VALUES_TO_NAMES = {
    0: "UNKNOWN",
    1: "MINOR",
    2: "ADULT",
  }

  _NAMES_TO_VALUES = {
    "UNKNOWN": 0,
    "MINOR": 1,
    "ADULT": 2,
  }

class FcmStatusType:
  NORMAL = 0
  HALF_INCOME = 1
  ZERO_INCOME = 2

  _VALUES_TO_NAMES = {
    0: "NORMAL",
    1: "HALF_INCOME",
    2: "ZERO_INCOME",
  }

  _NAMES_TO_VALUES = {
    "NORMAL": 0,
    "HALF_INCOME": 1,
    "ZERO_INCOME": 2,
  }


class ActorAoiField:
  """
  Attributes:
   - field_
   - value_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'field_', None, None, ), # 1
    (2, TType.I32, 'value_', None, None, ), # 2
  )

  def __init__(self, field_=None, value_=None,):
    self.field_ = field_
    self.value_ = value_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.field_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.value_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ActorAoiField')
    if self.field_ is not None:
      oprot.writeFieldBegin('field_', TType.I32, 1)
      oprot.writeI32(self.field_)
      oprot.writeFieldEnd()
    if self.value_ is not None:
      oprot.writeFieldBegin('value_', TType.I32, 2)
      oprot.writeI32(self.value_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.field_ is None:
      raise TProtocol.TProtocolException(message='Required field field_ is unset!')
    if self.value_ is None:
      raise TProtocol.TProtocolException(message='Required field value_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ActorClientField:
  """
  Attributes:
   - field_
   - value_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'field_', None, None, ), # 1
    (2, TType.I32, 'value_', None, None, ), # 2
  )

  def __init__(self, field_=None, value_=None,):
    self.field_ = field_
    self.value_ = value_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.field_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.value_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ActorClientField')
    if self.field_ is not None:
      oprot.writeFieldBegin('field_', TType.I32, 1)
      oprot.writeI32(self.field_)
      oprot.writeFieldEnd()
    if self.value_ is not None:
      oprot.writeFieldBegin('value_', TType.I32, 2)
      oprot.writeI32(self.value_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.field_ is None:
      raise TProtocol.TProtocolException(message='Required field field_ is unset!')
    if self.value_ is None:
      raise TProtocol.TProtocolException(message='Required field value_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
