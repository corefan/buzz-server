#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ccrequest.ttypes
import ccentity.playing.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class RequestPlayingSetActorVariables:
  """
  Attributes:
   - actor_
   - keys_
   - values_
   - result_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'actor_', None, None, ), # 1
    (2, TType.LIST, 'keys_', (TType.STRING,None), None, ), # 2
    (3, TType.LIST, 'values_', (TType.I64,None), None, ), # 3
    (4, TType.BOOL, 'result_', None, None, ), # 4
  )

  def __init__(self, actor_=None, keys_=None, values_=None, result_=None,):
    self.actor_ = actor_
    self.keys_ = keys_
    self.values_ = values_
    self.result_ = result_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.actor_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.keys_ = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.keys_.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.values_ = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readI64();
            self.values_.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.result_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestPlayingSetActorVariables')
    if self.actor_ is not None:
      oprot.writeFieldBegin('actor_', TType.I64, 1)
      oprot.writeI64(self.actor_)
      oprot.writeFieldEnd()
    if self.keys_ is not None:
      oprot.writeFieldBegin('keys_', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.keys_))
      for iter12 in self.keys_:
        oprot.writeString(iter12)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.values_ is not None:
      oprot.writeFieldBegin('values_', TType.LIST, 3)
      oprot.writeListBegin(TType.I64, len(self.values_))
      for iter13 in self.values_:
        oprot.writeI64(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.result_ is not None:
      oprot.writeFieldBegin('result_', TType.BOOL, 4)
      oprot.writeBool(self.result_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.actor_ is None:
      raise TProtocol.TProtocolException(message='Required field actor_ is unset!')
    if self.keys_ is None:
      raise TProtocol.TProtocolException(message='Required field keys_ is unset!')
    if self.values_ is None:
      raise TProtocol.TProtocolException(message='Required field values_ is unset!')
    if self.result_ is None:
      raise TProtocol.TProtocolException(message='Required field result_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestPlayingGetActorVariables:
  """
  Attributes:
   - actor_
   - keys_
   - values_
   - result_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'actor_', None, None, ), # 1
    (2, TType.LIST, 'keys_', (TType.STRING,None), None, ), # 2
    (3, TType.LIST, 'values_', (TType.I64,None), None, ), # 3
    (4, TType.BOOL, 'result_', None, None, ), # 4
  )

  def __init__(self, actor_=None, keys_=None, values_=None, result_=None,):
    self.actor_ = actor_
    self.keys_ = keys_
    self.values_ = values_
    self.result_ = result_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.actor_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.keys_ = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readString();
            self.keys_.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.values_ = []
          (_etype23, _size20) = iprot.readListBegin()
          for _i24 in xrange(_size20):
            _elem25 = iprot.readI64();
            self.values_.append(_elem25)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.result_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestPlayingGetActorVariables')
    if self.actor_ is not None:
      oprot.writeFieldBegin('actor_', TType.I64, 1)
      oprot.writeI64(self.actor_)
      oprot.writeFieldEnd()
    if self.keys_ is not None:
      oprot.writeFieldBegin('keys_', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.keys_))
      for iter26 in self.keys_:
        oprot.writeString(iter26)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.values_ is not None:
      oprot.writeFieldBegin('values_', TType.LIST, 3)
      oprot.writeListBegin(TType.I64, len(self.values_))
      for iter27 in self.values_:
        oprot.writeI64(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.result_ is not None:
      oprot.writeFieldBegin('result_', TType.BOOL, 4)
      oprot.writeBool(self.result_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.actor_ is None:
      raise TProtocol.TProtocolException(message='Required field actor_ is unset!')
    if self.keys_ is None:
      raise TProtocol.TProtocolException(message='Required field keys_ is unset!')
    if self.values_ is None:
      raise TProtocol.TProtocolException(message='Required field values_ is unset!')
    if self.result_ is None:
      raise TProtocol.TProtocolException(message='Required field result_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestPlayingIncreaseActorVariables:
  """
  Attributes:
   - actor_
   - keys_
   - increments_
   - values_
   - result_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'actor_', None, None, ), # 1
    (2, TType.LIST, 'keys_', (TType.STRING,None), None, ), # 2
    (3, TType.LIST, 'increments_', (TType.I64,None), None, ), # 3
    (4, TType.LIST, 'values_', (TType.I64,None), None, ), # 4
    (5, TType.BOOL, 'result_', None, None, ), # 5
  )

  def __init__(self, actor_=None, keys_=None, increments_=None, values_=None, result_=None,):
    self.actor_ = actor_
    self.keys_ = keys_
    self.increments_ = increments_
    self.values_ = values_
    self.result_ = result_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.actor_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.keys_ = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = iprot.readString();
            self.keys_.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.increments_ = []
          (_etype37, _size34) = iprot.readListBegin()
          for _i38 in xrange(_size34):
            _elem39 = iprot.readI64();
            self.increments_.append(_elem39)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.values_ = []
          (_etype43, _size40) = iprot.readListBegin()
          for _i44 in xrange(_size40):
            _elem45 = iprot.readI64();
            self.values_.append(_elem45)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.result_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestPlayingIncreaseActorVariables')
    if self.actor_ is not None:
      oprot.writeFieldBegin('actor_', TType.I64, 1)
      oprot.writeI64(self.actor_)
      oprot.writeFieldEnd()
    if self.keys_ is not None:
      oprot.writeFieldBegin('keys_', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.keys_))
      for iter46 in self.keys_:
        oprot.writeString(iter46)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.increments_ is not None:
      oprot.writeFieldBegin('increments_', TType.LIST, 3)
      oprot.writeListBegin(TType.I64, len(self.increments_))
      for iter47 in self.increments_:
        oprot.writeI64(iter47)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.values_ is not None:
      oprot.writeFieldBegin('values_', TType.LIST, 4)
      oprot.writeListBegin(TType.I64, len(self.values_))
      for iter48 in self.values_:
        oprot.writeI64(iter48)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.result_ is not None:
      oprot.writeFieldBegin('result_', TType.BOOL, 5)
      oprot.writeBool(self.result_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.actor_ is None:
      raise TProtocol.TProtocolException(message='Required field actor_ is unset!')
    if self.keys_ is None:
      raise TProtocol.TProtocolException(message='Required field keys_ is unset!')
    if self.increments_ is None:
      raise TProtocol.TProtocolException(message='Required field increments_ is unset!')
    if self.values_ is None:
      raise TProtocol.TProtocolException(message='Required field values_ is unset!')
    if self.result_ is None:
      raise TProtocol.TProtocolException(message='Required field result_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestPlayingDecreaseActorVariables:
  """
  Attributes:
   - actor_
   - keys_
   - decrements_
   - values_
   - result_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'actor_', None, None, ), # 1
    (2, TType.LIST, 'keys_', (TType.STRING,None), None, ), # 2
    (3, TType.LIST, 'decrements_', (TType.I64,None), None, ), # 3
    (4, TType.LIST, 'values_', (TType.I64,None), None, ), # 4
    (5, TType.BOOL, 'result_', None, None, ), # 5
  )

  def __init__(self, actor_=None, keys_=None, decrements_=None, values_=None, result_=None,):
    self.actor_ = actor_
    self.keys_ = keys_
    self.decrements_ = decrements_
    self.values_ = values_
    self.result_ = result_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.actor_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.keys_ = []
          (_etype52, _size49) = iprot.readListBegin()
          for _i53 in xrange(_size49):
            _elem54 = iprot.readString();
            self.keys_.append(_elem54)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.decrements_ = []
          (_etype58, _size55) = iprot.readListBegin()
          for _i59 in xrange(_size55):
            _elem60 = iprot.readI64();
            self.decrements_.append(_elem60)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.values_ = []
          (_etype64, _size61) = iprot.readListBegin()
          for _i65 in xrange(_size61):
            _elem66 = iprot.readI64();
            self.values_.append(_elem66)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.result_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestPlayingDecreaseActorVariables')
    if self.actor_ is not None:
      oprot.writeFieldBegin('actor_', TType.I64, 1)
      oprot.writeI64(self.actor_)
      oprot.writeFieldEnd()
    if self.keys_ is not None:
      oprot.writeFieldBegin('keys_', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.keys_))
      for iter67 in self.keys_:
        oprot.writeString(iter67)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.decrements_ is not None:
      oprot.writeFieldBegin('decrements_', TType.LIST, 3)
      oprot.writeListBegin(TType.I64, len(self.decrements_))
      for iter68 in self.decrements_:
        oprot.writeI64(iter68)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.values_ is not None:
      oprot.writeFieldBegin('values_', TType.LIST, 4)
      oprot.writeListBegin(TType.I64, len(self.values_))
      for iter69 in self.values_:
        oprot.writeI64(iter69)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.result_ is not None:
      oprot.writeFieldBegin('result_', TType.BOOL, 5)
      oprot.writeBool(self.result_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.actor_ is None:
      raise TProtocol.TProtocolException(message='Required field actor_ is unset!')
    if self.keys_ is None:
      raise TProtocol.TProtocolException(message='Required field keys_ is unset!')
    if self.decrements_ is None:
      raise TProtocol.TProtocolException(message='Required field decrements_ is unset!')
    if self.values_ is None:
      raise TProtocol.TProtocolException(message='Required field values_ is unset!')
    if self.result_ is None:
      raise TProtocol.TProtocolException(message='Required field result_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestPlayingInitializeActor:
  """
  Attributes:
   - actor_
   - spend_time_
   - scores_
   - datas_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'actor_', None, None, ), # 1
    (2, TType.I32, 'spend_time_', None, None, ), # 2
    (3, TType.LIST, 'scores_', (TType.STRUCT,(ccentity.playing.ttypes.PlayingScoreField, ccentity.playing.ttypes.PlayingScoreField.thrift_spec)), None, ), # 3
    (4, TType.LIST, 'datas_', (TType.I32,None), None, ), # 4
  )

  def __init__(self, actor_=None, spend_time_=None, scores_=None, datas_=None,):
    self.actor_ = actor_
    self.spend_time_ = spend_time_
    self.scores_ = scores_
    self.datas_ = datas_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.actor_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.spend_time_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.scores_ = []
          (_etype73, _size70) = iprot.readListBegin()
          for _i74 in xrange(_size70):
            _elem75 = ccentity.playing.ttypes.PlayingScoreField()
            _elem75.read(iprot)
            self.scores_.append(_elem75)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.datas_ = []
          (_etype79, _size76) = iprot.readListBegin()
          for _i80 in xrange(_size76):
            _elem81 = iprot.readI32();
            self.datas_.append(_elem81)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestPlayingInitializeActor')
    if self.actor_ is not None:
      oprot.writeFieldBegin('actor_', TType.I64, 1)
      oprot.writeI64(self.actor_)
      oprot.writeFieldEnd()
    if self.spend_time_ is not None:
      oprot.writeFieldBegin('spend_time_', TType.I32, 2)
      oprot.writeI32(self.spend_time_)
      oprot.writeFieldEnd()
    if self.scores_ is not None:
      oprot.writeFieldBegin('scores_', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.scores_))
      for iter82 in self.scores_:
        iter82.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.datas_ is not None:
      oprot.writeFieldBegin('datas_', TType.LIST, 4)
      oprot.writeListBegin(TType.I32, len(self.datas_))
      for iter83 in self.datas_:
        oprot.writeI32(iter83)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.actor_ is None:
      raise TProtocol.TProtocolException(message='Required field actor_ is unset!')
    if self.spend_time_ is None:
      raise TProtocol.TProtocolException(message='Required field spend_time_ is unset!')
    if self.scores_ is None:
      raise TProtocol.TProtocolException(message='Required field scores_ is unset!')
    if self.datas_ is None:
      raise TProtocol.TProtocolException(message='Required field datas_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestPlayingSynchronizeScore:
  """
  Attributes:
   - actor_
   - score_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'actor_', None, None, ), # 1
    (2, TType.STRUCT, 'score_', (ccentity.playing.ttypes.PlayingScoreField, ccentity.playing.ttypes.PlayingScoreField.thrift_spec), None, ), # 2
  )

  def __init__(self, actor_=None, score_=None,):
    self.actor_ = actor_
    self.score_ = score_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.actor_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.score_ = ccentity.playing.ttypes.PlayingScoreField()
          self.score_.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestPlayingSynchronizeScore')
    if self.actor_ is not None:
      oprot.writeFieldBegin('actor_', TType.I64, 1)
      oprot.writeI64(self.actor_)
      oprot.writeFieldEnd()
    if self.score_ is not None:
      oprot.writeFieldBegin('score_', TType.STRUCT, 2)
      self.score_.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.actor_ is None:
      raise TProtocol.TProtocolException(message='Required field actor_ is unset!')
    if self.score_ is None:
      raise TProtocol.TProtocolException(message='Required field score_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestPlayingSynchronizeRanking:
  """
  Attributes:
   - ranking_
   - actors_
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'ranking_', (TType.STRUCT,(ccentity.playing.ttypes.PlayingRankingField, ccentity.playing.ttypes.PlayingRankingField.thrift_spec)), None, ), # 1
    (2, TType.LIST, 'actors_', (TType.I64,None), None, ), # 2
  )

  def __init__(self, ranking_=None, actors_=None,):
    self.ranking_ = ranking_
    self.actors_ = actors_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.ranking_ = []
          (_etype87, _size84) = iprot.readListBegin()
          for _i88 in xrange(_size84):
            _elem89 = ccentity.playing.ttypes.PlayingRankingField()
            _elem89.read(iprot)
            self.ranking_.append(_elem89)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.actors_ = []
          (_etype93, _size90) = iprot.readListBegin()
          for _i94 in xrange(_size90):
            _elem95 = iprot.readI64();
            self.actors_.append(_elem95)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestPlayingSynchronizeRanking')
    if self.ranking_ is not None:
      oprot.writeFieldBegin('ranking_', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.ranking_))
      for iter96 in self.ranking_:
        iter96.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.actors_ is not None:
      oprot.writeFieldBegin('actors_', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.actors_))
      for iter97 in self.actors_:
        oprot.writeI64(iter97)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.ranking_ is None:
      raise TProtocol.TProtocolException(message='Required field ranking_ is unset!')
    if self.actors_ is None:
      raise TProtocol.TProtocolException(message='Required field actors_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestPlayingComplete:
  """
  Attributes:
   - playing_
   - result_
   - awards_
   - draw_award_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'playing_', None, None, ), # 1
    (2, TType.STRUCT, 'result_', (ccentity.playing.ttypes.PlayingResultField, ccentity.playing.ttypes.PlayingResultField.thrift_spec), None, ), # 2
    (3, TType.LIST, 'awards_', (TType.STRUCT,(ccentity.playing.ttypes.PlayingAwardField, ccentity.playing.ttypes.PlayingAwardField.thrift_spec)), None, ), # 3
    (4, TType.STRUCT, 'draw_award_', (ccentity.playing.ttypes.PlayingAwardField, ccentity.playing.ttypes.PlayingAwardField.thrift_spec), None, ), # 4
  )

  def __init__(self, playing_=None, result_=None, awards_=None, draw_award_=None,):
    self.playing_ = playing_
    self.result_ = result_
    self.awards_ = awards_
    self.draw_award_ = draw_award_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.playing_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.result_ = ccentity.playing.ttypes.PlayingResultField()
          self.result_.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.awards_ = []
          (_etype101, _size98) = iprot.readListBegin()
          for _i102 in xrange(_size98):
            _elem103 = ccentity.playing.ttypes.PlayingAwardField()
            _elem103.read(iprot)
            self.awards_.append(_elem103)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.draw_award_ = ccentity.playing.ttypes.PlayingAwardField()
          self.draw_award_.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestPlayingComplete')
    if self.playing_ is not None:
      oprot.writeFieldBegin('playing_', TType.I64, 1)
      oprot.writeI64(self.playing_)
      oprot.writeFieldEnd()
    if self.result_ is not None:
      oprot.writeFieldBegin('result_', TType.STRUCT, 2)
      self.result_.write(oprot)
      oprot.writeFieldEnd()
    if self.awards_ is not None:
      oprot.writeFieldBegin('awards_', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.awards_))
      for iter104 in self.awards_:
        iter104.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.draw_award_ is not None:
      oprot.writeFieldBegin('draw_award_', TType.STRUCT, 4)
      self.draw_award_.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.playing_ is None:
      raise TProtocol.TProtocolException(message='Required field playing_ is unset!')
    if self.result_ is None:
      raise TProtocol.TProtocolException(message='Required field result_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestPlayingActorComplete:
  """
  Attributes:
   - playing_
   - actor_
   - result_
   - awards_
   - draw_award_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'playing_', None, None, ), # 1
    (2, TType.I64, 'actor_', None, None, ), # 2
    (3, TType.STRUCT, 'result_', (ccentity.playing.ttypes.PlayingResultField, ccentity.playing.ttypes.PlayingResultField.thrift_spec), None, ), # 3
    (4, TType.LIST, 'awards_', (TType.STRUCT,(ccentity.playing.ttypes.PlayingAwardField, ccentity.playing.ttypes.PlayingAwardField.thrift_spec)), None, ), # 4
    (5, TType.STRUCT, 'draw_award_', (ccentity.playing.ttypes.PlayingAwardField, ccentity.playing.ttypes.PlayingAwardField.thrift_spec), None, ), # 5
  )

  def __init__(self, playing_=None, actor_=None, result_=None, awards_=None, draw_award_=None,):
    self.playing_ = playing_
    self.actor_ = actor_
    self.result_ = result_
    self.awards_ = awards_
    self.draw_award_ = draw_award_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.playing_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.actor_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.result_ = ccentity.playing.ttypes.PlayingResultField()
          self.result_.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.awards_ = []
          (_etype108, _size105) = iprot.readListBegin()
          for _i109 in xrange(_size105):
            _elem110 = ccentity.playing.ttypes.PlayingAwardField()
            _elem110.read(iprot)
            self.awards_.append(_elem110)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.draw_award_ = ccentity.playing.ttypes.PlayingAwardField()
          self.draw_award_.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestPlayingActorComplete')
    if self.playing_ is not None:
      oprot.writeFieldBegin('playing_', TType.I64, 1)
      oprot.writeI64(self.playing_)
      oprot.writeFieldEnd()
    if self.actor_ is not None:
      oprot.writeFieldBegin('actor_', TType.I64, 2)
      oprot.writeI64(self.actor_)
      oprot.writeFieldEnd()
    if self.result_ is not None:
      oprot.writeFieldBegin('result_', TType.STRUCT, 3)
      self.result_.write(oprot)
      oprot.writeFieldEnd()
    if self.awards_ is not None:
      oprot.writeFieldBegin('awards_', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.awards_))
      for iter111 in self.awards_:
        iter111.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.draw_award_ is not None:
      oprot.writeFieldBegin('draw_award_', TType.STRUCT, 5)
      self.draw_award_.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.playing_ is None:
      raise TProtocol.TProtocolException(message='Required field playing_ is unset!')
    if self.actor_ is None:
      raise TProtocol.TProtocolException(message='Required field actor_ is unset!')
    if self.result_ is None:
      raise TProtocol.TProtocolException(message='Required field result_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestPlayingFailure:
  """
  Attributes:
   - playing_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'playing_', None, None, ), # 1
  )

  def __init__(self, playing_=None,):
    self.playing_ = playing_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.playing_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestPlayingFailure')
    if self.playing_ is not None:
      oprot.writeFieldBegin('playing_', TType.I64, 1)
      oprot.writeI64(self.playing_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.playing_ is None:
      raise TProtocol.TProtocolException(message='Required field playing_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestPlayingUpdateRecord:
  """
  Attributes:
   - actor_
   - playing_template_
   - record_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'actor_', None, None, ), # 1
    (2, TType.I32, 'playing_template_', None, None, ), # 2
    (3, TType.STRUCT, 'record_', (ccentity.playing.ttypes.PlayingRecordField, ccentity.playing.ttypes.PlayingRecordField.thrift_spec), None, ), # 3
  )

  def __init__(self, actor_=None, playing_template_=None, record_=None,):
    self.actor_ = actor_
    self.playing_template_ = playing_template_
    self.record_ = record_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.actor_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.playing_template_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.record_ = ccentity.playing.ttypes.PlayingRecordField()
          self.record_.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestPlayingUpdateRecord')
    if self.actor_ is not None:
      oprot.writeFieldBegin('actor_', TType.I64, 1)
      oprot.writeI64(self.actor_)
      oprot.writeFieldEnd()
    if self.playing_template_ is not None:
      oprot.writeFieldBegin('playing_template_', TType.I32, 2)
      oprot.writeI32(self.playing_template_)
      oprot.writeFieldEnd()
    if self.record_ is not None:
      oprot.writeFieldBegin('record_', TType.STRUCT, 3)
      self.record_.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.actor_ is None:
      raise TProtocol.TProtocolException(message='Required field actor_ is unset!')
    if self.playing_template_ is None:
      raise TProtocol.TProtocolException(message='Required field playing_template_ is unset!')
    if self.record_ is None:
      raise TProtocol.TProtocolException(message='Required field record_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestPlayingUpdateResult:
  """
  Attributes:
   - actor_
   - playing_template_
   - result_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'actor_', None, None, ), # 1
    (2, TType.I32, 'playing_template_', None, None, ), # 2
    (3, TType.STRUCT, 'result_', (ccentity.playing.ttypes.PlayingResultField, ccentity.playing.ttypes.PlayingResultField.thrift_spec), None, ), # 3
  )

  def __init__(self, actor_=None, playing_template_=None, result_=None,):
    self.actor_ = actor_
    self.playing_template_ = playing_template_
    self.result_ = result_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.actor_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.playing_template_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.result_ = ccentity.playing.ttypes.PlayingResultField()
          self.result_.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestPlayingUpdateResult')
    if self.actor_ is not None:
      oprot.writeFieldBegin('actor_', TType.I64, 1)
      oprot.writeI64(self.actor_)
      oprot.writeFieldEnd()
    if self.playing_template_ is not None:
      oprot.writeFieldBegin('playing_template_', TType.I32, 2)
      oprot.writeI32(self.playing_template_)
      oprot.writeFieldEnd()
    if self.result_ is not None:
      oprot.writeFieldBegin('result_', TType.STRUCT, 3)
      self.result_.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.actor_ is None:
      raise TProtocol.TProtocolException(message='Required field actor_ is unset!')
    if self.playing_template_ is None:
      raise TProtocol.TProtocolException(message='Required field playing_template_ is unset!')
    if self.result_ is None:
      raise TProtocol.TProtocolException(message='Required field result_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestPlayingAddAward:
  """
  Attributes:
   - actor_
   - playing_template_
   - awards_
   - draw_award_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'actor_', None, None, ), # 1
    (2, TType.I32, 'playing_template_', None, None, ), # 2
    (3, TType.LIST, 'awards_', (TType.STRUCT,(ccentity.playing.ttypes.PlayingAwardField, ccentity.playing.ttypes.PlayingAwardField.thrift_spec)), None, ), # 3
    (4, TType.STRUCT, 'draw_award_', (ccentity.playing.ttypes.PlayingAwardField, ccentity.playing.ttypes.PlayingAwardField.thrift_spec), None, ), # 4
  )

  def __init__(self, actor_=None, playing_template_=None, awards_=None, draw_award_=None,):
    self.actor_ = actor_
    self.playing_template_ = playing_template_
    self.awards_ = awards_
    self.draw_award_ = draw_award_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.actor_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.playing_template_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.awards_ = []
          (_etype115, _size112) = iprot.readListBegin()
          for _i116 in xrange(_size112):
            _elem117 = ccentity.playing.ttypes.PlayingAwardField()
            _elem117.read(iprot)
            self.awards_.append(_elem117)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.draw_award_ = ccentity.playing.ttypes.PlayingAwardField()
          self.draw_award_.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestPlayingAddAward')
    if self.actor_ is not None:
      oprot.writeFieldBegin('actor_', TType.I64, 1)
      oprot.writeI64(self.actor_)
      oprot.writeFieldEnd()
    if self.playing_template_ is not None:
      oprot.writeFieldBegin('playing_template_', TType.I32, 2)
      oprot.writeI32(self.playing_template_)
      oprot.writeFieldEnd()
    if self.awards_ is not None:
      oprot.writeFieldBegin('awards_', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.awards_))
      for iter118 in self.awards_:
        iter118.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.draw_award_ is not None:
      oprot.writeFieldBegin('draw_award_', TType.STRUCT, 4)
      self.draw_award_.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.actor_ is None:
      raise TProtocol.TProtocolException(message='Required field actor_ is unset!')
    if self.playing_template_ is None:
      raise TProtocol.TProtocolException(message='Required field playing_template_ is unset!')
    if self.awards_ is None:
      raise TProtocol.TProtocolException(message='Required field awards_ is unset!')
    if self.draw_award_ is None:
      raise TProtocol.TProtocolException(message='Required field draw_award_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestPlayingClearComplete:
  """
  Attributes:
   - actor_
   - playing_template_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'actor_', None, None, ), # 1
    (2, TType.I32, 'playing_template_', None, None, ), # 2
  )

  def __init__(self, actor_=None, playing_template_=None,):
    self.actor_ = actor_
    self.playing_template_ = playing_template_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.actor_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.playing_template_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestPlayingClearComplete')
    if self.actor_ is not None:
      oprot.writeFieldBegin('actor_', TType.I64, 1)
      oprot.writeI64(self.actor_)
      oprot.writeFieldEnd()
    if self.playing_template_ is not None:
      oprot.writeFieldBegin('playing_template_', TType.I32, 2)
      oprot.writeI32(self.playing_template_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.actor_ is None:
      raise TProtocol.TProtocolException(message='Required field actor_ is unset!')
    if self.playing_template_ is None:
      raise TProtocol.TProtocolException(message='Required field playing_template_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestPlayingIncreaseComplete:
  """
  Attributes:
   - playing_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'playing_', None, None, ), # 1
  )

  def __init__(self, playing_=None,):
    self.playing_ = playing_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.playing_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestPlayingIncreaseComplete')
    if self.playing_ is not None:
      oprot.writeFieldBegin('playing_', TType.I64, 1)
      oprot.writeI64(self.playing_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.playing_ is None:
      raise TProtocol.TProtocolException(message='Required field playing_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestPlayingActorIncreaseComplete:
  """
  Attributes:
   - actor_
   - playing_template_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'actor_', None, None, ), # 1
    (2, TType.I32, 'playing_template_', None, None, ), # 2
  )

  def __init__(self, actor_=None, playing_template_=None,):
    self.actor_ = actor_
    self.playing_template_ = playing_template_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.actor_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.playing_template_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestPlayingActorIncreaseComplete')
    if self.actor_ is not None:
      oprot.writeFieldBegin('actor_', TType.I64, 1)
      oprot.writeI64(self.actor_)
      oprot.writeFieldEnd()
    if self.playing_template_ is not None:
      oprot.writeFieldBegin('playing_template_', TType.I32, 2)
      oprot.writeI32(self.playing_template_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.actor_ is None:
      raise TProtocol.TProtocolException(message='Required field actor_ is unset!')
    if self.playing_template_ is None:
      raise TProtocol.TProtocolException(message='Required field playing_template_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestPlayingAwardActor:
  """
  Attributes:
   - actor_
   - playing_template_
   - first_pass_award_
   - awards_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'actor_', None, None, ), # 1
    (2, TType.I32, 'playing_template_', None, None, ), # 2
    (3, TType.BOOL, 'first_pass_award_', None, False, ), # 3
    (4, TType.LIST, 'awards_', (TType.STRUCT,(ccentity.playing.ttypes.PlayingAwardField, ccentity.playing.ttypes.PlayingAwardField.thrift_spec)), None, ), # 4
  )

  def __init__(self, actor_=None, playing_template_=None, first_pass_award_=thrift_spec[3][4], awards_=None,):
    self.actor_ = actor_
    self.playing_template_ = playing_template_
    self.first_pass_award_ = first_pass_award_
    self.awards_ = awards_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.actor_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.playing_template_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.first_pass_award_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.awards_ = []
          (_etype122, _size119) = iprot.readListBegin()
          for _i123 in xrange(_size119):
            _elem124 = ccentity.playing.ttypes.PlayingAwardField()
            _elem124.read(iprot)
            self.awards_.append(_elem124)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestPlayingAwardActor')
    if self.actor_ is not None:
      oprot.writeFieldBegin('actor_', TType.I64, 1)
      oprot.writeI64(self.actor_)
      oprot.writeFieldEnd()
    if self.playing_template_ is not None:
      oprot.writeFieldBegin('playing_template_', TType.I32, 2)
      oprot.writeI32(self.playing_template_)
      oprot.writeFieldEnd()
    if self.first_pass_award_ is not None:
      oprot.writeFieldBegin('first_pass_award_', TType.BOOL, 3)
      oprot.writeBool(self.first_pass_award_)
      oprot.writeFieldEnd()
    if self.awards_ is not None:
      oprot.writeFieldBegin('awards_', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.awards_))
      for iter125 in self.awards_:
        iter125.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.actor_ is None:
      raise TProtocol.TProtocolException(message='Required field actor_ is unset!')
    if self.playing_template_ is None:
      raise TProtocol.TProtocolException(message='Required field playing_template_ is unset!')
    if self.first_pass_award_ is None:
      raise TProtocol.TProtocolException(message='Required field first_pass_award_ is unset!')
    if self.awards_ is None:
      raise TProtocol.TProtocolException(message='Required field awards_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestPlayingActorPlayingID:
  """
  Attributes:
   - actor_
   - playing_id_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'actor_', None, None, ), # 1
    (2, TType.I32, 'playing_id_', None, None, ), # 2
  )

  def __init__(self, actor_=None, playing_id_=None,):
    self.actor_ = actor_
    self.playing_id_ = playing_id_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.actor_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.playing_id_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestPlayingActorPlayingID')
    if self.actor_ is not None:
      oprot.writeFieldBegin('actor_', TType.I64, 1)
      oprot.writeI64(self.actor_)
      oprot.writeFieldEnd()
    if self.playing_id_ is not None:
      oprot.writeFieldBegin('playing_id_', TType.I32, 2)
      oprot.writeI32(self.playing_id_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.actor_ is None:
      raise TProtocol.TProtocolException(message='Required field actor_ is unset!')
    if self.playing_id_ is None:
      raise TProtocol.TProtocolException(message='Required field playing_id_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
