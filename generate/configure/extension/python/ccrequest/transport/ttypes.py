#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ccrequest.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class RequestTransportSummon:
  """
  Attributes:
   - actor_
   - transport_npc_template_
   - transport_npc_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'actor_', None, None, ), # 1
    (2, TType.I32, 'transport_npc_template_', None, None, ), # 2
    (3, TType.I64, 'transport_npc_', None, None, ), # 3
  )

  def __init__(self, actor_=None, transport_npc_template_=None, transport_npc_=None,):
    self.actor_ = actor_
    self.transport_npc_template_ = transport_npc_template_
    self.transport_npc_ = transport_npc_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.actor_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.transport_npc_template_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.transport_npc_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestTransportSummon')
    if self.actor_ is not None:
      oprot.writeFieldBegin('actor_', TType.I64, 1)
      oprot.writeI64(self.actor_)
      oprot.writeFieldEnd()
    if self.transport_npc_template_ is not None:
      oprot.writeFieldBegin('transport_npc_template_', TType.I32, 2)
      oprot.writeI32(self.transport_npc_template_)
      oprot.writeFieldEnd()
    if self.transport_npc_ is not None:
      oprot.writeFieldBegin('transport_npc_', TType.I64, 3)
      oprot.writeI64(self.transport_npc_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.actor_ is None:
      raise TProtocol.TProtocolException(message='Required field actor_ is unset!')
    if self.transport_npc_template_ is None:
      raise TProtocol.TProtocolException(message='Required field transport_npc_template_ is unset!')
    if self.transport_npc_ is None:
      raise TProtocol.TProtocolException(message='Required field transport_npc_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestTransportRemove:
  """
  Attributes:
   - actor_
   - transport_npc_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'actor_', None, None, ), # 1
    (2, TType.I64, 'transport_npc_', None, None, ), # 2
  )

  def __init__(self, actor_=None, transport_npc_=None,):
    self.actor_ = actor_
    self.transport_npc_ = transport_npc_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.actor_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.transport_npc_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestTransportRemove')
    if self.actor_ is not None:
      oprot.writeFieldBegin('actor_', TType.I64, 1)
      oprot.writeI64(self.actor_)
      oprot.writeFieldEnd()
    if self.transport_npc_ is not None:
      oprot.writeFieldBegin('transport_npc_', TType.I64, 2)
      oprot.writeI64(self.transport_npc_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestTransportCurrentNpc:
  """
  Attributes:
   - actor_
   - transport_npc_
   - transport_npc_template_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'actor_', None, None, ), # 1
    (2, TType.I64, 'transport_npc_', None, None, ), # 2
    (3, TType.I32, 'transport_npc_template_', None, None, ), # 3
  )

  def __init__(self, actor_=None, transport_npc_=None, transport_npc_template_=None,):
    self.actor_ = actor_
    self.transport_npc_ = transport_npc_
    self.transport_npc_template_ = transport_npc_template_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.actor_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.transport_npc_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.transport_npc_template_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestTransportCurrentNpc')
    if self.actor_ is not None:
      oprot.writeFieldBegin('actor_', TType.I64, 1)
      oprot.writeI64(self.actor_)
      oprot.writeFieldEnd()
    if self.transport_npc_ is not None:
      oprot.writeFieldBegin('transport_npc_', TType.I64, 2)
      oprot.writeI64(self.transport_npc_)
      oprot.writeFieldEnd()
    if self.transport_npc_template_ is not None:
      oprot.writeFieldBegin('transport_npc_template_', TType.I32, 3)
      oprot.writeI32(self.transport_npc_template_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.actor_ is None:
      raise TProtocol.TProtocolException(message='Required field actor_ is unset!')
    if self.transport_npc_ is None:
      raise TProtocol.TProtocolException(message='Required field transport_npc_ is unset!')
    if self.transport_npc_template_ is None:
      raise TProtocol.TProtocolException(message='Required field transport_npc_template_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestTransportAround:
  """
  Attributes:
   - actor_
   - around_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'actor_', None, None, ), # 1
    (2, TType.BOOL, 'around_', None, None, ), # 2
  )

  def __init__(self, actor_=None, around_=None,):
    self.actor_ = actor_
    self.around_ = around_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.actor_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.around_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestTransportAround')
    if self.actor_ is not None:
      oprot.writeFieldBegin('actor_', TType.I64, 1)
      oprot.writeI64(self.actor_)
      oprot.writeFieldEnd()
    if self.around_ is not None:
      oprot.writeFieldBegin('around_', TType.BOOL, 2)
      oprot.writeBool(self.around_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.actor_ is None:
      raise TProtocol.TProtocolException(message='Required field actor_ is unset!')
    if self.around_ is None:
      raise TProtocol.TProtocolException(message='Required field around_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestTransportGetSnapshot:
  """
  Attributes:
   - transport_npc_id_
   - snapshot_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'transport_npc_id_', None, None, ), # 1
    (2, TType.STRING, 'snapshot_', None, None, ), # 2
  )

  def __init__(self, transport_npc_id_=None, snapshot_=None,):
    self.transport_npc_id_ = transport_npc_id_
    self.snapshot_ = snapshot_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.transport_npc_id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.snapshot_ = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestTransportGetSnapshot')
    if self.transport_npc_id_ is not None:
      oprot.writeFieldBegin('transport_npc_id_', TType.I64, 1)
      oprot.writeI64(self.transport_npc_id_)
      oprot.writeFieldEnd()
    if self.snapshot_ is not None:
      oprot.writeFieldBegin('snapshot_', TType.STRING, 2)
      oprot.writeString(self.snapshot_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.transport_npc_id_ is None:
      raise TProtocol.TProtocolException(message='Required field transport_npc_id_ is unset!')
    if self.snapshot_ is None:
      raise TProtocol.TProtocolException(message='Required field snapshot_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestTransportSummonFromSnapshot:
  """
  Attributes:
   - transport_npc_template_
   - scene_
   - x_
   - y_
   - snapshot_
   - transport_npc_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'transport_npc_template_', None, None, ), # 1
    (2, TType.I64, 'scene_', None, None, ), # 2
    (3, TType.I32, 'x_', None, None, ), # 3
    (4, TType.I32, 'y_', None, None, ), # 4
    (5, TType.STRING, 'snapshot_', None, None, ), # 5
    (6, TType.I64, 'transport_npc_', None, None, ), # 6
  )

  def __init__(self, transport_npc_template_=None, scene_=None, x_=None, y_=None, snapshot_=None, transport_npc_=None,):
    self.transport_npc_template_ = transport_npc_template_
    self.scene_ = scene_
    self.x_ = x_
    self.y_ = y_
    self.snapshot_ = snapshot_
    self.transport_npc_ = transport_npc_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.transport_npc_template_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.scene_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.x_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.y_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.snapshot_ = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.transport_npc_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestTransportSummonFromSnapshot')
    if self.transport_npc_template_ is not None:
      oprot.writeFieldBegin('transport_npc_template_', TType.I32, 1)
      oprot.writeI32(self.transport_npc_template_)
      oprot.writeFieldEnd()
    if self.scene_ is not None:
      oprot.writeFieldBegin('scene_', TType.I64, 2)
      oprot.writeI64(self.scene_)
      oprot.writeFieldEnd()
    if self.x_ is not None:
      oprot.writeFieldBegin('x_', TType.I32, 3)
      oprot.writeI32(self.x_)
      oprot.writeFieldEnd()
    if self.y_ is not None:
      oprot.writeFieldBegin('y_', TType.I32, 4)
      oprot.writeI32(self.y_)
      oprot.writeFieldEnd()
    if self.snapshot_ is not None:
      oprot.writeFieldBegin('snapshot_', TType.STRING, 5)
      oprot.writeString(self.snapshot_)
      oprot.writeFieldEnd()
    if self.transport_npc_ is not None:
      oprot.writeFieldBegin('transport_npc_', TType.I64, 6)
      oprot.writeI64(self.transport_npc_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.transport_npc_template_ is None:
      raise TProtocol.TProtocolException(message='Required field transport_npc_template_ is unset!')
    if self.scene_ is None:
      raise TProtocol.TProtocolException(message='Required field scene_ is unset!')
    if self.x_ is None:
      raise TProtocol.TProtocolException(message='Required field x_ is unset!')
    if self.y_ is None:
      raise TProtocol.TProtocolException(message='Required field y_ is unset!')
    if self.snapshot_ is None:
      raise TProtocol.TProtocolException(message='Required field snapshot_ is unset!')
    if self.transport_npc_ is None:
      raise TProtocol.TProtocolException(message='Required field transport_npc_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
