#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ccrequest.ttypes
import ccentity.achieve.ttypes
import ccentity.item.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class AddItemResult:
  SUCCESS = 0
  PACKET_FULL = 1
  ERROR_UNKNOWN = 2

  _VALUES_TO_NAMES = {
    0: "SUCCESS",
    1: "PACKET_FULL",
    2: "ERROR_UNKNOWN",
  }

  _NAMES_TO_VALUES = {
    "SUCCESS": 0,
    "PACKET_FULL": 1,
    "ERROR_UNKNOWN": 2,
  }

class RemoveResult:
  SUCCESS = 0
  ERROR_UNKNOWN = 1

  _VALUES_TO_NAMES = {
    0: "SUCCESS",
    1: "ERROR_UNKNOWN",
  }

  _NAMES_TO_VALUES = {
    "SUCCESS": 0,
    "ERROR_UNKNOWN": 1,
  }


class RequestAddItem:
  """
  Attributes:
   - actor_id_
   - item_template_
   - number_
   - bind_
   - location_
   - item_extra_info_
   - simulate_
   - intensify_level_
   - result_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'actor_id_', None, None, ), # 1
    (2, TType.I32, 'item_template_', None, None, ), # 2
    (3, TType.I32, 'number_', None, None, ), # 3
    (4, TType.I32, 'bind_', None, None, ), # 4
    (5, TType.I16, 'location_', None, None, ), # 5
    (6, TType.STRING, 'item_extra_info_', None, None, ), # 6
    (7, TType.BOOL, 'simulate_', None, False, ), # 7
    (8, TType.I32, 'intensify_level_', None, None, ), # 8
    (9, TType.I32, 'result_', None, None, ), # 9
  )

  def __init__(self, actor_id_=None, item_template_=None, number_=None, bind_=None, location_=None, item_extra_info_=None, simulate_=thrift_spec[7][4], intensify_level_=None, result_=None,):
    self.actor_id_ = actor_id_
    self.item_template_ = item_template_
    self.number_ = number_
    self.bind_ = bind_
    self.location_ = location_
    self.item_extra_info_ = item_extra_info_
    self.simulate_ = simulate_
    self.intensify_level_ = intensify_level_
    self.result_ = result_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.actor_id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.item_template_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.number_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.bind_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.location_ = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.item_extra_info_ = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.simulate_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.intensify_level_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.result_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestAddItem')
    if self.actor_id_ is not None:
      oprot.writeFieldBegin('actor_id_', TType.I64, 1)
      oprot.writeI64(self.actor_id_)
      oprot.writeFieldEnd()
    if self.item_template_ is not None:
      oprot.writeFieldBegin('item_template_', TType.I32, 2)
      oprot.writeI32(self.item_template_)
      oprot.writeFieldEnd()
    if self.number_ is not None:
      oprot.writeFieldBegin('number_', TType.I32, 3)
      oprot.writeI32(self.number_)
      oprot.writeFieldEnd()
    if self.bind_ is not None:
      oprot.writeFieldBegin('bind_', TType.I32, 4)
      oprot.writeI32(self.bind_)
      oprot.writeFieldEnd()
    if self.location_ is not None:
      oprot.writeFieldBegin('location_', TType.I16, 5)
      oprot.writeI16(self.location_)
      oprot.writeFieldEnd()
    if self.item_extra_info_ is not None:
      oprot.writeFieldBegin('item_extra_info_', TType.STRING, 6)
      oprot.writeString(self.item_extra_info_)
      oprot.writeFieldEnd()
    if self.simulate_ is not None:
      oprot.writeFieldBegin('simulate_', TType.BOOL, 7)
      oprot.writeBool(self.simulate_)
      oprot.writeFieldEnd()
    if self.intensify_level_ is not None:
      oprot.writeFieldBegin('intensify_level_', TType.I32, 8)
      oprot.writeI32(self.intensify_level_)
      oprot.writeFieldEnd()
    if self.result_ is not None:
      oprot.writeFieldBegin('result_', TType.I32, 9)
      oprot.writeI32(self.result_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.actor_id_ is None:
      raise TProtocol.TProtocolException(message='Required field actor_id_ is unset!')
    if self.item_template_ is None:
      raise TProtocol.TProtocolException(message='Required field item_template_ is unset!')
    if self.number_ is None:
      raise TProtocol.TProtocolException(message='Required field number_ is unset!')
    if self.bind_ is None:
      raise TProtocol.TProtocolException(message='Required field bind_ is unset!')
    if self.intensify_level_ is None:
      raise TProtocol.TProtocolException(message='Required field intensify_level_ is unset!')
    if self.result_ is None:
      raise TProtocol.TProtocolException(message='Required field result_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestAddItems:
  """
  Attributes:
   - actor_id_
   - items_
   - simulate_
   - result_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'actor_id_', None, None, ), # 1
    (2, TType.LIST, 'items_', (TType.STRUCT,(ccentity.item.ttypes.AddItemFields, ccentity.item.ttypes.AddItemFields.thrift_spec)), None, ), # 2
    (3, TType.BOOL, 'simulate_', None, False, ), # 3
    (4, TType.I32, 'result_', None, None, ), # 4
  )

  def __init__(self, actor_id_=None, items_=None, simulate_=thrift_spec[3][4], result_=None,):
    self.actor_id_ = actor_id_
    self.items_ = items_
    self.simulate_ = simulate_
    self.result_ = result_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.actor_id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.items_ = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = ccentity.item.ttypes.AddItemFields()
            _elem5.read(iprot)
            self.items_.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.simulate_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.result_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestAddItems')
    if self.actor_id_ is not None:
      oprot.writeFieldBegin('actor_id_', TType.I64, 1)
      oprot.writeI64(self.actor_id_)
      oprot.writeFieldEnd()
    if self.items_ is not None:
      oprot.writeFieldBegin('items_', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.items_))
      for iter6 in self.items_:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.simulate_ is not None:
      oprot.writeFieldBegin('simulate_', TType.BOOL, 3)
      oprot.writeBool(self.simulate_)
      oprot.writeFieldEnd()
    if self.result_ is not None:
      oprot.writeFieldBegin('result_', TType.I32, 4)
      oprot.writeI32(self.result_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.actor_id_ is None:
      raise TProtocol.TProtocolException(message='Required field actor_id_ is unset!')
    if self.items_ is None:
      raise TProtocol.TProtocolException(message='Required field items_ is unset!')
    if self.result_ is None:
      raise TProtocol.TProtocolException(message='Required field result_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestGetPacketItemNumber:
  """
  Attributes:
   - actor_id_
   - item_template_
   - bind_
   - number_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'actor_id_', None, None, ), # 1
    (2, TType.I32, 'item_template_', None, None, ), # 2
    (3, TType.I32, 'bind_', None, None, ), # 3
    (4, TType.I32, 'number_', None, None, ), # 4
  )

  def __init__(self, actor_id_=None, item_template_=None, bind_=None, number_=None,):
    self.actor_id_ = actor_id_
    self.item_template_ = item_template_
    self.bind_ = bind_
    self.number_ = number_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.actor_id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.item_template_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.bind_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.number_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestGetPacketItemNumber')
    if self.actor_id_ is not None:
      oprot.writeFieldBegin('actor_id_', TType.I64, 1)
      oprot.writeI64(self.actor_id_)
      oprot.writeFieldEnd()
    if self.item_template_ is not None:
      oprot.writeFieldBegin('item_template_', TType.I32, 2)
      oprot.writeI32(self.item_template_)
      oprot.writeFieldEnd()
    if self.bind_ is not None:
      oprot.writeFieldBegin('bind_', TType.I32, 3)
      oprot.writeI32(self.bind_)
      oprot.writeFieldEnd()
    if self.number_ is not None:
      oprot.writeFieldBegin('number_', TType.I32, 4)
      oprot.writeI32(self.number_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.actor_id_ is None:
      raise TProtocol.TProtocolException(message='Required field actor_id_ is unset!')
    if self.item_template_ is None:
      raise TProtocol.TProtocolException(message='Required field item_template_ is unset!')
    if self.bind_ is None:
      raise TProtocol.TProtocolException(message='Required field bind_ is unset!')
    if self.number_ is None:
      raise TProtocol.TProtocolException(message='Required field number_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestGetPacketItemTemplate:
  """
  Attributes:
   - actor_id_
   - item_id_
   - location_
   - item_template_
   - bind_
   - item_extra_info_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'actor_id_', None, None, ), # 1
    (2, TType.I64, 'item_id_', None, None, ), # 2
    (3, TType.I16, 'location_', None, None, ), # 3
    (4, TType.I32, 'item_template_', None, None, ), # 4
    (5, TType.BOOL, 'bind_', None, None, ), # 5
    (6, TType.STRING, 'item_extra_info_', None, None, ), # 6
  )

  def __init__(self, actor_id_=None, item_id_=None, location_=None, item_template_=None, bind_=None, item_extra_info_=None,):
    self.actor_id_ = actor_id_
    self.item_id_ = item_id_
    self.location_ = location_
    self.item_template_ = item_template_
    self.bind_ = bind_
    self.item_extra_info_ = item_extra_info_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.actor_id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.item_id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.location_ = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.item_template_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.bind_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.item_extra_info_ = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestGetPacketItemTemplate')
    if self.actor_id_ is not None:
      oprot.writeFieldBegin('actor_id_', TType.I64, 1)
      oprot.writeI64(self.actor_id_)
      oprot.writeFieldEnd()
    if self.item_id_ is not None:
      oprot.writeFieldBegin('item_id_', TType.I64, 2)
      oprot.writeI64(self.item_id_)
      oprot.writeFieldEnd()
    if self.location_ is not None:
      oprot.writeFieldBegin('location_', TType.I16, 3)
      oprot.writeI16(self.location_)
      oprot.writeFieldEnd()
    if self.item_template_ is not None:
      oprot.writeFieldBegin('item_template_', TType.I32, 4)
      oprot.writeI32(self.item_template_)
      oprot.writeFieldEnd()
    if self.bind_ is not None:
      oprot.writeFieldBegin('bind_', TType.BOOL, 5)
      oprot.writeBool(self.bind_)
      oprot.writeFieldEnd()
    if self.item_extra_info_ is not None:
      oprot.writeFieldBegin('item_extra_info_', TType.STRING, 6)
      oprot.writeString(self.item_extra_info_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.actor_id_ is None:
      raise TProtocol.TProtocolException(message='Required field actor_id_ is unset!')
    if self.item_template_ is None:
      raise TProtocol.TProtocolException(message='Required field item_template_ is unset!')
    if self.bind_ is None:
      raise TProtocol.TProtocolException(message='Required field bind_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestRemoveItem:
  """
  Attributes:
   - actor_id_
   - item_template_
   - number_
   - bind_
   - remove_number_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'actor_id_', None, None, ), # 1
    (2, TType.I32, 'item_template_', None, None, ), # 2
    (3, TType.I32, 'number_', None, None, ), # 3
    (4, TType.I32, 'bind_', None, None, ), # 4
    (5, TType.I32, 'remove_number_', None, None, ), # 5
  )

  def __init__(self, actor_id_=None, item_template_=None, number_=None, bind_=None, remove_number_=None,):
    self.actor_id_ = actor_id_
    self.item_template_ = item_template_
    self.number_ = number_
    self.bind_ = bind_
    self.remove_number_ = remove_number_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.actor_id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.item_template_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.number_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.bind_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.remove_number_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestRemoveItem')
    if self.actor_id_ is not None:
      oprot.writeFieldBegin('actor_id_', TType.I64, 1)
      oprot.writeI64(self.actor_id_)
      oprot.writeFieldEnd()
    if self.item_template_ is not None:
      oprot.writeFieldBegin('item_template_', TType.I32, 2)
      oprot.writeI32(self.item_template_)
      oprot.writeFieldEnd()
    if self.number_ is not None:
      oprot.writeFieldBegin('number_', TType.I32, 3)
      oprot.writeI32(self.number_)
      oprot.writeFieldEnd()
    if self.bind_ is not None:
      oprot.writeFieldBegin('bind_', TType.I32, 4)
      oprot.writeI32(self.bind_)
      oprot.writeFieldEnd()
    if self.remove_number_ is not None:
      oprot.writeFieldBegin('remove_number_', TType.I32, 5)
      oprot.writeI32(self.remove_number_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.actor_id_ is None:
      raise TProtocol.TProtocolException(message='Required field actor_id_ is unset!')
    if self.item_template_ is None:
      raise TProtocol.TProtocolException(message='Required field item_template_ is unset!')
    if self.number_ is None:
      raise TProtocol.TProtocolException(message='Required field number_ is unset!')
    if self.bind_ is None:
      raise TProtocol.TProtocolException(message='Required field bind_ is unset!')
    if self.remove_number_ is None:
      raise TProtocol.TProtocolException(message='Required field remove_number_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestRemoveItemLocationID:
  """
  Attributes:
   - actor_id_
   - item_id_
   - location_
   - number_
   - result_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'actor_id_', None, None, ), # 1
    (2, TType.STRING, 'item_id_', None, None, ), # 2
    (3, TType.I16, 'location_', None, None, ), # 3
    (4, TType.I32, 'number_', None, None, ), # 4
    (5, TType.I32, 'result_', None, None, ), # 5
  )

  def __init__(self, actor_id_=None, item_id_=None, location_=None, number_=None, result_=None,):
    self.actor_id_ = actor_id_
    self.item_id_ = item_id_
    self.location_ = location_
    self.number_ = number_
    self.result_ = result_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.actor_id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.item_id_ = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.location_ = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.number_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.result_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestRemoveItemLocationID')
    if self.actor_id_ is not None:
      oprot.writeFieldBegin('actor_id_', TType.I64, 1)
      oprot.writeI64(self.actor_id_)
      oprot.writeFieldEnd()
    if self.item_id_ is not None:
      oprot.writeFieldBegin('item_id_', TType.STRING, 2)
      oprot.writeString(self.item_id_)
      oprot.writeFieldEnd()
    if self.location_ is not None:
      oprot.writeFieldBegin('location_', TType.I16, 3)
      oprot.writeI16(self.location_)
      oprot.writeFieldEnd()
    if self.number_ is not None:
      oprot.writeFieldBegin('number_', TType.I32, 4)
      oprot.writeI32(self.number_)
      oprot.writeFieldEnd()
    if self.result_ is not None:
      oprot.writeFieldBegin('result_', TType.I32, 5)
      oprot.writeI32(self.result_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.actor_id_ is None:
      raise TProtocol.TProtocolException(message='Required field actor_id_ is unset!')
    if self.number_ is None:
      raise TProtocol.TProtocolException(message='Required field number_ is unset!')
    if self.result_ is None:
      raise TProtocol.TProtocolException(message='Required field result_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestItemWearedEquipInfo:
  """
  Attributes:
   - actor_id_
   - type_
   - num_
   - param1_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'actor_id_', None, None, ), # 1
    (2, TType.I32, 'type_', None, None, ), # 2
    (3, TType.I32, 'num_', None, None, ), # 3
    (4, TType.I32, 'param1_', None, None, ), # 4
  )

  def __init__(self, actor_id_=None, type_=None, num_=None, param1_=None,):
    self.actor_id_ = actor_id_
    self.type_ = type_
    self.num_ = num_
    self.param1_ = param1_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.actor_id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.num_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.param1_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestItemWearedEquipInfo')
    if self.actor_id_ is not None:
      oprot.writeFieldBegin('actor_id_', TType.I64, 1)
      oprot.writeI64(self.actor_id_)
      oprot.writeFieldEnd()
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 2)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    if self.num_ is not None:
      oprot.writeFieldBegin('num_', TType.I32, 3)
      oprot.writeI32(self.num_)
      oprot.writeFieldEnd()
    if self.param1_ is not None:
      oprot.writeFieldBegin('param1_', TType.I32, 4)
      oprot.writeI32(self.param1_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.actor_id_ is None:
      raise TProtocol.TProtocolException(message='Required field actor_id_ is unset!')
    if self.type_ is None:
      raise TProtocol.TProtocolException(message='Required field type_ is unset!')
    if self.num_ is None:
      raise TProtocol.TProtocolException(message='Required field num_ is unset!')
    if self.param1_ is None:
      raise TProtocol.TProtocolException(message='Required field param1_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
