#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ccrequest.ttypes
import ccentity.role.ttypes
import ccentity.entity.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class RequestEffectStart:
  """
  Attributes:
   - entity_type_
   - entity_id_
   - effect_id_
   - succeed_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'entity_type_', None, None, ), # 1
    (2, TType.I64, 'entity_id_', None, None, ), # 2
    (3, TType.I32, 'effect_id_', None, None, ), # 3
    (4, TType.BOOL, 'succeed_', None, None, ), # 4
  )

  def __init__(self, entity_type_=None, entity_id_=None, effect_id_=None, succeed_=None,):
    self.entity_type_ = entity_type_
    self.entity_id_ = entity_id_
    self.effect_id_ = effect_id_
    self.succeed_ = succeed_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.entity_type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.entity_id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.effect_id_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.succeed_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestEffectStart')
    if self.entity_type_ is not None:
      oprot.writeFieldBegin('entity_type_', TType.I32, 1)
      oprot.writeI32(self.entity_type_)
      oprot.writeFieldEnd()
    if self.entity_id_ is not None:
      oprot.writeFieldBegin('entity_id_', TType.I64, 2)
      oprot.writeI64(self.entity_id_)
      oprot.writeFieldEnd()
    if self.effect_id_ is not None:
      oprot.writeFieldBegin('effect_id_', TType.I32, 3)
      oprot.writeI32(self.effect_id_)
      oprot.writeFieldEnd()
    if self.succeed_ is not None:
      oprot.writeFieldBegin('succeed_', TType.BOOL, 4)
      oprot.writeBool(self.succeed_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.entity_type_ is None:
      raise TProtocol.TProtocolException(message='Required field entity_type_ is unset!')
    if self.entity_id_ is None:
      raise TProtocol.TProtocolException(message='Required field entity_id_ is unset!')
    if self.effect_id_ is None:
      raise TProtocol.TProtocolException(message='Required field effect_id_ is unset!')
    if self.succeed_ is None:
      raise TProtocol.TProtocolException(message='Required field succeed_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestEffectEnd:
  """
  Attributes:
   - entity_type_
   - entity_id_
   - effect_id_
   - succeed_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'entity_type_', None, None, ), # 1
    (2, TType.I64, 'entity_id_', None, None, ), # 2
    (3, TType.I32, 'effect_id_', None, None, ), # 3
    (4, TType.BOOL, 'succeed_', None, None, ), # 4
  )

  def __init__(self, entity_type_=None, entity_id_=None, effect_id_=None, succeed_=None,):
    self.entity_type_ = entity_type_
    self.entity_id_ = entity_id_
    self.effect_id_ = effect_id_
    self.succeed_ = succeed_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.entity_type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.entity_id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.effect_id_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.succeed_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestEffectEnd')
    if self.entity_type_ is not None:
      oprot.writeFieldBegin('entity_type_', TType.I32, 1)
      oprot.writeI32(self.entity_type_)
      oprot.writeFieldEnd()
    if self.entity_id_ is not None:
      oprot.writeFieldBegin('entity_id_', TType.I64, 2)
      oprot.writeI64(self.entity_id_)
      oprot.writeFieldEnd()
    if self.effect_id_ is not None:
      oprot.writeFieldBegin('effect_id_', TType.I32, 3)
      oprot.writeI32(self.effect_id_)
      oprot.writeFieldEnd()
    if self.succeed_ is not None:
      oprot.writeFieldBegin('succeed_', TType.BOOL, 4)
      oprot.writeBool(self.succeed_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.entity_type_ is None:
      raise TProtocol.TProtocolException(message='Required field entity_type_ is unset!')
    if self.entity_id_ is None:
      raise TProtocol.TProtocolException(message='Required field entity_id_ is unset!')
    if self.effect_id_ is None:
      raise TProtocol.TProtocolException(message='Required field effect_id_ is unset!')
    if self.succeed_ is None:
      raise TProtocol.TProtocolException(message='Required field succeed_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestEffectCommonStatusStart:
  """
  Attributes:
   - entity_type_
   - entity_id_
   - status_
   - succeed_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'entity_type_', None, None, ), # 1
    (2, TType.I64, 'entity_id_', None, None, ), # 2
    (3, TType.I32, 'status_', None, None, ), # 3
    (4, TType.BOOL, 'succeed_', None, None, ), # 4
  )

  def __init__(self, entity_type_=None, entity_id_=None, status_=None, succeed_=None,):
    self.entity_type_ = entity_type_
    self.entity_id_ = entity_id_
    self.status_ = status_
    self.succeed_ = succeed_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.entity_type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.entity_id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.status_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.succeed_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestEffectCommonStatusStart')
    if self.entity_type_ is not None:
      oprot.writeFieldBegin('entity_type_', TType.I32, 1)
      oprot.writeI32(self.entity_type_)
      oprot.writeFieldEnd()
    if self.entity_id_ is not None:
      oprot.writeFieldBegin('entity_id_', TType.I64, 2)
      oprot.writeI64(self.entity_id_)
      oprot.writeFieldEnd()
    if self.status_ is not None:
      oprot.writeFieldBegin('status_', TType.I32, 3)
      oprot.writeI32(self.status_)
      oprot.writeFieldEnd()
    if self.succeed_ is not None:
      oprot.writeFieldBegin('succeed_', TType.BOOL, 4)
      oprot.writeBool(self.succeed_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.entity_type_ is None:
      raise TProtocol.TProtocolException(message='Required field entity_type_ is unset!')
    if self.entity_id_ is None:
      raise TProtocol.TProtocolException(message='Required field entity_id_ is unset!')
    if self.status_ is None:
      raise TProtocol.TProtocolException(message='Required field status_ is unset!')
    if self.succeed_ is None:
      raise TProtocol.TProtocolException(message='Required field succeed_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestEffectCommonStatusEnd:
  """
  Attributes:
   - entity_type_
   - entity_id_
   - status_
   - succeed_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'entity_type_', None, None, ), # 1
    (2, TType.I64, 'entity_id_', None, None, ), # 2
    (3, TType.I32, 'status_', None, None, ), # 3
    (4, TType.BOOL, 'succeed_', None, None, ), # 4
  )

  def __init__(self, entity_type_=None, entity_id_=None, status_=None, succeed_=None,):
    self.entity_type_ = entity_type_
    self.entity_id_ = entity_id_
    self.status_ = status_
    self.succeed_ = succeed_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.entity_type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.entity_id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.status_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.succeed_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestEffectCommonStatusEnd')
    if self.entity_type_ is not None:
      oprot.writeFieldBegin('entity_type_', TType.I32, 1)
      oprot.writeI32(self.entity_type_)
      oprot.writeFieldEnd()
    if self.entity_id_ is not None:
      oprot.writeFieldBegin('entity_id_', TType.I64, 2)
      oprot.writeI64(self.entity_id_)
      oprot.writeFieldEnd()
    if self.status_ is not None:
      oprot.writeFieldBegin('status_', TType.I32, 3)
      oprot.writeI32(self.status_)
      oprot.writeFieldEnd()
    if self.succeed_ is not None:
      oprot.writeFieldBegin('succeed_', TType.BOOL, 4)
      oprot.writeBool(self.succeed_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.entity_type_ is None:
      raise TProtocol.TProtocolException(message='Required field entity_type_ is unset!')
    if self.entity_id_ is None:
      raise TProtocol.TProtocolException(message='Required field entity_id_ is unset!')
    if self.status_ is None:
      raise TProtocol.TProtocolException(message='Required field status_ is unset!')
    if self.succeed_ is None:
      raise TProtocol.TProtocolException(message='Required field succeed_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
