#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ccrequest.ttypes
import ccentity.mail.ttypes
import ccentity.mail_system.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class RequestMailSend:
  """
  Attributes:
   - id_
   - type_
   - child_type_
   - params_
   - affix_
   - context_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id_', None, None, ), # 1
    (2, TType.I32, 'type_', None, None, ), # 2
    (3, TType.I32, 'child_type_', None, None, ), # 3
    (4, TType.LIST, 'params_', (TType.STRING,None), None, ), # 4
    (5, TType.STRUCT, 'affix_', (ccentity.mail.ttypes.MailAffix, ccentity.mail.ttypes.MailAffix.thrift_spec), None, ), # 5
    (6, TType.STRING, 'context_', None, None, ), # 6
  )

  def __init__(self, id_=None, type_=None, child_type_=None, params_=None, affix_=None, context_=None,):
    self.id_ = id_
    self.type_ = type_
    self.child_type_ = child_type_
    self.params_ = params_
    self.affix_ = affix_
    self.context_ = context_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.child_type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.params_ = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.params_.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.affix_ = ccentity.mail.ttypes.MailAffix()
          self.affix_.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.context_ = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestMailSend')
    if self.id_ is not None:
      oprot.writeFieldBegin('id_', TType.I64, 1)
      oprot.writeI64(self.id_)
      oprot.writeFieldEnd()
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 2)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    if self.child_type_ is not None:
      oprot.writeFieldBegin('child_type_', TType.I32, 3)
      oprot.writeI32(self.child_type_)
      oprot.writeFieldEnd()
    if self.params_ is not None:
      oprot.writeFieldBegin('params_', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.params_))
      for iter6 in self.params_:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.affix_ is not None:
      oprot.writeFieldBegin('affix_', TType.STRUCT, 5)
      self.affix_.write(oprot)
      oprot.writeFieldEnd()
    if self.context_ is not None:
      oprot.writeFieldBegin('context_', TType.STRING, 6)
      oprot.writeString(self.context_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id_ is None:
      raise TProtocol.TProtocolException(message='Required field id_ is unset!')
    if self.child_type_ is None:
      raise TProtocol.TProtocolException(message='Required field child_type_ is unset!')
    if self.params_ is None:
      raise TProtocol.TProtocolException(message='Required field params_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
