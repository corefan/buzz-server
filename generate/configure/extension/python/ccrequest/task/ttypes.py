#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ccrequest.ttypes
import ccentity.task.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class RequestTaskOptType:
  ACCEPT = 0
  FINISH = 1

  _VALUES_TO_NAMES = {
    0: "ACCEPT",
    1: "FINISH",
  }

  _NAMES_TO_VALUES = {
    "ACCEPT": 0,
    "FINISH": 1,
  }


class RequestTaskAccept:
  """
  Attributes:
   - task_id_
   - actor_id_
   - type_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'task_id_', None, None, ), # 1
    (2, TType.I64, 'actor_id_', None, None, ), # 2
    (3, TType.I32, 'type_', None, None, ), # 3
  )

  def __init__(self, task_id_=None, actor_id_=None, type_=None,):
    self.task_id_ = task_id_
    self.actor_id_ = actor_id_
    self.type_ = type_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.task_id_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.actor_id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestTaskAccept')
    if self.task_id_ is not None:
      oprot.writeFieldBegin('task_id_', TType.I32, 1)
      oprot.writeI32(self.task_id_)
      oprot.writeFieldEnd()
    if self.actor_id_ is not None:
      oprot.writeFieldBegin('actor_id_', TType.I64, 2)
      oprot.writeI64(self.actor_id_)
      oprot.writeFieldEnd()
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 3)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.task_id_ is None:
      raise TProtocol.TProtocolException(message='Required field task_id_ is unset!')
    if self.actor_id_ is None:
      raise TProtocol.TProtocolException(message='Required field actor_id_ is unset!')
    if self.type_ is None:
      raise TProtocol.TProtocolException(message='Required field type_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestTaskCheckGather:
  """
  Attributes:
   - npc_template_
   - actor_id_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'npc_template_', None, None, ), # 1
    (2, TType.I64, 'actor_id_', None, None, ), # 2
  )

  def __init__(self, npc_template_=None, actor_id_=None,):
    self.npc_template_ = npc_template_
    self.actor_id_ = actor_id_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.npc_template_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.actor_id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestTaskCheckGather')
    if self.npc_template_ is not None:
      oprot.writeFieldBegin('npc_template_', TType.I32, 1)
      oprot.writeI32(self.npc_template_)
      oprot.writeFieldEnd()
    if self.actor_id_ is not None:
      oprot.writeFieldBegin('actor_id_', TType.I64, 2)
      oprot.writeI64(self.actor_id_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.npc_template_ is None:
      raise TProtocol.TProtocolException(message='Required field npc_template_ is unset!')
    if self.actor_id_ is None:
      raise TProtocol.TProtocolException(message='Required field actor_id_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestTaskMaxLayer:
  """
  Attributes:
   - actor_id_
   - task_layer_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'actor_id_', None, None, ), # 1
    (2, TType.I32, 'task_layer_', None, None, ), # 2
  )

  def __init__(self, actor_id_=None, task_layer_=None,):
    self.actor_id_ = actor_id_
    self.task_layer_ = task_layer_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.actor_id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.task_layer_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestTaskMaxLayer')
    if self.actor_id_ is not None:
      oprot.writeFieldBegin('actor_id_', TType.I64, 1)
      oprot.writeI64(self.actor_id_)
      oprot.writeFieldEnd()
    if self.task_layer_ is not None:
      oprot.writeFieldBegin('task_layer_', TType.I32, 2)
      oprot.writeI32(self.task_layer_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.actor_id_ is None:
      raise TProtocol.TProtocolException(message='Required field actor_id_ is unset!')
    if self.task_layer_ is None:
      raise TProtocol.TProtocolException(message='Required field task_layer_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestTaskConditionCoordinate:
  """
  Attributes:
   - actor_id_
   - type_
   - task_id_
   - condition_pos_
   - map_id_
   - x_
   - y_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'actor_id_', None, None, ), # 1
    (2, TType.I32, 'type_', None, None, ), # 2
    (3, TType.I32, 'task_id_', None, None, ), # 3
    (4, TType.I32, 'condition_pos_', None, None, ), # 4
    (5, TType.I32, 'map_id_', None, None, ), # 5
    (6, TType.I32, 'x_', None, None, ), # 6
    (7, TType.I32, 'y_', None, None, ), # 7
  )

  def __init__(self, actor_id_=None, type_=None, task_id_=None, condition_pos_=None, map_id_=None, x_=None, y_=None,):
    self.actor_id_ = actor_id_
    self.type_ = type_
    self.task_id_ = task_id_
    self.condition_pos_ = condition_pos_
    self.map_id_ = map_id_
    self.x_ = x_
    self.y_ = y_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.actor_id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.task_id_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.condition_pos_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.map_id_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.x_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.y_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestTaskConditionCoordinate')
    if self.actor_id_ is not None:
      oprot.writeFieldBegin('actor_id_', TType.I64, 1)
      oprot.writeI64(self.actor_id_)
      oprot.writeFieldEnd()
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 2)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    if self.task_id_ is not None:
      oprot.writeFieldBegin('task_id_', TType.I32, 3)
      oprot.writeI32(self.task_id_)
      oprot.writeFieldEnd()
    if self.condition_pos_ is not None:
      oprot.writeFieldBegin('condition_pos_', TType.I32, 4)
      oprot.writeI32(self.condition_pos_)
      oprot.writeFieldEnd()
    if self.map_id_ is not None:
      oprot.writeFieldBegin('map_id_', TType.I32, 5)
      oprot.writeI32(self.map_id_)
      oprot.writeFieldEnd()
    if self.x_ is not None:
      oprot.writeFieldBegin('x_', TType.I32, 6)
      oprot.writeI32(self.x_)
      oprot.writeFieldEnd()
    if self.y_ is not None:
      oprot.writeFieldBegin('y_', TType.I32, 7)
      oprot.writeI32(self.y_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.actor_id_ is None:
      raise TProtocol.TProtocolException(message='Required field actor_id_ is unset!')
    if self.type_ is None:
      raise TProtocol.TProtocolException(message='Required field type_ is unset!')
    if self.task_id_ is None:
      raise TProtocol.TProtocolException(message='Required field task_id_ is unset!')
    if self.condition_pos_ is None:
      raise TProtocol.TProtocolException(message='Required field condition_pos_ is unset!')
    if self.map_id_ is None:
      raise TProtocol.TProtocolException(message='Required field map_id_ is unset!')
    if self.x_ is None:
      raise TProtocol.TProtocolException(message='Required field x_ is unset!')
    if self.y_ is None:
      raise TProtocol.TProtocolException(message='Required field y_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestTaskAcceptAndFinishCoordinate:
  """
  Attributes:
   - actor_id_
   - type_
   - task_id_
   - opt_type_
   - map_id_
   - x_
   - y_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'actor_id_', None, None, ), # 1
    (2, TType.I32, 'type_', None, None, ), # 2
    (3, TType.I32, 'task_id_', None, None, ), # 3
    (4, TType.I32, 'opt_type_', None, None, ), # 4
    (5, TType.I32, 'map_id_', None, None, ), # 5
    (6, TType.I32, 'x_', None, None, ), # 6
    (7, TType.I32, 'y_', None, None, ), # 7
  )

  def __init__(self, actor_id_=None, type_=None, task_id_=None, opt_type_=None, map_id_=None, x_=None, y_=None,):
    self.actor_id_ = actor_id_
    self.type_ = type_
    self.task_id_ = task_id_
    self.opt_type_ = opt_type_
    self.map_id_ = map_id_
    self.x_ = x_
    self.y_ = y_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.actor_id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.task_id_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.opt_type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.map_id_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.x_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.y_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestTaskAcceptAndFinishCoordinate')
    if self.actor_id_ is not None:
      oprot.writeFieldBegin('actor_id_', TType.I64, 1)
      oprot.writeI64(self.actor_id_)
      oprot.writeFieldEnd()
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 2)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    if self.task_id_ is not None:
      oprot.writeFieldBegin('task_id_', TType.I32, 3)
      oprot.writeI32(self.task_id_)
      oprot.writeFieldEnd()
    if self.opt_type_ is not None:
      oprot.writeFieldBegin('opt_type_', TType.I32, 4)
      oprot.writeI32(self.opt_type_)
      oprot.writeFieldEnd()
    if self.map_id_ is not None:
      oprot.writeFieldBegin('map_id_', TType.I32, 5)
      oprot.writeI32(self.map_id_)
      oprot.writeFieldEnd()
    if self.x_ is not None:
      oprot.writeFieldBegin('x_', TType.I32, 6)
      oprot.writeI32(self.x_)
      oprot.writeFieldEnd()
    if self.y_ is not None:
      oprot.writeFieldBegin('y_', TType.I32, 7)
      oprot.writeI32(self.y_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.actor_id_ is None:
      raise TProtocol.TProtocolException(message='Required field actor_id_ is unset!')
    if self.type_ is None:
      raise TProtocol.TProtocolException(message='Required field type_ is unset!')
    if self.task_id_ is None:
      raise TProtocol.TProtocolException(message='Required field task_id_ is unset!')
    if self.opt_type_ is None:
      raise TProtocol.TProtocolException(message='Required field opt_type_ is unset!')
    if self.map_id_ is None:
      raise TProtocol.TProtocolException(message='Required field map_id_ is unset!')
    if self.x_ is None:
      raise TProtocol.TProtocolException(message='Required field x_ is unset!')
    if self.y_ is None:
      raise TProtocol.TProtocolException(message='Required field y_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
