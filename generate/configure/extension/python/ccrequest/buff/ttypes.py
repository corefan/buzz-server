#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ccrequest.ttypes
import ccentity.entity.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class RequestBuffStart:
  """
  Attributes:
   - src_entity_type_
   - src_entity_id_
   - dest_entity_type_
   - dest_entity_id_
   - buff_id_
   - succeed_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'src_entity_type_', None, None, ), # 1
    (2, TType.I64, 'src_entity_id_', None, None, ), # 2
    (3, TType.I32, 'dest_entity_type_', None, None, ), # 3
    (4, TType.I64, 'dest_entity_id_', None, None, ), # 4
    (5, TType.I32, 'buff_id_', None, None, ), # 5
    (6, TType.BOOL, 'succeed_', None, None, ), # 6
  )

  def __init__(self, src_entity_type_=None, src_entity_id_=None, dest_entity_type_=None, dest_entity_id_=None, buff_id_=None, succeed_=None,):
    self.src_entity_type_ = src_entity_type_
    self.src_entity_id_ = src_entity_id_
    self.dest_entity_type_ = dest_entity_type_
    self.dest_entity_id_ = dest_entity_id_
    self.buff_id_ = buff_id_
    self.succeed_ = succeed_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.src_entity_type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.src_entity_id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.dest_entity_type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.dest_entity_id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.buff_id_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.succeed_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestBuffStart')
    if self.src_entity_type_ is not None:
      oprot.writeFieldBegin('src_entity_type_', TType.I32, 1)
      oprot.writeI32(self.src_entity_type_)
      oprot.writeFieldEnd()
    if self.src_entity_id_ is not None:
      oprot.writeFieldBegin('src_entity_id_', TType.I64, 2)
      oprot.writeI64(self.src_entity_id_)
      oprot.writeFieldEnd()
    if self.dest_entity_type_ is not None:
      oprot.writeFieldBegin('dest_entity_type_', TType.I32, 3)
      oprot.writeI32(self.dest_entity_type_)
      oprot.writeFieldEnd()
    if self.dest_entity_id_ is not None:
      oprot.writeFieldBegin('dest_entity_id_', TType.I64, 4)
      oprot.writeI64(self.dest_entity_id_)
      oprot.writeFieldEnd()
    if self.buff_id_ is not None:
      oprot.writeFieldBegin('buff_id_', TType.I32, 5)
      oprot.writeI32(self.buff_id_)
      oprot.writeFieldEnd()
    if self.succeed_ is not None:
      oprot.writeFieldBegin('succeed_', TType.BOOL, 6)
      oprot.writeBool(self.succeed_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.src_entity_type_ is None:
      raise TProtocol.TProtocolException(message='Required field src_entity_type_ is unset!')
    if self.src_entity_id_ is None:
      raise TProtocol.TProtocolException(message='Required field src_entity_id_ is unset!')
    if self.dest_entity_type_ is None:
      raise TProtocol.TProtocolException(message='Required field dest_entity_type_ is unset!')
    if self.dest_entity_id_ is None:
      raise TProtocol.TProtocolException(message='Required field dest_entity_id_ is unset!')
    if self.buff_id_ is None:
      raise TProtocol.TProtocolException(message='Required field buff_id_ is unset!')
    if self.succeed_ is None:
      raise TProtocol.TProtocolException(message='Required field succeed_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestBuffEnd:
  """
  Attributes:
   - dest_entity_type_
   - dest_entity_id_
   - buff_id_
   - succeed_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'dest_entity_type_', None, None, ), # 1
    (2, TType.I64, 'dest_entity_id_', None, None, ), # 2
    (3, TType.I32, 'buff_id_', None, None, ), # 3
    (4, TType.BOOL, 'succeed_', None, None, ), # 4
  )

  def __init__(self, dest_entity_type_=None, dest_entity_id_=None, buff_id_=None, succeed_=None,):
    self.dest_entity_type_ = dest_entity_type_
    self.dest_entity_id_ = dest_entity_id_
    self.buff_id_ = buff_id_
    self.succeed_ = succeed_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.dest_entity_type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.dest_entity_id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.buff_id_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.succeed_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestBuffEnd')
    if self.dest_entity_type_ is not None:
      oprot.writeFieldBegin('dest_entity_type_', TType.I32, 1)
      oprot.writeI32(self.dest_entity_type_)
      oprot.writeFieldEnd()
    if self.dest_entity_id_ is not None:
      oprot.writeFieldBegin('dest_entity_id_', TType.I64, 2)
      oprot.writeI64(self.dest_entity_id_)
      oprot.writeFieldEnd()
    if self.buff_id_ is not None:
      oprot.writeFieldBegin('buff_id_', TType.I32, 3)
      oprot.writeI32(self.buff_id_)
      oprot.writeFieldEnd()
    if self.succeed_ is not None:
      oprot.writeFieldBegin('succeed_', TType.BOOL, 4)
      oprot.writeBool(self.succeed_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.dest_entity_type_ is None:
      raise TProtocol.TProtocolException(message='Required field dest_entity_type_ is unset!')
    if self.dest_entity_id_ is None:
      raise TProtocol.TProtocolException(message='Required field dest_entity_id_ is unset!')
    if self.buff_id_ is None:
      raise TProtocol.TProtocolException(message='Required field buff_id_ is unset!')
    if self.succeed_ is None:
      raise TProtocol.TProtocolException(message='Required field succeed_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestBuffClear:
  """
  Attributes:
   - type_
   - id_
   - buff_id_
   - succeed_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type_', None, None, ), # 1
    (2, TType.I64, 'id_', None, None, ), # 2
    (3, TType.I32, 'buff_id_', None, None, ), # 3
    (4, TType.BOOL, 'succeed_', None, None, ), # 4
  )

  def __init__(self, type_=None, id_=None, buff_id_=None, succeed_=None,):
    self.type_ = type_
    self.id_ = id_
    self.buff_id_ = buff_id_
    self.succeed_ = succeed_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.buff_id_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.succeed_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestBuffClear')
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 1)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    if self.id_ is not None:
      oprot.writeFieldBegin('id_', TType.I64, 2)
      oprot.writeI64(self.id_)
      oprot.writeFieldEnd()
    if self.buff_id_ is not None:
      oprot.writeFieldBegin('buff_id_', TType.I32, 3)
      oprot.writeI32(self.buff_id_)
      oprot.writeFieldEnd()
    if self.succeed_ is not None:
      oprot.writeFieldBegin('succeed_', TType.BOOL, 4)
      oprot.writeBool(self.succeed_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type_ is None:
      raise TProtocol.TProtocolException(message='Required field type_ is unset!')
    if self.id_ is None:
      raise TProtocol.TProtocolException(message='Required field id_ is unset!')
    if self.buff_id_ is None:
      raise TProtocol.TProtocolException(message='Required field buff_id_ is unset!')
    if self.succeed_ is None:
      raise TProtocol.TProtocolException(message='Required field succeed_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestBuffClearGroup:
  """
  Attributes:
   - type_
   - id_
   - clear_group_
   - succeed_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type_', None, None, ), # 1
    (2, TType.I64, 'id_', None, None, ), # 2
    (3, TType.I32, 'clear_group_', None, None, ), # 3
    (4, TType.BOOL, 'succeed_', None, None, ), # 4
  )

  def __init__(self, type_=None, id_=None, clear_group_=None, succeed_=None,):
    self.type_ = type_
    self.id_ = id_
    self.clear_group_ = clear_group_
    self.succeed_ = succeed_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.clear_group_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.succeed_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestBuffClearGroup')
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 1)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    if self.id_ is not None:
      oprot.writeFieldBegin('id_', TType.I64, 2)
      oprot.writeI64(self.id_)
      oprot.writeFieldEnd()
    if self.clear_group_ is not None:
      oprot.writeFieldBegin('clear_group_', TType.I32, 3)
      oprot.writeI32(self.clear_group_)
      oprot.writeFieldEnd()
    if self.succeed_ is not None:
      oprot.writeFieldBegin('succeed_', TType.BOOL, 4)
      oprot.writeBool(self.succeed_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type_ is None:
      raise TProtocol.TProtocolException(message='Required field type_ is unset!')
    if self.id_ is None:
      raise TProtocol.TProtocolException(message='Required field id_ is unset!')
    if self.clear_group_ is None:
      raise TProtocol.TProtocolException(message='Required field clear_group_ is unset!')
    if self.succeed_ is None:
      raise TProtocol.TProtocolException(message='Required field succeed_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestBuffSetForbidGroup:
  """
  Attributes:
   - type_
   - id_
   - clear_group_
   - succeed_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type_', None, None, ), # 1
    (2, TType.I64, 'id_', None, None, ), # 2
    (3, TType.I32, 'clear_group_', None, None, ), # 3
    (4, TType.BOOL, 'succeed_', None, None, ), # 4
  )

  def __init__(self, type_=None, id_=None, clear_group_=None, succeed_=None,):
    self.type_ = type_
    self.id_ = id_
    self.clear_group_ = clear_group_
    self.succeed_ = succeed_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.clear_group_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.succeed_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestBuffSetForbidGroup')
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 1)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    if self.id_ is not None:
      oprot.writeFieldBegin('id_', TType.I64, 2)
      oprot.writeI64(self.id_)
      oprot.writeFieldEnd()
    if self.clear_group_ is not None:
      oprot.writeFieldBegin('clear_group_', TType.I32, 3)
      oprot.writeI32(self.clear_group_)
      oprot.writeFieldEnd()
    if self.succeed_ is not None:
      oprot.writeFieldBegin('succeed_', TType.BOOL, 4)
      oprot.writeBool(self.succeed_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type_ is None:
      raise TProtocol.TProtocolException(message='Required field type_ is unset!')
    if self.id_ is None:
      raise TProtocol.TProtocolException(message='Required field id_ is unset!')
    if self.clear_group_ is None:
      raise TProtocol.TProtocolException(message='Required field clear_group_ is unset!')
    if self.succeed_ is None:
      raise TProtocol.TProtocolException(message='Required field succeed_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestBuffResetForbidGroup:
  """
  Attributes:
   - type_
   - id_
   - clear_group_
   - succeed_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type_', None, None, ), # 1
    (2, TType.I64, 'id_', None, None, ), # 2
    (3, TType.I32, 'clear_group_', None, None, ), # 3
    (4, TType.BOOL, 'succeed_', None, None, ), # 4
  )

  def __init__(self, type_=None, id_=None, clear_group_=None, succeed_=None,):
    self.type_ = type_
    self.id_ = id_
    self.clear_group_ = clear_group_
    self.succeed_ = succeed_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.clear_group_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.succeed_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestBuffResetForbidGroup')
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 1)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    if self.id_ is not None:
      oprot.writeFieldBegin('id_', TType.I64, 2)
      oprot.writeI64(self.id_)
      oprot.writeFieldEnd()
    if self.clear_group_ is not None:
      oprot.writeFieldBegin('clear_group_', TType.I32, 3)
      oprot.writeI32(self.clear_group_)
      oprot.writeFieldEnd()
    if self.succeed_ is not None:
      oprot.writeFieldBegin('succeed_', TType.BOOL, 4)
      oprot.writeBool(self.succeed_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type_ is None:
      raise TProtocol.TProtocolException(message='Required field type_ is unset!')
    if self.id_ is None:
      raise TProtocol.TProtocolException(message='Required field id_ is unset!')
    if self.clear_group_ is None:
      raise TProtocol.TProtocolException(message='Required field clear_group_ is unset!')
    if self.succeed_ is None:
      raise TProtocol.TProtocolException(message='Required field succeed_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestBuffGetExist:
  """
  Attributes:
   - type_
   - id_
   - buff_id_
   - exist_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type_', None, None, ), # 1
    (2, TType.I64, 'id_', None, None, ), # 2
    (3, TType.I32, 'buff_id_', None, None, ), # 3
    (4, TType.BOOL, 'exist_', None, None, ), # 4
  )

  def __init__(self, type_=None, id_=None, buff_id_=None, exist_=None,):
    self.type_ = type_
    self.id_ = id_
    self.buff_id_ = buff_id_
    self.exist_ = exist_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.buff_id_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.exist_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestBuffGetExist')
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 1)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    if self.id_ is not None:
      oprot.writeFieldBegin('id_', TType.I64, 2)
      oprot.writeI64(self.id_)
      oprot.writeFieldEnd()
    if self.buff_id_ is not None:
      oprot.writeFieldBegin('buff_id_', TType.I32, 3)
      oprot.writeI32(self.buff_id_)
      oprot.writeFieldEnd()
    if self.exist_ is not None:
      oprot.writeFieldBegin('exist_', TType.BOOL, 4)
      oprot.writeBool(self.exist_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type_ is None:
      raise TProtocol.TProtocolException(message='Required field type_ is unset!')
    if self.id_ is None:
      raise TProtocol.TProtocolException(message='Required field id_ is unset!')
    if self.buff_id_ is None:
      raise TProtocol.TProtocolException(message='Required field buff_id_ is unset!')
    if self.exist_ is None:
      raise TProtocol.TProtocolException(message='Required field exist_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
