#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ccrequest.ttypes
import ccentity.entity.ttypes
import ccentity.direction.ttypes
import ccentity.skill.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class SkillResultType:
  MIN = 0
  SUCCESS = 0
  ERROR_ARGS = 1
  ERROR_SKILL_ID = 2
  ERROR_SKILL_TYPE = 3
  ERROR_SKILL_LEVEL = 4
  ERROR_SKILL_MASTER = 5
  ERROR_SKILL_SIT = 6
  ERROR_HP = 7
  ERROR_MP = 8
  ERROR_DISTANCE = 9
  ERROR_TARGET = 10
  ERROR_COOLING = 11
  ERROR_SOUL_STATUS = 12
  ERROR_BUFF_STATUS = 13
  ERROR_SAFEAREA = 14
  ERROR_ROOKIE_PROTECT = 15
  ERROR_DIE_PROTECT_TIME = 16
  ERROR_PK_MODE = 17
  ERROR_FORBID_SKILL = 18
  ERROR_UNKNOWN = 19
  MAX = 20

  _VALUES_TO_NAMES = {
    0: "MIN",
    0: "SUCCESS",
    1: "ERROR_ARGS",
    2: "ERROR_SKILL_ID",
    3: "ERROR_SKILL_TYPE",
    4: "ERROR_SKILL_LEVEL",
    5: "ERROR_SKILL_MASTER",
    6: "ERROR_SKILL_SIT",
    7: "ERROR_HP",
    8: "ERROR_MP",
    9: "ERROR_DISTANCE",
    10: "ERROR_TARGET",
    11: "ERROR_COOLING",
    12: "ERROR_SOUL_STATUS",
    13: "ERROR_BUFF_STATUS",
    14: "ERROR_SAFEAREA",
    15: "ERROR_ROOKIE_PROTECT",
    16: "ERROR_DIE_PROTECT_TIME",
    17: "ERROR_PK_MODE",
    18: "ERROR_FORBID_SKILL",
    19: "ERROR_UNKNOWN",
    20: "MAX",
  }

  _NAMES_TO_VALUES = {
    "MIN": 0,
    "SUCCESS": 0,
    "ERROR_ARGS": 1,
    "ERROR_SKILL_ID": 2,
    "ERROR_SKILL_TYPE": 3,
    "ERROR_SKILL_LEVEL": 4,
    "ERROR_SKILL_MASTER": 5,
    "ERROR_SKILL_SIT": 6,
    "ERROR_HP": 7,
    "ERROR_MP": 8,
    "ERROR_DISTANCE": 9,
    "ERROR_TARGET": 10,
    "ERROR_COOLING": 11,
    "ERROR_SOUL_STATUS": 12,
    "ERROR_BUFF_STATUS": 13,
    "ERROR_SAFEAREA": 14,
    "ERROR_ROOKIE_PROTECT": 15,
    "ERROR_DIE_PROTECT_TIME": 16,
    "ERROR_PK_MODE": 17,
    "ERROR_FORBID_SKILL": 18,
    "ERROR_UNKNOWN": 19,
    "MAX": 20,
  }


class RequestUseSkill:
  """
  Attributes:
   - type_
   - id_
   - skill_id_
   - target_type_
   - target_id_
   - x_
   - y_
   - direction_
   - result_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type_', None, None, ), # 1
    (2, TType.I64, 'id_', None, None, ), # 2
    (3, TType.I32, 'skill_id_', None, None, ), # 3
    (4, TType.I32, 'target_type_', None, None, ), # 4
    (5, TType.I64, 'target_id_', None, None, ), # 5
    (6, TType.I32, 'x_', None, None, ), # 6
    (7, TType.I32, 'y_', None, None, ), # 7
    (8, TType.I16, 'direction_', None, None, ), # 8
    (9, TType.I32, 'result_', None, None, ), # 9
  )

  def __init__(self, type_=None, id_=None, skill_id_=None, target_type_=None, target_id_=None, x_=None, y_=None, direction_=None, result_=None,):
    self.type_ = type_
    self.id_ = id_
    self.skill_id_ = skill_id_
    self.target_type_ = target_type_
    self.target_id_ = target_id_
    self.x_ = x_
    self.y_ = y_
    self.direction_ = direction_
    self.result_ = result_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.skill_id_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.target_type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.target_id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.x_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.y_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I16:
          self.direction_ = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.result_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestUseSkill')
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 1)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    if self.id_ is not None:
      oprot.writeFieldBegin('id_', TType.I64, 2)
      oprot.writeI64(self.id_)
      oprot.writeFieldEnd()
    if self.skill_id_ is not None:
      oprot.writeFieldBegin('skill_id_', TType.I32, 3)
      oprot.writeI32(self.skill_id_)
      oprot.writeFieldEnd()
    if self.target_type_ is not None:
      oprot.writeFieldBegin('target_type_', TType.I32, 4)
      oprot.writeI32(self.target_type_)
      oprot.writeFieldEnd()
    if self.target_id_ is not None:
      oprot.writeFieldBegin('target_id_', TType.I64, 5)
      oprot.writeI64(self.target_id_)
      oprot.writeFieldEnd()
    if self.x_ is not None:
      oprot.writeFieldBegin('x_', TType.I32, 6)
      oprot.writeI32(self.x_)
      oprot.writeFieldEnd()
    if self.y_ is not None:
      oprot.writeFieldBegin('y_', TType.I32, 7)
      oprot.writeI32(self.y_)
      oprot.writeFieldEnd()
    if self.direction_ is not None:
      oprot.writeFieldBegin('direction_', TType.I16, 8)
      oprot.writeI16(self.direction_)
      oprot.writeFieldEnd()
    if self.result_ is not None:
      oprot.writeFieldBegin('result_', TType.I32, 9)
      oprot.writeI32(self.result_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type_ is None:
      raise TProtocol.TProtocolException(message='Required field type_ is unset!')
    if self.id_ is None:
      raise TProtocol.TProtocolException(message='Required field id_ is unset!')
    if self.skill_id_ is None:
      raise TProtocol.TProtocolException(message='Required field skill_id_ is unset!')
    if self.target_type_ is None:
      raise TProtocol.TProtocolException(message='Required field target_type_ is unset!')
    if self.target_id_ is None:
      raise TProtocol.TProtocolException(message='Required field target_id_ is unset!')
    if self.x_ is None:
      raise TProtocol.TProtocolException(message='Required field x_ is unset!')
    if self.y_ is None:
      raise TProtocol.TProtocolException(message='Required field y_ is unset!')
    if self.direction_ is None:
      raise TProtocol.TProtocolException(message='Required field direction_ is unset!')
    if self.result_ is None:
      raise TProtocol.TProtocolException(message='Required field result_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestAddSkill:
  """
  Attributes:
   - type_
   - id_
   - skill_id_
   - level_
   - stand_
   - result_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type_', None, None, ), # 1
    (2, TType.I64, 'id_', None, None, ), # 2
    (3, TType.I32, 'skill_id_', None, None, ), # 3
    (4, TType.I32, 'level_', None, None, ), # 4
    (5, TType.BOOL, 'stand_', None, None, ), # 5
    (6, TType.I32, 'result_', None, None, ), # 6
  )

  def __init__(self, type_=None, id_=None, skill_id_=None, level_=None, stand_=None, result_=None,):
    self.type_ = type_
    self.id_ = id_
    self.skill_id_ = skill_id_
    self.level_ = level_
    self.stand_ = stand_
    self.result_ = result_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.skill_id_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.level_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.stand_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.result_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestAddSkill')
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 1)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    if self.id_ is not None:
      oprot.writeFieldBegin('id_', TType.I64, 2)
      oprot.writeI64(self.id_)
      oprot.writeFieldEnd()
    if self.skill_id_ is not None:
      oprot.writeFieldBegin('skill_id_', TType.I32, 3)
      oprot.writeI32(self.skill_id_)
      oprot.writeFieldEnd()
    if self.level_ is not None:
      oprot.writeFieldBegin('level_', TType.I32, 4)
      oprot.writeI32(self.level_)
      oprot.writeFieldEnd()
    if self.stand_ is not None:
      oprot.writeFieldBegin('stand_', TType.BOOL, 5)
      oprot.writeBool(self.stand_)
      oprot.writeFieldEnd()
    if self.result_ is not None:
      oprot.writeFieldBegin('result_', TType.I32, 6)
      oprot.writeI32(self.result_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type_ is None:
      raise TProtocol.TProtocolException(message='Required field type_ is unset!')
    if self.id_ is None:
      raise TProtocol.TProtocolException(message='Required field id_ is unset!')
    if self.skill_id_ is None:
      raise TProtocol.TProtocolException(message='Required field skill_id_ is unset!')
    if self.level_ is None:
      raise TProtocol.TProtocolException(message='Required field level_ is unset!')
    if self.stand_ is None:
      raise TProtocol.TProtocolException(message='Required field stand_ is unset!')
    if self.result_ is None:
      raise TProtocol.TProtocolException(message='Required field result_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestRemoveSkill:
  """
  Attributes:
   - type_
   - id_
   - skill_id_
   - result_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type_', None, None, ), # 1
    (2, TType.I64, 'id_', None, None, ), # 2
    (3, TType.I32, 'skill_id_', None, None, ), # 3
    (4, TType.I32, 'result_', None, None, ), # 4
  )

  def __init__(self, type_=None, id_=None, skill_id_=None, result_=None,):
    self.type_ = type_
    self.id_ = id_
    self.skill_id_ = skill_id_
    self.result_ = result_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.skill_id_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.result_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestRemoveSkill')
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 1)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    if self.id_ is not None:
      oprot.writeFieldBegin('id_', TType.I64, 2)
      oprot.writeI64(self.id_)
      oprot.writeFieldEnd()
    if self.skill_id_ is not None:
      oprot.writeFieldBegin('skill_id_', TType.I32, 3)
      oprot.writeI32(self.skill_id_)
      oprot.writeFieldEnd()
    if self.result_ is not None:
      oprot.writeFieldBegin('result_', TType.I32, 4)
      oprot.writeI32(self.result_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type_ is None:
      raise TProtocol.TProtocolException(message='Required field type_ is unset!')
    if self.id_ is None:
      raise TProtocol.TProtocolException(message='Required field id_ is unset!')
    if self.skill_id_ is None:
      raise TProtocol.TProtocolException(message='Required field skill_id_ is unset!')
    if self.result_ is None:
      raise TProtocol.TProtocolException(message='Required field result_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestUpgradeSkill:
  """
  Attributes:
   - type_
   - id_
   - skill_id_
   - upgrade_
   - result_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type_', None, None, ), # 1
    (2, TType.I64, 'id_', None, None, ), # 2
    (3, TType.I32, 'skill_id_', None, None, ), # 3
    (4, TType.I32, 'upgrade_', None, None, ), # 4
    (5, TType.I32, 'result_', None, None, ), # 5
  )

  def __init__(self, type_=None, id_=None, skill_id_=None, upgrade_=None, result_=None,):
    self.type_ = type_
    self.id_ = id_
    self.skill_id_ = skill_id_
    self.upgrade_ = upgrade_
    self.result_ = result_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.skill_id_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.upgrade_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.result_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestUpgradeSkill')
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 1)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    if self.id_ is not None:
      oprot.writeFieldBegin('id_', TType.I64, 2)
      oprot.writeI64(self.id_)
      oprot.writeFieldEnd()
    if self.skill_id_ is not None:
      oprot.writeFieldBegin('skill_id_', TType.I32, 3)
      oprot.writeI32(self.skill_id_)
      oprot.writeFieldEnd()
    if self.upgrade_ is not None:
      oprot.writeFieldBegin('upgrade_', TType.I32, 4)
      oprot.writeI32(self.upgrade_)
      oprot.writeFieldEnd()
    if self.result_ is not None:
      oprot.writeFieldBegin('result_', TType.I32, 5)
      oprot.writeI32(self.result_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type_ is None:
      raise TProtocol.TProtocolException(message='Required field type_ is unset!')
    if self.id_ is None:
      raise TProtocol.TProtocolException(message='Required field id_ is unset!')
    if self.skill_id_ is None:
      raise TProtocol.TProtocolException(message='Required field skill_id_ is unset!')
    if self.upgrade_ is None:
      raise TProtocol.TProtocolException(message='Required field upgrade_ is unset!')
    if self.result_ is None:
      raise TProtocol.TProtocolException(message='Required field result_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestSkillStand:
  """
  Attributes:
   - type_
   - id_
   - skill_id_
   - result_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type_', None, None, ), # 1
    (2, TType.I64, 'id_', None, None, ), # 2
    (3, TType.I32, 'skill_id_', None, None, ), # 3
    (4, TType.I32, 'result_', None, None, ), # 4
  )

  def __init__(self, type_=None, id_=None, skill_id_=None, result_=None,):
    self.type_ = type_
    self.id_ = id_
    self.skill_id_ = skill_id_
    self.result_ = result_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.skill_id_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.result_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestSkillStand')
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 1)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    if self.id_ is not None:
      oprot.writeFieldBegin('id_', TType.I64, 2)
      oprot.writeI64(self.id_)
      oprot.writeFieldEnd()
    if self.skill_id_ is not None:
      oprot.writeFieldBegin('skill_id_', TType.I32, 3)
      oprot.writeI32(self.skill_id_)
      oprot.writeFieldEnd()
    if self.result_ is not None:
      oprot.writeFieldBegin('result_', TType.I32, 4)
      oprot.writeI32(self.result_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type_ is None:
      raise TProtocol.TProtocolException(message='Required field type_ is unset!')
    if self.id_ is None:
      raise TProtocol.TProtocolException(message='Required field id_ is unset!')
    if self.skill_id_ is None:
      raise TProtocol.TProtocolException(message='Required field skill_id_ is unset!')
    if self.result_ is None:
      raise TProtocol.TProtocolException(message='Required field result_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestSkillSit:
  """
  Attributes:
   - type_
   - id_
   - skill_id_
   - result_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type_', None, None, ), # 1
    (2, TType.I64, 'id_', None, None, ), # 2
    (3, TType.I32, 'skill_id_', None, None, ), # 3
    (4, TType.I32, 'result_', None, None, ), # 4
  )

  def __init__(self, type_=None, id_=None, skill_id_=None, result_=None,):
    self.type_ = type_
    self.id_ = id_
    self.skill_id_ = skill_id_
    self.result_ = result_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.skill_id_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.result_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestSkillSit')
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 1)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    if self.id_ is not None:
      oprot.writeFieldBegin('id_', TType.I64, 2)
      oprot.writeI64(self.id_)
      oprot.writeFieldEnd()
    if self.skill_id_ is not None:
      oprot.writeFieldBegin('skill_id_', TType.I32, 3)
      oprot.writeI32(self.skill_id_)
      oprot.writeFieldEnd()
    if self.result_ is not None:
      oprot.writeFieldBegin('result_', TType.I32, 4)
      oprot.writeI32(self.result_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type_ is None:
      raise TProtocol.TProtocolException(message='Required field type_ is unset!')
    if self.id_ is None:
      raise TProtocol.TProtocolException(message='Required field id_ is unset!')
    if self.skill_id_ is None:
      raise TProtocol.TProtocolException(message='Required field skill_id_ is unset!')
    if self.result_ is None:
      raise TProtocol.TProtocolException(message='Required field result_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SkillBuff:
  """
  Attributes:
   - buff_
   - odds_
   - cooling_
   - target_type_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'buff_', None, None, ), # 1
    (2, TType.I32, 'odds_', None, None, ), # 2
    (3, TType.I32, 'cooling_', None, None, ), # 3
    (4, TType.I32, 'target_type_', None, None, ), # 4
  )

  def __init__(self, buff_=None, odds_=None, cooling_=None, target_type_=None,):
    self.buff_ = buff_
    self.odds_ = odds_
    self.cooling_ = cooling_
    self.target_type_ = target_type_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.buff_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.odds_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.cooling_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.target_type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SkillBuff')
    if self.buff_ is not None:
      oprot.writeFieldBegin('buff_', TType.I32, 1)
      oprot.writeI32(self.buff_)
      oprot.writeFieldEnd()
    if self.odds_ is not None:
      oprot.writeFieldBegin('odds_', TType.I32, 2)
      oprot.writeI32(self.odds_)
      oprot.writeFieldEnd()
    if self.cooling_ is not None:
      oprot.writeFieldBegin('cooling_', TType.I32, 3)
      oprot.writeI32(self.cooling_)
      oprot.writeFieldEnd()
    if self.target_type_ is not None:
      oprot.writeFieldBegin('target_type_', TType.I32, 4)
      oprot.writeI32(self.target_type_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.buff_ is None:
      raise TProtocol.TProtocolException(message='Required field buff_ is unset!')
    if self.odds_ is None:
      raise TProtocol.TProtocolException(message='Required field odds_ is unset!')
    if self.cooling_ is None:
      raise TProtocol.TProtocolException(message='Required field cooling_ is unset!')
    if self.target_type_ is None:
      raise TProtocol.TProtocolException(message='Required field target_type_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestAddSkillGlobalBuff:
  """
  Attributes:
   - type_
   - id_
   - buffs_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type_', None, None, ), # 1
    (2, TType.I64, 'id_', None, None, ), # 2
    (3, TType.LIST, 'buffs_', (TType.STRUCT,(SkillBuff, SkillBuff.thrift_spec)), None, ), # 3
  )

  def __init__(self, type_=None, id_=None, buffs_=None,):
    self.type_ = type_
    self.id_ = id_
    self.buffs_ = buffs_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.buffs_ = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = SkillBuff()
            _elem5.read(iprot)
            self.buffs_.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestAddSkillGlobalBuff')
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 1)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    if self.id_ is not None:
      oprot.writeFieldBegin('id_', TType.I64, 2)
      oprot.writeI64(self.id_)
      oprot.writeFieldEnd()
    if self.buffs_ is not None:
      oprot.writeFieldBegin('buffs_', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.buffs_))
      for iter6 in self.buffs_:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type_ is None:
      raise TProtocol.TProtocolException(message='Required field type_ is unset!')
    if self.id_ is None:
      raise TProtocol.TProtocolException(message='Required field id_ is unset!')
    if self.buffs_ is None:
      raise TProtocol.TProtocolException(message='Required field buffs_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestRemoveSkillGlobalBuff:
  """
  Attributes:
   - type_
   - id_
   - buffs_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type_', None, None, ), # 1
    (2, TType.I64, 'id_', None, None, ), # 2
    (3, TType.LIST, 'buffs_', (TType.STRUCT,(SkillBuff, SkillBuff.thrift_spec)), None, ), # 3
  )

  def __init__(self, type_=None, id_=None, buffs_=None,):
    self.type_ = type_
    self.id_ = id_
    self.buffs_ = buffs_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.buffs_ = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = SkillBuff()
            _elem12.read(iprot)
            self.buffs_.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestRemoveSkillGlobalBuff')
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 1)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    if self.id_ is not None:
      oprot.writeFieldBegin('id_', TType.I64, 2)
      oprot.writeI64(self.id_)
      oprot.writeFieldEnd()
    if self.buffs_ is not None:
      oprot.writeFieldBegin('buffs_', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.buffs_))
      for iter13 in self.buffs_:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type_ is None:
      raise TProtocol.TProtocolException(message='Required field type_ is unset!')
    if self.id_ is None:
      raise TProtocol.TProtocolException(message='Required field id_ is unset!')
    if self.buffs_ is None:
      raise TProtocol.TProtocolException(message='Required field buffs_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestSkillHurt:
  """
  Attributes:
   - type_
   - id_
   - src_type_
   - src_id_
   - hurt_id_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type_', None, None, ), # 1
    (2, TType.I64, 'id_', None, None, ), # 2
    (3, TType.I32, 'src_type_', None, None, ), # 3
    (4, TType.I64, 'src_id_', None, None, ), # 4
    (5, TType.I32, 'hurt_id_', None, None, ), # 5
  )

  def __init__(self, type_=None, id_=None, src_type_=None, src_id_=None, hurt_id_=None,):
    self.type_ = type_
    self.id_ = id_
    self.src_type_ = src_type_
    self.src_id_ = src_id_
    self.hurt_id_ = hurt_id_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.src_type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.src_id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.hurt_id_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestSkillHurt')
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 1)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    if self.id_ is not None:
      oprot.writeFieldBegin('id_', TType.I64, 2)
      oprot.writeI64(self.id_)
      oprot.writeFieldEnd()
    if self.src_type_ is not None:
      oprot.writeFieldBegin('src_type_', TType.I32, 3)
      oprot.writeI32(self.src_type_)
      oprot.writeFieldEnd()
    if self.src_id_ is not None:
      oprot.writeFieldBegin('src_id_', TType.I64, 4)
      oprot.writeI64(self.src_id_)
      oprot.writeFieldEnd()
    if self.hurt_id_ is not None:
      oprot.writeFieldBegin('hurt_id_', TType.I32, 5)
      oprot.writeI32(self.hurt_id_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type_ is None:
      raise TProtocol.TProtocolException(message='Required field type_ is unset!')
    if self.id_ is None:
      raise TProtocol.TProtocolException(message='Required field id_ is unset!')
    if self.src_type_ is None:
      raise TProtocol.TProtocolException(message='Required field src_type_ is unset!')
    if self.src_id_ is None:
      raise TProtocol.TProtocolException(message='Required field src_id_ is unset!')
    if self.hurt_id_ is None:
      raise TProtocol.TProtocolException(message='Required field hurt_id_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestSkillAddTempSkill:
  """
  Attributes:
   - type_
   - id_
   - skill_id_
   - skill_level_
   - result_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type_', None, None, ), # 1
    (2, TType.I64, 'id_', None, None, ), # 2
    (3, TType.I32, 'skill_id_', None, None, ), # 3
    (4, TType.I32, 'skill_level_', None, None, ), # 4
    (5, TType.BOOL, 'result_', None, None, ), # 5
  )

  def __init__(self, type_=None, id_=None, skill_id_=None, skill_level_=None, result_=None,):
    self.type_ = type_
    self.id_ = id_
    self.skill_id_ = skill_id_
    self.skill_level_ = skill_level_
    self.result_ = result_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.skill_id_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.skill_level_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.result_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestSkillAddTempSkill')
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 1)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    if self.id_ is not None:
      oprot.writeFieldBegin('id_', TType.I64, 2)
      oprot.writeI64(self.id_)
      oprot.writeFieldEnd()
    if self.skill_id_ is not None:
      oprot.writeFieldBegin('skill_id_', TType.I32, 3)
      oprot.writeI32(self.skill_id_)
      oprot.writeFieldEnd()
    if self.skill_level_ is not None:
      oprot.writeFieldBegin('skill_level_', TType.I32, 4)
      oprot.writeI32(self.skill_level_)
      oprot.writeFieldEnd()
    if self.result_ is not None:
      oprot.writeFieldBegin('result_', TType.BOOL, 5)
      oprot.writeBool(self.result_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type_ is None:
      raise TProtocol.TProtocolException(message='Required field type_ is unset!')
    if self.id_ is None:
      raise TProtocol.TProtocolException(message='Required field id_ is unset!')
    if self.skill_id_ is None:
      raise TProtocol.TProtocolException(message='Required field skill_id_ is unset!')
    if self.skill_level_ is None:
      raise TProtocol.TProtocolException(message='Required field skill_level_ is unset!')
    if self.result_ is None:
      raise TProtocol.TProtocolException(message='Required field result_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestSkillRemoveTempSkill:
  """
  Attributes:
   - type_
   - id_
   - skill_id_
   - result_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type_', None, None, ), # 1
    (2, TType.I64, 'id_', None, None, ), # 2
    (3, TType.I32, 'skill_id_', None, None, ), # 3
    (4, TType.BOOL, 'result_', None, None, ), # 4
  )

  def __init__(self, type_=None, id_=None, skill_id_=None, result_=None,):
    self.type_ = type_
    self.id_ = id_
    self.skill_id_ = skill_id_
    self.result_ = result_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.skill_id_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.result_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestSkillRemoveTempSkill')
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 1)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    if self.id_ is not None:
      oprot.writeFieldBegin('id_', TType.I64, 2)
      oprot.writeI64(self.id_)
      oprot.writeFieldEnd()
    if self.skill_id_ is not None:
      oprot.writeFieldBegin('skill_id_', TType.I32, 3)
      oprot.writeI32(self.skill_id_)
      oprot.writeFieldEnd()
    if self.result_ is not None:
      oprot.writeFieldBegin('result_', TType.BOOL, 4)
      oprot.writeBool(self.result_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type_ is None:
      raise TProtocol.TProtocolException(message='Required field type_ is unset!')
    if self.id_ is None:
      raise TProtocol.TProtocolException(message='Required field id_ is unset!')
    if self.skill_id_ is None:
      raise TProtocol.TProtocolException(message='Required field skill_id_ is unset!')
    if self.result_ is None:
      raise TProtocol.TProtocolException(message='Required field result_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestSkillChangeSkillForm:
  """
  Attributes:
   - type_
   - id_
   - form_
   - result_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type_', None, None, ), # 1
    (2, TType.I64, 'id_', None, None, ), # 2
    (3, TType.I32, 'form_', None, None, ), # 3
    (4, TType.BOOL, 'result_', None, None, ), # 4
  )

  def __init__(self, type_=None, id_=None, form_=None, result_=None,):
    self.type_ = type_
    self.id_ = id_
    self.form_ = form_
    self.result_ = result_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.form_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.result_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestSkillChangeSkillForm')
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 1)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    if self.id_ is not None:
      oprot.writeFieldBegin('id_', TType.I64, 2)
      oprot.writeI64(self.id_)
      oprot.writeFieldEnd()
    if self.form_ is not None:
      oprot.writeFieldBegin('form_', TType.I32, 3)
      oprot.writeI32(self.form_)
      oprot.writeFieldEnd()
    if self.result_ is not None:
      oprot.writeFieldBegin('result_', TType.BOOL, 4)
      oprot.writeBool(self.result_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type_ is None:
      raise TProtocol.TProtocolException(message='Required field type_ is unset!')
    if self.id_ is None:
      raise TProtocol.TProtocolException(message='Required field id_ is unset!')
    if self.form_ is None:
      raise TProtocol.TProtocolException(message='Required field form_ is unset!')
    if self.result_ is None:
      raise TProtocol.TProtocolException(message='Required field result_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestSkillIncreaseAttribute:
  """
  Attributes:
   - type_
   - id_
   - skill_id_
   - attribute_
   - increment_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type_', None, None, ), # 1
    (2, TType.I64, 'id_', None, None, ), # 2
    (3, TType.I32, 'skill_id_', None, None, ), # 3
    (4, TType.I32, 'attribute_', None, None, ), # 4
    (5, TType.I32, 'increment_', None, None, ), # 5
  )

  def __init__(self, type_=None, id_=None, skill_id_=None, attribute_=None, increment_=None,):
    self.type_ = type_
    self.id_ = id_
    self.skill_id_ = skill_id_
    self.attribute_ = attribute_
    self.increment_ = increment_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.skill_id_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.attribute_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.increment_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestSkillIncreaseAttribute')
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 1)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    if self.id_ is not None:
      oprot.writeFieldBegin('id_', TType.I64, 2)
      oprot.writeI64(self.id_)
      oprot.writeFieldEnd()
    if self.skill_id_ is not None:
      oprot.writeFieldBegin('skill_id_', TType.I32, 3)
      oprot.writeI32(self.skill_id_)
      oprot.writeFieldEnd()
    if self.attribute_ is not None:
      oprot.writeFieldBegin('attribute_', TType.I32, 4)
      oprot.writeI32(self.attribute_)
      oprot.writeFieldEnd()
    if self.increment_ is not None:
      oprot.writeFieldBegin('increment_', TType.I32, 5)
      oprot.writeI32(self.increment_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type_ is None:
      raise TProtocol.TProtocolException(message='Required field type_ is unset!')
    if self.id_ is None:
      raise TProtocol.TProtocolException(message='Required field id_ is unset!')
    if self.skill_id_ is None:
      raise TProtocol.TProtocolException(message='Required field skill_id_ is unset!')
    if self.attribute_ is None:
      raise TProtocol.TProtocolException(message='Required field attribute_ is unset!')
    if self.increment_ is None:
      raise TProtocol.TProtocolException(message='Required field increment_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestSkillSetFightingStatus:
  """
  Attributes:
   - type_
   - id_
   - status_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type_', None, None, ), # 1
    (2, TType.I64, 'id_', None, None, ), # 2
    (3, TType.BOOL, 'status_', None, None, ), # 3
  )

  def __init__(self, type_=None, id_=None, status_=None,):
    self.type_ = type_
    self.id_ = id_
    self.status_ = status_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.id_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.status_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestSkillSetFightingStatus')
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 1)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    if self.id_ is not None:
      oprot.writeFieldBegin('id_', TType.I64, 2)
      oprot.writeI64(self.id_)
      oprot.writeFieldEnd()
    if self.status_ is not None:
      oprot.writeFieldBegin('status_', TType.BOOL, 3)
      oprot.writeBool(self.status_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type_ is None:
      raise TProtocol.TProtocolException(message='Required field type_ is unset!')
    if self.id_ is None:
      raise TProtocol.TProtocolException(message='Required field id_ is unset!')
    if self.status_ is None:
      raise TProtocol.TProtocolException(message='Required field status_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
